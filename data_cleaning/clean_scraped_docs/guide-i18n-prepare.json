{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backInternationalization\n  - [Overview](https://angular.dev/guide/i18n)\n  - [Add the localize package](https://angular.dev/guide/i18n/add-package)\n  - [Refer to locales by ID](https://angular.dev/guide/i18n/locale-id)\n  - [Format data based on locale](https://angular.dev/guide/i18n/format-data-locale)\n  - [Prepare component for translation](https://angular.dev/guide/i18n/prepare)\n  - [Work with translation files](https://angular.dev/guide/i18n/translation-files)\n  - [Merge translations into the app](https://angular.dev/guide/i18n/merge)\n  - [Deploy multiple locales](https://angular.dev/guide/i18n/deploy)\n  - [Import global variants of the locale data](https://angular.dev/guide/i18n/import-global-variants)\n  - [Manage marked text with custom IDs](https://angular.dev/guide/i18n/manage-marked-text)\n  - [Example Angular application](https://angular.dev/guide/i18n/example)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nTo prepare your project for translation, complete the following actions.\n\n- Use the `i18n` attribute to mark text in component templates\n- Use the `i18n-` attribute to mark attribute text strings in component templates\n- Use the `$localize` tagged message string to mark text strings in component code\n\n## [Mark text in component template](https://angular.dev/guide/i18n/prepare\\#mark-text-in-component-template)\n\nIn a component template, the i18n metadata is the value of the `i18n` attribute.\n\n```\n      <element i18n=\"{i18n_metadata}\">{string_to_translate}</element>\n\n```\n\ncheck\n\nUse the `i18n` attribute to mark a static text message in your component templates for translation.\nPlace it on every element tag that contains fixed text you want to translate.\n\n**HELPFUL:** The `i18n` attribute is a custom attribute that the Angular tools and compilers recognize.\n\n### [`i18n` example](https://angular.dev/guide/i18n/prepare\\#i18n-example)\n\nThe following `<h1>` tag displays a simple English language greeting, \"Hello i18n!\".\n\ncheck\n\n```\n      <h1>Hello i18n!</h1><h1 i18n>Hello i18n!</h1><h1 i18n=\"An introduction header for this sample\">Hello i18n!</h1><h1 i18n=\"site header|An introduction header for this sample\">Hello i18n!</h1><h1 i18n=\"An introduction header for this sample@@introductionHeader\">Hello i18n!</h1><h1 i18n=\"site header|An introduction header for this sample@@introductionHeader\">Hello i18n!</h1><h1 i18n=\"@@introductionHeader\">Hello i18n!</h1><img [src]=\"logo\" title=\"Angular logo\" alt=\"Angular logo\"><h3 i18n=\"@@myId\">Hello</h3><!-- ... --><p i18n=\"@@myId\">Good bye</p>\n\n```\n\nTo mark the greeting for translation, add the `i18n` attribute to the `<h1>` tag.\n\ncheck\n\n```\n      <h1>Hello i18n!</h1><h1 i18n>Hello i18n!</h1><h1 i18n=\"An introduction header for this sample\">Hello i18n!</h1><h1 i18n=\"site header|An introduction header for this sample\">Hello i18n!</h1><h1 i18n=\"An introduction header for this sample@@introductionHeader\">Hello i18n!</h1><h1 i18n=\"site header|An introduction header for this sample@@introductionHeader\">Hello i18n!</h1><h1 i18n=\"@@introductionHeader\">Hello i18n!</h1><img [src]=\"logo\" title=\"Angular logo\" alt=\"Angular logo\"><h3 i18n=\"@@myId\">Hello</h3><!-- ... --><p i18n=\"@@myId\">Good bye</p>\n\n```\n\n### [using conditional statement with `i18n`](https://angular.dev/guide/i18n/prepare\\#using-conditional-statement-with-i18n)\n\nThe following `<div>` tag will display translated text as part of `div` and `aria-label` based on toggle status\n\ncheck\n\n### src/app/app.component.html\n\n```\n      <h1 i18n=\"User welcome|An introduction header for this sample@@introductionHeader\">  Hello i18n!</h1><ng-container i18n>I don't output any element</ng-container><br /><img [src]=\"logo\" i18n-title title=\"Angular logo\" alt=\"Angular logo\"/><br><button type=\"button\" (click)=\"inc(1)\">+</button> <button type=\"button\" (click)=\"inc(-1)\">-</button><span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{ minutes }} minutes ago}}</span>({{ minutes }})<br><br><button type=\"button\" (click)=\"male()\">\u2642</button><button type=\"button\" (click)=\"female()\">\u2640</button><button type=\"button\" (click)=\"other()\">\u26a7</button><span i18n>The author is {gender, select, male {male} female {female} other {other}}</span><br><br><span i18n>Updated: {minutes, plural,  =0 {just now}  =1 {one minute ago}  other {{{ minutes }} minutes ago by {gender, select, male {male} female {female} other {other}}}}</span><br><br><button type=\"button\" (click)=\"toggleDisplay()\">Toggle</button><div i18n [attr.aria-label]=\"toggleAriaLabel()\">{{toggle()}}</div>\n\n```\n\n### [Translate inline text without HTML element](https://angular.dev/guide/i18n/prepare\\#translate-inline-text-without-html-element)\n\nUse the `<ng-container>` element to associate a translation behavior for specific text without changing the way text is displayed.\n\n**HELPFUL:** Each HTML element creates a new DOM element.\nTo avoid creating a new DOM element, wrap the text in an `<ng-container>` element.\nThe following example shows the `<ng-container>` element transformed into a non-displayed HTML comment.\n\ncheck\n\n```\n      <h1 i18n=\"User welcome|An introduction header for this sample@@introductionHeader\">  Hello i18n!</h1><ng-container i18n>I don't output any element</ng-container><br /><img [src]=\"logo\" i18n-title title=\"Angular logo\" alt=\"Angular logo\"/><br><button type=\"button\" (click)=\"inc(1)\">+</button> <button type=\"button\" (click)=\"inc(-1)\">-</button><span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{ minutes }} minutes ago}}</span>({{ minutes }})<br><br><button type=\"button\" (click)=\"male()\">\u2642</button><button type=\"button\" (click)=\"female()\">\u2640</button><button type=\"button\" (click)=\"other()\">\u26a7</button><span i18n>The author is {gender, select, male {male} female {female} other {other}}</span><br><br><span i18n>Updated: {minutes, plural,  =0 {just now}  =1 {one minute ago}  other {{{ minutes }} minutes ago by {gender, select, male {male} female {female} other {other}}}}</span><br><br><button type=\"button\" (click)=\"toggleDisplay()\">Toggle</button><div i18n [attr.aria-label]=\"toggleAriaLabel()\">{{toggle()}}</div>\n\n```\n\n## [Mark element attributes for translations](https://angular.dev/guide/i18n/prepare\\#mark-element-attributes-for-translations)\n\nIn a component template, the i18n metadata is the value of the `i18n-{attribute_name}` attribute.\n\n```\n      <element i18n-{attribute_name}=\"{i18n_metadata}\" {attribute_name}=\"{attribute_value}\" />\n\n```\n\ncheck\n\nThe attributes of HTML elements include text that should be translated along with the rest of the displayed text in the component template.\n\nUse `i18n-{attribute_name}` with any attribute of any element and replace `{attribute_name}` with the name of the attribute.\nUse the following syntax to assign a meaning, description, and custom ID.\n\n```\n      i18n-{attribute_name}=\"{meaning}|{description}@@{id}\"\n\n```\n\ncheck\n\n### [`i18n-title` example](https://angular.dev/guide/i18n/prepare\\#i18n-title-example)\n\nTo translate the title of an image, review this example.\nThe following example displays an image with a `title` attribute.\n\ncheck\n\n```\n      <h1>Hello i18n!</h1><h1 i18n>Hello i18n!</h1><h1 i18n=\"An introduction header for this sample\">Hello i18n!</h1><h1 i18n=\"site header|An introduction header for this sample\">Hello i18n!</h1><h1 i18n=\"An introduction header for this sample@@introductionHeader\">Hello i18n!</h1><h1 i18n=\"site header|An introduction header for this sample@@introductionHeader\">Hello i18n!</h1><h1 i18n=\"@@introductionHeader\">Hello i18n!</h1><img [src]=\"logo\" title=\"Angular logo\" alt=\"Angular logo\"><h3 i18n=\"@@myId\">Hello</h3><!-- ... --><p i18n=\"@@myId\">Good bye</p>\n\n```\n\nTo mark the title attribute for translation, complete the following action.\n\n1. Add the `i18n-title` attribute\n\nThe following example displays how to mark the `title` attribute on the `img` tag by adding `i18n-title`.\n\n\n\n\ncheck\n\n```\n         <h1 i18n=\"User welcome|An introduction header for this sample@@introductionHeader\">  Hello i18n!</h1><ng-container i18n>I don't output any element</ng-container><br /><img [src]=\"logo\" i18n-title title=\"Angular logo\" alt=\"Angular logo\"/><br><button type=\"button\" (click)=\"inc(1)\">+</button> <button type=\"button\" (click)=\"inc(-1)\">-</button><span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{ minutes }} minutes ago}}</span>({{ minutes }})<br><br><button type=\"button\" (click)=\"male()\">\u2642</button><button type=\"button\" (click)=\"female()\">\u2640</button><button type=\"button\" (click)=\"other()\">\u26a7</button><span i18n>The author is {gender, select, male {male} female {female} other {other}}</span><br><br><span i18n>Updated: {minutes, plural,  =0 {just now}  =1 {one minute ago}  other {{{ minutes }} minutes ago by {gender, select, male {male} female {female} other {other}}}}</span><br><br><button type=\"button\" (click)=\"toggleDisplay()\">Toggle</button><div i18n [attr.aria-label]=\"toggleAriaLabel()\">{{toggle()}}</div>\n\n```\n\n\n## [Mark text in component code](https://angular.dev/guide/i18n/prepare\\#mark-text-in-component-code)\n\nIn component code, the translation source text and the metadata are surrounded by backtick ( `` ` ``) characters.\n\nUse the [`$localize`](https://angular.dev/guide/i18n/api/localize/init/$localize \"$localize\") tagged message string to mark a string in your code for translation.\n\n```\n      $localize`string_to_translate`;\n\n```\n\ncheck\n\nThe i18n metadata is surrounded by colon ( `:`) characters and prepends the translation source text.\n\n```\n      $localize`:{i18n_metadata}:string_to_translate`\n\n```\n\ncheck\n\n### [Include interpolated text](https://angular.dev/guide/i18n/prepare\\#include-interpolated-text)\n\nInclude [interpolations](https://angular.dev/guide/i18n/guide/templates/binding#render-dynamic-text-with-text-interpolation) in a [`$localize`](https://angular.dev/guide/i18n/api/localize/init/$localize \"$localize\") tagged message string.\n\n```\n      $localize`string_to_translate ${variable_name}`;\n\n```\n\ncheck\n\n### [Name the interpolation placeholder](https://angular.dev/guide/i18n/prepare\\#name-the-interpolation-placeholder)\n\n```\n      $localize`string_to_translate ${variable_name}:placeholder_name:`;\n\n```\n\ncheck\n\n### [Conditional syntax for translations](https://angular.dev/guide/i18n/prepare\\#conditional-syntax-for-translations)\n\n```\n      return this.show ? $localize`Show Tabs` : $localize`Hide tabs`;\n\n```\n\ncheck\n\n## [i18n metadata for translation](https://angular.dev/guide/i18n/prepare\\#i18n-metadata-for-translation)\n\n```\n      {meaning}|{description}@@{custom_id}\n\n```\n\ncheck\n\nThe following parameters provide context and additional information to reduce confusion for your translator.\n\n| Metadata parameter | Details |\n| :-- | :-- |\n| Custom ID | Provide a custom identifier |\n| Description | Provide additional information or context |\n| Meaning | Provide the meaning or intent of the text within the specific context |\n\nFor additional information about custom IDs, see [Manage marked text with custom IDs](https://angular.dev/guide/i18n/guide/i18n/manage-marked-text \"Manage\").\n\n### [Add helpful descriptions and meanings](https://angular.dev/guide/i18n/prepare\\#add-helpful-descriptions-and-meanings)\n\nTo translate a text message accurately, provide additional information or context for the translator.\n\nAdd a _description_ of the text message as the value of the `i18n` attribute or [`$localize`](https://angular.dev/guide/i18n/api/localize/init/$localize \"$localize\") tagged message string.\n\nThe following example shows the value of the `i18n` attribute.\n\ncheck\n\n```\n      <h1>Hello i18n!</h1><h1 i18n>Hello i18n!</h1><h1 i18n=\"An introduction header for this sample\">Hello i18n!</h1><h1 i18n=\"site header|An introduction header for this sample\">Hello i18n!</h1><h1 i18n=\"An introduction header for this sample@@introductionHeader\">Hello i18n!</h1><h1 i18n=\"site header|An introduction header for this sample@@introductionHeader\">Hello i18n!</h1><h1 i18n=\"@@introductionHeader\">Hello i18n!</h1><img [src]=\"logo\" title=\"Angular logo\" alt=\"Angular logo\"><h3 i18n=\"@@myId\">Hello</h3><!-- ... --><p i18n=\"@@myId\">Good bye</p>\n\n```\n\nThe following example shows the value of the [`$localize`](https://angular.dev/guide/i18n/api/localize/init/$localize \"$localize\") tagged message string with a description.\n\n```\n      $localize`:An introduction header for this sample:Hello i18n!`;\n\n```\n\ncheck\n\nThe translator may also need to know the meaning or intent of the text message within this particular application context, in order to translate it the same way as other text with the same meaning.\nStart the `i18n` attribute value with the _meaning_ and separate it from the _description_ with the `|` character: `{meaning}|{description}`.\n\n#### [`h1` example](https://angular.dev/guide/i18n/prepare\\#h1-example)\n\nFor example, you may want to specify that the `<h1>` tag is a site header that you need translated the same way, whether it is used as a header or referenced in another section of text.\n\nThe following example shows how to specify that the `<h1>` tag must be translated as a header or referenced elsewhere.\n\ncheck\n\n```\n      <h1>Hello i18n!</h1><h1 i18n>Hello i18n!</h1><h1 i18n=\"An introduction header for this sample\">Hello i18n!</h1><h1 i18n=\"site header|An introduction header for this sample\">Hello i18n!</h1><h1 i18n=\"An introduction header for this sample@@introductionHeader\">Hello i18n!</h1><h1 i18n=\"site header|An introduction header for this sample@@introductionHeader\">Hello i18n!</h1><h1 i18n=\"@@introductionHeader\">Hello i18n!</h1><img [src]=\"logo\" title=\"Angular logo\" alt=\"Angular logo\"><h3 i18n=\"@@myId\">Hello</h3><!-- ... --><p i18n=\"@@myId\">Good bye</p>\n\n```\n\nThe result is any text marked with `site header`, as the _meaning_ is translated exactly the same way.\n\nThe following code example shows the value of the [`$localize`](https://angular.dev/guide/i18n/api/localize/init/$localize \"$localize\") tagged message string with a meaning and a description.\n\n```\n      $localize`:site header|An introduction header for this sample:Hello i18n!`;\n\n```\n\ncheck\n\n### How meanings control text extraction and merges\n\nThe Angular extraction tool generates a translation unit entry for each `i18n` attribute in a template.\nThe Angular extraction tool assigns each translation unit a unique ID based on the _meaning_ and _description_.\n\n**HELPFUL:** For more information about the Angular extraction tool, see [Work with translation files](https://angular.dev/guide/i18n/guide/i18n/translation-files).\n\nThe same text elements with different _meanings_ are extracted with different IDs.\nFor example, if the word \"right\" uses the following two definitions in two different locations, the word is translated differently and merged back into the application as different translation entries.\n\n- `correct` as in \"you are right\"\n- `direction` as in \"turn right\"\n\nIf the same text elements meet the following conditions, the text elements are extracted only once and use the same ID.\n\n- Same meaning or definition\n- Different descriptions\n\nThat one translation entry is merged back into the application wherever the same text elements appear.\n\n## [ICU expressions](https://angular.dev/guide/i18n/prepare\\#icu-expressions)\n\nICU expressions help you mark alternate text in component templates to meet conditions.\nAn ICU expression includes a component property, an ICU clause, and the case statements surrounded by open curly brace ( `{`) and close curly brace ( `}`) characters.\n\n```\n      { component_property, icu_clause, case_statements }\n\n```\n\ncheck\n\nThe component property defines the variable\nAn ICU clause defines the type of conditional text.\n\n| ICU clause | Details |\n| :-- | :-- |\n| [`plural`](https://angular.dev/guide/i18n/guide/i18n/prepare#mark-plurals \"Mark\") | Mark the use of plural numbers |\n| [`select`](https://angular.dev/guide/i18n/guide/i18n/prepare#mark-alternates-and-nested-expressions \"Mark\") | Mark choices for alternate text based on your defined string values |\n\nTo simplify translation, use International Components for Unicode clauses (ICU clauses) with regular expressions.\n\n**HELPFUL:** The ICU clauses adhere to the [ICU Message Format](https://unicode-org.github.io/icu/userguide/format_parse/messages \"ICU\") specified in the [CLDR pluralization rules](http://cldr.unicode.org/index/cldr-spec/plural-rules \"Plural\").\n\n### [Mark plurals](https://angular.dev/guide/i18n/prepare\\#mark-plurals)\n\nDifferent languages have different pluralization rules that increase the difficulty of translation.\nBecause other locales express cardinality differently, you may need to set pluralization categories that do not align with English.\nUse the `plural` clause to mark expressions that may not be meaningful if translated word-for-word.\n\n```\n      { component_property, plural, pluralization_categories }\n\n```\n\ncheck\n\nAfter the pluralization category, enter the default text (English) surrounded by open curly brace ( `{`) and close curly brace ( `}`) characters.\n\n```\n      pluralization_category { }\n\n```\n\ncheck\n\nThe following pluralization categories are available for English and may change based on the locale.\n\n| Pluralization category | Details | Example |\n| :-- | :-- | :-- |\n| `zero` | Quantity is zero | `=0 { }`<br>`zero { }` |\n| `one` | Quantity is 1 | `=1 { }`<br>`one { }` |\n| `two` | Quantity is 2 | `=2 { }`<br>`two { }` |\n| `few` | Quantity is 2 or more | `few { }` |\n| `many` | Quantity is a large number | `many { }` |\n| `other` | The default quantity | `other { }` |\n\nIf none of the pluralization categories match, Angular uses `other` to match the standard fallback for a missing category.\n\n```\n      other { default_quantity }\n\n```\n\ncheck\n\n**HELPFUL:** For more information about pluralization categories, see [Choosing plural category names](http://cldr.unicode.org/index/cldr-spec/plural-rules#TOC-Choosing-Plural-Category-Names \"Choosing\") in the [CLDR - Unicode Common Locale Data Repository](https://cldr.unicode.org/ \"Unicode\").\n\nMany locales don't support some of the pluralization categories.\nThe default locale ( `en-US`) uses a very simple `plural()` function that doesn't support the `few` pluralization category.\nAnother locale with a simple `plural()` function is `es`.\nThe following code example shows the [en-US `plural()`](https://github.com/angular/angular/blob/ecffc3557fe1bff9718c01277498e877ca44588d/packages/core/src/i18n/locale_en.ts#L14-L18 \"Line\") function.\n\n```\n      function plural(n: number): number {  let i = Math.floor(Math.abs(n)),    v = n.toString().replace(/^[^.]*\\.?/, '').length;  if (i === 1 && v === 0) return 1;  return 5;}\n\n```\n\ncheck\n\nThe `plural()` function only returns 1 ( `one`) or 5 ( `other`).\nThe `few` category never matches.\n\n#### [`minutes` example](https://angular.dev/guide/i18n/prepare\\#minutes-example)\n\nIf you want to display the following phrase in English, where `x` is a number.\n\n```\n      updated x minutes ago\n\n```\n\ncheck\n\nAnd you also want to display the following phrases based on the cardinality of `x`.\n\n```\n      updated just now\n\n```\n\ncheck\n\n```\n      updated one minute ago\n\n```\n\ncheck\n\nUse HTML markup and [interpolations](https://angular.dev/guide/i18n/guide/templates/binding#render-dynamic-text-with-text-interpolation).\nThe following code example shows how to use the `plural` clause to express the previous three situations in a `<span>` element.\n\ncheck\n\n```\n      <h1 i18n=\"User welcome|An introduction header for this sample@@introductionHeader\">  Hello i18n!</h1><ng-container i18n>I don't output any element</ng-container><br /><img [src]=\"logo\" i18n-title title=\"Angular logo\" alt=\"Angular logo\"/><br><button type=\"button\" (click)=\"inc(1)\">+</button> <button type=\"button\" (click)=\"inc(-1)\">-</button><span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{ minutes }} minutes ago}}</span>({{ minutes }})<br><br><button type=\"button\" (click)=\"male()\">\u2642</button><button type=\"button\" (click)=\"female()\">\u2640</button><button type=\"button\" (click)=\"other()\">\u26a7</button><span i18n>The author is {gender, select, male {male} female {female} other {other}}</span><br><br><span i18n>Updated: {minutes, plural,  =0 {just now}  =1 {one minute ago}  other {{{ minutes }} minutes ago by {gender, select, male {male} female {female} other {other}}}}</span><br><br><button type=\"button\" (click)=\"toggleDisplay()\">Toggle</button><div i18n [attr.aria-label]=\"toggleAriaLabel()\">{{toggle()}}</div>\n\n```\n\nReview the following details in the previous code example.\n\n| Parameters | Details |\n| :-- | :-- |\n| `minutes` | The first parameter specifies the component property is `minutes` and determines the number of minutes. |\n| `plural` | The second parameter specifies the ICU clause is `plural`. |\n| `=0 {just now}` | For zero minutes, the pluralization category is `=0`. The value is `just now`. |\n| `=1 {one minute}` | For one minute, the pluralization category is `=1`. The value is `one minute`. |\n| `other {{{minutes}} minutes ago}` | For any unmatched cardinality, the default pluralization category is `other`. The value is `{{minutes}} minutes ago`. |\n\n`{{minutes}}` is an [interpolation](https://angular.dev/guide/i18n/guide/templates/binding#render-dynamic-text-with-text-interpolation).\n\n### [Mark alternates and nested expressions](https://angular.dev/guide/i18n/prepare\\#mark-alternates-and-nested-expressions)\n\nThe `select` clause marks choices for alternate text based on your defined string values.\n\n```\n      { component_property, select, selection_categories }\n\n```\n\ncheck\n\nTranslate all of the alternates to display alternate text based on the value of a variable.\n\nAfter the selection category, enter the text (English) surrounded by open curly brace ( `{`) and close curly brace ( `}`) characters.\n\n```\n      selection_category { text }\n\n```\n\ncheck\n\nDifferent locales have different grammatical constructions that increase the difficulty of translation.\nUse HTML markup.\nIf none of the selection categories match, Angular uses `other` to match the standard fallback for a missing category.\n\n```\n      other { default_value }\n\n```\n\ncheck\n\n#### [`gender` example](https://angular.dev/guide/i18n/prepare\\#gender-example)\n\nIf you want to display the following phrase in English.\n\n```\n      The author is other\n\n```\n\ncheck\n\nAnd you also want to display the following phrases based on the `gender` property of the component.\n\n```\n      The author is female\n\n```\n\ncheck\n\n```\n      The author is male\n\n```\n\ncheck\n\nThe following code example shows how to bind the `gender` property of the component and use the `select` clause to express the previous three situations in a `<span>` element.\n\nThe `gender` property binds the outputs to each of following string values.\n\n| Value | English value |\n| :-- | :-- |\n| female | `female` |\n| male | `male` |\n| other | `other` |\n\nThe `select` clause maps the values to the appropriate translations.\nThe following code example shows `gender` property used with the select clause.\n\ncheck\n\n```\n      <h1 i18n=\"User welcome|An introduction header for this sample@@introductionHeader\">  Hello i18n!</h1><ng-container i18n>I don't output any element</ng-container><br /><img [src]=\"logo\" i18n-title title=\"Angular logo\" alt=\"Angular logo\"/><br><button type=\"button\" (click)=\"inc(1)\">+</button> <button type=\"button\" (click)=\"inc(-1)\">-</button><span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{ minutes }} minutes ago}}</span>({{ minutes }})<br><br><button type=\"button\" (click)=\"male()\">\u2642</button><button type=\"button\" (click)=\"female()\">\u2640</button><button type=\"button\" (click)=\"other()\">\u26a7</button><span i18n>The author is {gender, select, male {male} female {female} other {other}}</span><br><br><span i18n>Updated: {minutes, plural,  =0 {just now}  =1 {one minute ago}  other {{{ minutes }} minutes ago by {gender, select, male {male} female {female} other {other}}}}</span><br><br><button type=\"button\" (click)=\"toggleDisplay()\">Toggle</button><div i18n [attr.aria-label]=\"toggleAriaLabel()\">{{toggle()}}</div>\n\n```\n\n#### [`gender` and `minutes` example](https://angular.dev/guide/i18n/prepare\\#gender-and-minutes-example)\n\nCombine different clauses together, such as the `plural` and `select` clauses.\nThe following code example shows nested clauses based on the `gender` and `minutes` examples.\n\ncheck\n\n```\n      <h1 i18n=\"User welcome|An introduction header for this sample@@introductionHeader\">  Hello i18n!</h1><ng-container i18n>I don't output any element</ng-container><br /><img [src]=\"logo\" i18n-title title=\"Angular logo\" alt=\"Angular logo\"/><br><button type=\"button\" (click)=\"inc(1)\">+</button> <button type=\"button\" (click)=\"inc(-1)\">-</button><span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{ minutes }} minutes ago}}</span>({{ minutes }})<br><br><button type=\"button\" (click)=\"male()\">\u2642</button><button type=\"button\" (click)=\"female()\">\u2640</button><button type=\"button\" (click)=\"other()\">\u26a7</button><span i18n>The author is {gender, select, male {male} female {female} other {other}}</span><br><br><span i18n>Updated: {minutes, plural,  =0 {just now}  =1 {one minute ago}  other {{{ minutes }} minutes ago by {gender, select, male {male} female {female} other {other}}}}</span><br><br><button type=\"button\" (click)=\"toggleDisplay()\">Toggle</button><div i18n [attr.aria-label]=\"toggleAriaLabel()\">{{toggle()}}</div>\n\n```\n\n## [What's next](https://angular.dev/guide/i18n/prepare\\#whats-next)",
  "title": "Prepare component for translation \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "i18n",
    "button",
    "angular",
    "h1",
    "https",
    "minutes",
    "dev",
    "guide",
    "br",
    "text"
  ],
  "sourceURL": "https://angular.dev/guide/i18n/prepare"
}