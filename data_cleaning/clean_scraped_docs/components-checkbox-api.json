{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for checkbox\n\n## API reference for Angular Material checkbox\n\n`\n          import {MatCheckboxModule} from '@angular/material/checkbox';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/checkbox/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/checkbox/api\\#MatCheckbox) `MatCheckbox`\n\nSelector:mat-checkbox\n\nExported as:matCheckbox\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-controls')<br> <br>`ariaControls: string` | Users can specify the `aria-controls` attribute which will be forwarded to the input element |\n| @Input('aria-describedby')<br> <br>`ariaDescribedby: string` | The 'aria-describedby' attribute is read after the element's label and field type. |\n| @Input({ alias: 'aria-expanded', transform: booleanAttribute })<br> <br>`ariaExpanded: boolean` | Users can specify the `aria-expanded` attribute which will be forwarded to the input element |\n| @Input('aria-label')<br> <br>`ariaLabel: string` | Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will<br>take precedence so this may be omitted. |\n| @Input('aria-labelledby')<br> <br>`ariaLabelledby: string | null` | Users can specify the `aria-labelledby` attribute which will be forwarded to the input element |\n| @Input('aria-owns')<br> <br>`ariaOwns: string` | Users can specify the `aria-owns` attribute which will be forwarded to the input element |\n| @Input({ transform: booleanAttribute })<br> <br>`checked: boolean` | Whether the checkbox is checked. |\n| @Input()<br>`color: string | undefined` | Theme color of the checkbox. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/checkbox/styling](https://material.angular.io/components/checkbox/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the checkbox has a ripple. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the checkbox is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Whether the checkbox should remain interactive when it is disabled. |\n| @Input()<br>`id: string` | A unique id for the checkbox input. If none is supplied, it will be auto-generated. |\n| @Input({ transform: booleanAttribute })<br> <br>`indeterminate: boolean` | Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to<br>represent a checkbox with three states, e.g. a checkbox that represents a nested list of<br>checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately<br>set to false. |\n| @Input()<br>`labelPosition: 'before' | 'after'` | Whether the label should appear after or before the checkbox. Defaults to 'after' |\n| @Input()<br>`name: string | null` | Name value will be applied to the input element if present |\n| @Input({ transform: booleanAttribute })<br> <br>`required: boolean` | Whether the checkbox is required. |\n| @Input()<br>`value: string` | The value attribute of the native input element |\n| @Output()<br>`change: EventEmitter<MatCheckboxChange>` | Event emitted when the checkbox's `checked` value changes. |\n| @Output()<br>`indeterminateChange: EventEmitter<boolean>` | Event emitted when the checkbox's `indeterminate` value changes. |\n| `inputId: string` | Returns the unique id for the visual hidden input. |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the checkbox. |\n\n| registerOnValidatorChange |\n| --- |\n| Parameters |\n| --- |\n| fn<br> `() => void` |  |\n\n| toggle |\n| --- |\n| Toggles the `checked` state of the checkbox. |\n\n| validate |\n| --- |\n| Parameters |\n| --- |\n| control<br> `AbstractControl<boolean, boolean>` |  |\n| Returns |\n| --- |\n| `ValidationErrors | null` |  |\n\n#### [link](https://material.angular.io/components/checkbox/api\\#MatCheckboxRequiredValidator) `MatCheckboxRequiredValidator`\n\nValidator for Material checkbox's required attribute in template-driven checkbox.\nCurrent CheckboxRequiredValidator only work with `input type=checkbox` and does not\nwork with `mat-checkbox`.\n\nSelector:mat-checkbox\\[required\\]\\[formControlName\\]mat-checkbox\\[required\\]\\[formControl\\]mat-checkbox\\[required\\]\\[ngModel\\]\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `required: boolean | string` | Tracks changes to the required attribute bound to this directive. |\n\n##### Methods\n\n| enabled |\n| --- |\n| Parameters |\n| --- |\n| input<br> `boolean` |  |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| registerOnValidatorChange |\n| --- |\n| Parameters |\n| --- |\n| fn<br> `() => void` |  |\n\n| validate |\n| --- |\n| Parameters |\n| --- |\n| control<br> `AbstractControl<any, any>` |  |\n| Returns |\n| --- |\n| `ValidationErrors | null` |  |\n\n### [link](https://material.angular.io/components/checkbox/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/checkbox/api\\#MatCheckboxChange) `MatCheckboxChange`\n\nChange event object emitted by checkbox.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `checked: boolean` | The new `checked` value of the checkbox. |\n| `source: MatCheckbox` | The source checkbox of the event. |\n\n### [link](https://material.angular.io/components/checkbox/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/checkbox/api\\#MatCheckboxDefaultOptions) `MatCheckboxDefaultOptions`\n\nDefault `mat-checkbox` options that can be overridden.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `clickAction: MatCheckboxClickAction` | Default checkbox click action for checkboxes. |\n| `color: ThemePalette` | Default theme color of the checkbox. This API is supported in M2 themes<br>only, it has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/checkbox/styling](https://material.angular.io/components/checkbox/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| `disabledInteractive: boolean` | Whether disabled checkboxes should be interactive. |\n\n### [link](https://material.angular.io/components/checkbox/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/checkbox/api\\#MatCheckboxClickAction) `MatCheckboxClickAction`\n\nCheckbox click action when user click on input element.\nnoop: Do not toggle checked or indeterminate.\ncheck: Only toggle checked status, ignore indeterminate.\ncheck-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\nundefined: Same as `check-indeterminate`.\n\n```docs-markdown-code\ntype MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n```\n\n### [link](https://material.angular.io/components/checkbox/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/checkbox/api\\#MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR) `MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR`\n\nDeprecated\n\n```docs-markdown-code\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any;\n\n```\n\n#### [link](https://material.angular.io/components/checkbox/api\\#MAT_CHECKBOX_DEFAULT_OPTIONS) `MAT_CHECKBOX_DEFAULT_OPTIONS`\n\nInjection token to be used to override the default options for `mat-checkbox`.\n\n```docs-markdown-code\nconst MAT_CHECKBOX_DEFAULT_OPTIONS: InjectionToken<MatCheckboxDefaultOptions>;\n\n```\n\n#### [link](https://material.angular.io/components/checkbox/api\\#MAT_CHECKBOX_REQUIRED_VALIDATOR) `MAT_CHECKBOX_REQUIRED_VALIDATOR`\n\nDeprecated\n\n```docs-markdown-code\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider;\n\n```\n\n## API reference for Angular Material checkbox-testing\n\n`\n          import {MatCheckboxHarness} from '@angular/material/checkbox/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/checkbox/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/checkbox/api\\#MatCheckboxHarness) `MatCheckboxHarness`extends [ComponentHarness](https://material.angular.io/components/checkbox/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a mat-checkbox in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-checkbox'` |  |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the checkbox. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>check |\n| --- |\n| Puts the checkbox in a checked state by toggling it if it is currently unchecked, or doing<br>nothing if it is already checked.<br>Note: This attempts to check the checkbox as a user would, by clicking it. Therefore if you<br>are using `MAT_CHECKBOX_DEFAULT_OPTIONS` to change the behavior on click, calling this method<br>might not have the expected result. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the checkbox. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAriaLabel |\n| --- |\n| Gets the checkbox's aria-label. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getAriaLabelledby |\n| --- |\n| Gets the checkbox's aria-labelledby. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getLabelText |\n| --- |\n| Gets the checkbox's label text. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getName |\n| --- |\n| Gets the checkbox's name. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getValue |\n| --- |\n| Gets the checkbox's value. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isChecked |\n| --- |\n| Whether the checkbox is checked. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the checkbox is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the checkbox is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isIndeterminate |\n| --- |\n| Whether the checkbox is in an indeterminate state. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRequired |\n| --- |\n| Whether the checkbox is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isValid |\n| --- |\n| Whether the checkbox is valid. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>toggle |\n| --- |\n| Toggles the checked state of the checkbox.<br>Note: This attempts to toggle the checkbox as a user would, by clicking it. Therefore if you<br>are using `MAT_CHECKBOX_DEFAULT_OPTIONS` to change the behavior on click, calling this method<br>might not have the expected result. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>uncheck |\n| --- |\n| Puts the checkbox in an unchecked state by toggling it if it is currently checked, or doing<br>nothing if it is already unchecked.<br>Note: This attempts to uncheck the checkbox as a user would, by clicking it. Therefore if you<br>are using `MAT_CHECKBOX_DEFAULT_OPTIONS` to change the behavior on click, calling this method<br>might not have the expected result. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a checkbox with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `CheckboxHarnessFilters = {}` | Options for narrowing the search:<br>- `selector` finds a checkbox whose host element matches the given selector.<br>- `label` finds a checkbox with specific label text.<br>- `name` finds a checkbox with specific name. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/checkbox/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/checkbox/api\\#CheckboxHarnessFilters) `CheckboxHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatCheckboxHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `checked: boolean` | Only find instances with the given checked value. |\n| `disabled: boolean` | Only find instances which match the given disabled state. |\n| `label: string | RegExp` | Only find instances whose label matches the given value. |\n| `name: string` | Only find instances whose name attribute is the given value. |\n\nCheckbox\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nNo longer used, \\`MatCheckbox\\` implements required validation directly. Will be removed in v19.0.0 or later.\n\nWill stop being exported. Will be removed in v19.0.0 or later.\n\nCopy import to the clipboard",
  "title": "Checkbox | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/checkbox/api"
}