{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backUsing RxJS with Angular\n  - [Signals interop](https://angular.dev/ecosystem/rxjs-interop)\n  - [Component output interop](https://angular.dev/ecosystem/rxjs-interop/output-interop)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n**IMPORTANT:** The RxJS Interop package is available for [developer preview](https://angular.dev/ecosystem/reference/releases#developer-preview). It's ready for you to try, but it might change before it is stable.\n\nThe `@angular/rxjs-interop` package offers APIs that help you integrate RxJS and Angular signals.\n\n## [Create a signal from an RxJs Observable with `toSignal`](https://angular.dev/ecosystem/rxjs-interop\\#create-a-signal-from-an-rxjs-observable-with-tosignal)\n\nUse the `toSignal` function to create a signal which tracks the value of an Observable. It behaves similarly to the `async` pipe in templates, but is more flexible and can be used anywhere in an application.\n\n```\n      import { Component } from '@angular/core';import { AsyncPipe } from '@angular/common';import { interval } from 'rxjs';import { toSignal } from '@angular/core/rxjs-interop';@Component({  template: `{{ counter() }}`,})export class Ticker {  counterObservable = interval(1000);  // Get a `Signal` representing the `counterObservable`'s value.  counter = toSignal(this.counterObservable, {initialValue: 0});}\n\n```\n\ncheck\n\nLike the `async` pipe, `toSignal` subscribes to the Observable immediately, which may trigger side effects. The subscription created by `toSignal` automatically unsubscribes from the given Observable when the component or service which calls `toSignal` is destroyed.\n\n**IMPORTANT:** `toSignal` creates a subscription. You should avoid calling it repeatedly for the same Observable, and instead reuse the signal it returns.\n\n### [Injection context](https://angular.dev/ecosystem/rxjs-interop\\#injection-context)\n\n`toSignal` by default needs to run in an [injection context](https://angular.dev/ecosystem/guide/di/dependency-injection-context), such as during construction of a component or service. If an injection context is not available, you can manually specify the `Injector` to use instead.\n\n### [Initial values](https://angular.dev/ecosystem/rxjs-interop\\#initial-values)\n\nObservables may not produce a value synchronously on subscription, but signals always require a current value. There are several ways to deal with this \"initial\" value of `toSignal` signals.\n\n#### [The `initialValue` option](https://angular.dev/ecosystem/rxjs-interop\\#the-initialvalue-option)\n\nAs in the example above, you can specify an `initialValue` option with the value the signal should return before the Observable emits for the first time.\n\n#### [`undefined` initial values](https://angular.dev/ecosystem/rxjs-interop\\#undefined-initial-values)\n\nIf you don't provide an `initialValue`, the resulting signal will return `undefined` until the Observable emits. This is similar to the `async` pipe's behavior of returning `null`.\n\n#### [The `requireSync` option](https://angular.dev/ecosystem/rxjs-interop\\#the-requiresync-option)\n\nSome Observables are guaranteed to emit synchronously, such as `BehaviorSubject`. In those cases, you can specify the `requireSync: true` option.\n\nWhen `requiredSync` is `true`, `toSignal` enforces that the Observable emits synchronously on subscription. This guarantees that the signal always has a value, and no `undefined` type or initial value is required.\n\n### [`manualCleanup`](https://angular.dev/ecosystem/rxjs-interop\\#manualcleanup)\n\nBy default, `toSignal` automatically unsubscribes from the Observable when the component or service that creates it is destroyed.\n\nTo override this behavior, you can pass the `manualCleanup` option. You can use this setting for Observables that complete themselves naturally.\n\n### [Error and Completion](https://angular.dev/ecosystem/rxjs-interop\\#error-and-completion)\n\nIf an Observable used in `toSignal` produces an error, that error is thrown when the signal is read.\n\nIf an Observable used in `toSignal` completes, the signal continues to return the most recently emitted value before completion.\n\n## [Create an RxJS Observable from a signal with `toObservable`](https://angular.dev/ecosystem/rxjs-interop\\#create-an-rxjs-observable-from-a-signal-with-toobservable)\n\nUse the `toObservable` utility to create an `Observable` which tracks the value of a signal. The signal's value is monitored with an `effect` which emits the value to the Observable when it changes.\n\n```\n      import { Component, signal } from '@angular/core';import { toObservable } from '@angular/core/rxjs-interop';@Component(...)export class SearchResults {  query: Signal<string> = inject(QueryService).query;  query$ = toObservable(this.query);  results$ = this.query$.pipe(    switchMap(query => this.http.get('/search?q=' + query ))  );}\n\n```\n\ncheck\n\nAs the `query` signal changes, the `query$` Observable emits the latest query and triggers a new HTTP request.\n\n### [Injection context](https://angular.dev/ecosystem/rxjs-interop\\#injection-context-1)\n\n`toObservable` by default needs to run in an [injection context](https://angular.dev/ecosystem/guide/di/dependency-injection-context), such as during construction of a component or service. If an injection context is not available, you can manually specify the `Injector` to use instead.\n\n### [Timing of `toObservable`](https://angular.dev/ecosystem/rxjs-interop\\#timing-of-toobservable)\n\n`toObservable` uses an effect to track the value of the signal in a `ReplaySubject`. On subscription, the first value (if available) may be emitted synchronously, and all subsequent values will be asynchronous.\n\nUnlike Observables, signals never provide a synchronous notification of changes. Even if you update a signal's value multiple times, `toObservable` will only emit the value after the signal stabilizes.\n\n```\n      const obs$ = toObservable(mySignal);obs$.subscribe(value => console.log(value));mySignal.set(1);mySignal.set(2);mySignal.set(3);\n\n```\n\ncheck\n\nHere, only the last value (3) will be logged.",
  "title": "Signals interop \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "dev",
    "rxjs",
    "interop",
    "signal",
    "ecosystem",
    "value",
    "observable",
    "tosignal"
  ],
  "sourceURL": "https://angular.dev/ecosystem/rxjs-interop"
}