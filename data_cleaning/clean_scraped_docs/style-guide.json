{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nLooking for an opinionated guide to Angular syntax, conventions, and application structure?\nStep right in.\nThis style guide presents preferred conventions and, as importantly, explains why.\n\n## [Style vocabulary](https://angular.dev/style-guide\\#style-vocabulary)\n\nEach guideline describes either a good or bad practice, and all have a consistent presentation.\n\nThe wording of each guideline indicates how strong the recommendation is.\n\n**Do** is one that should always be followed.\n_Always_ might be a bit too strong of a word.\nGuidelines that literally should always be followed are extremely rare.\nOn the other hand, you need a really unusual case for breaking a _Do_ guideline.\n\n**Consider** guidelines should generally be followed.\nIf you fully understand the meaning behind the guideline and have a good reason to deviate, then do so.\nAim to be consistent.\n\n**Avoid** indicates something you should almost never do.\nCode examples to _avoid_ have an unmistakable red header.\n\n**Why**?\n\nGives reasons for following the previous recommendations.\n\n## [File structure conventions](https://angular.dev/style-guide\\#file-structure-conventions)\n\nSome code examples display a file that has one or more similarly named companion files.\nFor example, `hero.component.ts` and `hero.component.html`.\n\nThe guideline uses the shortcut `hero.component.ts|html|css|spec` to represent those various files.\nUsing this shortcut makes this guide's file structures easier to read and more terse.\n\n## [Single responsibility](https://angular.dev/style-guide\\#single-responsibility)\n\nApply the [_single responsibility principle (SRP)_](https://wikipedia.org/wiki/Single_responsibility_principle) to all components, services, and other symbols.\nThis helps make the application cleaner, easier to read and maintain, and more testable.\n\n### [Rule of One](https://angular.dev/style-guide\\#rule-of-one)\n\n#### [Style 01-01](https://angular.dev/style-guide\\#style-01-01)\n\n**Do** define one thing, such as a service or component, per file.\n\n**Consider** limiting files to 400 lines of code.\n\n**Why**?\n\nOne component per file makes it far easier to read, maintain, and avoid collisions with teams in source control.\n\n**Why**?\n\nOne component per file avoids hidden bugs that often arise when combining components in a file where they may share variables, create unwanted closures, or unwanted coupling with dependencies.\n\n**Why**?\n\nA single component can be the default export for its file which facilitates lazy loading with the router.\n\nThe key is to make the code more reusable, easier to read, and less mistake-prone.\n\nThe following _negative_ example defines the `AppComponent`, bootstraps the app,\ndefines the `Hero` model object, and loads heroes from the server all in the same file.\n_Don't do this_.\n\n### app/heroes/hero.component.ts\n\n```\n      /* avoid */import {Component, NgModule, OnInit} from '@angular/core';import {BrowserModule} from '@angular/platform-browser';import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';interface Hero {  id: number;  name: string;}@Component({  selector: 'app-root',  template: `      <h1>{{title}}</h1>      <pre>{{heroes | json}}</pre>    `,  styleUrls: ['../app.component.css'],  standalone: false,})export class AppComponent implements OnInit {  title = 'Tour of Heroes';  heroes: Hero[] = [];  ngOnInit() {    getHeroes().then((heroes) => (this.heroes = heroes));  }}@NgModule({  imports: [BrowserModule],  declarations: [AppComponent],  exports: [AppComponent],  bootstrap: [AppComponent],})export class AppModule {}platformBrowserDynamic().bootstrapModule(AppModule);const HEROES: Hero[] = [  {id: 1, name: 'Bombasto'},  {id: 2, name: 'Tornado'},  {id: 3, name: 'Magneta'},];function getHeroes(): Promise<Hero[]> {  return Promise.resolve(HEROES); // TODO: get hero data from the server;}\n\n```\n\ncheck\n\nIt is a better practice to redistribute the component and its\nsupporting classes into their own, dedicated files.\n\ncheck\n\n### main.ts\n\n```\n      import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';import {AppModule} from './app/app.module';platformBrowserDynamic().bootstrapModule(AppModule);\n\n```\n\nAs the application grows, this rule becomes even more important.\n\n## [Naming](https://angular.dev/style-guide\\#naming)\n\nNaming conventions are hugely important to maintainability and readability.\nThis guide recommends naming conventions for the file name and the symbol name.\n\n### [General Naming Guidelines](https://angular.dev/style-guide\\#general-naming-guidelines)\n\n#### [Style 02-01](https://angular.dev/style-guide\\#style-02-01)\n\n**Do** use consistent names for all symbols.\n\n**Do** follow a pattern that describes the symbol's feature then its type.\nThe recommended pattern is `feature.type.ts`.\n\n**Why**?\n\nNaming conventions help provide a consistent way to find content at a glance.\nConsistency within the project is vital.\nConsistency with a team is important.\nConsistency across a company provides tremendous efficiency.\n\n**Why**?\n\nThe naming conventions should help find desired code faster and make it easier to understand.\n\n**Why**?\n\nNames of folders and files should clearly convey their intent.\nFor example, `app/heroes/hero-list.component.ts` may contain a component that manages a list of heroes.\n\n### [Separate file names with dots and dashes](https://angular.dev/style-guide\\#separate-file-names-with-dots-and-dashes)\n\n#### [Style 02-02](https://angular.dev/style-guide\\#style-02-02)\n\n**Do** use dashes to separate words in the descriptive name.\n\n**Do** use dots to separate the descriptive name from the type.\n\n**Do** use consistent type names for all components following a pattern that describes the component's feature then its type.\nA recommended pattern is `feature.type.ts`.\n\n**Do** use conventional type names including `.service`, `.component`, `.pipe`, `.module`, and `.directive`.\nInvent additional type names if you must but take care not to create too many.\n\n**Why**?\n\nType names provide a consistent way to quickly identify what is in the file.\n\n**Why**?\n\nType names make it easy to find a specific file type using an editor or IDE's fuzzy search techniques.\n\n**Why**?\n\nUnabbreviated type names such as `.service` are descriptive and unambiguous.\nAbbreviations such as `.srv`, `.svc`, and `.serv` can be confusing.\n\n**Why**?\n\nType names provide pattern matching for any automated tasks.\n\n### [Symbols and file names](https://angular.dev/style-guide\\#symbols-and-file-names)\n\n#### [Style 02-03](https://angular.dev/style-guide\\#style-02-03)\n\n**Do** use consistent names for all assets named after what they represent.\n\n**Do** use upper camel case for class names.\n\n**Do** match the name of the symbol to the name of the file.\n\n**Do** append the symbol name with the conventional suffix (such as `Component`, `Directive`, `Module`, `Pipe`, or `Service`) for a thing of that type.\n\n**Do** give the filename the conventional suffix (such as `.component.ts`, `.directive.ts`, `.module.ts`, `.pipe.ts`, or `.service.ts`) for a file of that type.\n\n**Why**?\n\nConsistent conventions make it easy to quickly identify and reference assets of different types.\n\n| Symbol name | File name |\n| :-- | :-- |\n| @Component({ \u2026 }) <br>export class AppComponent { } | app.component.ts |\n| @Component({ \u2026 }) <br>export class HeroesComponent { } | heroes.component.ts |\n| @Component({ \u2026 }) <br>export class HeroListComponent { } | hero-list.component.ts |\n| @Component({ \u2026 }) <br>export class HeroDetailComponent { } | hero-detail.component.ts |\n| @Directive({ \u2026 }) <br>export class ValidationDirective { } | validation.directive.ts |\n| @NgModule({ \u2026 }) <br>export class AppModule | app.module.ts |\n| @Pipe({ name: 'initCaps' }) <br>export class InitCapsPipe implements PipeTransform { } | init-caps.pipe.ts |\n| @Injectable() <br>export class UserProfileService { } | user-profile.service.ts |\n\n### [Service names](https://angular.dev/style-guide\\#service-names)\n\n#### [Style 02-04](https://angular.dev/style-guide\\#style-02-04)\n\n**Do** use consistent names for all services named after their feature.\n\n**Do** suffix a service class name with `Service`.\nFor example, something that gets data or heroes should be called a `DataService` or a `HeroService`.\n\nA few terms are unambiguously services.\nThey typically indicate agency by ending in \"-er\".\nYou may prefer to name a service that logs messages `Logger` rather than `LoggerService`.\nDecide if this exception is agreeable in your project.\nAs always, strive for consistency.\n\n**Why**?\n\nProvides a consistent way to quickly identify and reference services.\n\n**Why**?\n\nClear service names such as `Logger` do not require a suffix.\n\n**Why**?\n\nService names such as `Credit` are nouns and require a suffix and should be named with a suffix when it is not obvious if it is a service or something else.\n\n| Symbol name | File name |\n| :-- | :-- |\n| @Injectable() <br>export class HeroDataService { } | hero-data.service.ts |\n| @Injectable() <br>export class CreditService { } | credit.service.ts |\n| @Injectable() <br>export class Logger { } | logger.service.ts |\n\n### [Bootstrapping](https://angular.dev/style-guide\\#bootstrapping)\n\n#### [Style 02-05](https://angular.dev/style-guide\\#style-02-05)\n\n**Do** put bootstrapping and platform logic for the application in a file named `main.ts`.\n\n**Do** include error handling in the bootstrapping logic.\n\n**Avoid** putting application logic in `main.ts`.\nInstead, consider placing it in a component or service.\n\n**Why**?\n\nFollows a consistent convention for the startup logic of an app.\n\n**Why**?\n\nFollows a familiar convention from other technology platforms.\n\n### main.ts\n\n```\n      import {AppComponent} from './app/app.component';import {bootstrapApplication} from '@angular/platform-browser';bootstrapApplication(AppComponent);\n\n```\n\ncheck\n\n### [Component selectors](https://angular.dev/style-guide\\#component-selectors)\n\n#### [Style 05-02](https://angular.dev/style-guide\\#style-05-02)\n\n**Do** use _dashed-case_ or _kebab-case_ for naming the element selectors of components.\n\n**Why**?\n\nKeeps the element names consistent with the specification for [Custom Elements](https://www.w3.org/TR/custom-elements).\n\ncheck\n\n```\n      import {Component} from '@angular/core';/* avoid */@Component({  selector: 'tohHeroButton',  templateUrl: './hero-button.component.html',})export class HeroButtonComponent {}\n\n```\n\ncheck\n\n### app/heroes/shared/hero-button/hero-button.component.ts\n\n```\n      import {Component} from '@angular/core';@Component({  selector: 'toh-hero-button',  templateUrl: './hero-button.component.html',})export class HeroButtonComponent {}\n\n```\n\n### [Component custom prefix](https://angular.dev/style-guide\\#component-custom-prefix)\n\n#### [Style 02-07](https://angular.dev/style-guide\\#style-02-07)\n\n**Do** use a hyphenated, lowercase element selector value; for example, `admin-users`.\n\n**Do** use a prefix that identifies the feature area or the application itself.\n\n**Why**?\n\nPrevents element name collisions with components in other applications and with native HTML elements.\n\n**Why**?\n\nMakes it easier to promote and share the component in other applications.\n\n**Why**?\n\nComponents are easy to identify in the DOM.\n\ncheck\n\n```\n      import {Component} from '@angular/core';/* avoid */// HeroComponent is in the Tour of Heroes feature@Component({  selector: 'hero',  template: '',})export class HeroComponent {}\n\n```\n\ncheck\n\n```\n      import {Component} from '@angular/core';/* avoid */// UsersComponent is in an Admin feature@Component({  selector: 'users',  template: '',})export class UsersComponent {}\n\n```\n\ncheck\n\n```\n      import {Component} from '@angular/core';@Component({  template: '<div>hero component</div>',\n...  selector: 'toh-hero',})export class HeroComponent {}\n\n```\n\ncheck\n\n```\n      import {Component} from '@angular/core';@Component({  template: '<div>users component</div>',\n...  selector: 'admin-users',})export class UsersComponent {}\n\n```\n\n### [Directive selectors](https://angular.dev/style-guide\\#directive-selectors)\n\n#### [Style 02-06](https://angular.dev/style-guide\\#style-02-06)\n\n**Do** Use lower camel case for naming the selectors of directives.\n\n**Why**?\n\nKeeps the names of the properties defined in the directives that are bound to the view consistent with the attribute names.\n\n**Why**?\n\nThe Angular HTML parser is case-sensitive and recognizes lower camel case.\n\n### [Directive custom prefix](https://angular.dev/style-guide\\#directive-custom-prefix)\n\n#### [Style 02-08](https://angular.dev/style-guide\\#style-02-08)\n\n**Do** spell non-element selectors in lower camel case unless the selector is meant to match a native HTML attribute.\n\n**Don't** prefix a directive name with `ng` because that prefix is reserved for Angular and using it could cause bugs that are difficult to diagnose.\n\n**Why**?\n\nPrevents name collisions.\n\n**Why**?\n\nDirectives are easily identified.\n\ncheck\n\n```\n      import {Directive} from '@angular/core';/* avoid */@Directive({  selector: '[validate]',})export class ValidateDirective {}\n\n```\n\ncheck\n\n```\n      import {Directive} from '@angular/core';@Directive({  selector: '[tohValidate]',})export class ValidateDirective {}\n\n```\n\n### [Pipe names](https://angular.dev/style-guide\\#pipe-names)\n\n#### [Style 02-09](https://angular.dev/style-guide\\#style-02-09)\n\n**Do** use consistent names for all pipes, named after their feature.\nThe pipe class name should use `UpperCamelCase` (the general convention for class names), and the corresponding `name` string should use _lowerCamelCase_.\nThe `name` string cannot use hyphens (\"dash-case\" or \"kebab-case\").\n\n**Why**?\n\nProvides a consistent way to quickly identify and reference pipes.\n\n| Symbol name | File name |\n| :-- | :-- |\n| @Pipe({ name: 'ellipsis' }) <br>export class EllipsisPipe implements PipeTransform { } | ellipsis.pipe.ts |\n| @Pipe({ name: 'initCaps' }) <br>export class InitCapsPipe implements PipeTransform { } | init-caps.pipe.ts |\n\n### [Unit test file names](https://angular.dev/style-guide\\#unit-test-file-names)\n\n#### [Style 02-10](https://angular.dev/style-guide\\#style-02-10)\n\n**Do** name test specification files the same as the component they test.\n\n**Do** name test specification files with a suffix of `.spec`.\n\n**Why**?\n\nProvides a consistent way to quickly identify tests.\n\n**Why**?\n\nProvides pattern matching for [karma](https://karma-runner.github.io/) or other test runners.\n\n| Test type | File names |\n| :-- | :-- |\n| Components | heroes.component.spec.ts <br> hero-list.component.spec.ts <br> hero-detail.component.spec.ts |\n| Services | logger.service.spec.ts <br> hero.service.spec.ts <br> filter-text.service.spec.ts |\n| Pipes | ellipsis.pipe.spec.ts <br> init-caps.pipe.spec.ts |\n\n## [Application structure and NgModules](https://angular.dev/style-guide\\#application-structure-and-ngmodules)\n\nHave a near-term view of implementation and a long-term vision.\nStart small but keep in mind where the application is heading.\n\nAll of the application's code goes in a folder named `src`.\nAll feature areas are in their own folder.\n\nAll content is one asset per file.\nEach component, service, and pipe is in its own file.\nAll third party vendor scripts are stored in another folder and not in the `src` folder.\nUse the naming conventions for files in this guide.\n\n### [Overall structural guidelines](https://angular.dev/style-guide\\#overall-structural-guidelines)\n\n#### [Style 04-06](https://angular.dev/style-guide\\#style-04-06)\n\n**Do** start small but keep in mind where the application is heading down the road.\n\n**Do** have a near term view of implementation and a long term vision.\n\n**Do** put all of the application's code in a folder named `src`.\n\n**Consider** creating a folder for a component when it has multiple accompanying files ( `.ts`, `.html`, `.css`, and `.spec`).\n\n**Why**?\n\nHelps keep the application structure small and easy to maintain in the early stages, while being easy to evolve as the application grows.\n\n**Why**?\n\nComponents often have four files (for example, `*.html`, `*.css`, `*.ts`, and `*.spec.ts`) and can clutter a folder quickly.\n\nHere is a compliant folder and file structure:\n\n```\n      project root\u251c\u2500\u2500 src\u2502 \u251c\u2500\u2500 app\u2502 \u2502 \u251c\u2500\u2500 core\u2502 \u2502 \u2502 \u2514\u2500\u2500 exception.service.ts|spec.ts\u2502 \u2502 \u2502 \u2514\u2500\u2500 user-profile.service.ts|spec.ts\u2502 \u2502 \u251c\u2500\u2500 heroes\u2502 \u2502 \u2502 \u251c\u2500\u2500 hero\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 hero.component.ts|html|css|spec.ts\u2502 \u2502 \u2502 \u251c\u2500\u2500 hero-list\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 hero-list.component.ts|html|css|spec.ts\u2502 \u2502 \u2502 \u251c\u2500\u2500 shared\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 hero-button.component.ts|html|css|spec.ts\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 hero.model.ts\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 hero.service.ts|spec.ts\u2502 \u2502 \u2502 \u2514\u2500\u2500 heroes.component.ts|html|css|spec.ts\u2502 \u2502 \u2502 \u2514\u2500\u2500 heroes.routes.ts\u2502 \u2502 \u251c\u2500\u2500 shared\u2502 \u2502 \u2502 \u2514\u2500\u2500 init-caps.pipe.ts|spec.ts\u2502 \u2502 \u2502 \u2514\u2500\u2500 filter-text.component.ts|spec.ts\u2502 \u2502 \u2502 \u2514\u2500\u2500 filter-text.service.ts|spec.ts\u2502 \u2502 \u251c\u2500\u2500 villains\u2502 \u2502 \u2502 \u251c\u2500\u2500 villain\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 \u2026\u2502 \u2502 \u2502 \u251c\u2500\u2500 villain-list\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 \u2026\u2502 \u2502 \u2502 \u251c\u2500\u2500 shared\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 \u2026\u2502 \u2502 \u2502 \u2514\u2500\u2500 villains.component.ts|html|css|spec.ts\u2502 \u2502 \u2502 \u2514\u2500\u2500 villains.module.ts\u2502 \u2502 \u2502 \u2514\u2500\u2500 villains-routing.module.ts\u2502 \u2502 \u2514\u2500\u2500 app.component.ts|html|css|spec.ts\u2502 \u2502 \u2514\u2500\u2500 app.routes.ts\u2502 \u2514\u2500\u2500 main.ts\u2502 \u2514\u2500\u2500 index.html\u2502 \u2514\u2500\u2500 \u2026\u2514\u2500\u2500 node_modules/\u2026\u2514\u2500\u2500 \u2026\n\n```\n\ncheck\n\n**HELPFUL:** While components in dedicated folders are widely preferred, another option for small applications is to keep components flat (not in a dedicated folder).\nThis adds up to four files to the existing folder, but also reduces the folder nesting.\nWhatever you choose, be consistent.\n\n### [_Folders-by-feature_ structure](https://angular.dev/style-guide\\#folders-by-feature-structure)\n\n#### [Style 04-07](https://angular.dev/style-guide\\#style-04-07)\n\n**Do** create folders named for the feature area they represent.\n\n**Why**?\n\nA developer can locate the code and identify what each file represents at a glance.\nThe structure is as flat as it can be and there are no repetitive or redundant names.\n\n**Why**?\n\nHelps reduce the application from becoming cluttered through organizing the content.\n\n**Why**?\n\nWhen there are a lot of files, for example 10+, locating them is easier with a consistent folder structure and more difficult in a flat structure.\n\nFor more information, refer to [this folder and file structure example](https://angular.dev/style-guide#overall-structural-guidelines).\n\n### [App _root module_](https://angular.dev/style-guide\\#app-root-module)\n\n**IMPORTANT:** The following style guide recommendations are for applications based on `NgModule`. New applications should use standalone components, directives, and pipes instead.\n\n#### [Style 04-08](https://angular.dev/style-guide\\#style-04-08)\n\n**Do** create an NgModule in the application's root folder, for example, in `/src/app` if creating a `NgModule` based app.\n\n**Why**?\n\nEvery `NgModule` based application requires at least one root NgModule.\n\n**Consider** naming the root module `app.module.ts`.\n\n**Why**?\n\nMakes it easier to locate and identify the root module.\n\ncheck\n\n```\n      import {NgModule} from '@angular/core';import {BrowserModule} from '@angular/platform-browser';import {RouterModule} from '@angular/router';\n...import {AppComponent} from './app.component';import {HeroesComponent} from './heroes/heroes.component';@NgModule({  imports: [    BrowserModule,    RouterModule.forChild([{path: '04-08', component: AppComponent}]),\\\n...  ],  declarations: [AppComponent, HeroesComponent],  exports: [AppComponent],})export class AppModule {}\n\n```\n\n### [Feature modules](https://angular.dev/style-guide\\#feature-modules)\n\n#### [Style 04-09](https://angular.dev/style-guide\\#style-04-09)\n\n**Do** create an NgModule for all distinct features in an application; for example, a `Heroes` feature.\n\n**Do** place the feature module in the same named folder as the feature area; for example, in `app/heroes`.\n\n**Do** name the feature module file reflecting the name of the feature area and folder; for example, `app/heroes/heroes.module.ts`.\n\n**Do** name the feature module symbol reflecting the name of the feature area, folder, and file; for example, `app/heroes/heroes.module.ts` defines `HeroesModule`.\n\n**Why**?\n\nA feature module can expose or hide its implementation from other modules.\n\n**Why**?\n\nA feature module identifies distinct sets of related components that comprise the feature area.\n\n**Why**?\n\nA feature module can easily be routed to both eagerly and lazily.\n\n**Why**?\n\nA feature module defines clear boundaries between specific functionality and other application features.\n\n**Why**?\n\nA feature module helps clarify and make it easier to assign development responsibilities to different teams.\n\n**Why**?\n\nA feature module can easily be isolated for testing.\n\n### [Shared feature module](https://angular.dev/style-guide\\#shared-feature-module)\n\n#### [Style 04-10](https://angular.dev/style-guide\\#style-04-10)\n\n**Do** create a feature module named `SharedModule` in a `shared` folder; for example, `app/shared/shared.module.ts` defines `SharedModule`.\n\n**Do** declare components, directives, and pipes in a shared module when those items will be re-used and referenced by the components declared in other feature modules.\n\n**Consider** using the name SharedModule when the contents of a shared\nmodule are referenced across the entire application.\n\n**Consider** _not_ providing services in shared modules.\nServices are usually singletons that are provided once for the entire application or in a particular feature module.\nThere are exceptions, however.\nFor example, in the sample code that follows, notice that the `SharedModule` provides `FilterTextService`.\nThis is acceptable here because the service is stateless;that is, the consumers of the service aren't impacted by new instances.\n\n**Do** import all modules required by the assets in the `SharedModule`; for example, `CommonModule` and `FormsModule`.\n\n**Why**?\n\n`SharedModule` will contain components, directives, and pipes that may need features from another common module; for example, `ngFor` in `CommonModule`.\n\n**Do** declare all components, directives, and pipes in the `SharedModule`.\n\n**Do** export all symbols from the `SharedModule` that other feature modules need to use.\n\n**Why**?\n\n`SharedModule` exists to make commonly used components, directives, and pipes available for use in the templates of components in many other modules.\n\n**Avoid** specifying app-wide singleton providers in a `SharedModule`.\nIntentional singletons are OK.\nTake care.\n\n**Why**?\n\nA lazy loaded feature module that imports that shared module will make its own copy of the service and likely have undesirable results.\n\n**Why**?\n\nYou don't want each module to have its own separate instance of singleton services.\nYet there is a real danger of that happening if the `SharedModule` provides a service.\n\n```\n      project root\u251c\u2500\u2500src\u251c\u2500\u2500\u251c\u2500\u2500app\u251c\u2500\u2500\u251c\u2500\u2500\u251c\u2500\u2500 shared\u251c\u2500\u2500\u251c\u2500\u2500\u251c\u2500\u2500\u2514\u2500\u2500 shared.module.ts\u251c\u2500\u2500\u251c\u2500\u2500\u251c\u2500\u2500\u2514\u2500\u2500 init-caps.pipe.ts|spec.ts\u251c\u2500\u2500\u251c\u2500\u2500\u251c\u2500\u2500\u2514\u2500\u2500 filter-text.component.ts|spec.ts\u251c\u2500\u2500\u251c\u2500\u2500\u251c\u2500\u2500\u2514\u2500\u2500 filter-text.service.ts|spec.ts\u251c\u2500\u2500\u251c\u2500\u2500\u2514\u2500\u2500 app.component.ts|html|css|spec.ts\u251c\u2500\u2500\u251c\u2500\u2500\u2514\u2500\u2500 app.module.ts\u251c\u2500\u2500\u251c\u2500\u2500\u2514\u2500\u2500 app-routing.module.ts\u251c\u2500\u2500\u2514\u2500\u2500 main.ts\u251c\u2500\u2500\u2514\u2500\u2500 index.html\u2514\u2500\u2500 \u2026\n\n```\n\ncheck\n\ncheck\n\n### app/shared/shared.module.ts\n\n```\n      import {NgModule} from '@angular/core';import {CommonModule} from '@angular/common';import {FormsModule} from '@angular/forms';import {FilterTextComponent} from './filter-text/filter-text.component';import {FilterTextService} from './filter-text/filter-text.service';import {InitCapsPipe} from './init-caps.pipe';@NgModule({  imports: [CommonModule, FormsModule],  declarations: [FilterTextComponent, InitCapsPipe],  providers: [FilterTextService],  exports: [CommonModule, FormsModule, FilterTextComponent, InitCapsPipe],})export class SharedModule {}\n\n```\n\n### [Lazy Loaded folders](https://angular.dev/style-guide\\#lazy-loaded-folders)\n\n#### [Style 04-11](https://angular.dev/style-guide\\#style-04-11)\n\nA distinct application feature or workflow may be _lazy loaded_ or _loaded on demand_ rather than when the application starts.\n\n**Do** put the contents of lazy loaded features in a _lazy loaded folder_.\nA typical _lazy loaded folder_ contains a _routing component_, its child components, and their related assets.\n\n**Why**?\n\nThe folder makes it easy to identify and isolate the feature content.\n\n## [Components](https://angular.dev/style-guide\\#components)\n\n### [Components as elements](https://angular.dev/style-guide\\#components-as-elements)\n\n#### [Style 05-03](https://angular.dev/style-guide\\#style-05-03)\n\n**Consider** giving components an _element_ selector, as opposed to _attribute_ or _class_ selectors.\n\n**Why**?\n\nComponents have templates containing HTML and optional Angular template syntax.\nThey display content.\nDevelopers place components on the page as they would native HTML elements and web components.\n\n**Why**?\n\nIt is easier to recognize that a symbol is a component by looking at the template's html.\n\n**HELPFUL:** There are a few cases where you give a component an attribute, such as when you want to augment a built-in element.\nFor example, [Material Design](https://material.angular.io/components/button/overview) uses this technique with `<button mat-button>`.\nHowever, you wouldn't use this technique on a custom element.\n\ncheck\n\n```\n      import {Component} from '@angular/core';/* avoid */@Component({  selector: '[tohHeroButton]',  templateUrl: './hero-button.component.html',})export class HeroButtonComponent {}\n\n```\n\n### app/app.component.html\n\n```\n      <!-- avoid --><div tohHeroButton></div>\n\n```\n\ncheck\n\ncheck\n\n### app/heroes/shared/hero-button/hero-button.component.ts\n\n```\n      import {Component} from '@angular/core';@Component({  selector: 'toh-hero-button',  templateUrl: './hero-button.component.html',})export class HeroButtonComponent {}\n\n```\n\n### [Extract templates and styles to their own files](https://angular.dev/style-guide\\#extract-templates-and-styles-to-their-own-files)\n\n#### [Style 05-04](https://angular.dev/style-guide\\#style-05-04)\n\n**Do** extract templates and styles into a separate file, when more than 3 lines.\n\n**Do** name the template file `[component-name].component.html`, where \\[component-name\\] is the component name.\n\n**Do** name the style file `[component-name].component.css`, where \\[component-name\\] is the component name.\n\n**Do** specify _component-relative_ URLs, prefixed with `./`.\n\n**Why**?\n\nLarge, inline templates and styles obscure the component's purpose and implementation, reducing readability and maintainability.\n\n**Why**?\n\nIn most editors, syntax hints and code snippets aren't available when developing inline templates and styles.\nThe Angular TypeScript Language Service (forthcoming) promises to overcome this deficiency for HTML templates in those editors that support it; it won't help with CSS styles.\n\n**Why**?\n\nA _component relative_ URL requires no change when you move the component files, as long as the files stay together.\n\n**Why**?\n\nThe `./` prefix is standard syntax for relative URLs; don't depend on Angular's current ability to do without that prefix.\n\ncheck\n\n```\n      import {Component, inject} from '@angular/core';import {Observable} from 'rxjs';import {Hero, HeroService} from './shared';import {AsyncPipe, NgFor, NgIf, UpperCasePipe} from '@angular/common';/* avoid */@Component({  selector: 'toh-heroes',  template: `    <div>      <h2>My Heroes</h2>      <ul class=\"heroes\">        @for (hero of heroes | async; track hero) {          <li (click)=\"selectedHero=hero\">            <span class=\"badge\">{{hero.id}}</span> {{hero.name}}          </li>        }      </ul>      @if (selectedHero) {        <div>          <h2>{{selectedHero.name | uppercase}} is my hero</h2>        </div>      }    </div>  `,  styles: [    `    .heroes {      margin: 0 0 2em 0;      list-style-type: none;      padding: 0;      width: 15em;    }    .heroes li {      cursor: pointer;      position: relative;      left: 0;      background-color: #EEE;      margin: .5em;      padding: .3em 0;      height: 1.6em;      border-radius: 4px;    }    .heroes .badge {      display: inline-block;      font-size: small;      color: white;      padding: 0.8em 0.7em 0 0.7em;      background-color: #607D8B;      line-height: 1em;      position: relative;      left: -1px;      top: -4px;      height: 1.8em;      margin-right: .8em;      border-radius: 4px 0 0 4px;    }  `,  ],  imports: [NgFor, NgIf, AsyncPipe, UpperCasePipe],})export class HeroesComponent {  selectedHero!: Hero;  private heroService = inject(HeroService);  heroes: Observable<Hero[]> = this.heroService.getHeroes();}\n\n```\n\ncheck\n\n### app/heroes/heroes.component.ts\n\n```\n      import {Component, inject} from '@angular/core';import {Observable} from 'rxjs';import {Hero, HeroService} from './shared';import {AsyncPipe, NgFor, NgIf, UpperCasePipe} from '@angular/common';@Component({  selector: 'toh-heroes',  templateUrl: './heroes.component.html',  styleUrls: ['./heroes.component.css'],  imports: [NgFor, NgIf, AsyncPipe, UpperCasePipe],})export class HeroesComponent {  selectedHero!: Hero;  private heroService = inject(HeroService);  heroes: Observable<Hero[]> = this.heroService.getHeroes();}\n\n```\n\n### [Decorate `input` and `output` properties](https://angular.dev/style-guide\\#decorate-input-and-output-properties)\n\n#### [Style 05-12](https://angular.dev/style-guide\\#style-05-12)\n\n**Do** use the `@Input()` and `@Output()` class decorators instead of the `inputs` and `outputs` properties of the `@Directive` and `@Component` metadata:\n\n**Consider** placing `@Input()` or `@Output()` on the same line as the property it decorates.\n\n**Why**?\n\nIt is easier and more readable to identify which properties in a class are inputs or outputs.\n\n**Why**?\n\nIf you ever need to rename the property or event name associated with `@Input()` or `@Output()`, you can modify it in a single place.\n\n**Why**?\n\nThe metadata declaration attached to the directive is shorter and thus more readable.\n\n**Why**?\n\nPlacing the decorator on the same line _usually_ makes for shorter code and still easily identifies the property as an input or output.\nPut it on the line above when doing so is clearly more readable.\n\ncheck\n\n```\n      import {Component, EventEmitter} from '@angular/core';/* avoid */@Component({  selector: 'toh-hero-button',  template: `<button type=\"button\"></button>`,  inputs: ['label'],  outputs: ['heroChange'],})export class HeroButtonComponent {  heroChange = new EventEmitter<any>();  label: string = '';}\n\n```\n\ncheck\n\n```\n      import {Component, EventEmitter, Input, Output} from '@angular/core';@Component({  selector: 'toh-hero-button',  template: `<button type=\"button\">{{label}}</button>`,})export class HeroButtonComponent {  @Output() heroChange = new EventEmitter<any>();  @Input() label = '';}\n\n```\n\n### [Avoid aliasing `inputs` and `outputs`](https://angular.dev/style-guide\\#avoid-aliasing-inputs-and-outputs)\n\n#### [Style 05-13](https://angular.dev/style-guide\\#style-05-13)\n\n**Avoid** `input` and `output` aliases except when it serves an important purpose.\n\n**Why**?\n\nTwo names for the same property (one private, one public) is inherently confusing.\n\n**Why**?\n\nYou should use an alias when the directive name is also an `input` property,\nand the directive name doesn't describe the property.\n\ncheck\n\n```\n      import {Component, EventEmitter, Input, Output} from '@angular/core';/* avoid pointless aliasing */@Component({  selector: 'toh-hero-button',  template: `<button type=\"button\">{{label}}</button>`,})export class HeroButtonComponent {  // Pointless aliases  @Output('heroChangeEvent') heroChange = new EventEmitter<any>();  @Input('labelAttribute') label!: string;}\n\n```\n\n### app/app.component.html\n\n```\n      <!-- avoid --><toh-hero-button labelAttribute=\"OK\" (changeEvent)=\"doSomething()\"></toh-hero-button>\n\n```\n\ncheck\n\ncheck\n\n### app/heroes/shared/hero-button/hero-button.component.ts\n\n```\n      import {Component, EventEmitter, Input, Output} from '@angular/core';@Component({  selector: 'toh-hero-button',  template: `<button type=\"button\" >{{label}}</button>`,})export class HeroButtonComponent {  // No aliases  @Output() heroChange = new EventEmitter<any>();  @Input() label = '';}\n\n```\n\n### [Delegate complex component logic to services](https://angular.dev/style-guide\\#delegate-complex-component-logic-to-services)\n\n#### [Style 05-15](https://angular.dev/style-guide\\#style-05-15)\n\n**Do** limit logic in a component to only that required for the view.\nAll other logic should be delegated to services.\n\n**Do** move reusable logic to services and keep components simple and focused on their intended purpose.\n\n**Why**?\n\nLogic may be reused by multiple components when placed within a service and exposed as a function.\n\n**Why**?\n\nLogic in a service can more easily be isolated in a unit test, while the calling logic in the component can be easily mocked.\n\n**Why**?\n\nRemoves dependencies and hides implementation details from the component.\n\n**Why**?\n\nKeeps the component slim, trim, and focused.\n\n### app/heroes/hero-list/hero-list.component.ts\n\n```\n      /* avoid */import {Component, inject, OnInit} from '@angular/core';import {HttpClient} from '@angular/common/http';import {Observable} from 'rxjs';import {catchError, finalize} from 'rxjs/operators';import {Hero} from '../shared/hero.model';const heroesUrl = 'http://angular.io';@Component({  selector: 'toh-hero-list',  template: `...`,})export class HeroListComponent {  heroes: Hero[] = [];  private http = inject(HttpClient);  constructor() {    this.getHeroes();  }  getHeroes() {    this.heroes = [];    this.http      .get(heroesUrl)      .pipe(        catchError(this.catchBadResponse),        finalize(() => this.hideSpinner()),      )      .subscribe((heroes: Hero[]) => (this.heroes = heroes));  }  private catchBadResponse(err: any, source: Observable<any>) {    // log and handle the exception    return new Observable();  }  private hideSpinner() {    // hide the spinner  }}\n\n```\n\ncheck\n\ncheck\n\n```\n      import {Component, inject, OnInit} from '@angular/core';import {Hero, HeroService} from '../shared';@Component({  selector: 'toh-hero-list',  template: `...`,})export class HeroListComponent implements OnInit {  heroes: Hero[] = [];  private heroService = inject(HeroService);  getHeroes() {    this.heroes = [];    this.heroService.getHeroes().subscribe((heroes) => (this.heroes = heroes));  }  ngOnInit() {    this.getHeroes();  }}\n\n```\n\n### [Don't prefix `output` properties](https://angular.dev/style-guide\\#dont-prefix-output-properties)\n\n#### [Style 05-16](https://angular.dev/style-guide\\#style-05-16)\n\n**Do** name events without the prefix `on`.\n\n**Do** name event handler methods with the prefix `on` followed by the event name.\n\n**Why**?\n\nThis is consistent with built-in events such as button clicks.\n\n**Why**?\n\nAngular allows for an [alternative syntax](https://angular.dev/guide/templates/binding) `on-*`.\nIf the event itself was prefixed with `on` this would result in an `on-onEvent` binding expression.\n\ncheck\n\n```\n      import {Component, EventEmitter, Output} from '@angular/core';/* avoid */@Component({  selector: 'toh-hero',  template: `...`,})export class HeroComponent {  @Output() onSavedTheDay = new EventEmitter<boolean>();}\n\n```\n\n### app/app.component.html\n\n```\n      <!-- avoid --><toh-hero (onSavedTheDay)=\"onSavedTheDay($event)\"></toh-hero>\n\n```\n\ncheck\n\ncheck\n\n### app/heroes/hero.component.ts\n\n```\n      import {Component, EventEmitter, Output} from '@angular/core';@Component({  selector: 'toh-hero',  template: `...`,})export class HeroComponent {  @Output() savedTheDay = new EventEmitter<boolean>();}\n\n```\n\n### [Put presentation logic in the component class](https://angular.dev/style-guide\\#put-presentation-logic-in-the-component-class)\n\n#### [Style 05-17](https://angular.dev/style-guide\\#style-05-17)\n\n**Do** put presentation logic in the component class, and not in the template.\n\n**Why**?\n\nLogic will be contained in one place (the component class) instead of being spread in two places.\n\n**Why**?\n\nKeeping the component's presentation logic in the class instead of the template improves testability, maintainability, and reusability.\n\ncheck\n\n```\n      import {Component} from '@angular/core';import {Hero} from '../shared/hero.model';import {NgFor} from '@angular/common';import {HeroComponent} from '../hero/hero.component';/* avoid */@Component({  selector: 'toh-hero-list',  template: `    <section>      Our list of heroes:      @for (hero of heroes; track hero) {        <toh-hero [hero]=\"hero\"></toh-hero>      }      Total powers: {{totalPowers}}<br>      Average power: {{totalPowers / heroes.length}}    </section>  `,  imports: [NgFor, HeroComponent],})export class HeroListComponent {  heroes: Hero[] = [];  totalPowers: number = 0;}\n\n```\n\ncheck\n\n```\n      import {Component} from '@angular/core';import {HeroComponent} from '../hero/hero.component';import {Hero} from '../shared/hero.model';import {NgFor} from '@angular/common';@Component({  selector: 'toh-hero-list',  template: `    <section>      Our list of heroes:      @for (hero of heroes; track hero) {        <toh-hero [hero]=\"hero\"></toh-hero>      }      Total powers: {{totalPowers}}<br>      Average power: {{avgPower}}    </section>  `,  imports: [NgFor, HeroComponent],})export class HeroListComponent {  heroes: Hero[];  totalPowers = 0;  // testing harness  constructor() {    this.heroes = [];  }\n...  get avgPower() {    return this.totalPowers / this.heroes.length;  }}\n\n```\n\n### [Initialize inputs](https://angular.dev/style-guide\\#initialize-inputs)\n\n#### [Style 05-18](https://angular.dev/style-guide\\#style-05-18)\n\nTypeScript's `--strictPropertyInitialization` compiler option ensures that a class initializes its properties during construction.\nWhen enabled, this option causes the TypeScript compiler to report an error if the class does not set a value to any property that is not explicitly marked as optional.\n\nBy design, Angular treats all `@Input` properties as optional.\nWhen possible, you should satisfy `--strictPropertyInitialization` by providing a default value.\n\ncheck\n\n```\n      import {Component, Input} from '@angular/core';@Component({  selector: 'toh-hero',  template: `...`,})export class HeroComponent {  @Input() id = 'default_id';}\n\n```\n\nIf the property is hard to construct a default value for, use `?` to explicitly mark the property as optional.\n\ncheck\n\n```\n      import {Component, Input} from '@angular/core';@Component({  selector: 'toh-hero',  template: `...`,})export class HeroComponent {  @Input() id?: string;  process() {    if (this.id) {      // ...    }  }}\n\n```\n\nYou may want to have a required `@Input` field, meaning all your component users are required to pass that attribute.\nIn such cases, use a default value.\nJust suppressing the TypeScript error with `!` is insufficient and should be avoided because it will prevent the type checker from ensuring the input value is provided.\n\ncheck\n\n```\n      import {Component, Input} from '@angular/core';@Component({  selector: 'toh-hero',  template: `...`,})export class HeroComponent {  // The exclamation mark suppresses errors that a property is  // not initialized.  // Ignoring this enforcement can prevent the type checker  // from finding potential issues.  @Input() id!: string;}\n\n```\n\n## [Directives](https://angular.dev/style-guide\\#directives)\n\n### [Use directives to enhance an element](https://angular.dev/style-guide\\#use-directives-to-enhance-an-element)\n\n#### [Style 06-01](https://angular.dev/style-guide\\#style-06-01)\n\n**Do** use attribute directives when you have presentation logic without a template.\n\n**Why**?\n\nAttribute directives don't have an associated template.\n\n**Why**?\n\nAn element may have more than one attribute directive applied.\n\ncheck\n\n```\n      import {Directive, HostListener} from '@angular/core';@Directive({  selector: '[tohHighlight]',})export class HighlightDirective {  @HostListener('mouseover') onMouseEnter() {    // do highlight work  }}\n\n```\n\n### app/app.component.html\n\n```\n      <div tohHighlight>Bombasta</div>\n\n```\n\ncheck\n\n### [`HostListener`/ `HostBinding` decorators versus `host` metadata](https://angular.dev/style-guide\\#hostlistener-hostbinding-decorators-versus-host-metadata)\n\n#### [Style 06-03](https://angular.dev/style-guide\\#style-06-03)\n\n**Consider** preferring the `@HostListener` and `@HostBinding` to the `host` property of the `@Directive` and `@Component` decorators.\n\n**Do** be consistent in your choice.\n\n**Why**?\n\nThe property associated with `@HostBinding` or the method associated with `@HostListener` can be modified only in a single place \u2014in the directive's class.\nIf you use the `host` metadata property, you must modify both the property/method declaration in the directive's class and the metadata in the decorator associated with the directive.\n\n### app/shared/validator.directive.ts\n\n```\n      import {Directive, HostBinding, HostListener} from '@angular/core';@Directive({  selector: '[tohValidator]',})export class ValidatorDirective {  @HostBinding('attr.role') role = 'button';  @HostListener('mouseenter') onMouseEnter() {    // do work  }}\n\n```\n\ncheck\n\nCompare with the less preferred `host` metadata alternative.\n\n**Why**?\n\nThe `host` metadata is only one term to remember and doesn't require extra ES imports.\n\n### app/shared/validator2.directive.ts\n\n```\n      import {Directive} from '@angular/core';@Directive({  selector: '[tohValidator2]',  host: {    '[attr.role]': 'role',    '(mouseenter)': 'onMouseEnter()',  },})export class Validator2Directive {  role = 'button';  onMouseEnter() {    // do work  }}\n\n```\n\ncheck\n\n## [Services](https://angular.dev/style-guide\\#services)\n\n### [Services are singletons](https://angular.dev/style-guide\\#services-are-singletons)\n\n#### [Style 07-01](https://angular.dev/style-guide\\#style-07-01)\n\n**Do** use services as singletons within the same injector.\nUse them for sharing data and functionality.\n\n**Why**?\n\nServices are ideal for sharing methods across a feature area or an app.\n\n**Why**?\n\nServices are ideal for sharing stateful in-memory data.\n\ncheck\n\n```\n      import {inject, Injectable} from '@angular/core';import {HttpClient} from '@angular/common/http';import {Hero} from './hero.model';@Injectable()export class HeroService {  private http = inject(HttpClient);  getHeroes() {    return this.http.get<Hero[]>('api/heroes');  }}\n\n```\n\n### [Providing a service](https://angular.dev/style-guide\\#providing-a-service)\n\n#### [Style 07-03](https://angular.dev/style-guide\\#style-07-03)\n\n**Do** provide a service with the application root injector in the `@Injectable` decorator of the service.\n\n**Why**?\n\nThe Angular injector is hierarchical.\n\n**Why**?\n\nWhen you provide the service to a root injector, that instance of the service is shared and available in every class that needs the service.\nThis is ideal when a service is sharing methods or state.\n\n**Why**?\n\nWhen you register a service in the `@Injectable` decorator of the service, optimization tools such as those used by the [Angular CLI's](https://angular.dev/cli) production builds can perform tree shaking and remove services that aren't used by your app.\n\n**Why**?\n\nThis is not ideal when two different components need different instances of a service.\nIn this scenario it would be better to provide the service at the component level that needs the new and separate instance.\n\n### src/app/treeshaking/service.ts\n\n```\n      import {Injectable} from '@angular/core';@Injectable({  providedIn: 'root',})export class Service {}\n\n```\n\ncheck\n\n### [Use the @Injectable() class decorator](https://angular.dev/style-guide\\#use-the-injectable-class-decorator)\n\n#### [Style 07-04](https://angular.dev/style-guide\\#style-07-04)\n\n**Do** use the `@Injectable()` class decorator instead of the `@Inject` parameter decorator when using types as tokens for the dependencies of a service.\n\n**Why**?\n\nThe Angular Dependency Injection (DI) mechanism resolves a service's own\ndependencies based on the declared types of that service's constructor parameters.\n\n**Why**?\n\nWhen a service accepts only dependencies associated with type tokens, the `@Injectable()` syntax is much less verbose compared to using `@Inject()` on each individual constructor parameter.\n\ncheck\n\n```\n      import {Inject} from '@angular/core';import {HttpClient} from '@angular/common/http';import {HeroService} from './hero.service';/* avoid */export class HeroArena {  constructor(    @Inject(HeroService) private heroService: HeroService,    @Inject(HttpClient) private http: HttpClient,  ) {}}\n\n```\n\ncheck\n\n```\n      import {Injectable} from '@angular/core';import {HttpClient} from '@angular/common/http';import {HeroService} from './hero.service';@Injectable()export class HeroArena {  constructor(    private heroService: HeroService,    private http: HttpClient,  ) {}  // test harness  getParticipants() {    return this.heroService.getHeroes();  }\n...}\n\n```\n\n## [Data Services](https://angular.dev/style-guide\\#data-services)\n\n### [Talk to the server through a service](https://angular.dev/style-guide\\#talk-to-the-server-through-a-service)\n\n#### [Style 08-01](https://angular.dev/style-guide\\#style-08-01)\n\n**Do** refactor logic for making data operations and interacting with data to a service.\n\n**Do** make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations.\n\n**Why**?\n\nThe component's responsibility is for the presentation and gathering of information for the view.\nIt should not care how it gets the data, just that it knows who to ask for it.\nSeparating the data services moves the logic on how to get it to the data service, and lets the component be simpler and more focused on the view.\n\n**Why**?\n\nThis makes it easier to test (mock or real) the data calls when testing a component that uses a data service.\n\n**Why**?\n\nThe details of data management, such as headers, HTTP methods, caching, error handling, and retry logic, are irrelevant to components and other data consumers.\n\nA data service encapsulates these details.\nIt's easier to evolve these details inside the service without affecting its consumers.\nAnd it's easier to test the consumers with mock service implementations.\n\n## [Lifecycle hooks](https://angular.dev/style-guide\\#lifecycle-hooks)\n\nUse Lifecycle hooks to tap into important events exposed by Angular.\n\n### [Implement lifecycle hook interfaces](https://angular.dev/style-guide\\#implement-lifecycle-hook-interfaces)\n\n#### [Style 09-01](https://angular.dev/style-guide\\#style-09-01)\n\n**Do** implement the lifecycle hook interfaces.\n\n**Why**?\n\nLifecycle interfaces prescribe typed method signatures.\nUse those signatures to flag spelling and syntax mistakes.\n\ncheck\n\n```\n      import {Component} from '@angular/core';/* avoid */@Component({  selector: 'toh-hero-button',  template: `<button type=\"button\">OK</button>`,})export class HeroButtonComponent {  onInit() {    // misspelled    console.log('The component is initialized');  }}\n\n```\n\ncheck\n\n```\n      import {Component, OnInit} from '@angular/core';@Component({  selector: 'toh-hero-button',  template: `<button type=\"button\">OK</button>`,})export class HeroButtonComponent implements OnInit {  ngOnInit() {    console.log('The component is initialized');  }}\n\n```\n\n## [Appendix](https://angular.dev/style-guide\\#appendix)\n\nUseful tools and tips for Angular.\n\n### [File templates and snippets](https://angular.dev/style-guide\\#file-templates-and-snippets)\n\n#### [Style A-02](https://angular.dev/style-guide\\#style-a-02)\n\n**Do** use file templates or snippets to help follow consistent styles and patterns.\nHere are templates and/or snippets for some of the web development editors and IDEs.\n\n**Consider** using [snippets](https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2) for [Visual Studio Code](https://code.visualstudio.com/) that follow these styles and guidelines.\n\n[![Use Extension](https://angular.dev/assets/images/guide/styleguide/use-extension.gif)](https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2)\n\n**Consider** using [snippets](https://github.com/orizens/sublime-angular2-snippets) for [Sublime Text](https://www.sublimetext.com/) that follow these styles and guidelines.\n\n**Consider** using [snippets](https://github.com/mhartington/vim-angular2-snippets) for [Vim](https://www.vim.org/) that follow these styles and guidelines.",
  "title": "Style Guide \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "style",
    "component",
    "https",
    "hero",
    "dev",
    "ts",
    "guide",
    "import",
    "class"
  ],
  "sourceURL": "https://angular.dev/style-guide"
}