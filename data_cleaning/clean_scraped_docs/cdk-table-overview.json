{
  "content": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\n## Overview for table\n\nThe `CdkTable` is an unopinionated, customizable data-table with a fully-templated API, dynamic\ncolumns, and an accessible DOM structure. This component acts as the core upon which anyone can\nbuild their own tailored data-table experience.\n\nThe table provides a foundation upon which other features, such as sorting and pagination, can be\nbuilt. Because it enforces no opinions on these matters, developers have full control over the\ninteraction patterns associated with the table.\n\nFor a Material Design styled table, see the\n[documentation for `MatTable`](https://material.angular.io/components/table) which builds on\ntop of the CDK data-table.\n\nBasic CDK data-table\n\nlinkcodeopen\\_in\\_new\n\n| No. | Name | Weight | Symbol |\n| --- | --- | --- | --- |\n| 1 | Hydrogen | 1.0079 | H |\n| 2 | Helium | 4.0026 | He |\n| 3 | Lithium | 6.941 | Li |\n| 4 | Beryllium | 9.0122 | Be |\n| 5 | Boron | 10.811 | B |\n| 6 | Carbon | 12.0107 | C |\n| 7 | Nitrogen | 14.0067 | N |\n| 8 | Oxygen | 15.9994 | O |\n| 9 | Fluorine | 18.9984 | F |\n| 10 | Neon | 20.1797 | Ne |\n\n### [link](https://material.angular.io/cdk/table/overview\\#using-the-cdk-data-table)  Using the CDK data-table\n\n#### [link](https://material.angular.io/cdk/table/overview\\#writing-your-table-template)  Writing your table template\n\nThe first step to writing the data-table template is to define the columns.\nA column definition is specified via an `<ng-container>` with the `cdkColumnDef` directive, giving\nthe column a name. Each column definition can contain a header-cell template\n( `cdkHeaderCellDef`), data-cell template ( `cdkCellDef`), and footer-cell\ntemplate ( `cdkFooterCellDef`).\n\n```html\n<ng-container cdkColumnDef=\"username\">\n  <th cdk-header-cell *cdkHeaderCellDef> User name </th>\n  <td cdk-cell *cdkCellDef=\"let row\"> {{row.a}} </td>\n  <td cdk-footer-cell *cdkFooterCellDef> User name </td>\n</ng-container>\n\n```\n\nThe set of columns defined represent the columns that are _available_ to be rendered. The specific\ncolumns rendered in a given row, and their order, are specified on the row (see below).\n\nNote that `cdkCellDef` exports the row context such that the row data can be referenced in the cell\ntemplate. The directive also exports the same properties as `ngFor` (index, even, odd, first,\nlast).\n\nThe next step is to define the table's header-row ( `cdkHeaderRowDef`), data-row ( `cdkRowDef`),\nand footer-row ( `cdkFooterRowDef`). Note that each of these are optional to include, depending on\nwhat type of rows you want rendered (e.g. if you do not need a footer row, simply do not add\nits definition).\n\n```html\n<tr cdk-header-row *cdkHeaderRowDef=\"['username', 'age', 'title']\"></tr>\n<tr cdk-row *cdkRowDef=\"let row; columns: ['username', 'age', 'title']\"></tr>\n<tr cdk-footer-row *cdkFooterRowDef=\"['username', 'age', 'title']\"></tr>\n\n```\n\nThese row templates accept the specific columns to be rendered via the name given to the\n`cdkColumnDef`.\n\nThe `cdkRowDef` also exports row context, which can be used for event and property\nbindings on the row element. Any content placed _inside_ of the header row or data row template\nwill be ignored, as the rendered content of the row comes from the cell templates described\nabove.\n\n##### [link](https://material.angular.io/cdk/table/overview\\#example-table-with-three-columns)  Example: table with three columns\n\n```html\n<table cdk-table [dataSource]=\"dataSource\">\n  <!-- User name Definition -->\n  <ng-container cdkColumnDef=\"username\">\n    <th cdk-header-cell *cdkHeaderCellDef> User name </th>\n    <td cdk-cell *cdkCellDef=\"let row\"> {{row.username}} </td>\n  </ng-container>\n\n  <!-- Age Definition -->\n  <ng-container cdkColumnDef=\"age\">\n    <th cdk-header-cell *cdkHeaderCellDef> Age </th>\n    <td cdk-cell *cdkCellDef=\"let row\"> {{row.age}} </td>\n  </ng-container>\n\n  <!-- Title Definition -->\n  <ng-container cdkColumnDef=\"title\">\n    <th cdk-header-cell *cdkHeaderCellDef> Title </th>\n    <td cdk-cell *cdkCellDef=\"let row\"> {{row.title}} </td>\n  </ng-container>\n\n  <!-- Header and Row Declarations -->\n  <tr cdk-header-row *cdkHeaderRowDef=\"['username', 'age', 'title']\"></tr>\n  <tr cdk-row *cdkRowDef=\"let row; columns: ['username', 'age', 'title']\"></tr>\n</table>\n\n```\n\nThe columns given on the row determine which cells are rendered and in which order. Thus, the\ncolumns can be set via binding to support dynamically changing the columns shown at run-time.\n\n```html\n<tr cdk-row *cdkRowDef=\"let row; columns: myDisplayedColumns\"></tr>\n\n```\n\nIt is not required to display all the columns that are defined within the template,\nnor use the same ordering. For example, to display the table with only `age`\nand `username` and in that order, then the row and header definitions would be written as:\n\n```html\n<tr cdk-row *cdkRowDef=\"let row; columns: ['age', 'username']\"></tr>\n\n```\n\nEvent and property bindings can be added directly to the row element.\n\n##### [link](https://material.angular.io/cdk/table/overview\\#example-table-with-event-and-class-binding)  Example: table with event and class binding\n\n```html\n<tr cdk-header-row *cdkHeaderRowDef=\"['age', 'username']\"\n    (click)=\"handleHeaderRowClick(row)\">\n</tr>\n\n<tr cdk-row *cdkRowDef=\"let row; columns: ['age', 'username']\"\n    [class.can-vote]=\"row.age >= 18\"\n    (click)=\"handleRowClick(row)\">\n</tr>\n\n```\n\n##### [link](https://material.angular.io/cdk/table/overview\\#styling-columns)  Styling columns\n\nEach header and row cell will be provided a CSS class that includes its column. For example,\ncells that are displayed in the column `name` will be given the class `cdk-column-name`. This allows\ncolumns to be given styles that will match across the header and rows.\n\nSince columns can be given any string for its name, its possible that it cannot be directly applied\nto the CSS class (e.g. `*nameColumn!`). In these cases, the special characters will be replaced by\nthe `-` character. For example, cells container in a column named `*nameColumn!` will be given\nthe class `cdk-column--nameColumn-`.\n\n#### [link](https://material.angular.io/cdk/table/overview\\#connecting-the-table-to-a-data-source)  Connecting the table to a data source\n\nData is provided to the table through a `DataSource`. When the table receives a data source,\nit calls the DataSource's `connect()` method which returns an observable that emits an array of data.\nWhenever the data source emits data to this stream, the table will render an update.\n\nBecause the _data source_ provides this stream, it bears the responsibility of triggering table\nupdates. This can be based on _anything_: websocket connections, user interaction, model updates,\ntime-based intervals, etc. Most commonly, updates will be triggered by user interactions like\nsorting and pagination.\n\n##### [link](https://material.angular.io/cdk/table/overview\\#fixedlayout) `fixedLayout`\n\nThe CDK table measures the dimensions of sticky elements before applying the styles that make them\n\"stick\". Because native tables derive column widths from the content within each cell, these\ndimensions are re-checked when the underlying data changes.\n\nEnabling `fixedLayout` will enforce uniform column widths, so the table can reliably cache and reuse\nthem when calculating sticky styles. This can reduce rendering latency for large native tables.\n\n```html\n<table cdk-table [dataSource]=\"dataSource\" fixedLayout>\n\n```\n\n##### [link](https://material.angular.io/cdk/table/overview\\#trackby) `trackBy`\n\nTo improve performance, a `trackBy` function can be provided to the table similar to Angular\u2019s\n[`ngFor` `trackBy`](https://angular.dev/api/common/NgForOf?tab=usage-notes). This informs the\ntable how to uniquely identify rows to track how the data changes with each update.\n\n```html\n<table cdk-table [dataSource]=\"dataSource\" [trackBy]=\"myTrackById\">\n\n```\n\n##### [link](https://material.angular.io/cdk/table/overview\\#recyclerows) `recycleRows`\n\nBy default, `CdkTable` creates and destroys an internal Angular view for each row. This allows rows\nto participate in animations and to toggle between different row templates with `cdkRowDefWhen`. If\nyou don't need these features, you can instruct the table to cache and recycle rows by specifying\n`recycleRows`.\n\n```html\n<table cdk-table [dataSource]=\"dataSource\" recycleRows>\n\n```\n\n### [link](https://material.angular.io/cdk/table/overview\\#alternate-html-to-using-native-table)  Alternate HTML to using native table\n\nThe CDK table does not require that you use a native HTML table. If you want to have full control\nover the style of the table, it may be easier to follow an alternative template approach that does\nnot use the native table element tags.\n\nThis alternative approach replaces the native table element tags with the CDK table directive\nselectors. For example, `<table cdk-table>` becomes `<cdk-table>`; `<tr cdk-row` \\> becomes\n`<cdk-row>`. The following shows a previous example using this alternative template:\n\n```html\n<cdk-table [dataSource]=\"dataSource\">\n  <!-- User name Definition -->\n  <ng-container cdkColumnDef=\"username\">\n    <cdk-header-cell *cdkHeaderCellDef> User name </cdk-header-cell>\n    <cdk-cell *cdkCellDef=\"let row\"> {{row.username}} </cdk-cell>\n  </ng-container>\n\n  <!-- Age Definition -->\n  <ng-container cdkColumnDef=\"age\">\n    <cdk-header-cell *cdkHeaderCellDef> Age </cdk-header-cell>\n    <cdk-cell *cdkCellDef=\"let row\"> {{row.age}} </cdk-cell>\n  </ng-container>\n\n  <!-- Title Definition -->\n  <ng-container cdkColumnDef=\"title\">\n    <cdk-header-cell *cdkHeaderCellDef> Title </cdk-header-cell>\n    <cdk-cell *cdkCellDef=\"let row\"> {{row.title}} </cdk-cell>\n  </ng-container>\n\n  <!-- Header and Row Declarations -->\n  <cdk-header-row *cdkHeaderRowDef=\"['username', 'age', 'title']\"></cdk-header-row>\n  <cdk-row *cdkRowDef=\"let row; columns: ['username', 'age', 'title']\"></cdk-row>\n</cdk-table>\n\n```\n\nFor an example of how to render the structure as a table, see the\n[documentation for `<mat-table>`](https://material.angular.io/components/table) which includes\nthe style support for this approach.\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Basic CDK data-table example in StackBlitz\n\nCopy link to example\n\nView code",
  "title": "Table | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/cdk/table/overview"
}