{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for list\n\n## API reference for Angular Material list\n\n`\n          import {MatListModule} from '@angular/material/list';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/list/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/list/api\\#MatListOption) `MatListOption`\n\nSelector:mat-list-option\n\nExported as:matListOption\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`color: ThemePalette` | Theme color of the list option. This sets the color of the checkbox/radio.<br>This API is supported in M2 themes only, it has no effect in M3 themes. For color customization<br>in M3, see [https://material.angular.io/components/list/styling](https://material.angular.io/components/list/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input()<br>`disableRipple: boolean` | Whether ripples for list items are disabled. |\n| @Input()<br>`disabled: boolean` | Whether the list-item is disabled. |\n| @Input()<br>`lines: string | number` | The number of lines this list item should reserve space for. If not specified,<br>lines are inferred based on the projected content.<br>Explicitly specifying the number of lines is useful if you want to acquire additional<br>space and enable the wrapping of text. The unscoped text content of a list item will<br>always be able to take up the remaining space of the item, unless it represents the title.<br>A maximum of three lines is supported as per the Material Design specification. |\n| @Input()<br>`selected: boolean` | Whether the option is selected. |\n| @Input()<br>`togglePosition: MatListOptionTogglePosition` | Whether the label should appear before or after the checkbox/radio. Defaults to 'after' |\n| @Input()<br>`value: any` | Value of the option |\n| @Input()<br>Deprecated<br> <br>`checkboxPosition: MatListOptionTogglePosition` | Whether the label should appear before or after the checkbox/radio. Defaults to 'after' |\n\n##### Methods\n\n| focus |\n| --- |\n| Allows for programmatic focusing of the option. |\n\n| getLabel |\n| --- |\n| Gets the text label of the list option. Used for the typeahead functionality in the list. |\n\n| toggle |\n| --- |\n| Toggles the selection state of the option. |\n\n#### [link](https://material.angular.io/components/list/api\\#MatActionList) `MatActionList`\n\nSelector:mat-action-list\n\nExported as:matActionList\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`disableRipple: boolean` | Whether ripples for all list items is disabled. |\n| @Input()<br>`disabled: boolean` | Whether the entire list is disabled. When disabled, the list itself and each of its list items<br>are disabled. |\n\n#### [link](https://material.angular.io/components/list/api\\#MatList) `MatList`\n\nSelector:mat-list\n\nExported as:matList\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`disableRipple: boolean` | Whether ripples for all list items is disabled. |\n| @Input()<br>`disabled: boolean` | Whether the entire list is disabled. When disabled, the list itself and each of its list items<br>are disabled. |\n\n#### [link](https://material.angular.io/components/list/api\\#MatListItem) `MatListItem`\n\nSelector:mat-list-itema\\[mat-list-item\\]button\\[mat-list-item\\]\n\nExported as:matListItem\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`activated: boolean` | Indicates whether an item in a `<mat-nav-list>` is the currently active page. |\n| @Input()<br>`disableRipple: boolean` | Whether ripples for list items are disabled. |\n| @Input()<br>`disabled: boolean` | Whether the list-item is disabled. |\n| @Input()<br>`lines: string | number` | The number of lines this list item should reserve space for. If not specified,<br>lines are inferred based on the projected content.<br>Explicitly specifying the number of lines is useful if you want to acquire additional<br>space and enable the wrapping of text. The unscoped text content of a list item will<br>always be able to take up the remaining space of the item, unless it represents the title.<br>A maximum of three lines is supported as per the Material Design specification. |\n\n#### [link](https://material.angular.io/components/list/api\\#MatNavList) `MatNavList`\n\nSelector:mat-nav-list\n\nExported as:matNavList\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`disableRipple: boolean` | Whether ripples for all list items is disabled. |\n| @Input()<br>`disabled: boolean` | Whether the entire list is disabled. When disabled, the list itself and each of its list items<br>are disabled. |\n\n#### [link](https://material.angular.io/components/list/api\\#MatSelectionList) `MatSelectionList`\n\nSelector:mat-selection-list\n\nExported as:matSelectionList\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`color: ThemePalette` | Theme color of the selection list. This sets the checkbox color for all<br>list options. This API is supported in M2 themes only, it has no effect in<br>M3 themes. For color customization in M3, see [https://material.angular.io/components/list/styling](https://material.angular.io/components/list/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input()<br>`compareWith: (o1: any, o2: any) => boolean` | Function used for comparing an option against the selected value when determining which<br>options should appear as selected. The first argument is the value of an options. The second<br>one is a value from the selected value. A boolean must be returned. |\n| @Input()<br>`disableRipple: boolean` | Whether ripples for all list items is disabled. |\n| @Input()<br>`disabled: boolean` | Whether the _entire_ selection list is disabled. When true, each list item is also disabled<br>and each list item is removed from the tab order (has tabindex=\"-1\"). |\n| @Input()<br>`hideSingleSelectionIndicator: boolean` | Whether radio indicator for all list items is hidden. |\n| @Input()<br>`multiple: boolean` | Whether selection is limited to one or multiple items (default multiple). |\n| @Output()<br>`selectionChange: EventEmitter<MatSelectionListChange>` | Emits a change event whenever the selected state of an option changes. |\n| `options: QueryList<MatListOption>` | The option components contained within this selection-list. |\n| `selectedOptions: SelectionModel<MatListOption>` | The currently selected options. |\n\n##### Methods\n\n| deselectAll |\n| --- |\n| Deselects all of the options. Returns the options that changed as a result. |\n| Returns |\n| --- |\n| `MatListOption[]` |  |\n\n| focus |\n| --- |\n| Focuses the selection list. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n\n| selectAll |\n| --- |\n| Selects all of the options. Returns the options that changed as a result. |\n| Returns |\n| --- |\n| `MatListOption[]` |  |\n\n#### [link](https://material.angular.io/components/list/api\\#MatListItemTitle) `MatListItemTitle`\n\nDirective capturing the title of a list item. A list item usually consists of a\ntitle and optional secondary or tertiary lines.\n\nText content for the title never wraps. There can only be a single title per list item.\n\nSelector:\\[matListItemTitle\\]\n\n#### [link](https://material.angular.io/components/list/api\\#MatListItemLine) `MatListItemLine`\n\nDirective capturing a line in a list item. A list item usually consists of a\ntitle and optional secondary or tertiary lines.\n\nText content inside a line never wraps. There can be at maximum two lines per list item.\n\nSelector:\\[matListItemLine\\]\n\n#### [link](https://material.angular.io/components/list/api\\#MatListItemMeta) `MatListItemMeta`\n\nDirective matching an optional meta section for list items.\n\nList items can reserve space at the end of an item to display a control,\nbutton or additional text content.\n\nSelector:\\[matListItemMeta\\]\n\n#### [link](https://material.angular.io/components/list/api\\#MatListItemAvatar) `MatListItemAvatar`\n\nDirective matching an optional avatar within a list item.\n\nList items can reserve space at the beginning of an item to display an avatar.\n\nSelector:\\[matListItemAvatar\\]\n\n#### [link](https://material.angular.io/components/list/api\\#MatListItemIcon) `MatListItemIcon`\n\nDirective matching an optional icon within a list item.\n\nList items can reserve space at the beginning of an item to display an icon.\n\nSelector:\\[matListItemIcon\\]\n\n### [link](https://material.angular.io/components/list/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/list/api\\#MatSelectionListChange) `MatSelectionListChange`\n\nChange event that is being fired whenever the selected state of an option changes.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `options: MatListOption[]` | Reference to the options that have been changed. |\n| `source: MatSelectionList` | Reference to the selection list that emitted the event. |\n\n### [link](https://material.angular.io/components/list/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/list/api\\#MatListConfig) `MatListConfig`\n\nObject that can be used to configure the default options for the list module.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `hideSingleSelectionIndicator: boolean` | Whether icon indicators should be hidden for single-selection. |\n\n### [link](https://material.angular.io/components/list/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/list/api\\#MatListOptionTogglePosition) `MatListOptionTogglePosition`\n\nType describing possible positions of a checkbox or radio in a list option\nwith respect to the list item's text.\n\n```docs-markdown-code\ntype MatListOptionTogglePosition = 'before' | 'after';\n\n```\n\n### [link](https://material.angular.io/components/list/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/list/api\\#MAT_LIST) `MAT_LIST`\n\nInjection token that can be used to inject instances of `MatList`. It serves as\nalternative token to the actual `MatList` class which could cause unnecessary\nretention of the class and its component metadata.\n\n```docs-markdown-code\nconst MAT_LIST: InjectionToken<MatList>;\n\n```\n\n#### [link](https://material.angular.io/components/list/api\\#MAT_NAV_LIST) `MAT_NAV_LIST`\n\nInjection token that can be used to inject instances of `MatNavList`. It serves as\nalternative token to the actual `MatNavList` class which could cause unnecessary\nretention of the class and its component metadata.\n\n```docs-markdown-code\nconst MAT_NAV_LIST: InjectionToken<MatNavList>;\n\n```\n\n#### [link](https://material.angular.io/components/list/api\\#MAT_SELECTION_LIST_VALUE_ACCESSOR) `MAT_SELECTION_LIST_VALUE_ACCESSOR`\n\n```docs-markdown-code\nconst MAT_SELECTION_LIST_VALUE_ACCESSOR: any;\n\n```\n\n#### [link](https://material.angular.io/components/list/api\\#MAT_LIST_CONFIG) `MAT_LIST_CONFIG`\n\nInjection token that can be used to provide the default options for the list module.\n\n```docs-markdown-code\nconst MAT_LIST_CONFIG: InjectionToken<MatListConfig>;\n\n```\n\n## API reference for Angular Material list-testing\n\n`\n          import {MatSubheaderHarness} from '@angular/material/list/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/list/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/list/api\\#MatSubheaderHarness) `MatSubheaderHarness`extends [ComponentHarness](https://material.angular.io/components/list/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a list subheader.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-subheader'` |  |\n\n##### Methods\n\n| async<br> <br>getText |\n| --- |\n| Gets the full text content of the list item (including text from any font icons). |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Parameters |\n| --- |\n| options<br> `SubheaderHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `HarnessPredicate<MatSubheaderHarness>` |  |\n\n#### [link](https://material.angular.io/components/list/api\\#MatActionListHarness) `MatActionListHarness`\n\nHarness for interacting with a action-list in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-action-list'` | The selector for the host element of a `MatActionList` instance. |\n\n##### Methods\n\n| getItems |\n| --- |\n| Gets a list of harnesses representing the items in this list. |\n| Parameters |\n| --- |\n| filters?<br> `F` | Optional filters used to narrow which harnesses are included |\n| Returns |\n| --- |\n| `Promise<C[]>` | The list of items matching the given filters. |\n\n| getItemsGroupedByDividers |\n| --- |\n| Gets a list of sub-lists representing the list items grouped by dividers. If the list has no<br>dividers it is represented as a list with a single sub-list. |\n| Parameters |\n| --- |\n| filters?<br> `F` | Optional filters used to narrow which list item harnesses are included |\n| Returns |\n| --- |\n| `Promise<C[][]>` | The list of items matching the given filters, grouped into sub-lists by divider. |\n\n| getItemsGroupedBySubheader |\n| --- |\n| Gets a list of `ListSection` representing the list items grouped by subheaders. If the list has<br>no subheaders it is represented as a single `ListSection` with an undefined `heading` property. |\n| Parameters |\n| --- |\n| filters?<br> `F` | Optional filters used to narrow which list item harnesses are included |\n| Returns |\n| --- |\n| `Promise<ListSection<C>[]>` | The list of items matching the given filters, grouped into sections by subheader. |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader: false; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<[<br>]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item?: false | F; subheader: false; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<C[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader?: false | SubheaderHarnessFilters; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<MatSubheaderHarness[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader: false; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<MatDividerHarness[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item?: false | F; subheader?: false | SubheaderHarnessFilters; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<(C | MatSubheaderHarness)[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item?: false | F; subheader: false; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<(C | MatDividerHarness)[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader?: false | SubheaderHarnessFilters; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<(MatSubheaderHarness | MatDividerHarness)[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters?<br> `{ item?: false | F; subheader?: false | SubheaderHarnessFilters; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<(C | MatSubheaderHarness | MatDividerHarness)[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for an action list with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `ActionListHarnessFilters = {}` | Options for filtering which action list instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/list/api\\#MatActionListItemHarness) `MatActionListItemHarness`\n\nHarness for interacting with an action list item.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| ``static\u00a0hostSelector: `${MatActionListHarness.hostSelector} .mat-mdc-list-item` `` | The selector for the host element of a `MatListItem` instance. |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the action list item. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>click |\n| --- |\n| Clicks on the action list item. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the action list item. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| getFullText |\n| --- |\n| Gets the full text content of the list item, excluding text<br>from icons and avatars. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| getSecondaryText |\n| --- |\n| Gets the secondary line text of the list item. Null if the list item<br>does not have a secondary line. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getTertiaryText |\n| --- |\n| Gets the tertiary line text of the list item. Null if the list item<br>does not have a tertiary line. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getTitle |\n| --- |\n| Gets the title of the list item. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| getType |\n| --- |\n| Gets the type of the list item, currently describing how many lines there are. |\n| Returns |\n| --- |\n| `Promise<MatListItemType>` |  |\n\n| hasAvatar |\n| --- |\n| Whether this list item has an avatar. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| hasIcon |\n| --- |\n| Whether this list item has an icon. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| isDisabled |\n| --- |\n| Whether the list item is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the action list item is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a list item with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `ActionListItemHarnessFilters = {}` | Options for filtering which action list item instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n| Deprecated<br> <br>getText |\n| --- |\n| Gets the full text content of the list item, excluding text<br>from icons and avatars. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n#### [link](https://material.angular.io/components/list/api\\#MatListHarness) `MatListHarness`\n\nHarness for interacting with a list in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-list'` | The selector for the host element of a `MatList` instance. |\n\n##### Methods\n\n| getItems |\n| --- |\n| Gets a list of harnesses representing the items in this list. |\n| Parameters |\n| --- |\n| filters?<br> `F` | Optional filters used to narrow which harnesses are included |\n| Returns |\n| --- |\n| `Promise<C[]>` | The list of items matching the given filters. |\n\n| getItemsGroupedByDividers |\n| --- |\n| Gets a list of sub-lists representing the list items grouped by dividers. If the list has no<br>dividers it is represented as a list with a single sub-list. |\n| Parameters |\n| --- |\n| filters?<br> `F` | Optional filters used to narrow which list item harnesses are included |\n| Returns |\n| --- |\n| `Promise<C[][]>` | The list of items matching the given filters, grouped into sub-lists by divider. |\n\n| getItemsGroupedBySubheader |\n| --- |\n| Gets a list of `ListSection` representing the list items grouped by subheaders. If the list has<br>no subheaders it is represented as a single `ListSection` with an undefined `heading` property. |\n| Parameters |\n| --- |\n| filters?<br> `F` | Optional filters used to narrow which list item harnesses are included |\n| Returns |\n| --- |\n| `Promise<ListSection<C>[]>` | The list of items matching the given filters, grouped into sections by subheader. |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader: false; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<[<br>]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item?: false | F; subheader: false; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<C[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader?: false | SubheaderHarnessFilters; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<MatSubheaderHarness[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader: false; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<MatDividerHarness[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item?: false | F; subheader?: false | SubheaderHarnessFilters; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<(C | MatSubheaderHarness)[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item?: false | F; subheader: false; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<(C | MatDividerHarness)[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader?: false | SubheaderHarnessFilters; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<(MatSubheaderHarness | MatDividerHarness)[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters?<br> `{ item?: false | F; subheader?: false | SubheaderHarnessFilters; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<(C | MatSubheaderHarness | MatDividerHarness)[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a list with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `ListHarnessFilters = {}` | Options for filtering which list instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/list/api\\#MatListItemHarness) `MatListItemHarness`\n\nHarness for interacting with a list item.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| ``static\u00a0hostSelector: `${MatListHarness.hostSelector} .mat-mdc-list-item` `` | The selector for the host element of a `MatListItem` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| getFullText |\n| --- |\n| Gets the full text content of the list item, excluding text<br>from icons and avatars. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| getSecondaryText |\n| --- |\n| Gets the secondary line text of the list item. Null if the list item<br>does not have a secondary line. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getTertiaryText |\n| --- |\n| Gets the tertiary line text of the list item. Null if the list item<br>does not have a tertiary line. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getTitle |\n| --- |\n| Gets the title of the list item. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| getType |\n| --- |\n| Gets the type of the list item, currently describing how many lines there are. |\n| Returns |\n| --- |\n| `Promise<MatListItemType>` |  |\n\n| hasAvatar |\n| --- |\n| Whether this list item has an avatar. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| hasIcon |\n| --- |\n| Whether this list item has an icon. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| isDisabled |\n| --- |\n| Whether the list item is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a list item with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `ListItemHarnessFilters = {}` | Options for filtering which list item instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n| Deprecated<br> <br>getText |\n| --- |\n| Gets the full text content of the list item, excluding text<br>from icons and avatars. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n#### [link](https://material.angular.io/components/list/api\\#MatNavListHarness) `MatNavListHarness`\n\nHarness for interacting with a mat-nav-list in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-nav-list'` | The selector for the host element of a `MatNavList` instance. |\n\n##### Methods\n\n| getItems |\n| --- |\n| Gets a list of harnesses representing the items in this list. |\n| Parameters |\n| --- |\n| filters?<br> `F` | Optional filters used to narrow which harnesses are included |\n| Returns |\n| --- |\n| `Promise<C[]>` | The list of items matching the given filters. |\n\n| getItemsGroupedByDividers |\n| --- |\n| Gets a list of sub-lists representing the list items grouped by dividers. If the list has no<br>dividers it is represented as a list with a single sub-list. |\n| Parameters |\n| --- |\n| filters?<br> `F` | Optional filters used to narrow which list item harnesses are included |\n| Returns |\n| --- |\n| `Promise<C[][]>` | The list of items matching the given filters, grouped into sub-lists by divider. |\n\n| getItemsGroupedBySubheader |\n| --- |\n| Gets a list of `ListSection` representing the list items grouped by subheaders. If the list has<br>no subheaders it is represented as a single `ListSection` with an undefined `heading` property. |\n| Parameters |\n| --- |\n| filters?<br> `F` | Optional filters used to narrow which list item harnesses are included |\n| Returns |\n| --- |\n| `Promise<ListSection<C>[]>` | The list of items matching the given filters, grouped into sections by subheader. |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader: false; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<[<br>]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item?: false | F; subheader: false; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<C[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader?: false | SubheaderHarnessFilters; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<MatSubheaderHarness[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader: false; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<MatDividerHarness[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item?: false | F; subheader?: false | SubheaderHarnessFilters; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<(C | MatSubheaderHarness)[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item?: false | F; subheader: false; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<(C | MatDividerHarness)[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader?: false | SubheaderHarnessFilters; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<(MatSubheaderHarness | MatDividerHarness)[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters?<br> `{ item?: false | F; subheader?: false | SubheaderHarnessFilters; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<(C | MatSubheaderHarness | MatDividerHarness)[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a nav list with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `NavListHarnessFilters = {}` | Options for filtering which nav list instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/list/api\\#MatNavListItemHarness) `MatNavListItemHarness`\n\nHarness for interacting with a nav-list item.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| ``static\u00a0hostSelector: `${MatNavListHarness.hostSelector} .mat-mdc-list-item` `` | The selector for the host element of a `MatListItem` instance. |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the nav list item. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>click |\n| --- |\n| Clicks on the nav list item. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the nav list item. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| getFullText |\n| --- |\n| Gets the full text content of the list item, excluding text<br>from icons and avatars. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getHref |\n| --- |\n| Gets the href for this nav list item. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getSecondaryText |\n| --- |\n| Gets the secondary line text of the list item. Null if the list item<br>does not have a secondary line. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getTertiaryText |\n| --- |\n| Gets the tertiary line text of the list item. Null if the list item<br>does not have a tertiary line. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getTitle |\n| --- |\n| Gets the title of the list item. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| getType |\n| --- |\n| Gets the type of the list item, currently describing how many lines there are. |\n| Returns |\n| --- |\n| `Promise<MatListItemType>` |  |\n\n| hasAvatar |\n| --- |\n| Whether this list item has an avatar. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| hasIcon |\n| --- |\n| Whether this list item has an icon. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isActivated |\n| --- |\n| Whether the list item is activated. Should only be used for nav list items. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| isDisabled |\n| --- |\n| Whether the list item is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the nav list item is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a nav list item with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `NavListItemHarnessFilters = {}` | Options for filtering which nav list item instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n| Deprecated<br> <br>getText |\n| --- |\n| Gets the full text content of the list item, excluding text<br>from icons and avatars. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n#### [link](https://material.angular.io/components/list/api\\#MatSelectionListHarness) `MatSelectionListHarness`\n\nHarness for interacting with a selection-list in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-selection-list'` | The selector for the host element of a `MatSelectionList` instance. |\n\n##### Methods\n\n| async<br> <br>deselectItems |\n| --- |\n| Deselects all items matching any of the given filters. |\n| Parameters |\n| --- |\n| filters<br> `` | Filters that specify which items should be deselected. |\n| ...filters<br> `ListItemHarnessFilters[]` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| getItems |\n| --- |\n| Gets a list of harnesses representing the items in this list. |\n| Parameters |\n| --- |\n| filters?<br> `F` | Optional filters used to narrow which harnesses are included |\n| Returns |\n| --- |\n| `Promise<C[]>` | The list of items matching the given filters. |\n\n| getItemsGroupedByDividers |\n| --- |\n| Gets a list of sub-lists representing the list items grouped by dividers. If the list has no<br>dividers it is represented as a list with a single sub-list. |\n| Parameters |\n| --- |\n| filters?<br> `F` | Optional filters used to narrow which list item harnesses are included |\n| Returns |\n| --- |\n| `Promise<C[][]>` | The list of items matching the given filters, grouped into sub-lists by divider. |\n\n| getItemsGroupedBySubheader |\n| --- |\n| Gets a list of `ListSection` representing the list items grouped by subheaders. If the list has<br>no subheaders it is represented as a single `ListSection` with an undefined `heading` property. |\n| Parameters |\n| --- |\n| filters?<br> `F` | Optional filters used to narrow which list item harnesses are included |\n| Returns |\n| --- |\n| `Promise<ListSection<C>[]>` | The list of items matching the given filters, grouped into sections by subheader. |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader: false; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<[<br>]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item?: false | F; subheader: false; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<C[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader?: false | SubheaderHarnessFilters; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<MatSubheaderHarness[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader: false; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<MatDividerHarness[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item?: false | F; subheader?: false | SubheaderHarnessFilters; divider: false; }` |  |\n| Returns |\n| --- |\n| `Promise<(C | MatSubheaderHarness)[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item?: false | F; subheader: false; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<(C | MatDividerHarness)[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters<br> `{ item: false; subheader?: false | SubheaderHarnessFilters; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<(MatSubheaderHarness | MatDividerHarness)[]>` |  |\n\n| getItemsWithSubheadersAndDividers |\n| --- |\n| Parameters |\n| --- |\n| filters?<br> `{ item?: false | F; subheader?: false | SubheaderHarnessFilters; divider?: false | DividerHarnessFilters; }` |  |\n| Returns |\n| --- |\n| `Promise<(C | MatSubheaderHarness | MatDividerHarness)[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the selection list is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>selectItems |\n| --- |\n| Selects all items matching any of the given filters. |\n| Parameters |\n| --- |\n| filters<br> `` | Filters that specify which items should be selected. |\n| ...filters<br> `ListOptionHarnessFilters[]` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a selection list with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `SelectionListHarnessFilters = {}` | Options for filtering which selection list instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/list/api\\#MatListOptionHarness) `MatListOptionHarness`\n\nHarness for interacting with a list option.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-list-option'` | The selector for the host element of a `MatListOption` instance. |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the list option. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>deselect |\n| --- |\n| Puts the list option in an unchecked state by toggling it if it is currently<br>checked, or doing nothing if it is already unchecked. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the list option. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getCheckboxPosition |\n| --- |\n| Gets the position of the checkbox relative to the list option content. |\n| Returns |\n| --- |\n| `Promise<MatListOptionTogglePosition>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| getFullText |\n| --- |\n| Gets the full text content of the list item, excluding text<br>from icons and avatars. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getRadioPosition |\n| --- |\n| Gets the position of the radio relative to the list option content. |\n| Returns |\n| --- |\n| `Promise<MatListOptionTogglePosition>` |  |\n\n| getSecondaryText |\n| --- |\n| Gets the secondary line text of the list item. Null if the list item<br>does not have a secondary line. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getTertiaryText |\n| --- |\n| Gets the tertiary line text of the list item. Null if the list item<br>does not have a tertiary line. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getTitle |\n| --- |\n| Gets the title of the list item. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| getType |\n| --- |\n| Gets the type of the list item, currently describing how many lines there are. |\n| Returns |\n| --- |\n| `Promise<MatListItemType>` |  |\n\n| hasAvatar |\n| --- |\n| Whether this list item has an avatar. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| hasIcon |\n| --- |\n| Whether this list item has an icon. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| isDisabled |\n| --- |\n| Whether the list item is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the list option is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isSelected |\n| --- |\n| Whether the list option is selected. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>select |\n| --- |\n| Puts the list option in a checked state by toggling it if it is currently<br>unchecked, or doing nothing if it is already checked. |\n\n| async<br> <br>toggle |\n| --- |\n| Toggles the checked state of the checkbox. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a list option with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `ListOptionHarnessFilters = {}` | Options for filtering which list option instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n| Deprecated<br> <br>getText |\n| --- |\n| Gets the full text content of the list item, excluding text<br>from icons and avatars. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n### [link](https://material.angular.io/components/list/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/list/api\\#ListHarnessFilters) `ListHarnessFilters`\n\n#### [link](https://material.angular.io/components/list/api\\#ActionListHarnessFilters) `ActionListHarnessFilters`\n\n#### [link](https://material.angular.io/components/list/api\\#NavListHarnessFilters) `NavListHarnessFilters`\n\n#### [link](https://material.angular.io/components/list/api\\#SelectionListHarnessFilters) `SelectionListHarnessFilters`\n\n#### [link](https://material.angular.io/components/list/api\\#BaseListItemHarnessFilters) `BaseListItemHarnessFilters`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `fullText: string | RegExp` |  |\n| `secondaryText: string | RegExp | null` |  |\n| `tertiaryText: string | RegExp | null` |  |\n| `title: string | RegExp` |  |\n| Deprecated<br> <br>`text: string | RegExp` |  |\n\n#### [link](https://material.angular.io/components/list/api\\#ListItemHarnessFilters) `ListItemHarnessFilters`\n\n#### [link](https://material.angular.io/components/list/api\\#ActionListItemHarnessFilters) `ActionListItemHarnessFilters`\n\n#### [link](https://material.angular.io/components/list/api\\#NavListItemHarnessFilters) `NavListItemHarnessFilters`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `activated: boolean` |  |\n| `href: string | RegExp | null` |  |\n\n#### [link](https://material.angular.io/components/list/api\\#ListOptionHarnessFilters) `ListOptionHarnessFilters`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `selected: boolean` |  |\n\n#### [link](https://material.angular.io/components/list/api\\#SubheaderHarnessFilters) `SubheaderHarnessFilters`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `text: string | RegExp` |  |\n\nList\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nUse the \\`getFullText\\` method instead. Will be removed in v16.0.0 or later.\n\nUse the \\`fullText\\` filter instead. Will be removed in v16.0.0 or later.\n\nCopy import to the clipboard\n\nUse \\`togglePosition\\` instead. Will be removed in v17.0.0 or later.",
  "title": "List | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/list/api"
}