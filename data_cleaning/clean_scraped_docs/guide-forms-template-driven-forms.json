{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backForms\n  - [Overview](https://angular.dev/guide/forms)\n  - [Reactive forms](https://angular.dev/guide/forms/reactive-forms)\n  - [Strictly typed reactive forms](https://angular.dev/guide/forms/typed-forms)\n  - [Template-driven forms](https://angular.dev/guide/forms/template-driven-forms)\n  - [Validate form input](https://angular.dev/guide/forms/form-validation)\n  - [Building dynamic forms](https://angular.dev/guide/forms/dynamic-forms)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nThis tutorial shows you how to create a template-driven form. The control elements in the form are bound to data properties that have input validation. The input validation helps maintain data integrity and styling to improve the user experience.\n\nTemplate-driven forms use [two-way data binding](https://angular.dev/guide/forms/guide/templates/two-way-binding) to update the data model in the component as changes are made in the template and vice versa.\n\n### Template vs Reactive forms\n\nAngular supports two design approaches for interactive forms. Template-driven forms allow you to use form-specific directives in your Angular template. Reactive forms provide a model-driven approach to building forms.\n\nTemplate-driven forms are a great choice for small or simple forms, while reactive forms are more scalable and suitable for complex forms. For a comparison of the two approaches, see [Choosing an approach](https://angular.dev/guide/forms/guide/forms#choosing-an-approach)\n\nYou can build almost any kind of form with an Angular template \u2014login forms, contact forms, and pretty much any business form.\nYou can lay out the controls creatively and bind them to the data in your object model.\nYou can specify validation rules and display validation errors, conditionally allow input from specific controls, trigger built-in visual feedback, and much more.\n\n## [Objectives](https://angular.dev/guide/forms/template-driven-forms\\#objectives)\n\nThis tutorial teaches you how to do the following:\n\n- Build an Angular form with a component and template\n- Use `ngModel` to create two-way data bindings for reading and writing input-control values\n- Provide visual feedback using special CSS classes that track the state of the controls\n- Display validation errors to users and conditionally allow input from form controls based on the form status\n- Share information across HTML elements using [template reference variables](https://angular.dev/guide/forms/guide/templates/variables#template-reference-variables)\n\n## [Build a template-driven form](https://angular.dev/guide/forms/template-driven-forms\\#build-a-template-driven-form)\n\nTemplate-driven forms rely on directives defined in the `FormsModule`.\n\n| Directives | Details |\n| :-- | :-- |\n| `NgModel` | Reconciles value changes in the attached form element with changes in the data model, allowing you to respond to user input with input validation and error handling. |\n| `NgForm` | Creates a top-level `FormGroup` instance and binds it to a `<form>` element to track aggregated form value and validation status. As soon as you import `FormsModule`, this directive becomes active by default on all `<form>` tags. You don't need to add a special selector. |\n| `NgModelGroup` | Creates and binds a `FormGroup` instance to a DOM element. |\n\n### [Step overview](https://angular.dev/guide/forms/template-driven-forms\\#step-overview)\n\nIn the course of this tutorial, you bind a sample form to data and handle user input using the following steps.\n\n1. Build the basic form.\n   - Define a sample data model\n   - Include required infrastructure such as the `FormsModule`\n2. Bind form controls to data properties using the `ngModel` directive and two-way data-binding syntax.\n\n   - Examine how `ngModel` reports control states using CSS classes\n   - Name controls to make them accessible to `ngModel`\n3. Track input validity and control status using `ngModel`.\n\n   - Add custom CSS to provide visual feedback on the status\n   - Show and hide validation-error messages\n4. Respond to a native HTML button-click event by adding to the model data.\n5. Handle form submission using the [`ngSubmit`](https://angular.dev/guide/forms/api/forms/NgForm#properties) output property of the form.\n\n   - Disable the **Submit** button until the form is valid\n   - After submit, swap out the finished form for different content on the page\n\n## [Build the form](https://angular.dev/guide/forms/template-driven-forms\\#build-the-form)\n\n1. The provided sample application creates the `Actor` class which defines the data model reflected in the form.\n\n### src/app/actor.ts\n\n```\n      export class Actor {  constructor(    public id: number,    public name: string,    public skill: string,    public studio?: string,  ) {}}\n\n```\n\ncheck\n\n1. The form layout and details are defined in the `ActorFormComponent` class.\n\n\n\n\ncheck\n\n```\n         import {Component} from '@angular/core';import {Actor} from '../actor';import {FormsModule} from '@angular/forms';import {JsonPipe} from '@angular/common';@Component({  selector: 'app-actor-form',  templateUrl: './actor-form.component.html',  imports: [FormsModule, JsonPipe],})export class ActorFormComponent {  skills = ['Method Acting', 'Singing', 'Dancing', 'Swordfighting'];  model = new Actor(18, 'Tom Cruise', this.skills[3], 'CW Productions');  submitted = false;  onSubmit() {    this.submitted = true;  }  newActor() {    this.model = new Actor(42, '', '');  }  heroine(): Actor {    const myActress = new Actor(42, 'Marilyn Monroe', 'Singing');    console.log('My actress is called ' + myActress.name); // \"My actress is called Marilyn\"    return myActress;  }  //////// NOT SHOWN IN DOCS ////////  // Reveal in html:  //   Name via form.controls = {{showFormControls(actorForm)}}  showFormControls(form: any) {    return form && form.controls.name && form.controls.name.value; // Tom Cruise  }  /////////////////////////////\n...}\n\n```\n\n\n\n\n\n\nThe component's `selector` value of \"app-actor-form\" means you can drop this form in a parent template using the `<app-actor-form>` tag.\n\n2. The following code creates a new actor instance, so that the initial form can show an example actor.\n\n\n\n\ncheck\n\n```\n         import {Component} from '@angular/core';import {Actor} from '../actor';import {FormsModule} from '@angular/forms';import {JsonPipe} from '@angular/common';@Component({  selector: 'app-actor-form',  templateUrl: './actor-form.component.html',  imports: [FormsModule, JsonPipe],})export class ActorFormComponent {  skills = ['Method Acting', 'Singing', 'Dancing', 'Swordfighting'];  model = new Actor(18, 'Tom Cruise', this.skills[3], 'CW Productions');  submitted = false;  onSubmit() {    this.submitted = true;  }  newActor() {    this.model = new Actor(42, '', '');  }  heroine(): Actor {    const myActress = new Actor(42, 'Marilyn Monroe', 'Singing');    console.log('My actress is called ' + myActress.name); // \"My actress is called Marilyn\"    return myActress;  }  //////// NOT SHOWN IN DOCS ////////  // Reveal in html:  //   Name via form.controls = {{showFormControls(actorForm)}}  showFormControls(form: any) {    return form && form.controls.name && form.controls.name.value; // Tom Cruise  }  /////////////////////////////}\n\n```\n\n\n\n\n\n\nThis demo uses dummy data for `model` and `skills`.\nIn a real app, you would inject a data service to get and save real data, or expose these properties as inputs and outputs.\n\n3. The component enables the Forms feature by importing the `FormsModule` module.\n\n\n\n\ncheck\n\n```\n         import {Component} from '@angular/core';import {Actor} from '../actor';import {FormsModule} from '@angular/forms';import {JsonPipe} from '@angular/common';@Component({  selector: 'app-actor-form',  templateUrl: './actor-form.component.html',  imports: [FormsModule, JsonPipe],})export class ActorFormComponent {  skills = ['Method Acting', 'Singing', 'Dancing', 'Swordfighting'];  model = new Actor(18, 'Tom Cruise', this.skills[3], 'CW Productions');  submitted = false;  onSubmit() {    this.submitted = true;  }  newActor() {    this.model = new Actor(42, '', '');  }  heroine(): Actor {    const myActress = new Actor(42, 'Marilyn Monroe', 'Singing');    console.log('My actress is called ' + myActress.name); // \"My actress is called Marilyn\"    return myActress;  }  //////// NOT SHOWN IN DOCS ////////  // Reveal in html:  //   Name via form.controls = {{showFormControls(actorForm)}}  showFormControls(form: any) {    return form && form.controls.name && form.controls.name.value; // Tom Cruise  }  /////////////////////////////}\n\n```\n\n4. The form is displayed in the application layout defined by the root component's template.\n\n\n\n\n\n### src/app/app.component.html\n\n\n\n\n\n```\n         <app-actor-form />\n\n```\n\ncheck\n\nThe initial template defines the layout for a form with two form groups and a submit button.\nThe form groups correspond to two properties of the Actor data model, name and studio.\nEach group has a label and a box for user input.\n\n\n   - The **Name** `<input>` control element has the HTML5 `required` attribute\n   - The **Studio** `<input>` control element does not because `studio` is optional\n\nThe **Submit** button has some classes on it for styling.\nAt this point, the form layout is all plain HTML5, with no bindings or directives.\n\n5. The sample form uses some style classes from [Twitter Bootstrap](https://getbootstrap.com/css): `container`, `form-group`, `form-control`, and `btn`.\nTo use these styles, the application's style sheet imports the library.\n\n\n### src/styles.css\n\n```\n      @import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');\n\n```\n\ncheck\n\n1. The form requires that an actor's skill is chosen from a predefined list of `skills` maintained internally in `ActorFormComponent`.\nThe Angular [NgForOf directive](https://angular.dev/guide/forms/api/common/NgForOf \"API\") iterates over the data values to populate the `<select>` element.\n\ncheck\n\n```\n      <div class=\"container\">  <div [hidden]=\"submitted\">    <h1>Actor Form</h1>    <form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">      <div class=\"form-group\">        <label for=\"name\">Name</label>        <input type=\"text\" class=\"form-control\" id=\"name\"               required [(ngModel)]=\"model.name\" name=\"name\"               #name=\"ngModel\">        <div [hidden]=\"name.valid || name.pristine\"             class=\"alert alert-danger\">          Name is required        </div>      </div>      <div class=\"form-group\">        <label for=\"studio\">Studio Affiliation</label>        <input type=\"text\" class=\"form-control\" id=\"studio\"               [(ngModel)]=\"model.studio\" name=\"studio\">      </div>      <div class=\"form-group\">        <label for=\"skill\">Skill</label>        <select class=\"form-control\" id=\"skill\"                required [(ngModel)]=\"model.skill\" name=\"skill\"                #skill=\"ngModel\">          @for (skill of skills; track $index) {            <option [value]=\"skill\">{{ skill }}</option>          }        </select>        <div [hidden]=\"skill.valid || skill.pristine\" class=\"alert alert-danger\">          skill is required        </div>      </div>      <button type=\"submit\" class=\"btn btn-success\"        [disabled]=\"!actorForm.form.valid\">Submit</button>      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor(); actorForm.reset()\">New Actor</button>      <em>with</em> reset      \u00a0\u00a0      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor()\">New Actor</button>      <em>without</em> reset     <!-- NOT SHOWN IN DOCS -->      <div>        <hr>        Name via form.controls = {{ showFormControls(actorForm) }}      </div>     <!-- - -->    </form>  </div>  <div [hidden]=\"!submitted\">    <h2>You submitted the following:</h2>    <div class=\"row\">      <div class=\"col-xs-3\">Name</div>      <div class=\"col-xs-9\">{{ model.name }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Studio</div>      <div class=\"col-xs-9\">{{ model.studio }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Skill</div>      <div class=\"col-xs-9\">{{ model.skill }}</div>    </div>    <br>    <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\">      Edit    </button>  </div></div><!-- ====================================================  -->  <div>    <form>       <!-- ... all of the form ... -->    </form>  </div><!-- ====================================================  --><hr><style>  .no-style .ng-valid {  border-left: 1px  solid #CCC}  .no-style .ng-invalid {  border-left: 1px  solid #CCC}</style><div class=\"no-style\" style=\"margin-left: 4px\">  <div class=\"container\">      <h1>Actor Form</h1>      <form>        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\" required>        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\" class=\"form-control\" id=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\" id=\"skill\" required>            @for(skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- ====================================================  -->  <hr>  <div class=\"container\">      <h1>Actor Form</h1>      <form #actorForm=\"ngForm\">        {{ model | json }}        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\"                 required                 [(ngModel)]=\"model.name\" name=\"name\">        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\"  class=\"form-control\" id=\"studio\"                 [(ngModel)]=\"model.studio\" name=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\"  id=\"skill\"                  required                  [(ngModel)]=\"model.skill\" name=\"skill\">            @for (skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- EXTRA MATERIAL FOR DOCUMENTATION -->  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [(ngModel)]=\"model.name\" name=\"name\">    TODO: remove this: {{ model.name}}  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [ngModel]=\"model.name\" name=\"name\"           (ngModelChange)=\"model.name = $event\">    TODO: remove this: {{ model.name}}</div>\n\n```\n\nIf you run the application right now, you see the list of skills in the selection control.\nThe input elements are not yet bound to data values or events, so they are still blank and have no behavior.\n\n## [Bind input controls to data properties](https://angular.dev/guide/forms/template-driven-forms\\#bind-input-controls-to-data-properties)\n\nThe next step is to bind the input controls to the corresponding `Actor` properties with two-way data binding, so that they respond to user input by updating the data model, and also respond to programmatic changes in the data by updating the display.\n\nThe `ngModel` directive declared in the `FormsModule` lets you bind controls in your template-driven form to properties in your data model.\nWhen you include the directive using the syntax for two-way data binding, `[(ngModel)]`, Angular can track the value and user interaction of the control and keep the view synced with the model.\n\n1. Edit the template file `actor-form.component.html`.\n2. Find the `<input>` tag next to the **Name** label.\n3. Add the `ngModel` directive, using two-way data binding syntax `[(ngModel)]=\"...\"`.\n\ncheck\n\n```\n      <div class=\"container\">  <div [hidden]=\"submitted\">    <h1>Actor Form</h1>    <form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">      <div class=\"form-group\">        <label for=\"name\">Name</label>        <input type=\"text\" class=\"form-control\" id=\"name\"               required [(ngModel)]=\"model.name\" name=\"name\"               #name=\"ngModel\">        <div [hidden]=\"name.valid || name.pristine\"             class=\"alert alert-danger\">          Name is required        </div>      </div>      <div class=\"form-group\">        <label for=\"studio\">Studio Affiliation</label>        <input type=\"text\" class=\"form-control\" id=\"studio\"               [(ngModel)]=\"model.studio\" name=\"studio\">      </div>      <div class=\"form-group\">        <label for=\"skill\">Skill</label>        <select class=\"form-control\" id=\"skill\"                required [(ngModel)]=\"model.skill\" name=\"skill\"                #skill=\"ngModel\">          @for (skill of skills; track $index) {            <option [value]=\"skill\">{{ skill }}</option>          }        </select>        <div [hidden]=\"skill.valid || skill.pristine\" class=\"alert alert-danger\">          skill is required        </div>      </div>      <button type=\"submit\" class=\"btn btn-success\"        [disabled]=\"!actorForm.form.valid\">Submit</button>      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor(); actorForm.reset()\">New Actor</button>      <em>with</em> reset      \u00a0\u00a0      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor()\">New Actor</button>      <em>without</em> reset     <!-- NOT SHOWN IN DOCS -->      <div>        <hr>        Name via form.controls = {{ showFormControls(actorForm) }}      </div>     <!-- - -->    </form>  </div>  <div [hidden]=\"!submitted\">    <h2>You submitted the following:</h2>    <div class=\"row\">      <div class=\"col-xs-3\">Name</div>      <div class=\"col-xs-9\">{{ model.name }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Studio</div>      <div class=\"col-xs-9\">{{ model.studio }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Skill</div>      <div class=\"col-xs-9\">{{ model.skill }}</div>    </div>    <br>    <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\">      Edit    </button>  </div></div><!-- ====================================================  -->  <div>    <form>       <!-- ... all of the form ... -->    </form>  </div><!-- ====================================================  --><hr><style>  .no-style .ng-valid {  border-left: 1px  solid #CCC}  .no-style .ng-invalid {  border-left: 1px  solid #CCC}</style><div class=\"no-style\" style=\"margin-left: 4px\">  <div class=\"container\">      <h1>Actor Form</h1>      <form>        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\" required>        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\" class=\"form-control\" id=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\" id=\"skill\" required>            @for(skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- ====================================================  -->  <hr>  <div class=\"container\">      <h1>Actor Form</h1>      <form #actorForm=\"ngForm\">        {{ model | json }}        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\"                 required                 [(ngModel)]=\"model.name\" name=\"name\">        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\"  class=\"form-control\" id=\"studio\"                 [(ngModel)]=\"model.studio\" name=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\"  id=\"skill\"                  required                  [(ngModel)]=\"model.skill\" name=\"skill\">            @for (skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- EXTRA MATERIAL FOR DOCUMENTATION -->  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [(ngModel)]=\"model.name\" name=\"name\">    TODO: remove this: {{ model.name}}  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [ngModel]=\"model.name\" name=\"name\"           (ngModelChange)=\"model.name = $event\">    TODO: remove this: {{ model.name}}</div>\n\n```\n\n**HELPFUL:** This example has a temporary diagnostic interpolation after each input tag, `{{model.name}}`, to show the current data value of the corresponding property. The comment reminds you to remove the diagnostic lines when you have finished observing the two-way data binding at work.\n\n### [Access the overall form status](https://angular.dev/guide/forms/template-driven-forms\\#access-the-overall-form-status)\n\nWhen you imported the `FormsModule` in your component, Angular automatically created and attached an [NgForm](https://angular.dev/guide/forms/api/forms/NgForm) directive to the `<form>` tag in the template (because `NgForm` has the selector `form` that matches `<form>` elements).\n\nTo get access to the `NgForm` and the overall form status, declare a [template reference variable](https://angular.dev/guide/forms/guide/templates/variables#template-reference-variables).\n\n1. Edit the template file `actor-form.component.html`.\n\n2. Update the `<form>` tag with a template reference variable, `#actorForm`, and set its value as follows.\n\n\n\n\ncheck\n\n```\n         <div class=\"container\">  <div [hidden]=\"submitted\">    <h1>Actor Form</h1>    <form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">      <div class=\"form-group\">        <label for=\"name\">Name</label>        <input type=\"text\" class=\"form-control\" id=\"name\"               required [(ngModel)]=\"model.name\" name=\"name\"               #name=\"ngModel\">        <div [hidden]=\"name.valid || name.pristine\"             class=\"alert alert-danger\">          Name is required        </div>      </div>      <div class=\"form-group\">        <label for=\"studio\">Studio Affiliation</label>        <input type=\"text\" class=\"form-control\" id=\"studio\"               [(ngModel)]=\"model.studio\" name=\"studio\">      </div>      <div class=\"form-group\">        <label for=\"skill\">Skill</label>        <select class=\"form-control\" id=\"skill\"                required [(ngModel)]=\"model.skill\" name=\"skill\"                #skill=\"ngModel\">          @for (skill of skills; track $index) {            <option [value]=\"skill\">{{ skill }}</option>          }        </select>        <div [hidden]=\"skill.valid || skill.pristine\" class=\"alert alert-danger\">          skill is required        </div>      </div>      <button type=\"submit\" class=\"btn btn-success\"        [disabled]=\"!actorForm.form.valid\">Submit</button>      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor(); actorForm.reset()\">New Actor</button>      <em>with</em> reset      \u00a0\u00a0      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor()\">New Actor</button>      <em>without</em> reset     <!-- NOT SHOWN IN DOCS -->      <div>        <hr>        Name via form.controls = {{ showFormControls(actorForm) }}      </div>     <!-- - -->    </form>  </div>  <div [hidden]=\"!submitted\">    <h2>You submitted the following:</h2>    <div class=\"row\">      <div class=\"col-xs-3\">Name</div>      <div class=\"col-xs-9\">{{ model.name }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Studio</div>      <div class=\"col-xs-9\">{{ model.studio }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Skill</div>      <div class=\"col-xs-9\">{{ model.skill }}</div>    </div>    <br>    <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\">      Edit    </button>  </div></div><!-- ====================================================  -->  <div>    <form>       <!-- ... all of the form ... -->    </form>  </div><!-- ====================================================  --><hr><style>  .no-style .ng-valid {  border-left: 1px  solid #CCC}  .no-style .ng-invalid {  border-left: 1px  solid #CCC}</style><div class=\"no-style\" style=\"margin-left: 4px\">  <div class=\"container\">      <h1>Actor Form</h1>      <form>        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\" required>        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\" class=\"form-control\" id=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\" id=\"skill\" required>            @for(skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- ====================================================  -->  <hr>  <div class=\"container\">      <h1>Actor Form</h1>      <form #actorForm=\"ngForm\">        {{ model | json }}        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\"                 required                 [(ngModel)]=\"model.name\" name=\"name\">        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\"  class=\"form-control\" id=\"studio\"                 [(ngModel)]=\"model.studio\" name=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\"  id=\"skill\"                  required                  [(ngModel)]=\"model.skill\" name=\"skill\">            @for (skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- EXTRA MATERIAL FOR DOCUMENTATION -->  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [(ngModel)]=\"model.name\" name=\"name\">    TODO: remove this: {{ model.name}}  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [ngModel]=\"model.name\" name=\"name\"           (ngModelChange)=\"model.name = $event\">    TODO: remove this: {{ model.name}}</div>\n\n```\n\n\n\n\n\n\nThe `actorForm` template variable is now a reference to the `NgForm` directive instance that governs the form as a whole.\n\n3. Run the app.\n\n4. Start typing in the **Name** input box.\n\nAs you add and delete characters, you can see them appear and disappear from the data model.\n\n\nThe diagnostic line that shows interpolated values demonstrates that values are really flowing from the input box to the model and back again.\n\n### [Naming control elements](https://angular.dev/guide/forms/template-driven-forms\\#naming-control-elements)\n\nWhen you use `[(ngModel)]` on an element, you must define a `name` attribute for that element.\nAngular uses the assigned name to register the element with the `NgForm` directive attached to the parent `<form>` element.\n\nThe example added a `name` attribute to the `<input>` element and set it to \"name\", which makes sense for the actor's name.\nAny unique value will do, but using a descriptive name is helpful.\n\n1. Add similar `[(ngModel)]` bindings and `name` attributes to **Studio** and **Skill**.\n2. You can now remove the diagnostic messages that show interpolated values.\n3. To confirm that two-way data binding works for the entire actor model, add a new text binding with the [`json`](https://angular.dev/guide/forms/api/common/JsonPipe) pipe at the top to the component's template, which serializes the data to a string.\n\nAfter these revisions, the form template should look like the following:\n\ncheck\n\n```\n      <div class=\"container\">  <div [hidden]=\"submitted\">    <h1>Actor Form</h1>    <form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">      <div class=\"form-group\">        <label for=\"name\">Name</label>        <input type=\"text\" class=\"form-control\" id=\"name\"               required [(ngModel)]=\"model.name\" name=\"name\"               #name=\"ngModel\">        <div [hidden]=\"name.valid || name.pristine\"             class=\"alert alert-danger\">          Name is required        </div>      </div>      <div class=\"form-group\">        <label for=\"studio\">Studio Affiliation</label>        <input type=\"text\" class=\"form-control\" id=\"studio\"               [(ngModel)]=\"model.studio\" name=\"studio\">      </div>      <div class=\"form-group\">        <label for=\"skill\">Skill</label>        <select class=\"form-control\" id=\"skill\"                required [(ngModel)]=\"model.skill\" name=\"skill\"                #skill=\"ngModel\">          @for (skill of skills; track $index) {            <option [value]=\"skill\">{{ skill }}</option>          }        </select>        <div [hidden]=\"skill.valid || skill.pristine\" class=\"alert alert-danger\">          skill is required        </div>      </div>      <button type=\"submit\" class=\"btn btn-success\"        [disabled]=\"!actorForm.form.valid\">Submit</button>      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor(); actorForm.reset()\">New Actor</button>      <em>with</em> reset      \u00a0\u00a0      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor()\">New Actor</button>      <em>without</em> reset     <!-- NOT SHOWN IN DOCS -->      <div>        <hr>        Name via form.controls = {{ showFormControls(actorForm) }}      </div>     <!-- - -->    </form>  </div>  <div [hidden]=\"!submitted\">    <h2>You submitted the following:</h2>    <div class=\"row\">      <div class=\"col-xs-3\">Name</div>      <div class=\"col-xs-9\">{{ model.name }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Studio</div>      <div class=\"col-xs-9\">{{ model.studio }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Skill</div>      <div class=\"col-xs-9\">{{ model.skill }}</div>    </div>    <br>    <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\">      Edit    </button>  </div></div><!-- ====================================================  -->  <div>    <form>       <!-- ... all of the form ... -->    </form>  </div><!-- ====================================================  --><hr><style>  .no-style .ng-valid {  border-left: 1px  solid #CCC}  .no-style .ng-invalid {  border-left: 1px  solid #CCC}</style><div class=\"no-style\" style=\"margin-left: 4px\">  <div class=\"container\">      <h1>Actor Form</h1>      <form>        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\" required>        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\" class=\"form-control\" id=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\" id=\"skill\" required>            @for(skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- ====================================================  -->  <hr>  <div class=\"container\">      <h1>Actor Form</h1>      <form #actorForm=\"ngForm\">        {{ model | json }}        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\"                 required                 [(ngModel)]=\"model.name\" name=\"name\">        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\"  class=\"form-control\" id=\"studio\"                 [(ngModel)]=\"model.studio\" name=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\"  id=\"skill\"                  required                  [(ngModel)]=\"model.skill\" name=\"skill\">            @for (skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- EXTRA MATERIAL FOR DOCUMENTATION -->  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [(ngModel)]=\"model.name\" name=\"name\">    TODO: remove this: {{ model.name}}  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [ngModel]=\"model.name\" name=\"name\"           (ngModelChange)=\"model.name = $event\">    TODO: remove this: {{ model.name}}</div>\n\n```\n\nYou'll notice that:\n\n- Each `<input>` element has an `id` property.\nThis is used by the `<label>` element's `for` attribute to match the label to its input control.\nThis is a [standard HTML feature](https://developer.mozilla.org/docs/Web/HTML/Element/label).\n\n- Each `<input>` element also has the required `name` property that Angular uses to register the control with the form.\n\n\nWhen you have observed the effects, you can delete the `{{ model | json }}` text binding.\n\n## [Track form states](https://angular.dev/guide/forms/template-driven-forms\\#track-form-states)\n\nAngular applies the `ng-submitted` class to `form` elements after the form has been submitted. This class can be used to change the form's style after it has been submitted.\n\n## [Track control states](https://angular.dev/guide/forms/template-driven-forms\\#track-control-states)\n\nAdding the `NgModel` directive to a control adds class names to the control that describe its state.\nThese classes can be used to change a control's style based on its state.\n\nThe following table describes the class names that Angular applies based on the control's state.\n\n| States | Class if true | Class if false |\n| :-- | :-- | :-- |\n| The control has been visited. | `ng-touched` | `ng-untouched` |\n| The control's value has changed. | `ng-dirty` | `ng-pristine` |\n| The control's value is valid. | `ng-valid` | `ng-invalid` |\n\nAngular also applies the `ng-submitted` class to `form` elements upon submission,\nbut not to the controls inside the `form` element.\n\nYou use these CSS classes to define the styles for your control based on its status.\n\n### [Observe control states](https://angular.dev/guide/forms/template-driven-forms\\#observe-control-states)\n\nTo see how the classes are added and removed by the framework, open the browser's developer tools and inspect the `<input>` element that represents the actor name.\n\n1. Using your browser's developer tools, find the `<input>` element that corresponds to the **Name** input box.\nYou can see that the element has multiple CSS classes in addition to \"form-control\".\n\n2. When you first bring it up, the classes indicate that it has a valid value, that the value has not been changed since initialization or reset, and that the control has not been visited since initialization or reset.\n\n\n\n```\n         <input class=\"form-control ng-untouched ng-pristine ng-valid\">;\n\n```\n\ncheck\n\n3. Take the following actions on the **Name** `<input>` box, and observe which classes appear.\n\n   - Look but don't touch.\n     The classes indicate that it is untouched, pristine, and valid.\n\n   - Click inside the name box, then click outside it.\n     The control has now been visited, and the element has the `ng-touched` class instead of the `ng-untouched` class.\n\n   - Add slashes to the end of the name.\n     It is now touched and dirty.\n\n   - Erase the name.\n     This makes the value invalid, so the `ng-invalid` class replaces the `ng-valid` class.\n\n### [Create visual feedback for states](https://angular.dev/guide/forms/template-driven-forms\\#create-visual-feedback-for-states)\n\nThe `ng-valid`/ `ng-invalid` pair is particularly interesting, because you want to send a\nstrong visual signal when the values are invalid.\nYou also want to mark required fields.\n\nYou can mark required fields and invalid data at the same time with a colored bar\non the left of the input box.\n\nTo change the appearance in this way, take the following steps.\n\n1. Add definitions for the `ng-*` CSS classes.\n2. Add these class definitions to a new `forms.css` file.\n3. Add the new file to the project as a sibling to `index.html`:\n\n### src/assets/forms.css\n\n```\n      .ng-valid[required], .ng-valid.required  {  border-left: 5px solid #42A948; /* green */}.ng-invalid:not(form)  {  border-left: 5px solid #a94442; /* red */}\n\n```\n\ncheck\n\n1. In the `index.html` file, update the `<head>` tag to include the new style sheet.\n\ncheck\n\n```\n      <!DOCTYPE html><html lang=\"en\">  <head>    <title>Hero Form</title>    <base href=\"/\">    <meta charset=\"UTF-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <link rel=\"stylesheet\"          href=\"https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css\">    <link rel=\"stylesheet\" href=\"assets/forms.css\">  </head>  <body>    <app-root></app-root>  </body></html>\n\n```\n\n### [Show and hide validation error messages](https://angular.dev/guide/forms/template-driven-forms\\#show-and-hide-validation-error-messages)\n\nThe **Name** input box is required and clearing it turns the bar red.\nThat indicates that something is wrong, but the user doesn't know what is wrong or what to do about it.\nYou can provide a helpful message by checking for and responding to the control's state.\n\nThe **Skill** select box is also required, but it doesn't need this kind of error handling because the selection box already constrains the selection to valid values.\n\nTo define and show an error message when appropriate, take the following steps.\n\n1. ### [Add a local reference to the input](https://angular.dev/guide/forms/template-driven-forms\\#add-a-local-reference-to-the-input)\n\n\nExtend the `input` tag with a template reference variable that you can use to access the input box's Angular control from within the template. In the example, the variable is `#name=\"ngModel\"`.\n\nThe template reference variable ( `#name`) is set to `\"ngModel\"` because that is the value of the [`NgModel.exportAs`](https://angular.dev/guide/forms/api/core/Directive#exportAs) property. This property tells Angular how to link a reference variable to a directive.\n\n2. ### [Add the error message](https://angular.dev/guide/forms/template-driven-forms\\#add-the-error-message)\n\n\nAdd a `<div>` that contains a suitable error message.\n\n3. ### [Make the error message conditional](https://angular.dev/guide/forms/template-driven-forms\\#make-the-error-message-conditional)\n\n\nShow or hide the error message by binding properties of the `name` control to the message `<div>` element's `hidden` property.\n\n\ncheck\n\n```\n      <div class=\"container\">  <div [hidden]=\"submitted\">    <h1>Actor Form</h1>    <form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">      <div class=\"form-group\">        <label for=\"name\">Name</label>        <input type=\"text\" class=\"form-control\" id=\"name\"               required [(ngModel)]=\"model.name\" name=\"name\"               #name=\"ngModel\">        <div [hidden]=\"name.valid || name.pristine\"             class=\"alert alert-danger\">          Name is required        </div>      </div>      <div class=\"form-group\">        <label for=\"studio\">Studio Affiliation</label>        <input type=\"text\" class=\"form-control\" id=\"studio\"               [(ngModel)]=\"model.studio\" name=\"studio\">      </div>      <div class=\"form-group\">        <label for=\"skill\">Skill</label>        <select class=\"form-control\" id=\"skill\"                required [(ngModel)]=\"model.skill\" name=\"skill\"                #skill=\"ngModel\">          @for (skill of skills; track $index) {            <option [value]=\"skill\">{{ skill }}</option>          }        </select>        <div [hidden]=\"skill.valid || skill.pristine\" class=\"alert alert-danger\">          skill is required        </div>      </div>      <button type=\"submit\" class=\"btn btn-success\"        [disabled]=\"!actorForm.form.valid\">Submit</button>      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor(); actorForm.reset()\">New Actor</button>      <em>with</em> reset      \u00a0\u00a0      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor()\">New Actor</button>      <em>without</em> reset     <!-- NOT SHOWN IN DOCS -->      <div>        <hr>        Name via form.controls = {{ showFormControls(actorForm) }}      </div>     <!-- - -->    </form>  </div>  <div [hidden]=\"!submitted\">    <h2>You submitted the following:</h2>    <div class=\"row\">      <div class=\"col-xs-3\">Name</div>      <div class=\"col-xs-9\">{{ model.name }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Studio</div>      <div class=\"col-xs-9\">{{ model.studio }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Skill</div>      <div class=\"col-xs-9\">{{ model.skill }}</div>    </div>    <br>    <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\">      Edit    </button>  </div></div><!-- ====================================================  -->  <div>    <form>       <!-- ... all of the form ... -->    </form>  </div><!-- ====================================================  --><hr><style>  .no-style .ng-valid {  border-left: 1px  solid #CCC}  .no-style .ng-invalid {  border-left: 1px  solid #CCC}</style><div class=\"no-style\" style=\"margin-left: 4px\">  <div class=\"container\">      <h1>Actor Form</h1>      <form>        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\" required>        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\" class=\"form-control\" id=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\" id=\"skill\" required>            @for(skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- ====================================================  -->  <hr>  <div class=\"container\">      <h1>Actor Form</h1>      <form #actorForm=\"ngForm\">        {{ model | json }}        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\"                 required                 [(ngModel)]=\"model.name\" name=\"name\">        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\"  class=\"form-control\" id=\"studio\"                 [(ngModel)]=\"model.studio\" name=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\"  id=\"skill\"                  required                  [(ngModel)]=\"model.skill\" name=\"skill\">            @for (skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- EXTRA MATERIAL FOR DOCUMENTATION -->  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [(ngModel)]=\"model.name\" name=\"name\">    TODO: remove this: {{ model.name}}  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [ngModel]=\"model.name\" name=\"name\"           (ngModelChange)=\"model.name = $event\">    TODO: remove this: {{ model.name}}</div>\n\n```\n\n5. ### [Add a conditional error message to name](https://angular.dev/guide/forms/template-driven-forms\\#add-a-conditional-error-message-to-name)\n\n\nAdd a conditional error message to the `name` input box, as in the following example.\n\n\n\n\ncheck\n\n```\n         <div class=\"container\">  <div [hidden]=\"submitted\">    <h1>Actor Form</h1>    <form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">      <div class=\"form-group\">        <label for=\"name\">Name</label>        <input type=\"text\" class=\"form-control\" id=\"name\"               required [(ngModel)]=\"model.name\" name=\"name\"               #name=\"ngModel\">        <div [hidden]=\"name.valid || name.pristine\"             class=\"alert alert-danger\">          Name is required        </div>      </div>      <div class=\"form-group\">        <label for=\"studio\">Studio Affiliation</label>        <input type=\"text\" class=\"form-control\" id=\"studio\"               [(ngModel)]=\"model.studio\" name=\"studio\">      </div>      <div class=\"form-group\">        <label for=\"skill\">Skill</label>        <select class=\"form-control\" id=\"skill\"                required [(ngModel)]=\"model.skill\" name=\"skill\"                #skill=\"ngModel\">          @for (skill of skills; track $index) {            <option [value]=\"skill\">{{ skill }}</option>          }        </select>        <div [hidden]=\"skill.valid || skill.pristine\" class=\"alert alert-danger\">          skill is required        </div>      </div>      <button type=\"submit\" class=\"btn btn-success\"        [disabled]=\"!actorForm.form.valid\">Submit</button>      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor(); actorForm.reset()\">New Actor</button>      <em>with</em> reset      \u00a0\u00a0      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor()\">New Actor</button>      <em>without</em> reset     <!-- NOT SHOWN IN DOCS -->      <div>        <hr>        Name via form.controls = {{ showFormControls(actorForm) }}      </div>     <!-- - -->    </form>  </div>  <div [hidden]=\"!submitted\">    <h2>You submitted the following:</h2>    <div class=\"row\">      <div class=\"col-xs-3\">Name</div>      <div class=\"col-xs-9\">{{ model.name }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Studio</div>      <div class=\"col-xs-9\">{{ model.studio }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Skill</div>      <div class=\"col-xs-9\">{{ model.skill }}</div>    </div>    <br>    <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\">      Edit    </button>  </div></div><!-- ====================================================  -->  <div>    <form>       <!-- ... all of the form ... -->    </form>  </div><!-- ====================================================  --><hr><style>  .no-style .ng-valid {  border-left: 1px  solid #CCC}  .no-style .ng-invalid {  border-left: 1px  solid #CCC}</style><div class=\"no-style\" style=\"margin-left: 4px\">  <div class=\"container\">      <h1>Actor Form</h1>      <form>        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\" required>        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\" class=\"form-control\" id=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\" id=\"skill\" required>            @for(skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- ====================================================  -->  <hr>  <div class=\"container\">      <h1>Actor Form</h1>      <form #actorForm=\"ngForm\">        {{ model | json }}        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\"                 required                 [(ngModel)]=\"model.name\" name=\"name\">        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\"  class=\"form-control\" id=\"studio\"                 [(ngModel)]=\"model.studio\" name=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\"  id=\"skill\"                  required                  [(ngModel)]=\"model.skill\" name=\"skill\">            @for (skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- EXTRA MATERIAL FOR DOCUMENTATION -->  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [(ngModel)]=\"model.name\" name=\"name\">    TODO: remove this: {{ model.name}}  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [ngModel]=\"model.name\" name=\"name\"           (ngModelChange)=\"model.name = $event\">    TODO: remove this: {{ model.name}}</div>\n\n```\n\n\nIn this example, you hide the message when the control is either valid or _pristine_.\nPristine means the user hasn't changed the value since it was displayed in this form.\nIf you ignore the `pristine` state, you would hide the message only when the value is valid.\nIf you arrive in this component with a new, blank actor or an invalid actor, you'll see the error message immediately, before you've done anything.\n\nYou might want the message to display only when the user makes an invalid change.\nHiding the message while the control is in the `pristine` state achieves that goal.\nYou'll see the significance of this choice when you add a new actor to the form in the next step.\n\n## [Add a new actor](https://angular.dev/guide/forms/template-driven-forms\\#add-a-new-actor)\n\nThis exercise shows how you can respond to a native HTML button-click event by adding to the model data.\nTo let form users add a new actor, you will add a **New Actor** button that responds to a click event.\n\n1. In the template, place a \"New Actor\" `<button>` element at the bottom of the form.\n2. In the component file, add the actor-creation method to the actor data model.\n\ncheck\n\n```\n      import {Component} from '@angular/core';import {Actor} from '../actor';import {FormsModule} from '@angular/forms';import {JsonPipe} from '@angular/common';@Component({  selector: 'app-actor-form',  templateUrl: './actor-form.component.html',  imports: [FormsModule, JsonPipe],})export class ActorFormComponent {  skills = ['Method Acting', 'Singing', 'Dancing', 'Swordfighting'];  model = new Actor(18, 'Tom Cruise', this.skills[3], 'CW Productions');  submitted = false;  onSubmit() {    this.submitted = true;  }  newActor() {    this.model = new Actor(42, '', '');  }  heroine(): Actor {    const myActress = new Actor(42, 'Marilyn Monroe', 'Singing');    console.log('My actress is called ' + myActress.name); // \"My actress is called Marilyn\"    return myActress;  }  //////// NOT SHOWN IN DOCS ////////  // Reveal in html:  //   Name via form.controls = {{showFormControls(actorForm)}}  showFormControls(form: any) {    return form && form.controls.name && form.controls.name.value; // Tom Cruise  }  /////////////////////////////}\n\n```\n\n1. Bind the button's click event to an actor-creation method, `newActor()`.\n\ncheck\n\n```\n      <div class=\"container\">  <div [hidden]=\"submitted\">    <h1>Actor Form</h1>    <form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">      <div class=\"form-group\">        <label for=\"name\">Name</label>        <input type=\"text\" class=\"form-control\" id=\"name\"               required [(ngModel)]=\"model.name\" name=\"name\"               #name=\"ngModel\">        <div [hidden]=\"name.valid || name.pristine\"             class=\"alert alert-danger\">          Name is required        </div>      </div>      <div class=\"form-group\">        <label for=\"studio\">Studio Affiliation</label>        <input type=\"text\" class=\"form-control\" id=\"studio\"               [(ngModel)]=\"model.studio\" name=\"studio\">      </div>      <div class=\"form-group\">        <label for=\"skill\">Skill</label>        <select class=\"form-control\" id=\"skill\"                required [(ngModel)]=\"model.skill\" name=\"skill\"                #skill=\"ngModel\">          @for (skill of skills; track $index) {            <option [value]=\"skill\">{{ skill }}</option>          }        </select>        <div [hidden]=\"skill.valid || skill.pristine\" class=\"alert alert-danger\">          skill is required        </div>      </div>      <button type=\"submit\" class=\"btn btn-success\"        [disabled]=\"!actorForm.form.valid\">Submit</button>      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor(); actorForm.reset()\">New Actor</button>      <em>with</em> reset      \u00a0\u00a0      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor()\">New Actor</button>      <em>without</em> reset     <!-- NOT SHOWN IN DOCS -->      <div>        <hr>        Name via form.controls = {{ showFormControls(actorForm) }}      </div>     <!-- - -->    </form>  </div>  <div [hidden]=\"!submitted\">    <h2>You submitted the following:</h2>    <div class=\"row\">      <div class=\"col-xs-3\">Name</div>      <div class=\"col-xs-9\">{{ model.name }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Studio</div>      <div class=\"col-xs-9\">{{ model.studio }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Skill</div>      <div class=\"col-xs-9\">{{ model.skill }}</div>    </div>    <br>    <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\">      Edit    </button>  </div></div><!-- ====================================================  -->  <div>    <form>       <!-- ... all of the form ... -->    </form>  </div><!-- ====================================================  --><hr><style>  .no-style .ng-valid {  border-left: 1px  solid #CCC}  .no-style .ng-invalid {  border-left: 1px  solid #CCC}</style><div class=\"no-style\" style=\"margin-left: 4px\">  <div class=\"container\">      <h1>Actor Form</h1>      <form>        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\" required>        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\" class=\"form-control\" id=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\" id=\"skill\" required>            @for(skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- ====================================================  -->  <hr>  <div class=\"container\">      <h1>Actor Form</h1>      <form #actorForm=\"ngForm\">        {{ model | json }}        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\"                 required                 [(ngModel)]=\"model.name\" name=\"name\">        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\"  class=\"form-control\" id=\"studio\"                 [(ngModel)]=\"model.studio\" name=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\"  id=\"skill\"                  required                  [(ngModel)]=\"model.skill\" name=\"skill\">            @for (skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- EXTRA MATERIAL FOR DOCUMENTATION -->  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [(ngModel)]=\"model.name\" name=\"name\">    TODO: remove this: {{ model.name}}  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [ngModel]=\"model.name\" name=\"name\"           (ngModelChange)=\"model.name = $event\">    TODO: remove this: {{ model.name}}</div>\n\n```\n\n1. Run the application again and click the **New Actor** button.\n\nThe form clears, and the _required_ bars to the left of the input box are red, indicating invalid `name` and `skill` properties.\nNotice that the error messages are hidden.\nThis is because the form is pristine; you haven't changed anything yet.\n\n2. Enter a name and click **New Actor** again.\n\nNow the application displays a `Name is required` error message, because the input box is no longer pristine.\nThe form remembers that you entered a name before clicking **New Actor**.\n\n3. To restore the pristine state of the form controls, clear all of the flags imperatively by calling the form's `reset()` method after calling the `newActor()` method.\n\n\n\n\ncheck\n\n```\n         <div class=\"container\">  <div [hidden]=\"submitted\">    <h1>Actor Form</h1>    <form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">      <div class=\"form-group\">        <label for=\"name\">Name</label>        <input type=\"text\" class=\"form-control\" id=\"name\"               required [(ngModel)]=\"model.name\" name=\"name\"               #name=\"ngModel\">        <div [hidden]=\"name.valid || name.pristine\"             class=\"alert alert-danger\">          Name is required        </div>      </div>      <div class=\"form-group\">        <label for=\"studio\">Studio Affiliation</label>        <input type=\"text\" class=\"form-control\" id=\"studio\"               [(ngModel)]=\"model.studio\" name=\"studio\">      </div>      <div class=\"form-group\">        <label for=\"skill\">Skill</label>        <select class=\"form-control\" id=\"skill\"                required [(ngModel)]=\"model.skill\" name=\"skill\"                #skill=\"ngModel\">          @for (skill of skills; track $index) {            <option [value]=\"skill\">{{ skill }}</option>          }        </select>        <div [hidden]=\"skill.valid || skill.pristine\" class=\"alert alert-danger\">          skill is required        </div>      </div>      <button type=\"submit\" class=\"btn btn-success\"        [disabled]=\"!actorForm.form.valid\">Submit</button>      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor(); actorForm.reset()\">New Actor</button>      <em>with</em> reset      \u00a0\u00a0      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor()\">New Actor</button>      <em>without</em> reset     <!-- NOT SHOWN IN DOCS -->      <div>        <hr>        Name via form.controls = {{ showFormControls(actorForm) }}      </div>     <!-- - -->    </form>  </div>  <div [hidden]=\"!submitted\">    <h2>You submitted the following:</h2>    <div class=\"row\">      <div class=\"col-xs-3\">Name</div>      <div class=\"col-xs-9\">{{ model.name }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Studio</div>      <div class=\"col-xs-9\">{{ model.studio }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Skill</div>      <div class=\"col-xs-9\">{{ model.skill }}</div>    </div>    <br>    <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\">      Edit    </button>  </div></div><!-- ====================================================  -->  <div>    <form>       <!-- ... all of the form ... -->    </form>  </div><!-- ====================================================  --><hr><style>  .no-style .ng-valid {  border-left: 1px  solid #CCC}  .no-style .ng-invalid {  border-left: 1px  solid #CCC}</style><div class=\"no-style\" style=\"margin-left: 4px\">  <div class=\"container\">      <h1>Actor Form</h1>      <form>        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\" required>        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\" class=\"form-control\" id=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\" id=\"skill\" required>            @for(skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- ====================================================  -->  <hr>  <div class=\"container\">      <h1>Actor Form</h1>      <form #actorForm=\"ngForm\">        {{ model | json }}        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\"                 required                 [(ngModel)]=\"model.name\" name=\"name\">        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\"  class=\"form-control\" id=\"studio\"                 [(ngModel)]=\"model.studio\" name=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\"  id=\"skill\"                  required                  [(ngModel)]=\"model.skill\" name=\"skill\">            @for (skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- EXTRA MATERIAL FOR DOCUMENTATION -->  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [(ngModel)]=\"model.name\" name=\"name\">    TODO: remove this: {{ model.name}}  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [ngModel]=\"model.name\" name=\"name\"           (ngModelChange)=\"model.name = $event\">    TODO: remove this: {{ model.name}}</div>\n\n```\n\n\n\n\n\n\nNow clicking **New Actor** resets both the form and its control flags.\n\n\n## [Submit the form with `ngSubmit`](https://angular.dev/guide/forms/template-driven-forms\\#submit-the-form-with-ngsubmit)\n\nThe user should be able to submit this form after filling it in.\nThe **Submit** button at the bottom of the form does nothing on its own, but it does trigger a form-submit event because of its type ( `type=\"submit\"`).\n\nTo respond to this event, take the following steps.\n\n1. ### [Listen to ngOnSubmit](https://angular.dev/guide/forms/template-driven-forms\\#listen-to-ngonsubmit)\n\n\nBind the form's [`ngSubmit`](https://angular.dev/guide/forms/api/forms/NgForm#properties) event property to the actor-form component's `onSubmit()` method.\n\n\n\n\ncheck\n\n```\n         <div class=\"container\">  <div [hidden]=\"submitted\">    <h1>Actor Form</h1>    <form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">      <div class=\"form-group\">        <label for=\"name\">Name</label>        <input type=\"text\" class=\"form-control\" id=\"name\"               required [(ngModel)]=\"model.name\" name=\"name\"               #name=\"ngModel\">        <div [hidden]=\"name.valid || name.pristine\"             class=\"alert alert-danger\">          Name is required        </div>      </div>      <div class=\"form-group\">        <label for=\"studio\">Studio Affiliation</label>        <input type=\"text\" class=\"form-control\" id=\"studio\"               [(ngModel)]=\"model.studio\" name=\"studio\">      </div>      <div class=\"form-group\">        <label for=\"skill\">Skill</label>        <select class=\"form-control\" id=\"skill\"                required [(ngModel)]=\"model.skill\" name=\"skill\"                #skill=\"ngModel\">          @for (skill of skills; track $index) {            <option [value]=\"skill\">{{ skill }}</option>          }        </select>        <div [hidden]=\"skill.valid || skill.pristine\" class=\"alert alert-danger\">          skill is required        </div>      </div>      <button type=\"submit\" class=\"btn btn-success\"        [disabled]=\"!actorForm.form.valid\">Submit</button>      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor(); actorForm.reset()\">New Actor</button>      <em>with</em> reset      \u00a0\u00a0      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor()\">New Actor</button>      <em>without</em> reset     <!-- NOT SHOWN IN DOCS -->      <div>        <hr>        Name via form.controls = {{ showFormControls(actorForm) }}      </div>     <!-- - -->    </form>  </div>  <div [hidden]=\"!submitted\">    <h2>You submitted the following:</h2>    <div class=\"row\">      <div class=\"col-xs-3\">Name</div>      <div class=\"col-xs-9\">{{ model.name }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Studio</div>      <div class=\"col-xs-9\">{{ model.studio }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Skill</div>      <div class=\"col-xs-9\">{{ model.skill }}</div>    </div>    <br>    <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\">      Edit    </button>  </div></div><!-- ====================================================  -->  <div>    <form>       <!-- ... all of the form ... -->    </form>  </div><!-- ====================================================  --><hr><style>  .no-style .ng-valid {  border-left: 1px  solid #CCC}  .no-style .ng-invalid {  border-left: 1px  solid #CCC}</style><div class=\"no-style\" style=\"margin-left: 4px\">  <div class=\"container\">      <h1>Actor Form</h1>      <form>        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\" required>        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\" class=\"form-control\" id=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\" id=\"skill\" required>            @for(skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- ====================================================  -->  <hr>  <div class=\"container\">      <h1>Actor Form</h1>      <form #actorForm=\"ngForm\">        {{ model | json }}        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\"                 required                 [(ngModel)]=\"model.name\" name=\"name\">        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\"  class=\"form-control\" id=\"studio\"                 [(ngModel)]=\"model.studio\" name=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\"  id=\"skill\"                  required                  [(ngModel)]=\"model.skill\" name=\"skill\">            @for (skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- EXTRA MATERIAL FOR DOCUMENTATION -->  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [(ngModel)]=\"model.name\" name=\"name\">    TODO: remove this: {{ model.name}}  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [ngModel]=\"model.name\" name=\"name\"           (ngModelChange)=\"model.name = $event\">    TODO: remove this: {{ model.name}}</div>\n\n```\n\n2. ### [Bind the disabled property](https://angular.dev/guide/forms/template-driven-forms\\#bind-the-disabled-property)\n\n\nUse the template reference variable, `#actorForm` to access the form that contains the **Submit** button and create an event binding.\n\nYou will bind the form property that indicates its overall validity to the **Submit** button's `disabled` property.\n\n\n\n\ncheck\n\n```\n         <div class=\"container\">  <div [hidden]=\"submitted\">    <h1>Actor Form</h1>    <form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">      <div class=\"form-group\">        <label for=\"name\">Name</label>        <input type=\"text\" class=\"form-control\" id=\"name\"               required [(ngModel)]=\"model.name\" name=\"name\"               #name=\"ngModel\">        <div [hidden]=\"name.valid || name.pristine\"             class=\"alert alert-danger\">          Name is required        </div>      </div>      <div class=\"form-group\">        <label for=\"studio\">Studio Affiliation</label>        <input type=\"text\" class=\"form-control\" id=\"studio\"               [(ngModel)]=\"model.studio\" name=\"studio\">      </div>      <div class=\"form-group\">        <label for=\"skill\">Skill</label>        <select class=\"form-control\" id=\"skill\"                required [(ngModel)]=\"model.skill\" name=\"skill\"                #skill=\"ngModel\">          @for (skill of skills; track $index) {            <option [value]=\"skill\">{{ skill }}</option>          }        </select>        <div [hidden]=\"skill.valid || skill.pristine\" class=\"alert alert-danger\">          skill is required        </div>      </div>      <button type=\"submit\" class=\"btn btn-success\"        [disabled]=\"!actorForm.form.valid\">Submit</button>      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor(); actorForm.reset()\">New Actor</button>      <em>with</em> reset      \u00a0\u00a0      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor()\">New Actor</button>      <em>without</em> reset     <!-- NOT SHOWN IN DOCS -->      <div>        <hr>        Name via form.controls = {{ showFormControls(actorForm) }}      </div>     <!-- - -->    </form>  </div>  <div [hidden]=\"!submitted\">    <h2>You submitted the following:</h2>    <div class=\"row\">      <div class=\"col-xs-3\">Name</div>      <div class=\"col-xs-9\">{{ model.name }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Studio</div>      <div class=\"col-xs-9\">{{ model.studio }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Skill</div>      <div class=\"col-xs-9\">{{ model.skill }}</div>    </div>    <br>    <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\">      Edit    </button>  </div></div><!-- ====================================================  -->  <div>    <form>       <!-- ... all of the form ... -->    </form>  </div><!-- ====================================================  --><hr><style>  .no-style .ng-valid {  border-left: 1px  solid #CCC}  .no-style .ng-invalid {  border-left: 1px  solid #CCC}</style><div class=\"no-style\" style=\"margin-left: 4px\">  <div class=\"container\">      <h1>Actor Form</h1>      <form>        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\" required>        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\" class=\"form-control\" id=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\" id=\"skill\" required>            @for(skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- ====================================================  -->  <hr>  <div class=\"container\">      <h1>Actor Form</h1>      <form #actorForm=\"ngForm\">        {{ model | json }}        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\"                 required                 [(ngModel)]=\"model.name\" name=\"name\">        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\"  class=\"form-control\" id=\"studio\"                 [(ngModel)]=\"model.studio\" name=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\"  id=\"skill\"                  required                  [(ngModel)]=\"model.skill\" name=\"skill\">            @for (skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- EXTRA MATERIAL FOR DOCUMENTATION -->  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [(ngModel)]=\"model.name\" name=\"name\">    TODO: remove this: {{ model.name}}  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [ngModel]=\"model.name\" name=\"name\"           (ngModelChange)=\"model.name = $event\">    TODO: remove this: {{ model.name}}</div>\n\n```\n\n3. ### [Run the application](https://angular.dev/guide/forms/template-driven-forms\\#run-the-application)\n\n\nNotice that the button is enabled \u2014although it doesn't do anything useful yet.\n\n4. ### [Delete the Name value](https://angular.dev/guide/forms/template-driven-forms\\#delete-the-name-value)\n\n\nThis violates the \"required\" rule, so it displays the error message \u2014and notice that it also disables the **Submit** button.\n\nYou didn't have to explicitly wire the button's enabled state to the form's validity.\nThe `FormsModule` did this automatically when you defined a template reference variable on the enhanced form element, then referred to that variable in the button control.\n\n\n### [Respond to form submission](https://angular.dev/guide/forms/template-driven-forms\\#respond-to-form-submission)\n\nTo show a response to form submission, you can hide the data entry area and display something else in its place.\n\n1. ### [Wrap the form](https://angular.dev/guide/forms/template-driven-forms\\#wrap-the-form)\n\n\nWrap the entire form in a `<div>` and bind its `hidden` property to the `ActorFormComponent.submitted` property.\n\n\n\n\ncheck\n\n```\n         <div class=\"container\">  <div [hidden]=\"submitted\">    <h1>Actor Form</h1>    <form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">      <div class=\"form-group\">        <label for=\"name\">Name</label>        <input type=\"text\" class=\"form-control\" id=\"name\"               required [(ngModel)]=\"model.name\" name=\"name\"               #name=\"ngModel\">        <div [hidden]=\"name.valid || name.pristine\"             class=\"alert alert-danger\">          Name is required        </div>      </div>      <div class=\"form-group\">        <label for=\"studio\">Studio Affiliation</label>        <input type=\"text\" class=\"form-control\" id=\"studio\"               [(ngModel)]=\"model.studio\" name=\"studio\">      </div>      <div class=\"form-group\">        <label for=\"skill\">Skill</label>        <select class=\"form-control\" id=\"skill\"                required [(ngModel)]=\"model.skill\" name=\"skill\"                #skill=\"ngModel\">          @for (skill of skills; track $index) {            <option [value]=\"skill\">{{ skill }}</option>          }        </select>        <div [hidden]=\"skill.valid || skill.pristine\" class=\"alert alert-danger\">          skill is required        </div>      </div>      <button type=\"submit\" class=\"btn btn-success\"        [disabled]=\"!actorForm.form.valid\">Submit</button>      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor(); actorForm.reset()\">New Actor</button>      <em>with</em> reset      \u00a0\u00a0      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor()\">New Actor</button>      <em>without</em> reset     <!-- NOT SHOWN IN DOCS -->      <div>        <hr>        Name via form.controls = {{ showFormControls(actorForm) }}      </div>     <!-- - -->    </form>  </div>  <div [hidden]=\"!submitted\">    <h2>You submitted the following:</h2>    <div class=\"row\">      <div class=\"col-xs-3\">Name</div>      <div class=\"col-xs-9\">{{ model.name }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Studio</div>      <div class=\"col-xs-9\">{{ model.studio }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Skill</div>      <div class=\"col-xs-9\">{{ model.skill }}</div>    </div>    <br>    <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\">      Edit    </button>  </div></div><!-- ====================================================  -->  <div>    <form>\n...       <!-- ... all of the form ... -->    </form>  </div><!-- ====================================================  --><hr><style>  .no-style .ng-valid {  border-left: 1px  solid #CCC}  .no-style .ng-invalid {  border-left: 1px  solid #CCC}</style><div class=\"no-style\" style=\"margin-left: 4px\">  <div class=\"container\">      <h1>Actor Form</h1>      <form>        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\" required>        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\" class=\"form-control\" id=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\" id=\"skill\" required>            @for(skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- ====================================================  -->  <hr>  <div class=\"container\">      <h1>Actor Form</h1>      <form #actorForm=\"ngForm\">        {{ model | json }}        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\"                 required                 [(ngModel)]=\"model.name\" name=\"name\">        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\"  class=\"form-control\" id=\"studio\"                 [(ngModel)]=\"model.studio\" name=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\"  id=\"skill\"                  required                  [(ngModel)]=\"model.skill\" name=\"skill\">            @for (skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- EXTRA MATERIAL FOR DOCUMENTATION -->  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [(ngModel)]=\"model.name\" name=\"name\">    TODO: remove this: {{ model.name}}  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [ngModel]=\"model.name\" name=\"name\"           (ngModelChange)=\"model.name = $event\">    TODO: remove this: {{ model.name}}</div>\n\n```\n\n\n\n\n\n\nThe main form is visible from the start because the `submitted` property is false until you submit the form, as this fragment from the `ActorFormComponent` shows:\n\n\n\n\ncheck\n\n```\n         import {Component} from '@angular/core';import {Actor} from '../actor';import {FormsModule} from '@angular/forms';import {JsonPipe} from '@angular/common';@Component({  selector: 'app-actor-form',  templateUrl: './actor-form.component.html',  imports: [FormsModule, JsonPipe],})export class ActorFormComponent {  skills = ['Method Acting', 'Singing', 'Dancing', 'Swordfighting'];  model = new Actor(18, 'Tom Cruise', this.skills[3], 'CW Productions');  submitted = false;  onSubmit() {    this.submitted = true;  }  newActor() {    this.model = new Actor(42, '', '');  }  heroine(): Actor {    const myActress = new Actor(42, 'Marilyn Monroe', 'Singing');    console.log('My actress is called ' + myActress.name); // \"My actress is called Marilyn\"    return myActress;  }  //////// NOT SHOWN IN DOCS ////////  // Reveal in html:  //   Name via form.controls = {{showFormControls(actorForm)}}  showFormControls(form: any) {    return form && form.controls.name && form.controls.name.value; // Tom Cruise  }  /////////////////////////////}\n\n```\n\n\n\n\n\n\nWhen you click the **Submit** button, the `submitted` flag becomes true and the form disappears.\n\n2. ### [Add the submitted state](https://angular.dev/guide/forms/template-driven-forms\\#add-the-submitted-state)\n\n\nTo show something else while the form is in the submitted state, add the following HTML below the new `<div>` wrapper.\n\n\n\n\ncheck\n\n```\n         <div class=\"container\">  <div [hidden]=\"submitted\">    <h1>Actor Form</h1>    <form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">      <div class=\"form-group\">        <label for=\"name\">Name</label>        <input type=\"text\" class=\"form-control\" id=\"name\"               required [(ngModel)]=\"model.name\" name=\"name\"               #name=\"ngModel\">        <div [hidden]=\"name.valid || name.pristine\"             class=\"alert alert-danger\">          Name is required        </div>      </div>      <div class=\"form-group\">        <label for=\"studio\">Studio Affiliation</label>        <input type=\"text\" class=\"form-control\" id=\"studio\"               [(ngModel)]=\"model.studio\" name=\"studio\">      </div>      <div class=\"form-group\">        <label for=\"skill\">Skill</label>        <select class=\"form-control\" id=\"skill\"                required [(ngModel)]=\"model.skill\" name=\"skill\"                #skill=\"ngModel\">          @for (skill of skills; track $index) {            <option [value]=\"skill\">{{ skill }}</option>          }        </select>        <div [hidden]=\"skill.valid || skill.pristine\" class=\"alert alert-danger\">          skill is required        </div>      </div>      <button type=\"submit\" class=\"btn btn-success\"        [disabled]=\"!actorForm.form.valid\">Submit</button>      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor(); actorForm.reset()\">New Actor</button>      <em>with</em> reset      \u00a0\u00a0      <button type=\"button\" class=\"btn btn-default\"        (click)=\"newActor()\">New Actor</button>      <em>without</em> reset     <!-- NOT SHOWN IN DOCS -->      <div>        <hr>        Name via form.controls = {{ showFormControls(actorForm) }}      </div>     <!-- - -->    </form>  </div>  <div [hidden]=\"!submitted\">    <h2>You submitted the following:</h2>    <div class=\"row\">      <div class=\"col-xs-3\">Name</div>      <div class=\"col-xs-9\">{{ model.name }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Studio</div>      <div class=\"col-xs-9\">{{ model.studio }}</div>    </div>    <div class=\"row\">      <div class=\"col-xs-3\">Skill</div>      <div class=\"col-xs-9\">{{ model.skill }}</div>    </div>    <br>    <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\">      Edit    </button>  </div></div><!-- ====================================================  -->  <div>    <form>       <!-- ... all of the form ... -->    </form>  </div><!-- ====================================================  --><hr><style>  .no-style .ng-valid {  border-left: 1px  solid #CCC}  .no-style .ng-invalid {  border-left: 1px  solid #CCC}</style><div class=\"no-style\" style=\"margin-left: 4px\">  <div class=\"container\">      <h1>Actor Form</h1>      <form>        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\" required>        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\" class=\"form-control\" id=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\" id=\"skill\" required>            @for(skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- ====================================================  -->  <hr>  <div class=\"container\">      <h1>Actor Form</h1>      <form #actorForm=\"ngForm\">        {{ model | json }}        <div class=\"form-group\">          <label for=\"name\">Name</label>          <input type=\"text\" class=\"form-control\" id=\"name\"                 required                 [(ngModel)]=\"model.name\" name=\"name\">        </div>        <div class=\"form-group\">          <label for=\"studio\">Studio</label>          <input type=\"text\"  class=\"form-control\" id=\"studio\"                 [(ngModel)]=\"model.studio\" name=\"studio\">        </div>        <div class=\"form-group\">          <label for=\"skill\">Skill</label>          <select class=\"form-control\"  id=\"skill\"                  required                  [(ngModel)]=\"model.skill\" name=\"skill\">            @for (skill of skills; track $index) {              <option [value]=\"skill\">{{ skill }}</option>            }          </select>        </div>        <button type=\"submit\" class=\"btn btn-success\">Submit</button>      </form>  </div>  <!-- EXTRA MATERIAL FOR DOCUMENTATION -->  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [(ngModel)]=\"model.name\" name=\"name\">    TODO: remove this: {{ model.name}}  <hr>    <input type=\"text\" class=\"form-control\" id=\"name\"           required           [ngModel]=\"model.name\" name=\"name\"           (ngModelChange)=\"model.name = $event\">    TODO: remove this: {{ model.name}}</div>\n\n```\n\n\n\n\n\n\nThis `<div>`, which shows a read-only actor with interpolation bindings, appears only while the component is in the submitted state.\n\nThe alternative display includes an _Edit_ button whose click event is bound to an expression that clears the `submitted` flag.\n\n3. ### [Test the Edit button](https://angular.dev/guide/forms/template-driven-forms\\#test-the-edit-button)\n\n\nClick the _Edit_ button to switch the display back to the editable form.\n\n\n## [Summary](https://angular.dev/guide/forms/template-driven-forms\\#summary)\n\nThe Angular form discussed in this page takes advantage of the following\nframework features to provide support for data modification, validation, and more.\n\n- An Angular HTML form template\n- A form component class with a `@Component` decorator\n- Handling form submission by binding to the `NgForm.ngSubmit` event property\n- Template-reference variables such as `#actorForm` and `#name`\n- `[(ngModel)]` syntax for two-way data binding\n- The use of `name` attributes for validation and form-element change tracking\n- The reference variable's `valid` property on input controls indicates whether a control is valid or should show error messages\n- Controlling the **Submit** button's enabled state by binding to `NgForm` validity\n- Custom CSS classes that provide visual feedback to users about controls that are not valid\n\nHere's the code for the final version of the application:\n\ncheck\n\n### actor-form/actor-form.component.ts\n\n```\n      import {Component} from '@angular/core';import {Actor} from '../actor';import {FormsModule} from '@angular/forms';import {JsonPipe} from '@angular/common';@Component({  selector: 'app-actor-form',  templateUrl: './actor-form.component.html',  imports: [FormsModule, JsonPipe],})export class ActorFormComponent {  skills = ['Method Acting', 'Singing', 'Dancing', 'Swordfighting'];  model = new Actor(18, 'Tom Cruise', this.skills[3], 'CW Productions');  submitted = false;  onSubmit() {    this.submitted = true;  }\n...  newActor() {    this.model = new Actor(42, '', '');  }  heroine(): Actor {    const myActress = new Actor(42, 'Marilyn Monroe', 'Singing');    console.log('My actress is called ' + myActress.name); // \"My actress is called Marilyn\"    return myActress;  }  //////// NOT SHOWN IN DOCS ////////  // Reveal in html:  //   Name via form.controls = {{showFormControls(actorForm)}}  showFormControls(form: any) {    return form && form.controls.name && form.controls.name.value; // Tom Cruise  }  /////////////////////////////\n...}\n\n```",
  "title": "Template-driven forms \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "div",
    "form",
    "class",
    "skill",
    "label",
    "model",
    "button",
    "studio",
    "type",
    "control"
  ],
  "sourceURL": "https://angular.dev/guide/forms/template-driven-forms"
}