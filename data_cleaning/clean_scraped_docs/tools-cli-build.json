{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backAngular CLI\n  - [Overview](https://angular.dev/tools/cli)\n  - [Local set-up](https://angular.dev/tools/cli/setup-local)\n  - [Building Angular apps](https://angular.dev/tools/cli/build)\n  - [Serving Angular apps for development](https://angular.dev/tools/cli/serve)\n  - [Deployment](https://angular.dev/tools/cli/deployment)\n  - [End-to-End Testing](https://angular.dev/tools/cli/end-to-end)\n  - [Migrating to new build system](https://angular.dev/tools/cli/build-system-migration)\n  - [Build environments](https://angular.dev/tools/cli/environments)\n  - [Angular CLI builders](https://angular.dev/tools/cli/cli-builder)\n  - [Generating code using schematics](https://angular.dev/tools/cli/schematics)\n  - [Authoring schematics](https://angular.dev/tools/cli/schematics-authoring)\n  - [Schematics for libraries](https://angular.dev/tools/cli/schematics-for-libraries)\n  - [Template type checking](https://angular.dev/tools/cli/template-typecheck)\n  - [Ahead-of-time (AOT) compilation](https://angular.dev/tools/cli/aot-compiler)\n  - [AOT metadata errors](https://angular.dev/tools/cli/aot-metadata-errors)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nYou can build your Angular CLI application or library with the `ng build` command.\nThis will compile your TypeScript code to JavaScript, as well as optimize, bundle, and minify the output as appropriate.\n\n`ng build` only executes the builder for the `build` target in the default project as specified in `angular.json`.\nAngular CLI includes four builders typically used as `build` targets:\n\n| Builder | Purpose |\n| --- | --- |\n| `@angular-devkit/build-angular:application` | Builds an application with a client-side bundle, a Node server, and build-time prerendered routes with [esbuild](https://esbuild.github.io/). |\n| `@angular-devkit/build-angular:browser-esbuild` | Bundles a client-side application for use in a browser with [esbuild](https://esbuild.github.io/). See [`browser-esbuild` documentation](https://angular.dev/tools/cli/tools/cli/build-system-migration#manual-migration-to-the-compatibility-builder) for more information. |\n| `@angular-devkit/build-angular:browser` | Bundles a client-side application for use in a browser with [webpack](https://webpack.js.org/). |\n| `@angular-devkit/build-angular:ng-packagr` | Builds an Angular library adhering to [Angular Package Format](https://angular.dev/tools/cli/tools/libraries/angular-package-format). |\n\nApplications generated by `ng new` use `@angular-devkit/build-angular:application` by default.\nLibraries generated by `ng generate library` use `@angular-devkit/build-angular:ng-packagr` by default.\n\nYou can determine which builder is being used for a particular project by looking up the `build` target for that project.\n\n```\n      {  \"projects\": {    \"my-app\": {      \"architect\": {        // `ng build` invokes the Architect target named `build`.        \"build\": {          \"builder\": \"@angular-devkit/build-angular:application\",          \u2026        },        \"serve\": { \u2026 }        \"test\": { \u2026 }        \u2026      }    }  }}\n\n```\n\ncheck\n\nThis page discusses usage and options of `@angular-devkit/build-angular:application`.\n\n## [Output directory](https://angular.dev/tools/cli/build\\#output-directory)\n\nThe result of this build process is output to a directory ( `dist/${PROJECT_NAME}` by default).\n\n## [Configuring size budgets](https://angular.dev/tools/cli/build\\#configuring-size-budgets)\n\nAs applications grow in functionality, they also grow in size.\nThe CLI lets you set size thresholds in your configuration to ensure that parts of your application stay within size boundaries that you define.\n\nDefine your size boundaries in the CLI configuration file, `angular.json`, in a `budgets` section for each [configured environment](https://angular.dev/tools/cli/tools/cli/environments).\n\n```\n      {  \u2026  \"configurations\": {    \"production\": {      \u2026      \"budgets\": [        {          \"type\": \"initial\",          \"maximumWarning\": \"250kb\",          \"maximumError\": \"500kb\"        },      ]    }  }}\n\n```\n\ncheck\n\nYou can specify size budgets for the entire app, and for particular parts.\nEach budget entry configures a budget of a given type.\nSpecify size values in the following formats:\n\n| Size value | Details |\n| :-- | :-- |\n| `123` or `123b` | Size in bytes. |\n| `123kb` | Size in kilobytes. |\n| `123mb` | Size in megabytes. |\n| `12%` | Percentage of size relative to baseline. (Not valid for baseline values.) |\n\nWhen you configure a budget, the builder warns or reports an error when a given part of the application reaches or exceeds a boundary size that you set.\n\nEach budget entry is a JSON object with the following properties:\n\n| Property | Value |\n| :-- | :-- |\n| type | The type of budget. One of:\n\n| Value | Details |\n| --- | --- |\n| `bundle` | The size of a specific bundle. |\n| `initial` | The size of JavaScript and CSS needed for bootstrapping the application. Defaults to warning at 500kb and erroring at 1mb. |\n| `allScript` | The size of all scripts. |\n| `all` | The size of the entire application. |\n| `anyComponentStyle` | This size of any one component stylesheet. Defaults to warning at 2kb and erroring at 4kb. |\n| `anyScript` | The size of any one script. |\n| `any` | The size of any file. | |\n| name | The name of the bundle (for `type=bundle`). |\n| baseline | The baseline size for comparison. |\n| maximumWarning | The maximum threshold for warning relative to the baseline. |\n| maximumError | The maximum threshold for error relative to the baseline. |\n| minimumWarning | The minimum threshold for warning relative to the baseline. |\n| minimumError | The minimum threshold for error relative to the baseline. |\n| warning | The threshold for warning relative to the baseline (min & max). |\n| error | The threshold for error relative to the baseline (min & max). |\n\n## [Configuring CommonJS dependencies](https://angular.dev/tools/cli/build\\#configuring-commonjs-dependencies)\n\nAlways prefer native [ECMAScript modules](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import) (ESM) throughout your application and its dependencies.\nESM is a fully specified web standard and JavaScript language feature with strong static analysis support. This makes bundle optimizations more powerful than other module formats.\n\nAngular CLI also supports importing [CommonJS](https://nodejs.org/api/modules.html) dependencies into your project and will bundle these dependencies automatically.\nHowever, CommonJS modules can prevent bundlers and minifiers from optimizing those modules effectively, which results in larger bundle sizes.\nFor more information, see [How CommonJS is making your bundles larger](https://web.dev/commonjs-larger-bundles).\n\nAngular CLI outputs warnings if it detects that your browser application depends on CommonJS modules.\nWhen you encounter a CommonJS dependency, consider asking the maintainer to support ECMAScript modules, contributing that support yourself, or using an alternative dependency which meets your needs.\nIf the best option is to use a CommonJS dependency, you can disable these warnings by adding the CommonJS module name to `allowedCommonJsDependencies` option in the `build` options located in `angular.json`.\n\n```\n      \"build\": {  \"builder\": \"@angular-devkit/build-angular:browser\",  \"options\": {     \"allowedCommonJsDependencies\": [        \"lodash\"     ]     \u2026   }   \u2026},\n\n```\n\ncheck\n\n## [Configuring browser compatibility](https://angular.dev/tools/cli/build\\#configuring-browser-compatibility)\n\nThe Angular CLI uses [Browserslist](https://github.com/browserslist/browserslist) to ensure compatibility with different browser versions.\nDepending on supported browsers, Angular will automatically transform certain JavaScript and CSS features to ensure the built application does not use a feature which has not been implemented by a supported browser. However, the Angular CLI will not automatically add polyfills to supplement missing Web APIs. Use the `polyfills` option in `angular.json` to add polyfills.\n\nInternally, the Angular CLI uses the below default `browserslist` configuration which matches the [browsers that are supported](https://angular.dev/tools/cli/reference/versions#browser-support) by Angular.\n\n```\n      last 2 Chrome versionslast 1 Firefox versionlast 2 Edge major versionslast 2 Safari major versionslast 2 iOS major versionslast 2 Android major versionsFirefox ESR\n\n```\n\ncheck\n\nTo override the internal configuration, run [`ng generate config browserslist`](https://angular.dev/tools/cli/cli/generate/config), which generates a `.browserslistrc` configuration file in the project directory.\n\nSee the [browserslist repository](https://github.com/browserslist/browserslist) for more examples of how to target specific browsers and versions.\nAvoid expanding this list to more browsers. Even if your application code more broadly compatible, Angular itself might not be.\nYou should only ever _reduce_ the set of browsers or versions in this list.\n\n**HELPFUL:** Use [browsersl.ist](https://browsersl.ist/) to display compatible browsers for a `browserslist` query.\n\n## [Configuring Tailwind](https://angular.dev/tools/cli/build\\#configuring-tailwind)\n\nAngular supports [Tailwind](https://tailwindcss.com/), a utility-first CSS framework.\n\nFollow the [Tailwind documentation](https://tailwindcss.com/docs/installation/framework-guides/angular) for integrating with Angular CLI.",
  "title": "Building Angular apps \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "cli",
    "dev",
    "build",
    "tools",
    "size",
    "application",
    "browser",
    "baseline"
  ],
  "sourceURL": "https://angular.dev/tools/cli/build"
}