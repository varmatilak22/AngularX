{
  "content": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\n## Overview for overlay\n\nThe `overlay` package provides a way to open floating panels on the screen.\n\n### [link](https://material.angular.io/cdk/overlay/overview\\#initial-setup)  Initial setup\n\nThe CDK overlays depend on a small set of structural styles to work correctly. If you're using\nAngular Material, these styles have been included together with the theme, otherwise if you're\nusing the CDK on its own, you'll have to include the styles yourself. You can do so by importing\nthe prebuilt styles in your global stylesheet:\n\n```scss\n@import '@angular/cdk/overlay-prebuilt.css';\n\n```\n\n### [link](https://material.angular.io/cdk/overlay/overview\\#creating-overlays)  Creating overlays\n\nCalling `overlay.create()` will return an `OverlayRef` instance. This instance is a handle for\nmanaging that specific overlay.\n\nThe `OverlayRef` _is_ a `PortalOutlet`\\- once created, content can be added by attaching a `Portal`.\nSee the documentation on portals for further information.\n\n```ts\nconst overlayRef = overlay.create();\nconst userProfilePortal = new ComponentPortal(UserProfile);\noverlayRef.attach(userProfilePortal);\n\n```\n\n### [link](https://material.angular.io/cdk/overlay/overview\\#configuring-an-overlay)  Configuring an overlay\n\nWhen creating an overlay, an optional configuration object can be provided.\n\n```ts\nconst overlayRef = overlay.create({\n  height: '400px',\n  width: '600px',\n});\n\n```\n\nThe full set of configuration options can be found in the API documentation.\n\n#### [link](https://material.angular.io/cdk/overlay/overview\\#position-strategies)  Position strategies\n\nThe `positionStrategy` configuration option determines how the overlay will be positioned on-screen.\nThere are two position strategies available as part of the library: `GlobalPositionStrategy` and\n`ConnectedPositionStrategy`.\n\n`GlobalPositionStrategy` is used for overlays that require a specific position in the viewport,\nunrelated to other elements. This is commonly used for modal dialogs and application-level\nnotifications.\n\n`ConnectedPositionStrategy` is used for overlays that are positioned relative to some other \"origin\"\nelement on the page. This is commonly used for menus, pickers, and tooltips. When using the\nconnected strategy, a set of preferred positions is provided; the \"best\" position will be selected\nbased on how well the overlay would fit within the viewport.\n\n`FlexibleConnectedPositionStrategy` expands upon the functionality from the\n`ConnectedPositionStrategy` by adding more advanced features on top of being able to position an\noverlay relative to another element on the page. These features include the ability to have an\noverlay become scrollable once its content reaches the viewport edge, being able to configure a\nmargin between the overlay and the viewport edge, having an overlay be pushed into the viewport if\nit doesn't fit into any of its preferred positions, as well as configuring whether the overlay's\nsize can grow while the overlay is open. The flexible position strategy also allows for the\n`transform-origin` of an element, inside the overlay, to be set based on the current position using\nthe `withTransformOriginOn`. This is useful when animating an overlay in and having the animation\noriginate from the point at which it connects with the origin.\n\nA custom position strategy can be created by implementing the `PositionStrategy` interface.\nEach `PositionStrategy` defines an `apply` method that is called whenever the overlay's position\nshould be updated. A custom position strategy can additionally expose any other APIs necessary as\nrelated to the positioning of the overlay element.\n\n#### [link](https://material.angular.io/cdk/overlay/overview\\#scroll-strategies)  Scroll strategies\n\nThe `scrollStrategy` configuration option determines how the overlay will react to scrolling outside\nthe overlay element. There are four scroll strategies available as part of the library.\n\n`NoopScrollStrategy` is the default option. This strategy does nothing.\n\n`CloseScrollStrategy` will automatically close the overlay when scrolling occurs.\n\n`BlockScrollStrategy` will block page scrolling while the overlay is open. Note that some\napplications may implement special or customized page scrolling; if the `BlockScrollStrategy`\nconflicts with this kind of situation, it can be overridden by re-providing `BlockScrollStrategy`\nwith a custom implementation.\n\n`RepositionScrollStrategy` will re-position the overlay element on scroll. Note that this will have\nsome performance impact on scrolling- users should weigh this cost in the context of each specific\napplication.\n\nA custom scroll strategy can be created by implementing the `ScrollStrategy` interface. Each\nstrategy will typically inject `ScrollDispatcher` (from `@angular/cdk/scrolling`) to be notified\nof when scrolling takes place. See the documentation for `ScrollDispatcher` for more information\non how scroll events are detected and dispatched.\n\n### [link](https://material.angular.io/cdk/overlay/overview\\#the-overlay-container)  The overlay container\n\nThe `OverlayContainer` provides a handle to the container element in which all individual overlay\nelements are rendered. By default, the overlay container is appended directly to the document body\nso that an overlay is never clipped by an `overflow: hidden` parent.\n\n#### [link](https://material.angular.io/cdk/overlay/overview\\#full-screen-overlays)  Full-screen overlays\n\nThe `FullscreenOverlayContainer` is an alternative to `OverlayContainer` that supports correct\ndisplaying of overlay elements in\n[fullscreen mode](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen).\n\n`FullscreenOverlayContainer` can be enabled by providing it in your `NgModule`:\n\n```ts\n@NgModule({\n  providers: [{provide: OverlayContainer, useClass: FullscreenOverlayContainer}],\n  // ...\n})\nexport class MyModule { }\n\n```\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation",
  "title": "Overlay | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/cdk/overlay/overview"
}