{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for autocomplete\n\n## API reference for Angular Material autocomplete\n\n`\n          import {MatAutocompleteModule} from '@angular/material/autocomplete';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/autocomplete/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/autocomplete/api\\#MatAutocomplete) `MatAutocomplete`\n\nAutocomplete component.\n\nSelector:mat-autocomplete\n\nExported as:matAutocomplete\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-label')<br> <br>`ariaLabel: string` | Aria label of the autocomplete. |\n| @Input('aria-labelledby')<br> <br>`ariaLabelledby: string` | Input that can be used to specify the `aria-labelledby` attribute. |\n| @Input({ transform: booleanAttribute })<br> <br>`autoActiveFirstOption: boolean` | Whether the first option should be highlighted when the autocomplete panel is opened.<br>Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token. |\n| @Input({ transform: booleanAttribute })<br> <br>`autoSelectActiveOption: boolean` | Whether the active option should be selected as the user is navigating. |\n| @Input('class')<br> <br>`classList: string | string[]` | Takes classes set on the host mat-autocomplete element and applies them to the panel<br>inside the overlay container to allow for easy styling. |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether ripples are disabled within the autocomplete panel. |\n| @Input()<br>`displayWith: ((value: any) => string) | null` | Function that maps an option's control value to its display value in the trigger. |\n| @Input({ transform: booleanAttribute })<br> <br>`hideSingleSelectionIndicator: boolean` | Whether checkmark indicator for single-selection options is hidden. |\n| @Input()<br>`panelWidth: string | number` | Specify the width of the autocomplete panel. Can be any CSS sizing value, otherwise it will<br>match the width of its host. |\n| @Input({ transform: booleanAttribute })<br> <br>`requireSelection: boolean` | Whether the user is required to make a selection when they're interacting with the<br>autocomplete. If the user moves away from the autocomplete without selecting an option from<br>the list, the value will be reset. If the user opens the panel and closes it without<br>interacting or selecting a value, the initial value will be kept. |\n| @Output()<br>`closed: EventEmitter<void>` | Event that is emitted when the autocomplete panel is closed. |\n| @Output()<br>`opened: EventEmitter<void>` | Event that is emitted when the autocomplete panel is opened. |\n| @Output()<br>`optionActivated: EventEmitter<MatAutocompleteActivatedEvent>` | Emits whenever an option is activated. |\n| @Output()<br>`optionSelected: EventEmitter<MatAutocompleteSelectedEvent>` | Event that is emitted whenever an option from the list is selected. |\n| `id: string` | Unique ID to be used by autocomplete trigger's \"aria-owns\" property. |\n| `isOpen: boolean` | Whether the autocomplete panel is open. |\n| `optionGroups: QueryList<MatOptgroup>` | Reference to all option groups within the autocomplete. |\n| `options: QueryList<MatOption>` | Reference to all options within the autocomplete. |\n| `panel: ElementRef` | Element for the panel containing the autocomplete options. |\n| `showPanel: boolean` | Whether the autocomplete panel should be visible, depending on option length. |\n\n#### [link](https://material.angular.io/components/autocomplete/api\\#MatAutocompleteOrigin) `MatAutocompleteOrigin`\n\nDirective applied to an element to make it usable\nas a connection point for an autocomplete panel.\n\nSelector:\\[matAutocompleteOrigin\\]\n\nExported as:matAutocompleteOrigin\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `elementRef: inject<ElementRef<HTMLElement>>(ElementRef)` |  |\n\n#### [link](https://material.angular.io/components/autocomplete/api\\#MatAutocompleteTrigger) `MatAutocompleteTrigger`\n\nBase class with all of the `MatAutocompleteTrigger` functionality.\n\nSelector:input\\[matAutocomplete\\]textarea\\[matAutocomplete\\]\n\nExported as:matAutocompleteTrigger\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('matAutocomplete')<br> <br>`autocomplete: MatAutocomplete` | The autocomplete panel to be attached to this trigger. |\n| @Input({ alias: 'matAutocompleteDisabled', transform: booleanAttribute })<br> <br>`autocompleteDisabled: boolean` | Whether the autocomplete is disabled. When disabled, the element will<br>act as a regular input and the user won't be able to open the panel. |\n| @Input('matAutocompleteConnectedTo')<br> <br>`connectedTo: MatAutocompleteOrigin` | Reference relative to which to position the autocomplete panel.<br>Defaults to the autocomplete trigger element. |\n| @Input('matAutocompletePosition')<br> <br>`position: 'auto' | 'above' | 'below'` | Position of the autocomplete panel relative to the trigger element. A position of `auto`<br>will render the panel underneath the trigger if there is enough space for it to fit in<br>the viewport, otherwise the panel will be shown above it. If the position is set to<br>`above` or `below`, the panel will always be shown above or below the trigger. no matter<br>whether it fits completely in the viewport. |\n| `activeOption: MatOption | null` | The currently active option, coerced to MatOption type. |\n| `optionSelections: Observable<MatOptionSelectionChange>` | Stream of changes to the selection state of the autocomplete options. |\n| `panelClosingActions: Observable<MatOptionSelectionChange | null>` | A stream of actions that should close the autocomplete panel, including<br>when an option is selected, on blur, and when TAB is pressed. |\n| `panelOpen: boolean` | Whether or not the autocomplete panel is open. |\n\n##### Methods\n\n| closePanel |\n| --- |\n| Closes the autocomplete suggestion panel. |\n\n| openPanel |\n| --- |\n| Opens the autocomplete suggestion panel. |\n\n| updatePosition |\n| --- |\n| Updates the position of the autocomplete suggestion panel to ensure that it fits all options<br>within the viewport. |\n\n### [link](https://material.angular.io/components/autocomplete/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/autocomplete/api\\#MatAutocompleteSelectedEvent) `MatAutocompleteSelectedEvent`\n\nEvent object that is emitted when an autocomplete option is selected.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `option: MatOption` | Option that was selected. |\n| `source: MatAutocomplete` | Reference to the autocomplete panel that emitted the event. |\n\n### [link](https://material.angular.io/components/autocomplete/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/autocomplete/api\\#MatAutocompleteActivatedEvent) `MatAutocompleteActivatedEvent`\n\nEvent object that is emitted when an autocomplete option is activated.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `option: MatOption | null` | Option that was selected. |\n| `source: MatAutocomplete` | Reference to the autocomplete panel that emitted the event. |\n\n#### [link](https://material.angular.io/components/autocomplete/api\\#MatAutocompleteDefaultOptions) `MatAutocompleteDefaultOptions`\n\nDefault `mat-autocomplete` options that can be overridden.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `autoActiveFirstOption: boolean` | Whether the first option should be highlighted when an autocomplete panel is opened. |\n| `autoSelectActiveOption: boolean` | Whether the active option should be selected as the user is navigating. |\n| `backdropClass: string` | Class to be applied to the autocomplete's backdrop. |\n| `hasBackdrop: boolean` | Whether the autocomplete has a backdrop. |\n| `hideSingleSelectionIndicator: boolean` | Whether icon indicators should be hidden for single-selection. |\n| `overlayPanelClass: string | string[]` | Class or list of classes to be applied to the autocomplete's overlay panel. |\n| `requireSelection: boolean` | Whether the user is required to make a selection when<br>they're interacting with the autocomplete. |\n\n### [link](https://material.angular.io/components/autocomplete/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/autocomplete/api\\#MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS`\n\nInjection token to be used to override the default options for `mat-autocomplete`.\n\n```docs-markdown-code\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS: InjectionToken<MatAutocompleteDefaultOptions>;\n\n```\n\n#### [link](https://material.angular.io/components/autocomplete/api\\#MAT_AUTOCOMPLETE_SCROLL_STRATEGY) `MAT_AUTOCOMPLETE_SCROLL_STRATEGY`\n\nInjection token that determines the scroll handling while the autocomplete panel is open.\n\n```docs-markdown-code\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\n```\n\n## API reference for Angular Material autocomplete-testing\n\n`\n          import {MatAutocompleteHarness} from '@angular/material/autocomplete/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/autocomplete/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/autocomplete/api\\#MatAutocompleteHarness) `MatAutocompleteHarness`extends [ComponentHarness](https://material.angular.io/components/autocomplete/cdk/testing/api\\#ComponentHarness)\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-autocomplete-trigger'` | The selector for the host element of a `MatAutocomplete` instance. |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the autocomplete input. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>clear |\n| --- |\n| Clears the input value. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>enterText |\n| --- |\n| Enters text into the autocomplete. |\n| Parameters |\n| --- |\n| value<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the autocomplete input. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getOptionGroups |\n| --- |\n| Gets the option groups inside the autocomplete panel. |\n| Parameters |\n| --- |\n| filters?<br> `Omit<OptgroupHarnessFilters, \"ancestor\">` |  |\n| Returns |\n| --- |\n| `Promise<MatOptgroupHarness[]>` |  |\n\n| async<br> <br>getOptions |\n| --- |\n| Gets the options inside the autocomplete panel. |\n| Parameters |\n| --- |\n| filters?<br> `Omit<OptionHarnessFilters, \"ancestor\">` |  |\n| Returns |\n| --- |\n| `Promise<MatOptionHarness[]>` |  |\n\n| async<br> <br>getValue |\n| --- |\n| Gets the value of the autocomplete input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the autocomplete input is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the autocomplete input is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isOpen |\n| --- |\n| Whether the autocomplete is open. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>selectOption |\n| --- |\n| Selects the first option matching the given filters. |\n| Parameters |\n| --- |\n| filters<br> `OptionHarnessFilters` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for an autocomplete with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `AutocompleteHarnessFilters = {}` | Options for filtering which autocomplete instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/autocomplete/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/autocomplete/api\\#AutocompleteHarnessFilters) `AutocompleteHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatAutocompleteHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disabled: boolean` | Only find instances which match the given disabled state. |\n| `value: string | RegExp` | Only find instances whose associated input element matches the given value. |\n\nAutocomplete\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
  "title": "Autocomplete | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/autocomplete/api"
}