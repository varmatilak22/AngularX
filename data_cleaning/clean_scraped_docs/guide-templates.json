{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backTemplates\n  - [Overview](https://angular.dev/guide/templates)\n  - [Binding dynamic text, properties and attributes](https://angular.dev/guide/templates/binding)\n  - [Adding event listeners](https://angular.dev/guide/templates/event-listeners)\n  - [Two-way binding](https://angular.dev/guide/templates/two-way-binding)\n  - [Control flow](https://angular.dev/guide/templates/control-flow)\n  - [Pipes](https://angular.dev/guide/templates/pipes)\n  - [Slotting child content with ng-content](https://angular.dev/guide/templates/ng-content)\n  - [Create template fragments with ng-template](https://angular.dev/guide/templates/ng-template)\n  - [Grouping elements with ng-container](https://angular.dev/guide/templates/ng-container)\n  - [Variables in templates](https://angular.dev/guide/templates/variables)\n  - [Deferred loading with @defer](https://angular.dev/guide/templates/defer)\n  - [Expression syntax](https://angular.dev/guide/templates/expression-syntax)\n  - [Whitespace in templates](https://angular.dev/guide/templates/whitespace)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nIn-depth Guides\n\nTemplates\n\n# Template syntax\n\n[edit](https://github.com/angular/angular/edit/main/adev/src/content/guide/templates/overview.md \"Edit this page\")\n\nIn Angular, a template is a chunk of HTML.\nUse special syntax within a template to leverage many of Angular's features.\n\n**TIP:** Check out Angular's [Essentials](https://angular.dev/guide/essentials/templates) before diving into this comprehensive guide.\n\nEvery Angular component has a **template** that defines the [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) that the component renders onto the page. By using templates, Angular is able to automatically keep your page up-to-date as data changes.\n\nTemplates are usually found within either the `template` property of a `*.component.ts` file or the `*.component.html` file. To learn more, check out the [in-depth components guide](https://angular.dev/guide/components).\n\n## [How do templates work?](https://angular.dev/guide/templates\\#how-do-templates-work)\n\nTemplates are based on [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML) syntax, with additional features such as built-in template functions, data binding, event listening, variables, and more.\n\nAngular compiles templates into JavaScript in order to build up an internal understanding of your application. One of the benefits of this are built-in rendering optimizations that Angular applies to your application automatically.\n\n### [Differences from standard HTML](https://angular.dev/guide/templates\\#differences-from-standard-html)\n\nSome differences between templates and standard HTML syntax include:\n\n- Comments in the template source code are not included in the rendered output\n- Component and directive elements can be self-closed (e.g., `<UserProfile />`)\n- Attributes with certain characters (i.e., `[]`, `()`, etc.) have special meaning to Angular. See [binding docs](https://angular.dev/guide/guide/templates/binding) and [adding event listeners docs](https://angular.dev/guide/guide/templates/event-listeners) for more information.\n- The `@` character has a special meaning to Angular for adding dynamic behavior, such as [control flow](https://angular.dev/guide/guide/templates/control-flow), to templates. You can include a literal `@` character by escaping it as an HTML entity code ( `&commat;` or `&#64;`).\n- Angular ignores and collapses unnecessary whitespace characters. See [whitespace in templates](https://angular.dev/guide/guide/templates/whitespace) for more details.\n- Angular may add comment nodes to a page as placeholders for dynamic content, but developers can ignore these.\n\nIn addition, while most HTML syntax is valid template syntax, Angular does not support `<script>` element in templates. For more information, see the [Security](https://angular.dev/guide/best-practices/security) page.\n\n## [What's next?](https://angular.dev/guide/templates\\#whats-next)\n\nYou might also be interested in the following:\n\n| Topics | Details |\n| :-- | :-- |\n| [Binding dynamic text, properties, and attributes](https://angular.dev/guide/guide/templates/binding) | Bind dynamic data to text, properties and attributes. |\n| [Adding event listeners](https://angular.dev/guide/guide/templates/event-listeners) | Respond to events in your templates. |\n| [Two-way binding](https://angular.dev/guide/guide/templates/two-way-binding) | Simultaneously binds a value and propagate changes. |\n| [Control flow](https://angular.dev/guide/guide/templates/control-flow) | Conditionally show, hide and repeat elements. |\n| [Pipes](https://angular.dev/guide/guide/templates/pipes) | Transform data declaratively. |\n| [Slotting child content with ng-content](https://angular.dev/guide/guide/templates/ng-content) | Control how components render content. |\n| [Create template fragments with ng-template](https://angular.dev/guide/guide/templates/ng-template) | Declare a template fragment. |\n| [Grouping elements with ng-container](https://angular.dev/guide/guide/templates/ng-container) | Group multiple elements together or mark a location for rendering. |\n| [Variables in templates](https://angular.dev/guide/guide/templates/variables) | Learn about variable declarations. |\n| [Deferred loading with @defer](https://angular.dev/guide/guide/templates/defer) | Create deferrable views with `@defer`. |\n| [Expression syntax](https://angular.dev/guide/guide/templates/expression-syntax) | Learn similarities and differences between Angular expressions and standard JavaScript. |\n| [Whitespace in templates](https://angular.dev/guide/guide/templates/whitespace) | Learn how Angular handles whitespace. |",
  "title": "Templates \u2022 Overview \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "guide",
    "https",
    "templates",
    "dev",
    "template",
    "ng",
    "binding",
    "content",
    "syntax"
  ],
  "sourceURL": "https://angular.dev/guide/templates"
}