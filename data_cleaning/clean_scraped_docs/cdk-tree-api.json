{
  "content": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\nAPI for tree\n\n## API reference for Angular CDK tree\n\n`\n          import {CdkTreeModule} from '@angular/cdk/tree';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/cdk/tree/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/cdk/tree/api\\#CdkNestedTreeNode) `CdkNestedTreeNode`extends [CdkTreeNode](https://material.angular.io/cdk/tree/cdk/tree/api\\#CdkTreeNode)\n\nNested node is a child of `<cdk-tree>`. It works with nested tree.\nBy using `cdk-nested-tree-node` component in tree node template, children of the parent node will\nbe added in the `cdkTreeNodeOutlet` in tree node template.\nThe children of node will be automatically added to `cdkTreeNodeOutlet`.\n\nSelector:cdk-nested-tree-node\n\nExported as:cdkNestedTreeNode\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`isDisabled: boolean` | Whether or not this node is disabled. If it's disabled, then the user won't be able to focus<br>or activate this node. |\n| @Input({ transform: booleanAttribute })<br> <br>`isExpandable: boolean` | Whether or not this node is expandable.<br>If not using `FlatTreeControl`, or if `isExpandable` is not provided to<br>`NestedTreeControl`, this should be provided for correct node a11y. |\n| @Input()<br>`isExpanded: boolean` |  |\n| @Input('cdkTreeNodeTypeaheadLabel')<br> <br>`typeaheadLabel: string | null` | The text used to locate this item during typeahead. If not specified, the `textContent` will<br>will be used. |\n| @Output()<br>`activation: EventEmitter<T>` | This emits when the node has been programatically activated or activated by keyboard. |\n| @Output()<br>`expandedChange: EventEmitter<boolean>` | This emits when the node's expansion status has been changed. |\n| `data: T` | The tree node's data. |\n| `isLeafNode: boolean` |  |\n| `level: number` |  |\n| `nodeOutlet: QueryList<CdkTreeNodeOutlet>` | The children node placeholder. |\n| @Input()<br>Deprecated<br> <br>`role: 'treeitem' | 'group'` | The role of the tree node. |\n\n##### Methods\n\n| activate |\n| --- |\n| Emits an activation event. Implemented for TreeKeyManagerItem. |\n\n| collapse |\n| --- |\n| Collapses this data node. Implemented for TreeKeyManagerItem. |\n\n| expand |\n| --- |\n| Expands this data node. Implemented for TreeKeyManagerItem. |\n\n| focus |\n| --- |\n| Focuses this data node. Implemented for TreeKeyManagerItem. |\n\n| getChildren |\n| --- |\n| Returns |\n| --- |\n| `CdkTreeNode<T, K>[] | Observable<CdkTreeNode<T, K>[]>` |  |\n\n| getLabel |\n| --- |\n| Returns |\n| --- |\n| `string` |  |\n\n| getParent |\n| --- |\n| Returns |\n| --- |\n| `CdkTreeNode<T, K> | null` |  |\n\n| makeFocusable |\n| --- |\n| Makes the node focusable. Implemented for TreeKeyManagerItem. |\n\n| unfocus |\n| --- |\n| Defocus this data node. |\n\n| updateChildrenNodes |\n| --- |\n| Add children dataNodes to the NodeOutlet |\n| Parameters |\n| --- |\n| children?<br> `T[]` |  |\n\n#### [link](https://material.angular.io/cdk/tree/api\\#CdkTreeNodeDef) `CdkTreeNodeDef`\n\nData node definition for the CdkTree.\nCaptures the node's template and a when predicate that describes when this node should be used.\n\nSelector:\\[cdkTreeNodeDef\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input(cdkTreeNodeDefWhen)<br> <br>`when: (index: number, nodeData: T) => boolean` | Function that should return true if this node template should be used for the provided node<br>data and index. If left undefined, this node will be considered the default node template to<br>use when no other when functions return true for the data.<br>For every node, there must be at least one when function that passes or an undefined to<br>default. |\n\n#### [link](https://material.angular.io/cdk/tree/api\\#CdkTreeNodePadding) `CdkTreeNodePadding`\n\nIndent for the children tree dataNodes.\nThis directive will add left-padding to the node to show hierarchy.\n\nSelector:\\[cdkTreeNodePadding\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('cdkTreeNodePaddingIndent')<br> <br>`indent: number | string` | The indent for each level. Can be a number or a CSS string.<br>Default number 40px from material design menu sub-menu spec. |\n| @Input({ alias: 'cdkTreeNodePadding', transform: numberAttribute })<br> <br>`level: number` | The level of depth of the tree node. The padding will be `level * indent` pixels. |\n| `indentUnits: 'px'` | CSS units used for the indentation value. |\n\n#### [link](https://material.angular.io/cdk/tree/api\\#CdkTreeNodeOutlet) `CdkTreeNodeOutlet`\n\nOutlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\ninside the outlet.\n\nSelector:\\[cdkTreeNodeOutlet\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `viewContainer: inject(ViewContainerRef)` |  |\n\n#### [link](https://material.angular.io/cdk/tree/api\\#CdkTree) `CdkTree`\n\nCDK tree component that connects with a data source to retrieve data of type `T` and renders\ndataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n\nSelector:cdk-tree\n\nExported as:cdkTree\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`childrenAccessor: (dataNode: T) => T[] | Observable<T[]>` | Given a data node, determines what the children of that node are.<br>One of levelAccessor or childrenAccessor must be specified, not both.<br>This is enforced at run-time. |\n| @Input()<br>`dataSource: DataSource<T> | Observable<T[]> | T[]` | Provides a stream containing the latest data array to render. Influenced by the tree's<br>stream of view window (what dataNodes are currently on screen).<br>Data source can be an observable of data array, or a data array to render. |\n| @Input()<br>`expansionKey: (dataNode: T) => K` | Given a data node, determines the key by which we determine whether or not this node is expanded. |\n| @Input()<br>`levelAccessor: (dataNode: T) => number` | Given a data node, determines what tree level the node is at.<br>One of levelAccessor or childrenAccessor must be specified, not both.<br>This is enforced at run-time. |\n| @Input()<br>`trackBy: TrackByFunction<T>` | Tracking function that will be used to check the differences in data changes. Used similarly<br>to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data<br>relative to the function to know if a node should be added/removed/moved.<br>Accepts a function that takes two parameters, `index` and `item`. |\n| `viewChange: BehaviorSubject<{<br>    start: number;<br>    end: number;<br>}>` | Stream containing the latest information on what rows are being displayed on screen.<br>Can be used by the data source to as a heuristic of what data should be provided. |\n| @Input()<br>Deprecated<br> <br>`treeControl: TreeControl<T, K>` | The tree controller |\n\n##### Methods\n\n| collapse |\n| --- |\n| Collapse the data node. If it is already collapsed, does nothing. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| collapseAll |\n| --- |\n| Collapse all data nodes in the tree. |\n\n| collapseDescendants |\n| --- |\n| Collapse the data node and all its descendants. If it is already collapsed, does nothing. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| expand |\n| --- |\n| Expand the data node. If it is already expanded, does nothing. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| expandAll |\n| --- |\n| Expands all data nodes in the tree. |\n\n| expandDescendants |\n| --- |\n| Expand the data node and all its descendants. If they are already expanded, does nothing. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| insertNode |\n| --- |\n| Create the embedded view for the data node template and place it in the correct index location<br>within the data node view container. |\n| Parameters |\n| --- |\n| nodeData<br> `T` |  |\n| index<br> `number` |  |\n| viewContainer?<br> `ViewContainerRef` |  |\n| parentData?<br> `T` |  |\n\n| isExpanded |\n| --- |\n| Whether the data node is expanded or collapsed. Returns true if it's expanded. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| renderNodeChanges |\n| --- |\n| Check for changes made in the data and render each change (node added/removed/moved). |\n| Parameters |\n| --- |\n| data<br> `readonly T[]` |  |\n| dataDiffer<br> `IterableDiffer<T> = this._dataDiffer` |  |\n| viewContainer<br> `ViewContainerRef = this._nodeOutlet.viewContainer` |  |\n| parentData?<br> `T` |  |\n\n| toggle |\n| --- |\n| If the data node is currently expanded, collapse it. Otherwise, expand it. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| toggleDescendants |\n| --- |\n| If the data node is currently expanded, collapse it and all its descendants.<br>Otherwise, expand it and all its descendants. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n#### [link](https://material.angular.io/cdk/tree/api\\#CdkTreeNode) `CdkTreeNode`\n\nTree node for CdkTree. It contains the data in the tree node.\n\nSelector:cdk-tree-node\n\nExported as:cdkTreeNode\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`isDisabled: boolean` | Whether or not this node is disabled. If it's disabled, then the user won't be able to focus<br>or activate this node. |\n| @Input({ transform: booleanAttribute })<br> <br>`isExpandable: boolean` | Whether or not this node is expandable.<br>If not using `FlatTreeControl`, or if `isExpandable` is not provided to<br>`NestedTreeControl`, this should be provided for correct node a11y. |\n| @Input()<br>`isExpanded: boolean` |  |\n| @Input('cdkTreeNodeTypeaheadLabel')<br> <br>`typeaheadLabel: string | null` | The text used to locate this item during typeahead. If not specified, the `textContent` will<br>will be used. |\n| @Output()<br>`activation: EventEmitter<T>` | This emits when the node has been programatically activated or activated by keyboard. |\n| @Output()<br>`expandedChange: EventEmitter<boolean>` | This emits when the node's expansion status has been changed. |\n| `data: T` | The tree node's data. |\n| `isLeafNode: boolean` |  |\n| `level: number` |  |\n| `static\u00a0mostRecentTreeNode: CdkTreeNode<any> | null` | The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it<br>in `CdkTree` and set the data to it. |\n| @Input()<br>Deprecated<br> <br>`role: 'treeitem' | 'group'` | The role of the tree node. |\n\n##### Methods\n\n| activate |\n| --- |\n| Emits an activation event. Implemented for TreeKeyManagerItem. |\n\n| collapse |\n| --- |\n| Collapses this data node. Implemented for TreeKeyManagerItem. |\n\n| expand |\n| --- |\n| Expands this data node. Implemented for TreeKeyManagerItem. |\n\n| focus |\n| --- |\n| Focuses this data node. Implemented for TreeKeyManagerItem. |\n\n| getChildren |\n| --- |\n| Returns |\n| --- |\n| `CdkTreeNode<T, K>[] | Observable<CdkTreeNode<T, K>[]>` |  |\n\n| getLabel |\n| --- |\n| Returns |\n| --- |\n| `string` |  |\n\n| getParent |\n| --- |\n| Returns |\n| --- |\n| `CdkTreeNode<T, K> | null` |  |\n\n| makeFocusable |\n| --- |\n| Makes the node focusable. Implemented for TreeKeyManagerItem. |\n\n| unfocus |\n| --- |\n| Defocus this data node. |\n\n#### [link](https://material.angular.io/cdk/tree/api\\#CdkTreeNodeToggle) `CdkTreeNodeToggle`\n\nNode toggle to expand and collapse the node.\n\nSelector:\\[cdkTreeNodeToggle\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ alias: 'cdkTreeNodeToggleRecursive', transform: booleanAttribute })<br> <br>`recursive: boolean` | Whether expand/collapse the node recursively. |\n\n### [link](https://material.angular.io/cdk/tree/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/cdk/tree/api\\#BaseTreeControl) `BaseTreeControl`\n\nBase tree control. It has basic toggle/expand/collapse operations on a single data node.\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `dataNodes: T[]` | Saved data node for `expandAll` action. |\n| `expansionModel: SelectionModel<K>` | A selection model with multi-selection to track expansion status. |\n| `getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null` | Gets a stream that emits whenever the given data node's children change. |\n| `getLevel: (dataNode: T) => number` | Get depth of a given data node, return the level number. This is for flat tree node. |\n| `isExpandable: (dataNode: T) => boolean` | Whether the data node is expandable. Returns true if expandable.<br>This is for flat tree node. |\n| `trackBy: (dataNode: T) => K` | Returns the identifier by which a dataNode should be tracked, should its<br>reference change.<br>Similar to trackBy for \\*ngFor |\n\n##### Methods\n\n| collapse |\n| --- |\n| Collapses one single data node. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| collapseAll |\n| --- |\n| Collapse all dataNodes in the tree. |\n\n| collapseDescendants |\n| --- |\n| Collapses a subtree rooted at given data node recursively. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| expand |\n| --- |\n| Expands one single data node. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| expandAll |\n| --- |\n| Expands all data nodes in the tree. |\n\n| expandDescendants |\n| --- |\n| Expands a subtree rooted at given data node recursively. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| getDescendants |\n| --- |\n| Gets a list of descendent data nodes of a subtree rooted at given data node recursively. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n| Returns |\n| --- |\n| `T[]` |  |\n\n| isExpanded |\n| --- |\n| Whether a given data node is expanded or not. Returns true if the data node is expanded. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| toggle |\n| --- |\n| Toggles one single data node's expanded/collapsed state. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| toggleDescendants |\n| --- |\n| Toggles a subtree rooted at `node` recursively. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n#### [link](https://material.angular.io/cdk/tree/api\\#FlatTreeControl) `FlatTreeControl`extends [BaseTreeControl](https://material.angular.io/cdk/tree/cdk/tree/api\\#BaseTreeControl)\n\nFlat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `dataNodes: T[]` | Saved data node for `expandAll` action. |\n| `expansionModel: SelectionModel<K>` | A selection model with multi-selection to track expansion status. |\n| `getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null` | Gets a stream that emits whenever the given data node's children change. |\n| `getLevel: (dataNode: T) => number` |  |\n| `isExpandable: (dataNode: T) => boolean` |  |\n| `options: FlatTreeControlOptions<T, K>` |  |\n| `trackBy: (dataNode: T) => K` | Returns the identifier by which a dataNode should be tracked, should its<br>reference change.<br>Similar to trackBy for \\*ngFor |\n\n##### Methods\n\n| collapse |\n| --- |\n| Collapses one single data node. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| collapseAll |\n| --- |\n| Collapse all dataNodes in the tree. |\n\n| collapseDescendants |\n| --- |\n| Collapses a subtree rooted at given data node recursively. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| expand |\n| --- |\n| Expands one single data node. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| expandAll |\n| --- |\n| Expands all data nodes in the tree.<br>To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened<br>data nodes of the tree. |\n\n| expandDescendants |\n| --- |\n| Expands a subtree rooted at given data node recursively. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| getDescendants |\n| --- |\n| Gets a list of the data node's subtree of descendent data nodes.<br>To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes<br>with correct levels. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n| Returns |\n| --- |\n| `T[]` |  |\n\n| isExpanded |\n| --- |\n| Whether a given data node is expanded or not. Returns true if the data node is expanded. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| toggle |\n| --- |\n| Toggles one single data node's expanded/collapsed state. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| toggleDescendants |\n| --- |\n| Toggles a subtree rooted at `node` recursively. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n#### [link](https://material.angular.io/cdk/tree/api\\#NestedTreeControl) `NestedTreeControl`extends [BaseTreeControl](https://material.angular.io/cdk/tree/cdk/tree/api\\#BaseTreeControl)\n\nNested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `dataNodes: T[]` | Saved data node for `expandAll` action. |\n| `expansionModel: SelectionModel<K>` | A selection model with multi-selection to track expansion status. |\n| `getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null` |  |\n| `getLevel: (dataNode: T) => number` | Get depth of a given data node, return the level number. This is for flat tree node. |\n| `isExpandable: (dataNode: T) => boolean` | Whether the data node is expandable. Returns true if expandable.<br>This is for flat tree node. |\n| `options: NestedTreeControlOptions<T, K>` |  |\n| `trackBy: (dataNode: T) => K` | Returns the identifier by which a dataNode should be tracked, should its<br>reference change.<br>Similar to trackBy for \\*ngFor |\n\n##### Methods\n\n| collapse |\n| --- |\n| Collapses one single data node. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| collapseAll |\n| --- |\n| Collapse all dataNodes in the tree. |\n\n| collapseDescendants |\n| --- |\n| Collapses a subtree rooted at given data node recursively. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| expand |\n| --- |\n| Expands one single data node. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| expandAll |\n| --- |\n| Expands all dataNodes in the tree.<br>To make this working, the `dataNodes` variable of the TreeControl must be set to all root level<br>data nodes of the tree. |\n\n| expandDescendants |\n| --- |\n| Expands a subtree rooted at given data node recursively. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| getDescendants |\n| --- |\n| Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n| Returns |\n| --- |\n| `T[]` |  |\n\n| isExpanded |\n| --- |\n| Whether a given data node is expanded or not. Returns true if the data node is expanded. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| toggle |\n| --- |\n| Toggles one single data node's expanded/collapsed state. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| toggleDescendants |\n| --- |\n| Toggles a subtree rooted at `node` recursively. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n#### [link](https://material.angular.io/cdk/tree/api\\#CdkTreeNodeOutletContext) `CdkTreeNodeOutletContext`\n\nContext provided to the tree node component.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `$implicit: T` | Data for the node. |\n| `count: number` | Length of the number of total dataNodes. |\n| `index: number` | Index location of the node. |\n| `level: number` | Depth of the node. |\n\n### [link](https://material.angular.io/cdk/tree/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/cdk/tree/api\\#FlatTreeControlOptions) `FlatTreeControlOptions`\n\nOptional set of configuration that can be provided to the FlatTreeControl.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `trackBy: (dataNode: T) => K` |  |\n\n#### [link](https://material.angular.io/cdk/tree/api\\#NestedTreeControlOptions) `NestedTreeControlOptions`\n\nOptional set of configuration that can be provided to the NestedTreeControl.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `isExpandable: (dataNode: T) => boolean` | Function to determine if the provided node is expandable. |\n| `trackBy: (dataNode: T) => K` |  |\n\n#### [link](https://material.angular.io/cdk/tree/api\\#TreeControl) `TreeControl`\n\nTree control interface. User can implement TreeControl to expand/collapse dataNodes in the tree.\nThe CDKTree will use this TreeControl to expand/collapse a node.\nUser can also use it outside the `<cdk-tree>` to control the expansion status of the tree.\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `dataNodes: T[]` | The saved tree nodes data for `expandAll` action. |\n| `expansionModel: SelectionModel<K>` | The expansion model |\n| `getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null` | Gets a stream that emits whenever the given data node's children change. |\n| `getLevel: (dataNode: T) => number` | Get depth of a given data node, return the level number. This is for flat tree node. |\n| `isExpandable: (dataNode: T) => boolean` | Whether the data node is expandable. Returns true if expandable.<br>This is for flat tree node. |\n\n##### Methods\n\n| collapse |\n| --- |\n| Collapse one data node |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| collapseAll |\n| --- |\n| Collapse all the dataNodes in the tree |\n\n| collapseDescendants |\n| --- |\n| Collapse a data node and all its descendants |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| expand |\n| --- |\n| Expand one data node |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| expandAll |\n| --- |\n| Expand all the dataNodes in the tree |\n\n| expandDescendants |\n| --- |\n| Expand a data node and all its descendants |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| getDescendants |\n| --- |\n| Get all descendants of a data node |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n| Returns |\n| --- |\n| `any[]` |  |\n\n| isExpanded |\n| --- |\n| Whether the data node is expanded or collapsed. Return true if it's expanded. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| toggle |\n| --- |\n| Expand or collapse data node |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| toggleDescendants |\n| --- |\n| Toggle a data node by expand/collapse it and all its descendants |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\nTree\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nThis will be ignored; the tree will automatically determine the appropriate role\nfor tree node. This input will be removed in a future version. Will be removed in v21.0.0 or later.\n\nUse one of \\`levelAccessor\\` or \\`childrenAccessor\\` instead. To be removed in a\nfuture version. Will be removed in v21.0.0 or later.\n\nUse one of levelAccessor or childrenAccessor. To be removed in a future version. Will be removed in v21.0.0 or later.\n\nUse one of levelAccessor or childrenAccessor instead. To be removed in a future\nversion. Will be removed in v21.0.0 or later.\n\nUse one of levelAccessor or childrenAccessor instead. To be removed in a future version. Will be removed in v21.0.0 or later.\n\nCopy import to the clipboard",
  "title": "Tree | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/cdk/tree/api"
}