{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for slide-toggle\n\n## API reference for Angular Material slide-toggle\n\n`\n          import {MatSlideToggleModule} from '@angular/material/slide-toggle';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/slide-toggle/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/slide-toggle/api\\#MatSlideToggle) `MatSlideToggle`\n\nSelector:mat-slide-toggle\n\nExported as:matSlideToggle\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-describedby')<br> <br>`ariaDescribedby: string` | Used to set the aria-describedby attribute on the underlying input element. |\n| @Input('aria-label')<br> <br>`ariaLabel: string | null` | Used to set the aria-label attribute on the underlying input element. |\n| @Input('aria-labelledby')<br> <br>`ariaLabelledby: string | null` | Used to set the aria-labelledby attribute on the underlying input element. |\n| @Input({ transform: booleanAttribute })<br> <br>`checked: boolean` | Whether the slide-toggle element is checked or not. |\n| @Input()<br>`color: string | undefined` | Theme color of the slide toggle. This API is supported in M2 themes only,<br>it has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/slide-toggle/styling](https://material.angular.io/components/slide-toggle/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the slide toggle has a ripple. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the slide toggle is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Whether the slide toggle should remain interactive when it is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`hideIcon: boolean` | Whether to hide the icon inside of the slide toggle. |\n| @Input()<br>`id: string` | A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. |\n| @Input()<br>`labelPosition: 'before' | 'after'` | Whether the label should appear after or before the slide-toggle. Defaults to 'after'. |\n| @Input()<br>`name: string | null` | Name value will be applied to the input element if present. |\n| @Input({ transform: booleanAttribute })<br> <br>`required: boolean` | Whether the slide-toggle is required. |\n| @Output()<br>`change: EventEmitter<MatSlideToggleChange>` | An event will be dispatched each time the slide-toggle changes its value. |\n| @Output()<br>`toggleChange: EventEmitter<void>` | An event will be dispatched each time the slide-toggle input is toggled.<br>This event is always emitted when the user toggles the slide toggle, but this does not mean<br>the slide toggle's value has changed. |\n| `buttonId: string` | Returns the unique id for the visual hidden button. |\n| `defaults: inject<MatSlideToggleDefaultOptions>(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)` |  |\n| `inputId: string` | Returns the unique id for the visual hidden input. |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the slide-toggle. |\n\n| registerOnValidatorChange |\n| --- |\n| Implemented as a part of Validator. |\n| Parameters |\n| --- |\n| fn<br> `() => void` |  |\n\n| toggle |\n| --- |\n| Toggles the checked state of the slide-toggle. |\n\n| validate |\n| --- |\n| Implemented as a part of Validator. |\n| Parameters |\n| --- |\n| control<br> `AbstractControl<boolean, boolean>` |  |\n| Returns |\n| --- |\n| `ValidationErrors | null` |  |\n\n#### [link](https://material.angular.io/components/slide-toggle/api\\#MatSlideToggleRequiredValidator) `MatSlideToggleRequiredValidator`\n\nValidator for Material slide-toggle components with the required attribute in a\ntemplate-driven form. The default validator for required form controls asserts\nthat the control value is not undefined but that is not appropriate for a slide-toggle\nwhere the value is always defined.\n\nRequired slide-toggle form controls are valid when checked.\n\nSelector:mat-slide-toggle\\[required\\]\\[formControlName\\]mat-slide-toggle\\[required\\]\\[formControl\\]mat-slide-toggle\\[required\\]\\[ngModel\\]\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `required: boolean | string` | Tracks changes to the required attribute bound to this directive. |\n\n##### Methods\n\n| enabled |\n| --- |\n| Parameters |\n| --- |\n| input<br> `boolean` |  |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| registerOnValidatorChange |\n| --- |\n| Parameters |\n| --- |\n| fn<br> `() => void` |  |\n\n| validate |\n| --- |\n| Parameters |\n| --- |\n| control<br> `AbstractControl<any, any>` |  |\n| Returns |\n| --- |\n| `ValidationErrors | null` |  |\n\n### [link](https://material.angular.io/components/slide-toggle/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/slide-toggle/api\\#MatSlideToggleChange) `MatSlideToggleChange`\n\nChange event object emitted by a slide toggle.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `checked: boolean` | The new `checked` value of the slide toggle. |\n| `source: MatSlideToggle` | The source slide toggle of the event. |\n\n### [link](https://material.angular.io/components/slide-toggle/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/slide-toggle/api\\#MatSlideToggleDefaultOptions) `MatSlideToggleDefaultOptions`\n\nDefault `mat-slide-toggle` options that can be overridden.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `color: ThemePalette` | Default theme color of the slide toggle. This API is supported in M2 themes only,<br>it has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/slide-toggle/styling](https://material.angular.io/components/slide-toggle/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| `disableToggleValue: boolean` | Whether toggle action triggers value changes in slide toggle. |\n| `disabledInteractive: boolean` | Whether disabled slide toggles should remain interactive. |\n| `hideIcon: boolean` | Whether to hide the icon inside the slide toggle. |\n\n### [link](https://material.angular.io/components/slide-toggle/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/slide-toggle/api\\#MAT_SLIDE_TOGGLE_VALUE_ACCESSOR) `MAT_SLIDE_TOGGLE_VALUE_ACCESSOR`\n\nDeprecated\n\n```docs-markdown-code\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: { provide: InjectionToken<readonly ControlValueAccessor[]>; useExisting: Type$1<any>; multi: boolean; };\n\n```\n\n#### [link](https://material.angular.io/components/slide-toggle/api\\#MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS) `MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS`\n\nInjection token to be used to override the default options for `mat-slide-toggle`.\n\n```docs-markdown-code\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS: InjectionToken<MatSlideToggleDefaultOptions>;\n\n```\n\n#### [link](https://material.angular.io/components/slide-toggle/api\\#MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR) `MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR`\n\nDeprecated\n\n```docs-markdown-code\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider;\n\n```\n\n## API reference for Angular Material slide-toggle-testing\n\n`\n          import {MatSlideToggleHarness} from '@angular/material/slide-toggle/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/slide-toggle/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/slide-toggle/api\\#MatSlideToggleHarness) `MatSlideToggleHarness`extends [ComponentHarness](https://material.angular.io/components/slide-toggle/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a mat-slide-toggle in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-slide-toggle'` |  |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the slide-toggle. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>check |\n| --- |\n| Puts the slide-toggle in a checked state by toggling it if it is currently unchecked, or doing<br>nothing if it is already checked. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the slide-toggle. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAriaLabel |\n| --- |\n| Gets the slide-toggle's aria-label. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getAriaLabelledby |\n| --- |\n| Gets the slide-toggle's aria-labelledby. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getLabelText |\n| --- |\n| Gets the slide-toggle's label text. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getName |\n| --- |\n| Gets the slide-toggle's name. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isChecked |\n| --- |\n| Whether the slide-toggle is checked. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the slide-toggle is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the slide-toggle is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRequired |\n| --- |\n| Whether the slide-toggle is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isValid |\n| --- |\n| Whether the slide-toggle is valid. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>toggle |\n| --- |\n| Toggle the checked state of the slide-toggle. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>uncheck |\n| --- |\n| Puts the slide-toggle in an unchecked state by toggling it if it is currently checked, or doing<br>nothing if it is already unchecked. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a slide-toggle w/ specific attributes. |\n| Parameters |\n| --- |\n| options<br> `SlideToggleHarnessFilters = {}` | Options for narrowing the search:<br>- `selector` finds a slide-toggle whose host element matches the given selector.<br>- `label` finds a slide-toggle with specific label text. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/slide-toggle/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/slide-toggle/api\\#SlideToggleHarnessFilters) `SlideToggleHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatSlideToggleHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `checked: boolean` | Only find instances with the given checked value. |\n| `disabled: boolean` | Only find instances where the disabled state matches the given value. |\n| `label: string | RegExp` | Only find instances whose label matches the given value. |\n| `name: string` | Only find instances whose name is the given value. |\n\nSlide toggle\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nNo longer used, \\`MatCheckbox\\` implements required validation directly. Will be removed in v19.0.0 or later.\n\nWill stop being exported. Will be removed in v19.0.0 or later.\n\nCopy import to the clipboard",
  "title": "Slide toggle | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/slide-toggle/api"
}