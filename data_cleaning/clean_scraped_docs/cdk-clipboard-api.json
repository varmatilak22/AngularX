{
  "content": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\nAPI for clipboard\n\n## API reference for Angular CDK clipboard\n\n`\n          import {ClipboardModule} from '@angular/cdk/clipboard';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/cdk/clipboard/api\\#services)  Services\n\n#### [link](https://material.angular.io/cdk/clipboard/api\\#Clipboard) `Clipboard`\n\nA service for copying text to the clipboard.\n\n##### Methods\n\n| beginCopy |\n| --- |\n| Prepares a string to be copied later. This is useful for large strings<br>which take too long to successfully render and be copied in the same tick.<br>The caller must call `destroy` on the returned `PendingCopy`. |\n| Parameters |\n| --- |\n| text<br> `string` | The string to copy. |\n| Returns |\n| --- |\n| `PendingCopy` | the pending copy operation. |\n\n| copy |\n| --- |\n| Copies the provided text into the user's clipboard. |\n| Parameters |\n| --- |\n| text<br> `string` | The string to copy. |\n| Returns |\n| --- |\n| `boolean` | Whether the operation was successful. |\n\n### [link](https://material.angular.io/cdk/clipboard/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/cdk/clipboard/api\\#CdkCopyToClipboard) `CdkCopyToClipboard`\n\nProvides behavior for a button that when clicked copies content into user's\nclipboard.\n\nSelector:\\[cdkCopyToClipboard\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('cdkCopyToClipboardAttempts')<br> <br>`attempts: number` | How many times to attempt to copy the text. This may be necessary for longer text, because<br>the browser needs time to fill an intermediate textarea element and copy the content. |\n| @Input('cdkCopyToClipboard')<br> <br>`text: string` | Content to be copied. |\n| @Output('cdkCopyToClipboardCopied')<br> <br>`copied: EventEmitter<boolean>` | Emits when some text is copied to the clipboard. The<br>emitted value indicates whether copying was successful. |\n\n##### Methods\n\n| copy |\n| --- |\n| Copies the current text to the clipboard. |\n| Parameters |\n| --- |\n| attempts<br> `number = this.attempts` |  |\n\n### [link](https://material.angular.io/cdk/clipboard/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/cdk/clipboard/api\\#PendingCopy) `PendingCopy`\n\nA pending copy-to-clipboard operation.\n\nThe implementation of copying text to the clipboard modifies the DOM and\nforces a re-layout. This re-layout can take too long if the string is large,\ncausing the execCommand('copy') to happen too long after the user clicked.\nThis results in the browser refusing to copy. This object lets the\nre-layout happen in a separate tick from copying by providing a copy function\nthat can be called later.\n\nDestroy must be called when no longer in use, regardless of whether `copy` is\ncalled.\n\n##### Methods\n\n| copy |\n| --- |\n| Finishes copying the text. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| destroy |\n| --- |\n| Cleans up DOM changes used to perform the copy operation. |\n\n### [link](https://material.angular.io/cdk/clipboard/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/cdk/clipboard/api\\#CdkCopyToClipboardConfig) `CdkCopyToClipboardConfig`\n\nObject that can be used to configure the default options for `CdkCopyToClipboard`.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `attempts: number` | Default number of attempts to make when copying text to the clipboard. |\n\n### [link](https://material.angular.io/cdk/clipboard/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/cdk/clipboard/api\\#CDK_COPY_TO_CLIPBOARD_CONFIG) `CDK_COPY_TO_CLIPBOARD_CONFIG`\n\nInjection token that can be used to provide the default options to `CdkCopyToClipboard`.\n\n```docs-markdown-code\nconst CDK_COPY_TO_CLIPBOARD_CONFIG: InjectionToken<CdkCopyToClipboardConfig>;\n\n```\n\nClipboard\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
  "title": "Clipboard | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/cdk/clipboard/api"
}