{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for chips\n\n## API reference for Angular Material chips\n\n`\n          import {MatChipsModule} from '@angular/material/chips';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/chips/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChip) `MatChip`\n\nMaterial design styled Chip base component. Used inside the MatChipSet component.\n\nExtended by MatChipOption and MatChipRow for different interaction patterns.\n\nSelector:mat-basic-chip\\[mat-basic-chip\\]mat-chip\\[mat-chip\\]\n\nExported as:matChip\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-description')<br> <br>`ariaDescription: string | null` | ARIA description for the content of the chip. |\n| @Input('aria-label')<br> <br>`ariaLabel: string | null` | ARIA label for the content of the chip. |\n| @Input()<br>`color: string | null` | Theme color of the chip. This API is supported in M2 themes only, it has no<br>effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/chips/styling](https://material.angular.io/components/chips/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the ripple effect is disabled or not. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the chip is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`highlighted: boolean` | Colors the chip for emphasis as if it were selected. |\n| @Input()<br>`id: string` | A unique id for the chip. If none is supplied, it will be auto-generated. |\n| @Input({ transform: booleanAttribute })<br> <br>`removable: boolean` | Determines whether or not the chip displays the remove styling and emits (removed) events. |\n| @Input()<br>`role: string | null` | Role for the root of the chip. |\n| @Input()<br>`value: any` | The value of the chip. Defaults to the content inside<br>the `mat-mdc-chip-action-label` element. |\n| @Output()<br>`destroyed: EventEmitter<MatChipEvent>` | Emitted when the chip is destroyed. |\n| @Output()<br>`removed: EventEmitter<MatChipEvent>` | Emitted when a chip is to be removed. |\n| `basicChipAttrName: 'mat-basic-chip'` | The unstyled chip selector for this component. |\n| `leadingIcon: MatChipAvatar` | The chip's leading icon. |\n| `primaryAction: MatChipAction` | Action receiving the primary set of user interactions. |\n| `removeIcon: MatChipRemove` | The chip's trailing remove icon. |\n| `trailingIcon: MatChipTrailingIcon` | The chip's trailing icon. |\n\n##### Methods\n\n| focus |\n| --- |\n| Allows for programmatic focusing of the chip. |\n\n| remove |\n| --- |\n| Allows for programmatic removal of the chip.<br>Informs any listeners of the removal request. Does not remove the chip from the DOM. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipOption) `MatChipOption`extends [MatChip](https://material.angular.io/components/chips/components/chips/api\\#MatChip)\n\nAn extension of the MatChip component that supports chip selection. Used with MatChipListbox.\n\nUnlike other chips, the user can focus on disabled chip options inside a MatChipListbox. The\nuser cannot click disabled chips.\n\nSelector:mat-basic-chip-option\\[mat-basic-chip-option\\]mat-chip-option\\[mat-chip-option\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-description')<br> <br>`ariaDescription: string | null` | ARIA description for the content of the chip. |\n| @Input('aria-label')<br> <br>`ariaLabel: string | null` | ARIA label for the content of the chip. |\n| @Input()<br>`color: string | null` | Theme color of the chip. This API is supported in M2 themes only, it has no<br>effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/chips/styling](https://material.angular.io/components/chips/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the ripple effect is disabled or not. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the chip is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`highlighted: boolean` | Colors the chip for emphasis as if it were selected. |\n| @Input()<br>`id: string` | A unique id for the chip. If none is supplied, it will be auto-generated. |\n| @Input({ transform: booleanAttribute })<br> <br>`removable: boolean` | Determines whether or not the chip displays the remove styling and emits (removed) events. |\n| @Input()<br>`role: string | null` | Role for the root of the chip. |\n| @Input({ transform: booleanAttribute })<br> <br>`selectable: boolean` | Whether or not the chip is selectable.<br>When a chip is not selectable, changes to its selected state are always<br>ignored. By default an option chip is selectable, and it becomes<br>non-selectable if its parent chip list is not selectable. |\n| @Input({ transform: booleanAttribute })<br> <br>`selected: boolean` | Whether the chip is selected. |\n| @Input()<br>`value: any` | The value of the chip. Defaults to the content inside<br>the `mat-mdc-chip-action-label` element. |\n| @Output()<br>`destroyed: EventEmitter<MatChipEvent>` | Emitted when the chip is destroyed. |\n| @Output()<br>`removed: EventEmitter<MatChipEvent>` | Emitted when a chip is to be removed. |\n| @Output()<br>`selectionChange: EventEmitter<MatChipSelectionChange>` | Emitted when the chip is selected or deselected. |\n| `ariaSelected: string | null` | The ARIA selected applied to the chip. Conforms to WAI ARIA best practices for listbox<br>interaction patterns.<br>From [WAI ARIA Listbox authoring practices guide](https://www.w3.org/WAI/ARIA/apg/patterns/listbox/):<br>\"If any options are selected, each selected option has either aria-selected or aria-checked<br>set to true. All options that are selectable but not selected have either aria-selected or<br>aria-checked set to false.\"<br>Set `aria-selected=\"false\"` on not-selected listbox options that are selectable to fix<br>VoiceOver reading every option as \"selected\" (#25736). |\n| `basicChipAttrName: 'mat-basic-chip-option'` | The unstyled chip selector for this component. |\n| `chipListSelectable: boolean` | Whether the chip list is selectable. |\n| `leadingIcon: MatChipAvatar` | The chip's leading icon. |\n| `primaryAction: MatChipAction` | Action receiving the primary set of user interactions. |\n| `removeIcon: MatChipRemove` | The chip's trailing remove icon. |\n| `trailingIcon: MatChipTrailingIcon` | The chip's trailing icon. |\n\n##### Methods\n\n| deselect |\n| --- |\n| Deselects the chip. |\n\n| focus |\n| --- |\n| Allows for programmatic focusing of the chip. |\n\n| remove |\n| --- |\n| Allows for programmatic removal of the chip.<br>Informs any listeners of the removal request. Does not remove the chip from the DOM. |\n\n| select |\n| --- |\n| Selects the chip. |\n\n| selectViaInteraction |\n| --- |\n| Selects this chip and emits userInputSelection event |\n\n| toggleSelected |\n| --- |\n| Toggles the current selected state of this chip. |\n| Parameters |\n| --- |\n| isUserInput<br> `boolean = false` |  |\n| Returns |\n| --- |\n| `boolean` |  |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipRow) `MatChipRow`extends [MatChip](https://material.angular.io/components/chips/components/chips/api\\#MatChip)\n\nAn extension of the MatChip component used with MatChipGrid and\nthe matChipInputFor directive.\n\nSelector:mat-chip-row\\[mat-chip-row\\]mat-basic-chip-row\\[mat-basic-chip-row\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-description')<br> <br>`ariaDescription: string | null` | ARIA description for the content of the chip. |\n| @Input('aria-label')<br> <br>`ariaLabel: string | null` | ARIA label for the content of the chip. |\n| @Input()<br>`color: string | null` | Theme color of the chip. This API is supported in M2 themes only, it has no<br>effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/chips/styling](https://material.angular.io/components/chips/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the ripple effect is disabled or not. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the chip is disabled. |\n| @Input()<br>`editable: boolean` |  |\n| @Input({ transform: booleanAttribute })<br> <br>`highlighted: boolean` | Colors the chip for emphasis as if it were selected. |\n| @Input()<br>`id: string` | A unique id for the chip. If none is supplied, it will be auto-generated. |\n| @Input({ transform: booleanAttribute })<br> <br>`removable: boolean` | Determines whether or not the chip displays the remove styling and emits (removed) events. |\n| @Input()<br>`role: string | null` | Role for the root of the chip. |\n| @Input()<br>`value: any` | The value of the chip. Defaults to the content inside<br>the `mat-mdc-chip-action-label` element. |\n| @Output()<br>`destroyed: EventEmitter<MatChipEvent>` | Emitted when the chip is destroyed. |\n| @Output()<br>`edited: EventEmitter<MatChipEditedEvent>` | Emitted when the chip is edited. |\n| @Output()<br>`removed: EventEmitter<MatChipEvent>` | Emitted when a chip is to be removed. |\n| `basicChipAttrName: 'mat-basic-chip-row'` |  |\n| `contentEditInput: MatChipEditInput` | The projected chip edit input. |\n| `defaultEditInput: MatChipEditInput` | The default chip edit input that is used if none is projected into this chip row. |\n| `leadingIcon: MatChipAvatar` | The chip's leading icon. |\n| `primaryAction: MatChipAction` | Action receiving the primary set of user interactions. |\n| `removeIcon: MatChipRemove` | The chip's trailing remove icon. |\n| `trailingIcon: MatChipTrailingIcon` | The chip's trailing icon. |\n\n##### Methods\n\n| focus |\n| --- |\n| Allows for programmatic focusing of the chip. |\n\n| remove |\n| --- |\n| Allows for programmatic removal of the chip.<br>Informs any listeners of the removal request. Does not remove the chip from the DOM. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipSet) `MatChipSet`\n\nBasic container component for the MatChip component.\n\nExtended by MatChipListbox and MatChipGrid for different interaction patterns.\n\nSelector:mat-chip-set\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the chip set is disabled. |\n| @Input()<br>`role: string | null` | The ARIA role applied to the chip set. |\n| `chipDestroyedChanges: Observable<MatChipEvent>` | Combined stream of all of the child chips' destroy events. |\n| `chipFocusChanges: Observable<MatChipEvent>` | Combined stream of all of the child chips' focus events. |\n| `chipRemovedChanges: Observable<MatChipEvent>` | Combined stream of all of the child chips' remove events. |\n| `empty: boolean` | Whether the chip list contains chips or not. |\n| `focused: boolean` | Whether any of the chips inside of this chip-set has focus. |\n\n##### Methods\n\n| focus |\n| --- |\n| Dummy method for subclasses to override. Base chip set cannot be focused. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipListbox) `MatChipListbox`extends [MatChipSet](https://material.angular.io/components/chips/components/chips/api\\#MatChipSet)\n\nAn extension of the MatChipSet component that supports chip selection.\nUsed with MatChipOption chips.\n\nSelector:mat-chip-listbox\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-orientation')<br> <br>`ariaOrientation: 'horizontal' | 'vertical'` | Orientation of the chip list. |\n| @Input()<br>`compareWith: (o1: any, o2: any) => boolean` | A function to compare the option values with the selected values. The first argument<br>is a value from an option. The second is a value from the selection. A boolean<br>should be returned. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the chip set is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`hideSingleSelectionIndicator: boolean` | Whether checkmark indicator for single-selection options is hidden. |\n| @Input({ transform: booleanAttribute })<br> <br>`multiple: boolean` | Whether the user should be allowed to select multiple chips. |\n| @Input({ transform: booleanAttribute })<br> <br>`required: boolean` | Whether this chip listbox is required. |\n| @Input()<br>`role: string | null` | The ARIA role applied to the chip set. |\n| @Input({ transform: booleanAttribute })<br> <br>`selectable: boolean` | Whether or not this chip listbox is selectable.<br>When a chip listbox is not selectable, the selected states for all<br>the chips inside the chip listbox are always ignored. |\n| @Input()<br>`value: any` | The value of the listbox, which is the combined value of the selected chips. |\n| @Output()<br>`change: EventEmitter<MatChipListboxChange>` | Event emitted when the selected chip listbox value has been changed by the user. |\n| `chipBlurChanges: Observable<MatChipEvent>` | Combined stream of all of the child chips' blur events. |\n| `chipDestroyedChanges: Observable<MatChipEvent>` | Combined stream of all of the child chips' destroy events. |\n| `chipFocusChanges: Observable<MatChipEvent>` | Combined stream of all of the child chips' focus events. |\n| `chipRemovedChanges: Observable<MatChipEvent>` | Combined stream of all of the child chips' remove events. |\n| `chipSelectionChanges: Observable<MatChipSelectionChange>` | Combined stream of all of the child chips' selection change events. |\n| `empty: boolean` | Whether the chip list contains chips or not. |\n| `focused: boolean` | Whether any of the chips inside of this chip-set has focus. |\n| `selected: MatChipOption[] | MatChipOption` | The array of selected chips inside the chip listbox. |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there<br>are no selected chips. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipGrid) `MatChipGrid`extends [MatChipSet](https://material.angular.io/components/chips/components/chips/api\\#MatChipSet)\n\nAn extension of the MatChipSet component used with MatChipRow chips and\nthe matChipInputFor directive.\n\nSelector:mat-chip-grid\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`errorStateMatcher: ErrorStateMatcher` | An object used to control when error messages are shown. |\n| @Input()<br>`role: string | null` | The ARIA role applied to the chip set. |\n| @Output()<br>`change: EventEmitter<MatChipGridChange>` | Emits when the chip grid value has been changed by the user. |\n| `chipBlurChanges: Observable<MatChipEvent>` | Combined stream of all of the child chips' blur events. |\n| `chipDestroyedChanges: Observable<MatChipEvent>` | Combined stream of all of the child chips' destroy events. |\n| `chipFocusChanges: Observable<MatChipEvent>` | Combined stream of all of the child chips' focus events. |\n| `chipRemovedChanges: Observable<MatChipEvent>` | Combined stream of all of the child chips' remove events. |\n| `errorState: boolean` | Whether the chip grid is in an error state. |\n| `focused: boolean` | Whether any chips or the matChipInput inside of this chip-grid has focus. |\n| `ngControl: inject(NgControl, { optional: true, self: true })!` |  |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the first chip in this chip grid, or the associated input when there<br>are no eligible chips. |\n\n| registerInput |\n| --- |\n| Associates an HTML input element with this chip grid. |\n| Parameters |\n| --- |\n| inputElement<br> `MatChipTextControl` |  |\n\n| updateErrorState |\n| --- |\n| Refreshes the error state of the chip grid. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipInput) `MatChipInput`\n\nDirective that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\nMay be placed inside or outside of a `<mat-chip-grid>`.\n\nSelector:input\\[matChipInputFor\\]\n\nExported as:matChipInput, matChipInputFor\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ alias: 'matChipInputAddOnBlur', transform: booleanAttribute })<br> <br>`addOnBlur: boolean` | Whether or not the chipEnd event will be emitted when the input is blurred. |\n| @Input('matChipInputFor')<br> <br>`chipGrid: MatChipGrid` | Register input for chip list |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the input is disabled. |\n| @Input()<br>`id: string` | Unique id for the input. |\n| @Input()<br>`placeholder: string` | The input's placeholder text. |\n| @Input('matChipInputSeparatorKeyCodes')<br> <br>`separatorKeyCodes: readonly number[] | ReadonlySet<number>` | The list of key codes that will trigger a chipEnd event.<br>Defaults to `[ENTER]`. |\n| @Output('matChipInputTokenEnd')<br> <br>`chipEnd: EventEmitter<MatChipInputEvent>` | Emitted when a chip is to be added. |\n| `empty: boolean` | Whether the input is empty. |\n| `focused: boolean` | Whether the control is focused. |\n| `inputElement: HTMLInputElement` | The native input element to which this directive is attached. |\n\n##### Methods\n\n| clear |\n| --- |\n| Clears the input |\n\n| focus |\n| --- |\n| Focuses the input. |\n\n| setDescribedByIds |\n| --- |\n| Parameters |\n| --- |\n| ids<br> `string[]` |  |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipAvatar) `MatChipAvatar`\n\nAvatar image within a chip.\n\nSelector:mat-chip-avatar\\[matChipAvatar\\]\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipTrailingIcon) `MatChipTrailingIcon`\n\nNon-interactive trailing icon in a chip.\n\nSelector:mat-chip-trailing-icon\\[matChipTrailingIcon\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the action is disabled. |\n| `isInteractive: false` | MDC considers all trailing actions as a remove icon,<br>but we support non-interactive trailing icons. |\n\n##### Methods\n\n| focus |\n| --- |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipRemove) `MatChipRemove`\n\nDirective to remove the parent chip when the trailing icon is clicked or\nwhen the ENTER key is pressed on it.\n\nRecommended for use with the Material Design \"cancel\" icon\navailable at [https://material.io/icons/#ic\\_cancel](https://material.io/icons/#ic_cancel).\n\nExample:\n\n```\n<mat-chip>\n  <mat-icon matChipRemove>cancel</mat-icon>\n</mat-chip>\n```\n\nSelector:\\[matChipRemove\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the action is disabled. |\n| @Input()<br>`isInteractive: true` | Whether the action is interactive. |\n\n##### Methods\n\n| focus |\n| --- |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipEditInput) `MatChipEditInput`\n\nA directive that makes a span editable and exposes functions to modify and retrieve the\nelement's contents.\n\nSelector:span\\[matChipEditInput\\]\n\n##### Methods\n\n| getNativeElement |\n| --- |\n| Returns |\n| --- |\n| `HTMLElement` |  |\n\n| getValue |\n| --- |\n| Returns |\n| --- |\n| `string` |  |\n\n| initialize |\n| --- |\n| Parameters |\n| --- |\n| initialValue<br> `string` |  |\n\n| setValue |\n| --- |\n| Parameters |\n| --- |\n| value<br> `string` |  |\n\n### [link](https://material.angular.io/components/chips/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipSelectionChange) `MatChipSelectionChange`\n\nEvent object emitted by MatChipOption when selected or deselected.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `isUserInput: false` | Whether the selection change was a result of a user interaction. |\n| `selected: boolean` | Whether the chip that emitted the event is selected. |\n| `source: MatChipOption` | Reference to the chip that emitted the event. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipListboxChange) `MatChipListboxChange`\n\nChange event object that is emitted when the chip listbox value has changed.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `source: MatChipListbox` | Chip listbox that emitted the event. |\n| `value: any` | Value of the chip listbox when the event was emitted. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipGridChange) `MatChipGridChange`\n\nChange event object that is emitted when the chip grid value has changed.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `source: MatChipGrid` | Chip grid that emitted the event. |\n| `value: any` | Value of the chip grid when the event was emitted. |\n\n### [link](https://material.angular.io/components/chips/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipEvent) `MatChipEvent`\n\nRepresents an event fired on an individual `mat-chip`.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `chip: MatChip` | The chip the event was fired on. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipEditedEvent) `MatChipEditedEvent`\n\nRepresents an event fired on an individual `mat-chip` when it is edited.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `value: string` | The final edit value. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipInputEvent) `MatChipInputEvent`\n\nRepresents an input event on a `matChipInput`.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `chipInput: MatChipInput` | Reference to the chip input that emitted the event. |\n| `value: string` | The value of the input. |\n| Deprecated<br> <br>`input: HTMLInputElement` | The native `<input>` element that the event is being fired for. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipsDefaultOptions) `MatChipsDefaultOptions`\n\nDefault options, for the chips module, that can be overridden.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `hideSingleSelectionIndicator: boolean` | Whether icon indicators should be hidden for single-selection. |\n| `separatorKeyCodes: readonly number[] | ReadonlySet<number>` | The list of key codes that will trigger a chipEnd event. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipTextControl) `MatChipTextControl`\n\nInterface for a text control that is used to drive interaction with a mat-chip-list.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `empty: boolean` | Whether the text control is empty. |\n| `focused: boolean` | Whether the text control has browser focus. |\n| `id: string` | Unique identifier for the text control. |\n| `placeholder: string` | The text control's placeholder text. |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the text control. |\n\n| setDescribedByIds |\n| --- |\n| Sets the list of ids the input is described by. |\n| Parameters |\n| --- |\n| ids<br> `string[]` |  |\n\n### [link](https://material.angular.io/components/chips/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/chips/api\\#MAT_CHIPS_DEFAULT_OPTIONS) `MAT_CHIPS_DEFAULT_OPTIONS`\n\nInjection token to be used to override the default options for the chips module.\n\n```docs-markdown-code\nconst MAT_CHIPS_DEFAULT_OPTIONS: InjectionToken<MatChipsDefaultOptions>;\n\n```\n\n#### [link](https://material.angular.io/components/chips/api\\#MAT_CHIP_AVATAR) `MAT_CHIP_AVATAR`\n\nInjection token that can be used to reference instances of `MatChipAvatar`. It serves as\nalternative token to the actual `MatChipAvatar` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst MAT_CHIP_AVATAR: InjectionToken<unknown>;\n\n```\n\n#### [link](https://material.angular.io/components/chips/api\\#MAT_CHIP_TRAILING_ICON) `MAT_CHIP_TRAILING_ICON`\n\nInjection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\nalternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst MAT_CHIP_TRAILING_ICON: InjectionToken<unknown>;\n\n```\n\n#### [link](https://material.angular.io/components/chips/api\\#MAT_CHIP_REMOVE) `MAT_CHIP_REMOVE`\n\nInjection token that can be used to reference instances of `MatChipRemove`. It serves as\nalternative token to the actual `MatChipRemove` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst MAT_CHIP_REMOVE: InjectionToken<unknown>;\n\n```\n\n#### [link](https://material.angular.io/components/chips/api\\#MAT_CHIP) `MAT_CHIP`\n\nInjection token used to avoid a circular dependency between the `MatChip` and `MatChipAction`.\n\n```docs-markdown-code\nconst MAT_CHIP: InjectionToken<unknown>;\n\n```\n\n## API reference for Angular Material chips-testing\n\n`\n          import {MatChipAvatarHarness} from '@angular/material/chips/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/chips/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipAvatarHarness) `MatChipAvatarHarness`extends [ComponentHarness](https://material.angular.io/components/chips/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard Material chip avatar in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-chip-avatar'` |  |\n\n##### Methods\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a chip avatar with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `ChipAvatarHarnessFilters = {}` | Options for filtering which input instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipHarness) `MatChipHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/chips/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a mat-chip in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-basic-chip, .mat-mdc-chip'` |  |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getAvatar |\n| --- |\n| Gets the avatar inside a chip. |\n| Parameters |\n| --- |\n| filter<br> `ChipAvatarHarnessFilters = {}` | Optionally filters which avatars are included. |\n| Returns |\n| --- |\n| `Promise<MatChipAvatarHarness | null>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getRemoveButton |\n| --- |\n| Gets the remove button inside of a chip. |\n| Parameters |\n| --- |\n| filter<br> `ChipRemoveHarnessFilters = {}` | Optionally filters which chips are included. |\n| Returns |\n| --- |\n| `Promise<MatChipRemoveHarness>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets a promise for the text content the option. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the chip is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>remove |\n| --- |\n| Delete a chip from the set. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a chip with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `ChipHarnessFilters = {}` | Options for narrowing the search. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipInputHarness) `MatChipInputHarness`extends [ComponentHarness](https://material.angular.io/components/chips/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a grid's chip input in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-chip-input'` |  |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the input and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the input and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getPlaceholder |\n| --- |\n| Gets the placeholder of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getValue |\n| --- |\n| Gets the value of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the input is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the input is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRequired |\n| --- |\n| Whether the input is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>sendSeparatorKey |\n| --- |\n| Sends a chip separator key to the input element. |\n| Parameters |\n| --- |\n| key<br> `string | TestKey` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>setValue |\n| --- |\n| Sets the value of the input. The value will be set by simulating<br>keypresses that correspond to the given value. |\n| Parameters |\n| --- |\n| newValue<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a chip input with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `ChipInputHarnessFilters = {}` | Options for filtering which input instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipRemoveHarness) `MatChipRemoveHarness`extends [ComponentHarness](https://material.angular.io/components/chips/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard Material chip remove button in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-chip-remove'` |  |\n\n##### Methods\n\n| async<br> <br>click |\n| --- |\n| Clicks the remove button. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a chip remove with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `ChipRemoveHarnessFilters = {}` | Options for filtering which input instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipOptionHarness) `MatChipOptionHarness`extends [MatChipHarness](https://material.angular.io/components/chips/components/chips/testing/api\\#MatChipHarness)\n\nHarness for interacting with a mat-chip-option in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-chip-option'` |  |\n\n##### Methods\n\n| async<br> <br>deselect |\n| --- |\n| Deselects the given chip. Only applies if it's selectable. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getAvatar |\n| --- |\n| Gets the avatar inside a chip. |\n| Parameters |\n| --- |\n| filter<br> `ChipAvatarHarnessFilters = {}` | Optionally filters which avatars are included. |\n| Returns |\n| --- |\n| `Promise<MatChipAvatarHarness | null>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getRemoveButton |\n| --- |\n| Gets the remove button inside of a chip. |\n| Parameters |\n| --- |\n| filter<br> `ChipRemoveHarnessFilters = {}` | Optionally filters which chips are included. |\n| Returns |\n| --- |\n| `Promise<MatChipRemoveHarness>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets a promise for the text content the option. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the chip is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isSelected |\n| --- |\n| Whether the chip is selected. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>remove |\n| --- |\n| Delete a chip from the set. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>select |\n| --- |\n| Selects the given chip. Only applies if it's selectable. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>toggle |\n| --- |\n| Toggles the selected state of the given chip. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a chip option with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `ChipOptionHarnessFilters = {}` | Options for narrowing the search. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipListboxHarness) `MatChipListboxHarness`extends [ComponentHarness](https://material.angular.io/components/chips/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a mat-chip-listbox in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-chip-listbox'` |  |\n\n##### Methods\n\n| async<br> <br>getChips |\n| --- |\n| Gets the list of chips inside the chip list. |\n| Parameters |\n| --- |\n| filter<br> `ChipOptionHarnessFilters = {}` | Optionally filters which chips are included. |\n| Returns |\n| --- |\n| `Promise<MatChipOptionHarness[]>` |  |\n\n| async<br> <br>getOrientation |\n| --- |\n| Gets whether the orientation of the chip list. |\n| Returns |\n| --- |\n| `Promise<'horizontal' | 'vertical'>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Gets whether the chip listbox is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isMultiple |\n| --- |\n| Gets whether the chip listbox is in multi selection mode. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRequired |\n| --- |\n| Gets whether the chip listbox is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>selectChips |\n| --- |\n| Selects a chip inside the chip list. |\n| Parameters |\n| --- |\n| filter<br> `ChipOptionHarnessFilters = {}` | An optional filter to apply to the child chips.<br>All the chips matching the filter will be selected. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a chip listbox with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `ChipListboxHarnessFilters = {}` | Options for narrowing the search. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipGridHarness) `MatChipGridHarness`extends [ComponentHarness](https://material.angular.io/components/chips/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a mat-chip-grid in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-chip-grid'` |  |\n\n##### Methods\n\n| async<br> <br>getInput |\n| --- |\n| Gets promise of the chip text input harness. |\n| Parameters |\n| --- |\n| filter<br> `ChipInputHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<MatChipInputHarness | null>` |  |\n\n| async<br> <br>getRows |\n| --- |\n| Gets promise of the harnesses for the chip rows. |\n| Parameters |\n| --- |\n| filter<br> `ChipRowHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<MatChipRowHarness[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Gets whether the chip grid is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isInvalid |\n| --- |\n| Gets whether the chip grid is invalid. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRequired |\n| --- |\n| Gets whether the chip grid is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a chip grid with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `ChipGridHarnessFilters = {}` | Options for filtering which chip grid instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipRowHarness) `MatChipRowHarness`extends [MatChipHarness](https://material.angular.io/components/chips/components/chips/testing/api\\#MatChipHarness)\n\nHarness for interacting with a mat-chip-row in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-chip-row'` |  |\n\n##### Methods\n\n| async<br> <br>finishEditing |\n| --- |\n| Stops editing the chip, if it was in the editing state. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getAvatar |\n| --- |\n| Gets the avatar inside a chip. |\n| Parameters |\n| --- |\n| filter<br> `ChipAvatarHarnessFilters = {}` | Optionally filters which avatars are included. |\n| Returns |\n| --- |\n| `Promise<MatChipAvatarHarness | null>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getEditInput |\n| --- |\n| Gets the edit input inside the chip row. |\n| Parameters |\n| --- |\n| filter<br> `ChipEditInputHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<MatChipEditInputHarness>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getRemoveButton |\n| --- |\n| Gets the remove button inside of a chip. |\n| Parameters |\n| --- |\n| filter<br> `ChipRemoveHarnessFilters = {}` | Optionally filters which chips are included. |\n| Returns |\n| --- |\n| `Promise<MatChipRemoveHarness>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets a promise for the text content the option. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the chip is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isEditable |\n| --- |\n| Whether the chip is editable. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isEditing |\n| --- |\n| Whether the chip is currently being edited. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>remove |\n| --- |\n| Delete a chip from the set. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>startEditing |\n| --- |\n| Sets the chip row into an editing state, if it is editable. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipSetHarness) `MatChipSetHarness`extends [ComponentHarness](https://material.angular.io/components/chips/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a mat-chip-set in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-chip-set'` |  |\n\n##### Methods\n\n| async<br> <br>getChips |\n| --- |\n| Gets promise of the harnesses for the chips. |\n| Parameters |\n| --- |\n| filter<br> `ChipHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<MatChipHarness[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a chip set with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `ChipSetHarnessFilters = {}` | Options for filtering which chip set instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/chips/api\\#MatChipEditInputHarness) `MatChipEditInputHarness`extends [ComponentHarness](https://material.angular.io/components/chips/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with an editable chip's input in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-chip-edit-input'` |  |\n\n##### Methods\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>setValue |\n| --- |\n| Sets the value of the input. |\n| Parameters |\n| --- |\n| value<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a chip edit input with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `ChipEditInputHarnessFilters = {}` | Options for filtering which input instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/chips/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/chips/api\\#ChipHarnessFilters) `ChipHarnessFilters`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disabled: boolean` | Only find instances which match the given disabled state. |\n| `text: string | RegExp` | Only find instances whose text matches the given value. |\n\n#### [link](https://material.angular.io/components/chips/api\\#ChipInputHarnessFilters) `ChipInputHarnessFilters`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disabled: boolean` | Only find instances which match the given disabled state. |\n| `placeholder: string | RegExp` | Filters based on the placeholder text of the input. |\n| `value: string | RegExp` | Filters based on the value of the input. |\n\n#### [link](https://material.angular.io/components/chips/api\\#ChipListboxHarnessFilters) `ChipListboxHarnessFilters`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disabled: boolean` | Only find instances which match the given disabled state. |\n\n#### [link](https://material.angular.io/components/chips/api\\#ChipOptionHarnessFilters) `ChipOptionHarnessFilters`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `selected: boolean` | Only find chip instances whose selected state matches the given value. |\n\n#### [link](https://material.angular.io/components/chips/api\\#ChipGridHarnessFilters) `ChipGridHarnessFilters`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disabled: boolean` | Only find instances which match the given disabled state. |\n\n#### [link](https://material.angular.io/components/chips/api\\#ChipRowHarnessFilters) `ChipRowHarnessFilters`\n\n#### [link](https://material.angular.io/components/chips/api\\#ChipSetHarnessFilters) `ChipSetHarnessFilters`\n\n#### [link](https://material.angular.io/components/chips/api\\#ChipRemoveHarnessFilters) `ChipRemoveHarnessFilters`\n\n#### [link](https://material.angular.io/components/chips/api\\#ChipAvatarHarnessFilters) `ChipAvatarHarnessFilters`\n\n#### [link](https://material.angular.io/components/chips/api\\#ChipEditInputHarnessFilters) `ChipEditInputHarnessFilters`\n\nChips\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard\n\nUse \\`MatChipInputEvent#chipInput.inputElement\\` instead. Will be removed in v13.0.0 This property will be removed. or later.",
  "title": "Chips | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/chips/api"
}