{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for dialog\n\n## API reference for Angular Material dialog\n\n`\n          import {MatDialogModule} from '@angular/material/dialog';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/dialog/api\\#services)  Services\n\n#### [link](https://material.angular.io/components/dialog/api\\#MatDialog) `MatDialog`\n\nService to open Material Design modal dialogs.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `afterAllClosed: Observable<void>` | Stream that emits when all open dialog have finished closing.<br>Will emit on subscribe if there are no open dialogs to begin with. |\n| `afterOpened: Subject<MatDialogRef<any>>` | Stream that emits when a dialog has been opened. |\n| `dialogConfigClass: MatDialogConfig` |  |\n| `openDialogs: MatDialogRef<any>[]` | Keeps track of the currently-open dialogs. |\n\n##### Methods\n\n| closeAll |\n| --- |\n| Closes all of the currently-open dialogs. |\n\n| getDialogById |\n| --- |\n| Finds an open dialog by its id. |\n| Parameters |\n| --- |\n| id<br> `string` | ID to use when looking up the dialog. |\n| Returns |\n| --- |\n| `MatDialogRef<any> | undefined` |  |\n\n| open |\n| --- |\n| Opens a modal dialog containing the given component. |\n| Parameters |\n| --- |\n| component<br> `ComponentType<T>` | Type of the component to load into the dialog. |\n| config?<br> `MatDialogConfig<D>` | Extra configuration options. |\n| Returns |\n| --- |\n| `MatDialogRef<T, R>` | Reference to the newly-opened dialog. |\n\n| open |\n| --- |\n| Opens a modal dialog containing the given template. |\n| Parameters |\n| --- |\n| template<br> `TemplateRef<T>` | TemplateRef to instantiate as the dialog content. |\n| config?<br> `MatDialogConfig<D>` | Extra configuration options. |\n| Returns |\n| --- |\n| `MatDialogRef<T, R>` | Reference to the newly-opened dialog. |\n\n| open |\n| --- |\n| Parameters |\n| --- |\n| template<br> `ComponentType<T> | TemplateRef<T>` |  |\n| config?<br> `MatDialogConfig<D>` |  |\n| Returns |\n| --- |\n| `MatDialogRef<T, R>` |  |\n\n### [link](https://material.angular.io/components/dialog/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/dialog/api\\#MatDialogActions) `MatDialogActions`\n\nContainer for the bottom action buttons in a dialog.\nStays fixed to the bottom when scrolling.\n\nSelector:\\[mat-dialog-actions\\]mat-dialog-actions\\[matDialogActions\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`align: 'start' | 'center' | 'end'` | Horizontal alignment of action buttons. |\n\n#### [link](https://material.angular.io/components/dialog/api\\#MatDialogClose) `MatDialogClose`\n\nButton that will close the current dialog.\n\nSelector:\\[mat-dialog-close\\]\\[matDialogClose\\]\n\nExported as:matDialogClose\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-label')<br> <br>`ariaLabel: string` | Screen-reader label for the button. |\n| @Input('mat-dialog-close')<br> <br>`dialogResult: any` | Dialog close input. |\n| @Input()<br>`type: 'submit' | 'button' | 'reset'` | Default to \"button\" to prevents accidental form submits. |\n| `dialogRef: inject<MatDialogRef<any>>(MatDialogRef, { optional: true })!` |  |\n\n#### [link](https://material.angular.io/components/dialog/api\\#MatDialogTitle) `MatDialogTitle`\n\nTitle of a dialog element. Stays fixed to the top of the dialog when scrolling.\n\nSelector:\\[mat-dialog-title\\]\\[matDialogTitle\\]\n\nExported as:matDialogTitle\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`id: string` |  |\n\n#### [link](https://material.angular.io/components/dialog/api\\#MatDialogContent) `MatDialogContent`\n\nScrollable content container of a dialog.\n\nSelector:\\[mat-dialog-content\\]mat-dialog-content\\[matDialogContent\\]\n\n#### [link](https://material.angular.io/components/dialog/api\\#MatDialogContainer) `MatDialogContainer`\n\nSelector:mat-dialog-container\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| Deprecated<br> <br>`attachDomPortal: (portal: DomPortal) => {<br>    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {<br>        throwDialogContentAlreadyAttachedError();<br>    }<br>    const result = this._portalOutlet.attachDomPortal(portal);<br>    this._contentAttached();<br>    return result;<br>}` | Attaches a DOM portal to the dialog container. |\n\n##### Methods\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` |  |\n| Returns |\n| --- |\n| `ComponentRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<T>` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `any` |  |\n| Returns |\n| --- |\n| `any` |  |\n\n| attachComponentPortal |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` |  |\n| Returns |\n| --- |\n| `ComponentRef<T>` |  |\n\n| attachTemplatePortal |\n| --- |\n| Attach a TemplatePortal as content to this dialog container. |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<T>` | Portal to be attached as the dialog content. |\n| Returns |\n| --- |\n| `EmbeddedViewRef<T>` |  |\n\n| detach |\n| --- |\n| Detaches a previously attached portal. |\n\n| dispose |\n| --- |\n| Permanently dispose of this portal host. |\n\n| hasAttached |\n| --- |\n| Whether this host has an attached portal. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n### [link](https://material.angular.io/components/dialog/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/dialog/api\\#MatDialogConfig) `MatDialogConfig`\n\nConfiguration for opening a modal dialog with the MatDialog service.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `ariaDescribedBy: string | null` | ID of the element that describes the dialog. |\n| `ariaLabel: string | null` | Aria label to assign to the dialog element. |\n| `ariaLabelledBy: string | null` | ID of the element that labels the dialog. |\n| `ariaModal: boolean` | Whether this is a modal dialog. Used to set the `aria-modal` attribute. Off by default,<br>because it can interfere with other overlay-based components (e.g. `mat-select`) and because<br>it is redundant since the dialog marks all outside content as `aria-hidden` anyway. |\n| `autoFocus: AutoFocusTarget | string | boolean` | Where the dialog should focus on open. |\n| `backdropClass: string | string[]` | Custom class for the backdrop. |\n| `closeOnNavigation: boolean` | Whether the dialog should close when the user goes backwards/forwards in history.<br>Note that this usually doesn't include clicking on links (unless the user is using<br>the `HashLocationStrategy`). |\n| `data: D | null` | Data being injected into the child component. |\n| `delayFocusTrap: boolean` | Whether to wait for the opening animation to finish before trapping focus. |\n| `direction: Direction` | Layout direction for the dialog's content. |\n| `disableClose: boolean` | Whether the user can use escape or clicking on the backdrop to close the modal. |\n| `enterAnimationDuration: string | number` | Duration of the enter animation in ms.<br>Should be a number, string type is deprecated. |\n| `exitAnimationDuration: string | number` | Duration of the exit animation in ms.<br>Should be a number, string type is deprecated. |\n| `hasBackdrop: boolean` | Whether the dialog has a backdrop. |\n| `height: string` | Height of the dialog. |\n| `id: string` | ID for the dialog. If omitted, a unique one will be generated. |\n| `injector: Injector` | Injector used for the instantiation of the component to be attached. If provided,<br>takes precedence over the injector indirectly provided by `ViewContainerRef`. |\n| `maxHeight: number | string` | Max-height of the dialog. If a number is provided, assumes pixel units. |\n| `maxWidth: number | string` | Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. |\n| `minHeight: number | string` | Min-height of the dialog. If a number is provided, assumes pixel units. |\n| `minWidth: number | string` | Min-width of the dialog. If a number is provided, assumes pixel units. |\n| `panelClass: string | string[]` | Custom class for the overlay pane. |\n| `position: DialogPosition` | Position overrides. |\n| `restoreFocus: boolean` | Whether the dialog should restore focus to the<br>previously-focused element, after it's closed. |\n| `role: DialogRole` | The ARIA role of the dialog element. |\n| `scrollStrategy: ScrollStrategy` | Scroll strategy to be used for the dialog. |\n| `viewContainerRef: ViewContainerRef` | Where the attached component should live in Angular's _logical_ component tree.<br>This affects what is available for injection and the change detection order for the<br>component instantiated inside of the dialog. This does not affect where the dialog<br>content will be rendered. |\n| `width: string` | Width of the dialog. |\n| Deprecated<br> <br>`componentFactoryResolver: unknown` | Alternate `ComponentFactoryResolver` to use when resolving the associated component. |\n\n#### [link](https://material.angular.io/components/dialog/api\\#MatDialogRef) `MatDialogRef`\n\nReference to a dialog opened via the MatDialog service.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `componentInstance: T` | The instance of component opened into the dialog. |\n| `componentRef: ComponentRef<T> | null` | `ComponentRef` of the component opened into the dialog. Will be<br>null when the dialog is opened using a `TemplateRef`. |\n| `disableClose: boolean | undefined` | Whether the user is allowed to close the dialog. |\n| `id: string` | Unique ID for the dialog. |\n\n##### Methods\n\n| addPanelClass |\n| --- |\n| Add a CSS class or an array of classes to the overlay pane. |\n| Parameters |\n| --- |\n| classes<br> `string | string[]` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| afterClosed |\n| --- |\n| Gets an observable that is notified when the dialog is finished closing. |\n| Returns |\n| --- |\n| `Observable<R | undefined>` |  |\n\n| afterOpened |\n| --- |\n| Gets an observable that is notified when the dialog is finished opening. |\n| Returns |\n| --- |\n| `Observable<void>` |  |\n\n| backdropClick |\n| --- |\n| Gets an observable that emits when the overlay's backdrop has been clicked. |\n| Returns |\n| --- |\n| `Observable<MouseEvent>` |  |\n\n| beforeClosed |\n| --- |\n| Gets an observable that is notified when the dialog has started closing. |\n| Returns |\n| --- |\n| `Observable<R | undefined>` |  |\n\n| close |\n| --- |\n| Close the dialog. |\n| Parameters |\n| --- |\n| dialogResult?<br> `R` | Optional result to return to the dialog opener. |\n\n| getState |\n| --- |\n| Gets the current state of the dialog's lifecycle. |\n| Returns |\n| --- |\n| `MatDialogState` |  |\n\n| keydownEvents |\n| --- |\n| Gets an observable that emits when keydown events are targeted on the overlay. |\n| Returns |\n| --- |\n| `Observable<KeyboardEvent>` |  |\n\n| removePanelClass |\n| --- |\n| Remove a CSS class or an array of classes from the overlay pane. |\n| Parameters |\n| --- |\n| classes<br> `string | string[]` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| updatePosition |\n| --- |\n| Updates the dialog's position. |\n| Parameters |\n| --- |\n| position?<br> `DialogPosition` | New dialog position. |\n| Returns |\n| --- |\n| `this` |  |\n\n| updateSize |\n| --- |\n| Updates the dialog's width and height. |\n| Parameters |\n| --- |\n| width<br> `string = ''` | New width of the dialog. |\n| height<br> `string = ''` | New height of the dialog. |\n| Returns |\n| --- |\n| `this` |  |\n\n### [link](https://material.angular.io/components/dialog/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/dialog/api\\#DialogPosition) `DialogPosition`\n\nPossible overrides for a dialog's position.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `bottom: string` | Override for the dialog's bottom position. |\n| `left: string` | Override for the dialog's left position. |\n| `right: string` | Override for the dialog's right position. |\n| `top: string` | Override for the dialog's top position. |\n\n### [link](https://material.angular.io/components/dialog/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/dialog/api\\#AutoFocusTarget) `AutoFocusTarget`\n\nOptions for where to set focus to automatically on dialog open\n\n```docs-markdown-code\ntype AutoFocusTarget = 'dialog' | 'first-tabbable' | 'first-heading';\n\n```\n\n#### [link](https://material.angular.io/components/dialog/api\\#DialogRole) `DialogRole`\n\nValid ARIA roles for a dialog element.\n\n```docs-markdown-code\ntype DialogRole = 'dialog' | 'alertdialog';\n\n```\n\n### [link](https://material.angular.io/components/dialog/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/dialog/api\\#MAT_DIALOG_DATA) `MAT_DIALOG_DATA`\n\nInjection token that can be used to access the data that was passed in to a dialog.\n\n```docs-markdown-code\nconst MAT_DIALOG_DATA: InjectionToken<any>;\n\n```\n\n#### [link](https://material.angular.io/components/dialog/api\\#MAT_DIALOG_DEFAULT_OPTIONS) `MAT_DIALOG_DEFAULT_OPTIONS`\n\nInjection token that can be used to specify default dialog options.\n\n```docs-markdown-code\nconst MAT_DIALOG_DEFAULT_OPTIONS: InjectionToken<MatDialogConfig<any>>;\n\n```\n\n#### [link](https://material.angular.io/components/dialog/api\\#MAT_DIALOG_SCROLL_STRATEGY) `MAT_DIALOG_SCROLL_STRATEGY`\n\nInjection token that determines the scroll handling while the dialog is open.\n\n```docs-markdown-code\nconst MAT_DIALOG_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\n```\n\n## API reference for Angular Material dialog-testing\n\n`\n          import {MatTestDialogOpenerModule} from '@angular/material/dialog/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/dialog/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/dialog/api\\#MatTestDialogOpener) `MatTestDialogOpener`\n\nTest component that immediately opens a dialog when bootstrapped.\n\nSelector:mat-test-dialog-opener\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `closedResult: R | undefined` | Data passed to the `MatDialog` close method. |\n| `static\u00a0component: ComponentType<unknown> | undefined` | Component that should be opened with the MatDialog `open` method. |\n| `static\u00a0config: MatDialogConfig | undefined` | Config that should be provided to the MatDialog `open` method. |\n| `dialog: inject(MatDialog)` |  |\n| `dialogRef: MatDialogRef<T, R>` | MatDialogRef returned from the MatDialog `open` method. |\n\n##### Methods\n\n| static<br> <br>withComponent |\n| --- |\n| Static method that prepares this class to open the provided component. |\n| Parameters |\n| --- |\n| component<br> `ComponentType<T>` |  |\n| config?<br> `MatDialogConfig<any>` |  |\n\n### [link](https://material.angular.io/components/dialog/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/dialog/api\\#MatDialogHarness) `MatDialogHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/dialog/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a standard `MatDialog` in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-dialog-container'` | The selector for the host element of a `MatDialog` instance. |\n\n##### Methods\n\n| async<br> <br>close |\n| --- |\n| Closes the dialog by pressing escape.<br>Note: this method does nothing if `disableClose` has been set to `true` for the dialog. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getActionsText |\n| --- |\n| Gets the dialog's actions text. This only works if the dialog is using mat-dialog-actions. |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getAriaDescribedby |\n| --- |\n| Gets the value of the dialog's \"aria-describedby\" attribute. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getAriaLabel |\n| --- |\n| Gets the value of the dialog's \"aria-label\" attribute. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getAriaLabelledby |\n| --- |\n| Gets the value of the dialog's \"aria-labelledby\" attribute. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getContentText |\n| --- |\n| Gets the dialog's content text. This only works if the dialog is using mat-dialog-content. |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getId |\n| --- |\n| Gets the id of the dialog. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getRole |\n| --- |\n| Gets the role of the dialog. |\n| Returns |\n| --- |\n| `Promise<DialogRole | null>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets the dialog's text. |\n\n| async<br> <br>getTitleText |\n| --- |\n| Gets the dialog's title text. This only works if the dialog is using mat-dialog-title. |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a dialog with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `DialogHarnessFilters = {}` | Options for filtering which dialog instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/dialog/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/dialog/api\\#DialogHarnessFilters) `DialogHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatDialogHarness` instances.\n\nDialog\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nTo be turned into a method. Will be removed in v10.0.0 or later.\n\nNo longer used. Will be removed. Will be removed in v20.0.0 or later.\n\nCopy import to the clipboard",
  "title": "Dialog | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/dialog/api"
}