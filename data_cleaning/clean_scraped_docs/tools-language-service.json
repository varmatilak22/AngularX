{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nThe Angular Language Service provides code editors with a way to get completions, errors, hints, and navigation inside Angular templates.\nIt works with external templates in separate HTML files, and also with in-line templates.\n\n## [Configuring compiler options for the Angular Language Service](https://angular.dev/tools/language-service\\#configuring-compiler-options-for-the-angular-language-service)\n\nTo enable the latest Language Service features, set the `strictTemplates` option in `tsconfig.json` by setting `strictTemplates` to `true`, as shown in the following example:\n\n```\n      \"angularCompilerOptions\": {  \"strictTemplates\": true}\n\n```\n\ncheck\n\nFor more information, see the [Angular compiler options](https://angular.dev/tools/reference/configs/angular-compiler-options) guide.\n\n## [Features](https://angular.dev/tools/language-service\\#features)\n\nYour editor autodetects that you are opening an Angular file.\nIt then uses the Angular Language Service to read your `tsconfig.json` file, find all the templates you have in your application, and then provide language services for any templates that you open.\n\nLanguage services include:\n\n- Completions lists\n- AOT Diagnostic messages\n- Quick info\n- Go to definition\n\n### [Autocompletion](https://angular.dev/tools/language-service\\#autocompletion)\n\nAutocompletion can speed up your development time by providing you with contextual possibilities and hints as you type.\nThis example shows autocomplete in an interpolation.\nAs you type it out, you can press tab to complete.\n\n![autocompletion](https://angular.dev/tools/assets/images/guide/language-service/language-completion.gif)\n\nThere are also completions within elements.\nAny elements you have as a component selector will show up in the completion list.\n\n### [Error checking](https://angular.dev/tools/language-service\\#error-checking)\n\nThe Angular Language Service can forewarn you of mistakes in your code.\nIn this example, Angular doesn't know what `orders` is or where it comes from.\n\n![error checking](https://angular.dev/tools/assets/images/guide/language-service/language-error.gif)\n\n### [Quick info and navigation](https://angular.dev/tools/language-service\\#quick-info-and-navigation)\n\nThe quick-info feature lets you hover to see where components, directives, and modules come from.\nYou can then click \"Go to definition\" or press F12 to go directly to the definition.\n\n![navigation](https://angular.dev/tools/assets/images/guide/language-service/language-navigation.gif)\n\n## [Angular Language Service in your editor](https://angular.dev/tools/language-service\\#angular-language-service-in-your-editor)\n\nAngular Language Service is currently available as an extension for [Visual Studio Code](https://code.visualstudio.com/), [WebStorm](https://www.jetbrains.com/webstorm), [Sublime Text](https://www.sublimetext.com/) and [Eclipse IDE](https://www.eclipse.org/eclipseide).\n\n### [Visual Studio Code](https://angular.dev/tools/language-service\\#visual-studio-code)\n\nIn [Visual Studio Code](https://code.visualstudio.com/), install the extension from the [Extensions: Marketplace](https://marketplace.visualstudio.com/items?itemName=Angular.ng-template).\nOpen the marketplace from the editor using the Extensions icon on the left menu pane, or use VS Quick Open (\u2318+P on Mac, CTRL+P on Windows) and type \"? ext\".\nIn the marketplace, search for Angular Language Service extension, and click the **Install** button.\n\nThe Visual Studio Code integration with the Angular language service is maintained and distributed by the Angular team.\n\n### [Visual Studio](https://angular.dev/tools/language-service\\#visual-studio)\n\nIn [Visual Studio](https://visualstudio.microsoft.com/), install the extension from the [Extensions: Marketplace](https://marketplace.visualstudio.com/items?itemName=TypeScriptTeam.AngularLanguageService).\nOpen the marketplace from the editor selecting Extensions on the top menu pane, and then selecting Manage Extensions.\nIn the marketplace, search for Angular Language Service extension, and click the **Install** button.\n\nThe Visual Studio integration with the Angular language service is maintained and distributed by Microsoft with help from the Angular team.\nCheck out the project [here](https://github.com/microsoft/vs-ng-language-service).\n\n### [WebStorm](https://angular.dev/tools/language-service\\#webstorm)\n\nIn [WebStorm](https://www.jetbrains.com/webstorm), enable the plugin [Angular and AngularJS](https://plugins.jetbrains.com/plugin/6971-angular-and-angularjs).\n\nSince WebStorm 2019.1, the `@angular/language-service` is not required anymore and should be removed from your `package.json`.\n\n### [Sublime Text](https://angular.dev/tools/language-service\\#sublime-text)\n\nIn [Sublime Text](https://www.sublimetext.com/), the Language Service supports only in-line templates when installed as a plug-in.\nYou need a custom Sublime plug-in (or modifications to the current plug-in) for completions in HTML files.\n\nTo use the Language Service for in-line templates, you must first add an extension to allow TypeScript, then install the Angular Language Service plug-in.\nStarting with TypeScript 2.3, TypeScript has a plug-in model that the language service can use.\n\n1. Install the latest version of TypeScript in a local `node_modules` directory:\n\n\n\n```\n         npm install --save-dev typescript\n\n```\n\ncheck\n\n2. Install the Angular Language Service package in the same location:\n\n\n\n```\n         npm install --save-dev @angular/language-service\n\n```\n\ncheck\n\n3. Once the package is installed, add the following to the `\"compilerOptions\"` section of your project's `tsconfig.json`.\n\n\n\n\n\n### tsconfig.json\n\n\n\n\n\n```\n         \"plugins\": [     {\"name\": \"@angular/language-service\"} ]\n\n```\n\ncheck\n\n4. In your editor's user preferences ( `Cmd+,` or `Ctrl+,`), add the following:\n\n\n\n\n\n### Sublime Text user preferences\n\n\n\n\n\n```\n         \"typescript-tsdk\": \"<path to your folder>/node_modules/typescript/lib\"\n\n```\n\ncheck\n\n\nThis lets the Angular Language Service provide diagnostics and completions in `.ts` files.\n\n### [Eclipse IDE](https://angular.dev/tools/language-service\\#eclipse-ide)\n\nEither directly install the \"Eclipse IDE for Web and JavaScript developers\" package which comes with the Angular Language Server included, or from other Eclipse IDE packages, use Help > Eclipse Marketplace to find and install [Eclipse Wild Web Developer](https://marketplace.eclipse.org/content/wild-web-developer-html-css-javascript-typescript-nodejs-angular-json-yaml-kubernetes-xml).\n\n### [Neovim](https://angular.dev/tools/language-service\\#neovim)\n\nAngular language service can be used with Neovim by using the [nvim-lspconfig](https://github.com/neovim/nvim-lspconfig) plugin.\n\n1. [Install nvim-lspconfig](https://github.com/neovim/nvim-lspconfig?tab=readme-ov-file#install)\n\n2. [Configure angularls for nvim-lspconfig](https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#angularls)\n\n\n## [How the Language Service works](https://angular.dev/tools/language-service\\#how-the-language-service-works)\n\nWhen you use an editor with a language service, the editor starts a separate language-service process and communicates with it through an [RPC](https://en.wikipedia.org/wiki/Remote_procedure_call), using the [Language Server Protocol](https://microsoft.github.io/language-server-protocol).\nWhen you type into the editor, the editor sends information to the language-service process to track the state of your project.\n\nWhen you trigger a completion list within a template, the editor first parses the template into an HTML [abstract syntax tree (AST)](https://en.wikipedia.org/wiki/Abstract_syntax_tree).\nThe Angular compiler interprets that tree to determine the context: which module the template is part of, the current scope, the component selector, and where your cursor is in the template AST.\nIt can then determine the symbols that could potentially be at that position.\n\nIt's a little more involved if you are in an interpolation.\nIf you have an interpolation of `{{data.---}}` inside a `div` and need the completion list after `data.---`, the compiler can't use the HTML AST to find the answer.\nThe HTML AST can only tell the compiler that there is some text with the characters \" `{{data.---}}`\".\nThat's when the template parser produces an expression AST, which resides within the template AST.\nThe Angular Language Services then looks at `data.---` within its context, asks the TypeScript Language Service what the members of `data` are, and returns the list of possibilities.\n\n## [More information](https://angular.dev/tools/language-service\\#more-information)\n\n- For more in-depth information on the implementation, see the [Angular Language Service source](https://github.com/angular/angular/blob/main/packages/language-service/src)\n- For more on the design considerations and intentions, see [design documentation here](https://github.com/angular/vscode-ng-language-service/wiki/Design)",
  "title": "Language Service \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "language",
    "https",
    "service",
    "dev",
    "com",
    "tools",
    "install",
    "editor",
    "github"
  ],
  "sourceURL": "https://angular.dev/tools/language-service"
}