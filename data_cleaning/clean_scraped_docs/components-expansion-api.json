{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for expansion\n\n## API reference for Angular Material expansion\n\n`\n          import {MatExpansionModule} from '@angular/material/expansion';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/expansion/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatAccordion) `MatAccordion`extends [CdkAccordion](https://material.angular.io/components/expansion/cdk/accordion/api\\#CdkAccordion)\n\nDirective for a Material Design Accordion.\n\nSelector:mat-accordion\n\nExported as:matAccordion\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`displayMode: MatAccordionDisplayMode` | Display mode used for all expansion panels in the accordion. Currently two display<br>modes exist:<br>default - a gutter-like spacing is placed around any expanded panel, placing the expanded<br>panel at a different elevation from the rest of the accordion.<br>flat - no spacing is placed around expanded panels, showing all panels at the same<br>elevation. |\n| @Input({ transform: booleanAttribute })<br> <br>`hideToggle: boolean` | Whether the expansion indicator should be hidden. |\n| @Input({ transform: booleanAttribute })<br> <br>`multi: boolean` | Whether the accordion should allow multiple expanded accordion items simultaneously. |\n| @Input()<br>`togglePosition: MatAccordionTogglePosition` | The position of the expansion indicator. |\n| `id: string` | A readonly id value to use for unique selection coordination. |\n\n##### Methods\n\n| closeAll |\n| --- |\n| Closes all enabled accordion items. |\n\n| openAll |\n| --- |\n| Opens all enabled accordion items in an accordion where multi is enabled. |\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatExpansionPanel) `MatExpansionPanel`extends [CdkAccordionItem](https://material.angular.io/components/expansion/cdk/accordion/api\\#CdkAccordionItem)\n\nThis component can be used as a single element to show expandable content, or as one of\nmultiple children of an element with the MatAccordion directive attached.\n\nSelector:mat-expansion-panel\n\nExported as:matExpansionPanel\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the AccordionItem is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`expanded: boolean` | Whether the AccordionItem is expanded. |\n| @Input({ transform: booleanAttribute })<br> <br>`hideToggle: boolean` | Whether the toggle indicator should be hidden. |\n| @Input()<br>`togglePosition: MatAccordionTogglePosition` | The position of the expansion indicator. |\n| @Output()<br>`afterCollapse: EventEmitter<void>` | An event emitted after the body's collapse animation happens. |\n| @Output()<br>`afterExpand: EventEmitter<void>` | An event emitted after the body's expansion animation happens. |\n| @Output()<br>`closed: EventEmitter<void>` | Event emitted every time the AccordionItem is closed. |\n| @Output()<br>`destroyed: EventEmitter<void>` | Event emitted when the AccordionItem is destroyed. |\n| @Output()<br>`opened: EventEmitter<void>` | Event emitted every time the AccordionItem is opened. |\n| `accordion: inject<MatAccordionBase>(MAT_ACCORDION, { optional: true, skipSelf: true })!` | Optionally defined accordion the expansion panel belongs to. |\n| `id: string` | The unique AccordionItem id. |\n\n##### Methods\n\n| close |\n| --- |\n| Sets the expanded state of the expansion panel to false. |\n\n| open |\n| --- |\n| Sets the expanded state of the expansion panel to true. |\n\n| toggle |\n| --- |\n| Toggles the expanded state of the expansion panel. |\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatExpansionPanelActionRow) `MatExpansionPanelActionRow`\n\nActions of a `<mat-expansion-panel>`.\n\nSelector:mat-action-row\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatExpansionPanelHeader) `MatExpansionPanelHeader`\n\nHeader element of a `<mat-expansion-panel>`.\n\nSelector:mat-expansion-panel-header\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`collapsedHeight: string` | Height of the header while the panel is collapsed. |\n| @Input()<br>`expandedHeight: string` | Height of the header while the panel is expanded. |\n| `panel: inject(MatExpansionPanel, { host: true })` |  |\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatExpansionPanelDescription) `MatExpansionPanelDescription`\n\nDescription element of a `<mat-expansion-panel-header>`.\n\nSelector:mat-panel-description\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatExpansionPanelTitle) `MatExpansionPanelTitle`\n\nTitle element of a `<mat-expansion-panel-header>`.\n\nSelector:mat-panel-title\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatExpansionPanelContent) `MatExpansionPanelContent`\n\nExpansion panel content that will be rendered lazily\nafter the panel is opened for the first time.\n\nSelector:ng-template\\[matExpansionPanelContent\\]\n\n### [link](https://material.angular.io/components/expansion/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatExpansionPanelDefaultOptions) `MatExpansionPanelDefaultOptions`\n\nObject that can be used to override the default options\nfor all of the expansion panels in a module.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `collapsedHeight: string` | Height of the header while the panel is collapsed. |\n| `expandedHeight: string` | Height of the header while the panel is expanded. |\n| `hideToggle: boolean` | Whether the toggle indicator should be hidden. |\n\n### [link](https://material.angular.io/components/expansion/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatAccordionDisplayMode) `MatAccordionDisplayMode`\n\nMatAccordion's display modes.\n\n```docs-markdown-code\ntype MatAccordionDisplayMode = 'default' | 'flat';\n\n```\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatAccordionTogglePosition) `MatAccordionTogglePosition`\n\nMatAccordion's toggle positions.\n\n```docs-markdown-code\ntype MatAccordionTogglePosition = 'before' | 'after';\n\n```\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatExpansionPanelState) `MatExpansionPanelState`\n\nMatExpansionPanel's states.\n\n```docs-markdown-code\ntype MatExpansionPanelState = 'expanded' | 'collapsed';\n\n```\n\n### [link](https://material.angular.io/components/expansion/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/expansion/api\\#MAT_EXPANSION_PANEL) `MAT_EXPANSION_PANEL`\n\nToken used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\nUsed to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n\n```docs-markdown-code\nconst MAT_EXPANSION_PANEL: InjectionToken<MatExpansionPanelBase>;\n\n```\n\n#### [link](https://material.angular.io/components/expansion/api\\#MAT_ACCORDION) `MAT_ACCORDION`\n\nToken used to provide a `MatAccordion` to `MatExpansionPanel`.\nUsed primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n\n```docs-markdown-code\nconst MAT_ACCORDION: InjectionToken<MatAccordionBase>;\n\n```\n\n#### [link](https://material.angular.io/components/expansion/api\\#MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) `MAT_EXPANSION_PANEL_DEFAULT_OPTIONS`\n\nInjection token that can be used to configure the default\noptions for the expansion panel component.\n\n```docs-markdown-code\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS: InjectionToken<MatExpansionPanelDefaultOptions>;\n\n```\n\n#### [link](https://material.angular.io/components/expansion/api\\#EXPANSION_PANEL_ANIMATION_TIMING) `EXPANSION_PANEL_ANIMATION_TIMING`\n\nDeprecated\n\nTime and timing curve for expansion panel animations.\n\n```docs-markdown-code\nconst EXPANSION_PANEL_ANIMATION_TIMING: \"225ms cubic-bezier(0.4,0.0,0.2,1)\";\n\n```\n\n## API reference for Angular Material expansion-testing\n\n`\n          import {MatAccordionHarness} from '@angular/material/expansion/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/expansion/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatAccordionHarness) `MatAccordionHarness`extends [ComponentHarness](https://material.angular.io/components/expansion/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard mat-accordion in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-accordion'` |  |\n\n##### Methods\n\n| async<br> <br>getExpansionPanels |\n| --- |\n| Gets all expansion panels which are part of the accordion. |\n| Parameters |\n| --- |\n| filter<br> `ExpansionPanelHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<MatExpansionPanelHarness[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isMulti |\n| --- |\n| Whether the accordion allows multiple expanded panels simultaneously. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for an accordion<br>with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `AccordionHarnessFilters = {}` | Options for narrowing the search. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatAccordionHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/expansion/api\\#MatExpansionPanelHarness) `MatExpansionPanelHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/expansion/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a standard mat-expansion-panel in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-expansion-panel'` |  |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the panel. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>collapse |\n| --- |\n| Collapses the expansion panel if expanded. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>expand |\n| --- |\n| Expands the expansion panel if collapsed. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the panel. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getDescription |\n| --- |\n| Gets the description text of the panel. |\n| Returns |\n| --- |\n| `Promise<string | null>` | Description text or `null` if no description is set up. |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getTextContent |\n| --- |\n| Gets the text content of the panel. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getTitle |\n| --- |\n| Gets the title text of the panel. |\n| Returns |\n| --- |\n| `Promise<string | null>` | Title text or `null` if no title is set up. |\n\n| async<br> <br>getToggleIndicatorPosition |\n| --- |\n| Gets the position of the toggle indicator. |\n| Returns |\n| --- |\n| `Promise<'before' | 'after'>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hasToggleIndicator |\n| --- |\n| Whether the panel has a toggle indicator displayed. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the panel is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isExpanded |\n| --- |\n| Whether the panel is expanded. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the panel is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>toggle |\n| --- |\n| Toggles the expanded state of the panel by clicking on the panel<br>header. This method will not work if the panel is disabled. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for an expansion-panel<br>with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `ExpansionPanelHarnessFilters = {}` | Options for narrowing the search:<br>- `title` finds an expansion-panel with a specific title text.<br>- `description` finds an expansion-panel with a specific description text.<br>- `expanded` finds an expansion-panel that is currently expanded.<br>- `disabled` finds an expansion-panel that is disabled. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatExpansionPanelHarness>` | a `HarnessPredicate` configured with the given options. |\n\n| Deprecated<br> <br>async<br> <br>getHarnessLoaderForContent |\n| --- |\n| Gets a `HarnessLoader` that can be used to load harnesses for<br>components within the panel's content area. |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n### [link](https://material.angular.io/components/expansion/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/expansion/api\\#AccordionHarnessFilters) `AccordionHarnessFilters`\n\n#### [link](https://material.angular.io/components/expansion/api\\#ExpansionPanelHarnessFilters) `ExpansionPanelHarnessFilters`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `content: string | RegExp` |  |\n| `description: string | RegExp | null` |  |\n| `disabled: boolean` |  |\n| `expanded: boolean` |  |\n| `title: string | RegExp | null` |  |\n\nExpansion Panel\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nUse either \\`getChildLoader(MatExpansionPanelSection.CONTENT)\\`, \\`getHarness\\` or\n\\`getAllHarnesses\\` instead. Will be removed in v12.0.0 or later.\n\nCopy import to the clipboard\n\nNo longer used. Will be removed. Will be removed in v21.0.0 or later.",
  "title": "Expansion Panel | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/expansion/api"
}