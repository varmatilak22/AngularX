{
  "content": "Skip to main content\n\nmenu\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nunfold\\_more\nLearn AngularCommunicating with @Output\nReveal Answer\n\n[chevron\\_left](https://angular.dev/tutorials/learn-angular/8-input) [chevron\\_right](https://angular.dev/tutorials/learn-angular/10-deferrable-views)\n\nReveal Answer\n\nunfold\\_more\nLearn AngularCommunicating with @Output\nReveal Answer\n\n[chevron\\_left](https://angular.dev/tutorials/learn-angular/8-input) [chevron\\_right](https://angular.dev/tutorials/learn-angular/10-deferrable-views)\n\nReveal Answer\n\nWhen working with components it may be required to notify other components that something has happened. Perhaps a button has been clicked, an item has been added/removed from a list or some other important update has occurred. In this scenario components need to communicate with parent components.\n\nAngular uses the `@Output` decorator to enable this type of behavior.\n\nNote: Learn more about [custom events in the outputs guide](https://angular.dev/guide/components/outputs).\n\nIn this activity, you'll learn how to use the `@Output` decorator and `EventEmitter` to communicate with components.\n\n* * *\n\nTo create the communication path from child to parent components, use the `@Output` decorator on a class property and assign it a value of type `EventEmitter`:\n\n### child.component.ts\n\n```\n      @Component({...})class ChildComponent {    @Output() incrementCountEvent = new EventEmitter<number>();}\n\n```\n\ncheck\n\nNow the component can generate events that can be listened to by the parent component. Trigger events by calling the `emit` method:\n\n### child.component.ts\n\n```\n      class ChildComponent {    ...    onClick() {        this.count++;        this.incrementCountEvent.emit(this.count);    }}\n\n```\n\ncheck\n\nThe emit function will generate an event with the same type as the `EventEmitter` instance.\n\nAlright, your turn to give this a try. Complete the code by following these tasks:\n\n1. ### [Add an `@Output` property](https://angular.dev/tutorials/learn-angular/9-output\\#add-an-output-property)\n\n\nUpdate `child.component.ts` by adding an output property called `addItemEvent`, be sure to set the EventEmitter type to be `string`.\n\n2. ### [Complete `addItem` method](https://angular.dev/tutorials/learn-angular/9-output\\#complete-additem-method)\n\n\nIn `child.component.ts` update the `addItem` method; use the following code as the logic:\n\n\n\n\n\n### child.component.ts\n\n\n\n\n\n```\n         addItem() {  this.addItemEvent.emit('\ud83d\udc22');}\n\n```\n\ncheck\n\n3. ### [Update the `AppComponent` template](https://angular.dev/tutorials/learn-angular/9-output\\#update-the-appcomponent-template)\n\n\nIn `app.component.ts` update the template to listen to the emitted event by adding the following code:\n\n\n\n```\n         <app-child (addItemEvent)=\"addItem($event)\" />\n\n```\n\ncheck\n\nNow, the \"Add Item\" button adds a new item to the list every time the button is clicked.\n\n\nWow, at this point you've completed the component fundamentals - impressive \ud83d\udc4f\n\nKeep learning to unlock more of Angular's great features.\n\napp/child.component.ts editdelete\n\napp/app.component.ts\n\nadd\n\nlaunchdownload\n\n99\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n\u203a\n\nimport{Component,Output,EventEmitter}from'@angular/core';\n\n@Component({\n\nselector:'app-child',\n\nstyles:\\`.btn { padding: 5px; }\\`,\n\ntemplate:\\`\n\n<buttonclass=\"btn\"(click)=\"addItem()\">Add Item</button>\n\n\\`,\n\n})\n\nexportclassChildComponent{\n\naddItem(){}\n\n}\n\nPreview\n\nBooting\n\nConsole\n\nTerminal\n\nrefresh\n\nStackBlitz",
  "title": "Communicating with @Output \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "component",
    "output",
    "learn",
    "child",
    "https",
    "dev",
    "ts",
    "additem",
    "components"
  ],
  "sourceURL": "https://angular.dev/tutorials/learn-angular/9-output"
}