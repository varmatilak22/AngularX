{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backComponents\n  - [Anatomy of components](https://angular.dev/guide/components)\n  - [Selectors](https://angular.dev/guide/components/selectors)\n  - [Styling](https://angular.dev/guide/components/styling)\n  - [Accepting data with input properties](https://angular.dev/guide/components/inputs)\n  - [Custom events with outputs](https://angular.dev/guide/components/outputs)\n  - [Content projection with ng-content](https://angular.dev/guide/components/content-projection)\n  - [Host elements](https://angular.dev/guide/components/host-elements)\n  - [Lifecycle](https://angular.dev/guide/components/lifecycle)\n  - [Referencing component children with queries](https://angular.dev/guide/components/queries)\n  - [Using DOM APIs](https://angular.dev/guide/components/dom-apis)\n  - [Inheritance](https://angular.dev/guide/components/inheritance)\n  - [Programmatically rendering components](https://angular.dev/guide/components/programmatic-rendering)\n  - [Advanced configuration](https://angular.dev/guide/components/advanced-configuration)\n  - [Custom Elements](https://angular.dev/guide/elements)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n**TIP:** This guide assumes you've already read the [Essentials Guide](https://angular.dev/guide/components/essentials). Read that first if you're new to Angular.\n\nEvery component defines\na [CSS selector](https://developer.mozilla.org/docs/Web/CSS/CSS_selectors) that determines how\nthe component is used:\n\n```\n      @Component({  selector: 'profile-photo',  ...})export class ProfilePhoto { }\n\n```\n\ncheck\n\nYou use a component by creating a matching HTML element in the templates of _other_ components:\n\n```\n      @Component({  template: `    <profile-photo />    <button>Upload a new profile photo</button>`,  ...,})export class UserProfile { }\n\n```\n\ncheck\n\n**Angular matches selectors statically at compile-time**. Changing the DOM at run-time, either via\nAngular bindings or with DOM APIs, does not affect the components rendered.\n\n**An element can match exactly one component selector.** If multiple component selectors match a\nsingle element, Angular reports an error.\n\n**Component selectors are case-sensitive.**\n\n## [Types of selectors](https://angular.dev/guide/components/selectors\\#types-of-selectors)\n\nAngular supports a limited subset\nof [basic CSS selector types](https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors) in\ncomponent selectors:\n\n| **Selector type** | **Description** | **Examples** |\n| --- | --- | --- |\n| Type selector | Matches elements based on their HTML tag name, or node name. | `profile-photo` |\n| Attribute selector | Matches elements based on the presence of an HTML attribute and, optionally, an exact value for that attribute. | `[dropzone]` `[type=\"reset\"]` |\n| Class selector | Matches elements based on the presence of a CSS class. | `.menu-item` |\n\nFor attribute values, Angular supports matching an exact attribute value with the equals ( `=`)\noperator. Angular does not support other attribute value operators.\n\nAngular component selectors do not support combinators, including\nthe [descendant combinator](https://developer.mozilla.org/docs/Web/CSS/Descendant_combinator)\nor [child combinator](https://developer.mozilla.org/docs/Web/CSS/Child_combinator).\n\nAngular component selectors do not support\nspecifying [namespaces](https://developer.mozilla.org/docs/Web/SVG/Namespaces_Crash_Course).\n\n### [The `:not` pseudo-class](https://angular.dev/guide/components/selectors\\#the-not-pseudo-class)\n\nAngular supports [the `:not` pseudo-class](https://developer.mozilla.org/docs/Web/CSS/:not).\nYou can append this pseudo-class to any other selector to narrow which elements a component's\nselector matches. For example, you could define a `[dropzone]` attribute selector and prevent\nmatching `textarea` elements:\n\n```\n      @Component({  selector: '[dropzone]:not(textarea)',  ...})export class DropZone { }\n\n```\n\ncheck\n\nAngular does not support any other pseudo-classes or pseudo-elements in component selectors.\n\n### [Combining selectors](https://angular.dev/guide/components/selectors\\#combining-selectors)\n\nYou can combine multiple selectors by concatenating them. For example, you can match `<button>`\nelements that specify `type=\"reset\"`:\n\n```\n      @Component({  selector: 'button[type=\"reset\"]',  ...})export class ResetButton { }\n\n```\n\ncheck\n\nYou can also define multiple selectors with a comma-separated list:\n\n```\n      @Component({  selector: 'drop-zone, [dropzone]',  ...})export class DropZone { }\n\n```\n\ncheck\n\nAngular creates a component for each element that matches _any_ of the selectors in the list.\n\n## [Choosing a selector](https://angular.dev/guide/components/selectors\\#choosing-a-selector)\n\nThe vast majority of components should use a custom element name as their selector. All custom\nelement names should include a hyphen as described\nby [the HTML specification](https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name).\nBy default, Angular reports an error if it encounters a custom tag name that does not match any\navailable components, preventing bugs due to mistyped component names.\n\nSee [Advanced component configuration](https://angular.dev/guide/components/guide/components/advanced-configuration) for details on\nusing [native custom elements](https://developer.mozilla.org/docs/Web/Web_Components) in\nAngular templates.\n\n### [Selector prefixes](https://angular.dev/guide/components/selectors\\#selector-prefixes)\n\nThe Angular team recommends using a short, consistent prefix for all the custom components\ndefined inside your project. For example, if you were to build YouTube with Angular, you might\nprefix your components with `yt-`, with components like `yt-menu`, `yt-player`, etc. Namespacing\nyour selectors like this makes it immediately clear where a particular component comes from. By\ndefault, the Angular CLI uses `app-`.\n\nAngular uses the `ng` selector prefix for its own framework APIs. Never use `ng` as a selector\nprefix for your own custom components.\n\n### [When to use an attribute selector](https://angular.dev/guide/components/selectors\\#when-to-use-an-attribute-selector)\n\nYou should consider an attribute selector when you want to create a component on a standard native\nelement. For example, if you want to create a custom button component, you can take advantage of the\nstandard `<button>` element by using an attribute selector:\n\n```\n      @Component({  selector: 'button[yt-upload]',   ...})export class YouTubeUploadButton { }\n\n```\n\ncheck\n\nThis approach allows consumers of the component to directly use all the element's standard APIs\nwithout extra work. This is especially valuable for ARIA attributes such as `aria-label`.\n\nAngular does not report errors when it encounters custom attributes that don't match an available\ncomponent. When using components with attribute selectors, consumers may forget to import the\ncomponent or its NgModule, resulting in the component not rendering.\nSee [Importing and using components](https://angular.dev/guide/components/guide/components/importing) for more information.\n\nComponents that define attribute selectors should use lowercase, dash-case attributes. You can\nfollow the same prefixing recommendation described above.",
  "title": "Selectors \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "components",
    "dev",
    "guide",
    "component",
    "selector",
    "selectors",
    "custom",
    "attribute"
  ],
  "sourceURL": "https://angular.dev/guide/components/selectors"
}