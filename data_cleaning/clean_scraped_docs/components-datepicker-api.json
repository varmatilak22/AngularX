{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for datepicker\n\n## API reference for Angular Material datepicker\n\n`\n          import {MatDatepickerModule} from '@angular/material/datepicker';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/datepicker/api\\#services)  Services\n\n#### [link](https://material.angular.io/components/datepicker/api\\#DefaultMatCalendarRangeStrategy) `DefaultMatCalendarRangeStrategy`\n\nProvides the default date range selection behavior.\n\n##### Methods\n\n| createDrag |\n| --- |\n| Parameters |\n| --- |\n| dragOrigin<br> `D` |  |\n| originalRange<br> `DateRange<D>` |  |\n| newDate<br> `D` |  |\n\n| createPreview |\n| --- |\n| Parameters |\n| --- |\n| activeDate<br> `D` |  |\n| currentRange<br> `DateRange<D>` |  |\n\n| selectionFinished |\n| --- |\n| Parameters |\n| --- |\n| date<br> `D` |  |\n| currentRange<br> `DateRange<D>` |  |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepickerIntl) `MatDatepickerIntl`\n\nDatepicker data that requires internationalization.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `calendarLabel: 'Calendar'` | A label for the calendar popup (used by screen readers). |\n| `changes: Subject<void>` | Stream that emits whenever the labels here are changed. Use this to notify<br>components if the labels have changed after initialization. |\n| `closeCalendarLabel: 'Close calendar'` | Label for the button used to close the calendar popup. |\n| `comparisonDateLabel: 'Comparison range'` | A label for the Comparison date of a range of dates (used by screen readers). |\n| `nextMonthLabel: 'Next month'` | A label for the next month button (used by screen readers). |\n| `nextMultiYearLabel: 'Next 24 years'` | A label for the next multi-year button (used by screen readers). |\n| `nextYearLabel: 'Next year'` | A label for the next year button (used by screen readers). |\n| `openCalendarLabel: 'Open calendar'` | A label for the button used to open the calendar popup (used by screen readers). |\n| `prevMonthLabel: 'Previous month'` | A label for the previous month button (used by screen readers). |\n| `prevMultiYearLabel: 'Previous 24 years'` | A label for the previous multi-year button (used by screen readers). |\n| `prevYearLabel: 'Previous year'` | A label for the previous year button (used by screen readers). |\n| `switchToMonthViewLabel: 'Choose date'` | A label for the 'switch to month view' button (used by screen readers). |\n| `switchToMultiYearViewLabel: 'Choose month and year'` | A label for the 'switch to year view' button (used by screen readers). |\n| Deprecated<br> <br>`endDateLabel: 'End date'` | A label for the last date of a range of dates (used by screen readers). |\n| Deprecated<br> <br>`startDateLabel: 'Start date'` | A label for the first date of a range of dates (used by screen readers). |\n\n##### Methods\n\n| formatYearRange |\n| --- |\n| Formats a range of years (used for visuals). |\n| Parameters |\n| --- |\n| start<br> `string` |  |\n| end<br> `string` |  |\n| Returns |\n| --- |\n| `string` |  |\n\n| formatYearRangeLabel |\n| --- |\n| Formats a label for a range of years (used by screen readers). |\n| Parameters |\n| --- |\n| start<br> `string` |  |\n| end<br> `string` |  |\n| Returns |\n| --- |\n| `string` |  |\n\n### [link](https://material.angular.io/components/datepicker/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepickerInput) `MatDatepickerInput`\n\nDirective used to connect an input to a MatDatepicker.\n\nSelector:input\\[matDatepicker\\]\n\nExported as:matDatepickerInput\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('matDatepickerFilter')<br> <br>`dateFilter: DateFilterFn<D>` | Function that can be used to filter out dates within the datepicker. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the datepicker-input is disabled. |\n| @Input()<br>`matDatepicker: MatDatepickerPanel<MatDatepickerControl<D>, D, D>` | The datepicker that this input is associated with. |\n| @Input()<br>`max: D | null` | The maximum valid date. |\n| @Input()<br>`min: D | null` | The minimum valid date. |\n| @Input()<br>`value: D | null` | The value of the input. |\n| @Output()<br>`dateChange: EventEmitter<MatDatepickerInputEvent<D, S>>` | Emits when a `change` event is fired on this `<input>`. |\n| @Output()<br>`dateInput: EventEmitter<MatDatepickerInputEvent<D, S>>` | Emits when an `input` event is fired on this `<input>`. |\n| `stateChanges: Subject<void>` | Emits when the internal state has changed |\n\n##### Methods\n\n| getConnectedOverlayOrigin |\n| --- |\n| Gets the element that the datepicker popup should be connected to. |\n| Returns |\n| --- |\n| `ElementRef` | The element to connect the popup to. |\n\n| getOverlayLabelId |\n| --- |\n| Gets the ID of an element that should be used a description for the calendar overlay. |\n| Returns |\n| --- |\n| `string | null` |  |\n\n| getStartValue |\n| --- |\n| Gets the value at which the calendar should start. |\n| Returns |\n| --- |\n| `D | null` |  |\n\n| getThemePalette |\n| --- |\n| Returns the palette used by the input's form field, if any. |\n| Returns |\n| --- |\n| `ThemePalette` |  |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDateRangePicker) `MatDateRangePicker`\n\nComponent responsible for managing the date range picker popup/dialog.\n\nSelector:mat-date-range-picker\n\nExported as:matDateRangePicker\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`calendarHeaderComponent: ComponentType<any>` | An input indicating the type of the custom header component for the calendar, if set. |\n| @Input()<br>`color: ThemePalette` | Theme color of the datepicker's calendar. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/datepicker/styling](https://material.angular.io/components/datepicker/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input()<br>`dateClass: MatCalendarCellClassFunction<D>` | Function that can be used to add custom CSS classes to dates. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the datepicker pop-up should be disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`opened: boolean` | Whether the calendar is open. |\n| @Input()<br>`panelClass: string | string[]` | Classes to be passed to the date picker panel. |\n| @Input({ transform: booleanAttribute })<br> <br>`restoreFocus: boolean` | Whether to restore focus to the previously-focused element when the calendar is closed.<br>Note that automatic focus restoration is an accessibility feature and it is recommended that<br>you provide your own equivalent, if you decide to turn it off. |\n| @Input()<br>`startAt: D | null` | The date to open the calendar to initially. |\n| @Input()<br>`startView: 'month' | 'year' | 'multi-year'` | The view that the calendar should start in. |\n| @Input({ transform: booleanAttribute })<br> <br>`touchUi: boolean` | Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather<br>than a dropdown and elements have more padding to allow for bigger touch targets. |\n| @Input()<br>`xPosition: DatepickerDropdownPositionX` | Preferred position of the datepicker in the X axis. |\n| @Input()<br>`yPosition: DatepickerDropdownPositionY` | Preferred position of the datepicker in the Y axis. |\n| @Output('closed')<br> <br>`closedStream: EventEmitter<void>` | Emits when the datepicker has been closed. |\n| @Output()<br>`monthSelected: EventEmitter<D>` | Emits selected month in year view.<br>This doesn't imply a change on the selected date. |\n| @Output('opened')<br> <br>`openedStream: EventEmitter<void>` | Emits when the datepicker has been opened. |\n| @Output()<br>`viewChanged: EventEmitter<MatCalendarView>` | Emits when the current view changes. |\n| @Output()<br>`yearSelected: EventEmitter<D>` | Emits selected year in multiyear view.<br>This doesn't imply a change on the selected date. |\n| `datepickerInput: C` | The input element this datepicker is associated with. |\n| `id: string` | The id for the datepicker calendar. |\n| `stateChanges: Subject<void>` | Emits when the datepicker's state changes. |\n\n##### Methods\n\n| close |\n| --- |\n| Close the calendar. |\n\n| open |\n| --- |\n| Open the calendar. |\n\n| registerActions |\n| --- |\n| Registers a portal containing action buttons with the datepicker. |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<any>` | Portal to be registered. |\n\n| registerInput |\n| --- |\n| Register an input with this datepicker. |\n| Parameters |\n| --- |\n| input<br> `C` | The datepicker input to register with this datepicker. |\n| Returns |\n| --- |\n| `MatDateSelectionModel<S, D>` | Selection model that the input should hook itself up to. |\n\n| removeActions |\n| --- |\n| Removes a portal containing action buttons from the datepicker. |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<any>` | Portal to be removed. |\n\n| select |\n| --- |\n| Selects the given date |\n| Parameters |\n| --- |\n| date<br> `D` |  |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatStartDate) `MatStartDate`\n\nInput for entering the start date in a `mat-date-range-input`.\n\nSelector:input\\[matStartDate\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the datepicker-input is disabled. |\n| @Input()<br>`errorStateMatcher: ErrorStateMatcher` | Object used to control when error messages are shown. |\n| @Input()<br>`value: D | null` | The value of the input. |\n| @Output()<br>`dateChange: EventEmitter<MatDatepickerInputEvent<D, S>>` | Emits when a `change` event is fired on this `<input>`. |\n| @Output()<br>`dateInput: EventEmitter<MatDatepickerInputEvent<D, S>>` | Emits when an `input` event is fired on this `<input>`. |\n| `errorState: boolean` | Whether the input is in an error state. |\n| `stateChanges: Subject<void>` | Emits when the internal state has changed |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the input. |\n\n| getMirrorValue |\n| --- |\n| Gets the value that should be used when mirroring the input's size. |\n| Returns |\n| --- |\n| `string` |  |\n\n| isEmpty |\n| --- |\n| Gets whether the input is empty. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| updateErrorState |\n| --- |\n| Refreshes the error state of the input. |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatEndDate) `MatEndDate`\n\nInput for entering the end date in a `mat-date-range-input`.\n\nSelector:input\\[matEndDate\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the datepicker-input is disabled. |\n| @Input()<br>`errorStateMatcher: ErrorStateMatcher` | Object used to control when error messages are shown. |\n| @Input()<br>`value: D | null` | The value of the input. |\n| @Output()<br>`dateChange: EventEmitter<MatDatepickerInputEvent<D, S>>` | Emits when a `change` event is fired on this `<input>`. |\n| @Output()<br>`dateInput: EventEmitter<MatDatepickerInputEvent<D, S>>` | Emits when an `input` event is fired on this `<input>`. |\n| `errorState: boolean` | Whether the input is in an error state. |\n| `stateChanges: Subject<void>` | Emits when the internal state has changed |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the input. |\n\n| getMirrorValue |\n| --- |\n| Gets the value that should be used when mirroring the input's size. |\n| Returns |\n| --- |\n| `string` |  |\n\n| isEmpty |\n| --- |\n| Gets whether the input is empty. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| updateErrorState |\n| --- |\n| Refreshes the error state of the input. |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatCalendarHeader) `MatCalendarHeader`\n\nDefault header for MatCalendar\n\nSelector:mat-calendar-header\n\nExported as:matCalendarHeader\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `calendar: inject<MatCalendar<D>>(MatCalendar)` |  |\n| `nextButtonLabel: string` | The label for the next button. |\n| `periodButtonDescription: string` | The aria description for the current calendar view. |\n| `periodButtonLabel: string` | The `aria-label` for changing the calendar view. |\n| `periodButtonText: string` | The display text for the current calendar view. |\n| `prevButtonLabel: string` | The label for the previous button. |\n\n##### Methods\n\n| currentPeriodClicked |\n| --- |\n| Handles user clicks on the period label. |\n\n| nextClicked |\n| --- |\n| Handles user clicks on the next button. |\n\n| nextEnabled |\n| --- |\n| Whether the next period button is enabled. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| previousClicked |\n| --- |\n| Handles user clicks on the previous button. |\n\n| previousEnabled |\n| --- |\n| Whether the previous period button is enabled. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatCalendar) `MatCalendar`\n\nA calendar that is used as part of the datepicker.\n\nSelector:mat-calendar\n\nExported as:matCalendar\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`comparisonEnd: D | null` | End of the comparison range. |\n| @Input()<br>`comparisonStart: D | null` | Start of the comparison range. |\n| @Input()<br>`dateClass: MatCalendarCellClassFunction<D>` | Function that can be used to add custom CSS classes to dates. |\n| @Input()<br>`dateFilter: (date: D) => boolean` | Function used to filter which dates are selectable. |\n| @Input()<br>`endDateAccessibleName: string | null` | ARIA Accessible name of the `<input matEndDate/>` |\n| @Input()<br>`headerComponent: ComponentType<any>` | An input indicating the type of the header component, if set. |\n| @Input()<br>`maxDate: D | null` | The maximum selectable date. |\n| @Input()<br>`minDate: D | null` | The minimum selectable date. |\n| @Input()<br>`selected: DateRange<D> | D | null` | The currently selected date. |\n| @Input()<br>`startAt: D | null` | A date representing the period (month or year) to start the calendar in. |\n| @Input()<br>`startDateAccessibleName: string | null` | ARIA Accessible name of the `<input matStartDate/>` |\n| @Input()<br>`startView: MatCalendarView` | Whether the calendar should be started in month or year view. |\n| @Output()<br>`monthSelected: EventEmitter<D>` | Emits the month chosen in year view.<br>This doesn't imply a change on the selected date. |\n| @Output()<br>`selectedChange: EventEmitter<D | null>` | Emits when the currently selected date changes. |\n| @Output()<br>`viewChanged: EventEmitter<MatCalendarView>` | Emits when the current view changes. |\n| @Output()<br>`yearSelected: EventEmitter<D>` | Emits the year chosen in multiyear view.<br>This doesn't imply a change on the selected date. |\n| `activeDate: D` | The current active date. This determines which time period is shown and which date is<br>highlighted when using keyboard navigation. |\n| `currentView: MatCalendarView` | Whether the calendar is in month view. |\n| `monthView: MatMonthView<D>` | Reference to the current month view component. |\n| `multiYearView: MatMultiYearView<D>` | Reference to the current multi-year view component. |\n| `stateChanges: Subject<void>` | Emits whenever there is a state change that the header may need to respond to. |\n| `yearView: MatYearView<D>` | Reference to the current year view component. |\n\n##### Methods\n\n| focusActiveCell |\n| --- |\n| Focuses the active date. |\n\n| updateTodaysDate |\n| --- |\n| Updates today's date after an update of the active date |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepicker) `MatDatepicker`\n\nComponent responsible for managing the datepicker popup/dialog.\n\nSelector:mat-datepicker\n\nExported as:matDatepicker\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`calendarHeaderComponent: ComponentType<any>` | An input indicating the type of the custom header component for the calendar, if set. |\n| @Input()<br>`color: ThemePalette` | Theme color of the datepicker's calendar. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/datepicker/styling](https://material.angular.io/components/datepicker/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input()<br>`dateClass: MatCalendarCellClassFunction<D>` | Function that can be used to add custom CSS classes to dates. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the datepicker pop-up should be disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`opened: boolean` | Whether the calendar is open. |\n| @Input()<br>`panelClass: string | string[]` | Classes to be passed to the date picker panel. |\n| @Input({ transform: booleanAttribute })<br> <br>`restoreFocus: boolean` | Whether to restore focus to the previously-focused element when the calendar is closed.<br>Note that automatic focus restoration is an accessibility feature and it is recommended that<br>you provide your own equivalent, if you decide to turn it off. |\n| @Input()<br>`startAt: D | null` | The date to open the calendar to initially. |\n| @Input()<br>`startView: 'month' | 'year' | 'multi-year'` | The view that the calendar should start in. |\n| @Input({ transform: booleanAttribute })<br> <br>`touchUi: boolean` | Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather<br>than a dropdown and elements have more padding to allow for bigger touch targets. |\n| @Input()<br>`xPosition: DatepickerDropdownPositionX` | Preferred position of the datepicker in the X axis. |\n| @Input()<br>`yPosition: DatepickerDropdownPositionY` | Preferred position of the datepicker in the Y axis. |\n| @Output('closed')<br> <br>`closedStream: EventEmitter<void>` | Emits when the datepicker has been closed. |\n| @Output()<br>`monthSelected: EventEmitter<D>` | Emits selected month in year view.<br>This doesn't imply a change on the selected date. |\n| @Output('opened')<br> <br>`openedStream: EventEmitter<void>` | Emits when the datepicker has been opened. |\n| @Output()<br>`viewChanged: EventEmitter<MatCalendarView>` | Emits when the current view changes. |\n| @Output()<br>`yearSelected: EventEmitter<D>` | Emits selected year in multiyear view.<br>This doesn't imply a change on the selected date. |\n| `datepickerInput: C` | The input element this datepicker is associated with. |\n| `id: string` | The id for the datepicker calendar. |\n| `stateChanges: Subject<void>` | Emits when the datepicker's state changes. |\n\n##### Methods\n\n| close |\n| --- |\n| Close the calendar. |\n\n| open |\n| --- |\n| Open the calendar. |\n\n| registerActions |\n| --- |\n| Registers a portal containing action buttons with the datepicker. |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<any>` | Portal to be registered. |\n\n| registerInput |\n| --- |\n| Register an input with this datepicker. |\n| Parameters |\n| --- |\n| input<br> `C` | The datepicker input to register with this datepicker. |\n| Returns |\n| --- |\n| `MatDateSelectionModel<S, D>` | Selection model that the input should hook itself up to. |\n\n| removeActions |\n| --- |\n| Removes a portal containing action buttons from the datepicker. |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<any>` | Portal to be removed. |\n\n| select |\n| --- |\n| Selects the given date |\n| Parameters |\n| --- |\n| date<br> `D` |  |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepickerToggleIcon) `MatDatepickerToggleIcon`\n\nCan be used to override the icon of a `matDatepickerToggle`.\n\nSelector:\\[matDatepickerToggleIcon\\]\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepickerToggle) `MatDatepickerToggle`\n\nSelector:mat-datepicker-toggle\n\nExported as:matDatepickerToggle\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-label')<br> <br>`ariaLabel: string` | Screen-reader label for the button. |\n| @Input('for')<br> <br>`datepicker: MatDatepickerPanel<MatDatepickerControl<any>, D>` | Datepicker instance that the button will toggle. |\n| @Input()<br>`disableRipple: boolean` | Whether ripples on the toggle should be disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the toggle button is disabled. |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDateRangeInput) `MatDateRangeInput`\n\nSelector:mat-date-range-input\n\nExported as:matDateRangeInput\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`comparisonEnd: D | null` | End of the comparison range that should be shown in the calendar. |\n| @Input()<br>`comparisonStart: D | null` | Start of the comparison range that should be shown in the calendar. |\n| @Input()<br>`dateFilter: DateFilterFn<D>` | Function that can be used to filter out dates within the date range picker. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the input is disabled. |\n| @Input()<br>`max: D | null` | The maximum valid date. |\n| @Input()<br>`min: D | null` | The minimum valid date. |\n| @Input()<br>`rangePicker: MatDatepickerPanel<MatDatepickerControl<D>, DateRange<D>, D>` | The range picker that this input is associated with. |\n| @Input({ transform: booleanAttribute })<br> <br>`required: boolean` | Whether the input is required. |\n| @Input()<br>`separator: '\u2013'` | Separator text to be shown between the inputs. |\n| `controlType: 'mat-date-range-input'` | Name of the form control. |\n| `empty: boolean` | Whether the datepicker input is empty. |\n| `errorState: boolean` | Whether the input is in an error state. |\n| `focused: false` | Whether the control is focused. |\n| `id: string` | Unique ID for the group. |\n| `shouldLabelFloat: boolean` | Whether the control's label should float. |\n| `stateChanges: Subject<void>` | Emits when the input's state has changed. |\n| `value: ` | Current value of the range input. |\n\n##### Methods\n\n| getConnectedOverlayOrigin |\n| --- |\n| Gets the element to which the calendar overlay should be attached. |\n| Returns |\n| --- |\n| `ElementRef` |  |\n\n| getOverlayLabelId |\n| --- |\n| Gets the ID of an element that should be used a description for the calendar overlay. |\n| Returns |\n| --- |\n| `string | null` |  |\n\n| getStartValue |\n| --- |\n| Gets the date at which the calendar should start. |\n| Returns |\n| --- |\n| `D | null` |  |\n\n| getThemePalette |\n| --- |\n| Gets the input's theme palette. |\n| Returns |\n| --- |\n| `ThemePalette` |  |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepickerApply) `MatDatepickerApply`\n\nButton that will close the datepicker and assign the current selection to the data model.\n\nSelector:\\[matDatepickerApply\\]\\[matDateRangePickerApply\\]\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepickerCancel) `MatDatepickerCancel`\n\nButton that will close the datepicker and discard the current selection.\n\nSelector:\\[matDatepickerCancel\\]\\[matDateRangePickerCancel\\]\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepickerActions) `MatDatepickerActions`\n\nContainer that can be used to project a row of action buttons\nto the bottom of a datepicker or date range picker.\n\nSelector:mat-datepicker-actionsmat-date-range-picker-actions\n\n### [link](https://material.angular.io/components/datepicker/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepickerInputEvent) `MatDatepickerInputEvent`\n\nAn event used for datepicker input and change events. We don't always have access to a native\ninput or change event because the event may have been triggered by the user clicking on the\ncalendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `target: MatDatepickerInputBase<S, D>` | Reference to the datepicker input component that emitted the event. |\n| `targetElement: HTMLElement` | Reference to the native input element associated with the datepicker input. |\n| `value: D | null` | The new value for the target datepicker input. |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#DateRange) `DateRange`\n\nA class representing a range of dates.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `end: D | null` | The end date of the range. |\n| `start: D | null` | The start date of the range. |\n\n### [link](https://material.angular.io/components/datepicker/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDateRangeSelectionStrategy) `MatDateRangeSelectionStrategy`\n\nObject that can be provided in order to customize the date range selection behavior.\n\n##### Methods\n\n| createDrag |\n| --- |\n| Called when the user has dragged a date in the currently selected range to another<br>date. Returns the date updated range that should result from this interaction. |\n| Parameters |\n| --- |\n| dateOrigin<br> `` | The date the user started dragging from. |\n| originalRange<br> `DateRange<D>` | The originally selected date range. |\n| newDate<br> `D` | The currently targeted date in the drag operation. |\n| event<br> `Event` | DOM event that triggered the updated drag state. Will be<br>`mouseenter`/ `mouseup` or `touchmove`/ `touchend` depending on the device type. |\n| dragOrigin<br> `D` |  |\n| Returns |\n| --- |\n| `DateRange<D> | null` |  |\n\n| createPreview |\n| --- |\n| Called when the user has activated a new date (e.g. by hovering over<br>it or moving focus) and the calendar tries to display a date range. |\n| Parameters |\n| --- |\n| activeDate<br> `D` | Date that the user has activated. Will be null if the user moved<br>focus to an element that's no a calendar cell. |\n| currentRange<br> `DateRange<D>` | Range that is currently shown in the calendar. |\n| event<br> `Event` | DOM event that caused the preview to be changed. Will be either a<br>`mouseenter`/ `mouseleave` or `focus`/ `blur` depending on how the user is navigating. |\n| Returns |\n| --- |\n| `DateRange<D>` |  |\n\n| selectionFinished |\n| --- |\n| Called when the user has finished selecting a value. |\n| Parameters |\n| --- |\n| date<br> `D` | Date that was selected. Will be null if the user cleared the selection. |\n| currentRange<br> `DateRange<D>` | Range that is currently show in the calendar. |\n| event<br> `Event` | DOM event that triggered the selection. Currently only corresponds to a `click`<br>event, but it may get expanded in the future. |\n| Returns |\n| --- |\n| `DateRange<D>` |  |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepickerControl) `MatDatepickerControl`\n\nForm control that can be associated with a datepicker.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `dateFilter: DateFilterFn<D>` |  |\n| `disabled: boolean` |  |\n| `max: D | null` |  |\n| `min: D | null` |  |\n| `stateChanges: Observable<void>` |  |\n\n##### Methods\n\n| getConnectedOverlayOrigin |\n| --- |\n| Returns |\n| --- |\n| `ElementRef` |  |\n\n| getOverlayLabelId |\n| --- |\n| Returns |\n| --- |\n| `string | null` |  |\n\n| getStartValue |\n| --- |\n| Returns |\n| --- |\n| `D | null` |  |\n\n| getThemePalette |\n| --- |\n| Returns |\n| --- |\n| `ThemePalette` |  |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepickerPanel) `MatDatepickerPanel`\n\nA datepicker that can be attached to a {@link MatDatepickerControl}.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `closedStream: EventEmitter<void>` | Stream that emits whenever the date picker is closed. |\n| `color: ThemePalette` | Color palette to use on the datepicker's calendar. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/datepicker/styling](https://material.angular.io/components/datepicker/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| `datepickerInput: C` | The input element the datepicker is associated with. |\n| `disabled: boolean` | Whether the datepicker pop-up should be disabled. |\n| `id: string` | The id for the datepicker's calendar. |\n| `opened: boolean` | Whether the datepicker is open. |\n| `openedStream: EventEmitter<void>` | Stream that emits whenever the date picker is opened. |\n| `stateChanges: Subject<void>` | Emits when the datepicker's state changes. |\n\n##### Methods\n\n| open |\n| --- |\n| Opens the datepicker. |\n\n| registerInput |\n| --- |\n| Register an input with the datepicker. |\n| Parameters |\n| --- |\n| input<br> `C` |  |\n| Returns |\n| --- |\n| `MatDateSelectionModel<S, D>` |  |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatCalendarUserEvent) `MatCalendarUserEvent`\n\nEvent emitted when a date inside the calendar is triggered as a result of a user action.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `event: Event` |  |\n| `value: D` |  |\n\n### [link](https://material.angular.io/components/datepicker/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/datepicker/api\\#DatepickerDropdownPositionX) `DatepickerDropdownPositionX`\n\nPossible positions for the datepicker dropdown along the X axis.\n\n```docs-markdown-code\ntype DatepickerDropdownPositionX = 'start' | 'end';\n\n```\n\n#### [link](https://material.angular.io/components/datepicker/api\\#DatepickerDropdownPositionY) `DatepickerDropdownPositionY`\n\nPossible positions for the datepicker dropdown along the Y axis.\n\n```docs-markdown-code\ntype DatepickerDropdownPositionY = 'above' | 'below';\n\n```\n\n#### [link](https://material.angular.io/components/datepicker/api\\#DateFilterFn) `DateFilterFn`\n\nFunction that can be used to filter out dates from a calendar.\nDatepicker can sometimes receive a null value as input for the date argument.\nThis doesn't represent a \"null date\" but rather signifies that no date has been selected yet in the calendar.\n\n```docs-markdown-code\ntype DateFilterFn = (date: D | null) => boolean;\n\n```\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatCalendarCellCssClasses) `MatCalendarCellCssClasses`\n\nExtra CSS classes that can be associated with a calendar cell.\n\n```docs-markdown-code\ntype MatCalendarCellCssClasses = string | string[] | Set<string> | {\n    [key: string]: any;\n};\n\n```\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatCalendarCellClassFunction) `MatCalendarCellClassFunction`\n\nFunction that can generate the extra classes that should be added to a calendar cell.\n\n```docs-markdown-code\ntype MatCalendarCellClassFunction = (date: D, view: 'month' | 'year' | 'multi-year') => MatCalendarCellCssClasses;\n\n```\n\n### [link](https://material.angular.io/components/datepicker/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MAT_DATE_RANGE_SELECTION_STRATEGY) `MAT_DATE_RANGE_SELECTION_STRATEGY`\n\nInjection token used to customize the date range selection behavior.\n\n```docs-markdown-code\nconst MAT_DATE_RANGE_SELECTION_STRATEGY: InjectionToken<MatDateRangeSelectionStrategy<any>>;\n\n```\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MAT_DATEPICKER_SCROLL_STRATEGY) `MAT_DATEPICKER_SCROLL_STRATEGY`\n\nInjection token that determines the scroll handling while the calendar is open.\n\n```docs-markdown-code\nconst MAT_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\n```\n\n#### [link](https://material.angular.io/components/datepicker/api\\#yearsPerPage) `yearsPerPage`\n\n```docs-markdown-code\nconst yearsPerPage: 24;\n\n```\n\n#### [link](https://material.angular.io/components/datepicker/api\\#yearsPerRow) `yearsPerRow`\n\n```docs-markdown-code\nconst yearsPerRow: 4;\n\n```\n\n## API reference for Angular Material datepicker-testing\n\n`\n          import {MatDatepickerInputHarness} from '@angular/material/datepicker/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/datepicker/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepickerInputHarness) `MatDatepickerInputHarness`\n\nHarness for interacting with a standard Material datepicker inputs in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-datepicker-input'` |  |\n\n##### Methods\n\n| blur |\n| --- |\n| Blurs the input and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| async<br> <br>closeCalendar |\n| --- |\n| Closes the calendar associated with the input. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| focus |\n| --- |\n| Focuses the input and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| async<br> <br>getCalendar |\n| --- |\n| Gets the `MatCalendarHarness` that is associated with the trigger. |\n| Parameters |\n| --- |\n| filter<br> `CalendarHarnessFilters = {}` | Optionally filters which calendar is included. |\n| Returns |\n| --- |\n| `Promise<MatCalendarHarness>` |  |\n\n| getMax |\n| --- |\n| Gets the formatted maximum date for the input's value. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getMin |\n| --- |\n| Gets the formatted minimum date for the input's value. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getPlaceholder |\n| --- |\n| Gets the placeholder of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| getValue |\n| --- |\n| Gets the value of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>hasCalendar |\n| --- |\n| Whether a calendar is associated with the input. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isCalendarOpen |\n| --- |\n| Gets whether the calendar associated with the input is open. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| isDisabled |\n| --- |\n| Whether the input is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| isFocused |\n| --- |\n| Whether the input is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| isRequired |\n| --- |\n| Whether the input is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>openCalendar |\n| --- |\n| Opens the calendar associated with the input. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| setValue |\n| --- |\n| Sets the value of the input. The value will be set by simulating<br>keypresses that correspond to the given value. |\n| Parameters |\n| --- |\n| newValue<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatDatepickerInputHarness`<br>that meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `DatepickerInputHarnessFilters = {}` | Options for filtering which input instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatDatepickerInputHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDatepickerToggleHarness) `MatDatepickerToggleHarness`\n\nHarness for interacting with a standard Material datepicker toggle in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-datepicker-toggle'` |  |\n\n##### Methods\n\n| closeCalendar |\n| --- |\n| Closes the calendar if it is open. |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| getCalendar |\n| --- |\n| Gets the `MatCalendarHarness` that is associated with the trigger. |\n| Parameters |\n| --- |\n| filter<br> `CalendarHarnessFilters = {}` | Optionally filters which calendar is included. |\n| Returns |\n| --- |\n| `Promise<MatCalendarHarness>` |  |\n\n| hasCalendar |\n| --- |\n| Gets whether there is a calendar associated with the trigger. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isCalendarOpen |\n| --- |\n| Gets whether the calendar associated with the toggle is open. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the toggle is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| openCalendar |\n| --- |\n| Opens the calendar if the trigger is enabled and it has a calendar. |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatDatepickerToggleHarness` that<br>meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `DatepickerToggleHarnessFilters = {}` | Options for filtering which datepicker toggle instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatDatepickerToggleHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatStartDateHarness) `MatStartDateHarness`\n\nHarness for interacting with a standard Material date range start input in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-start-date'` |  |\n\n##### Methods\n\n| blur |\n| --- |\n| Blurs the input and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| focus |\n| --- |\n| Focuses the input and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| getMax |\n| --- |\n| Gets the formatted maximum date for the input's value. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getMin |\n| --- |\n| Gets the formatted minimum date for the input's value. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getPlaceholder |\n| --- |\n| Gets the placeholder of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| getValue |\n| --- |\n| Gets the value of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| isDisabled |\n| --- |\n| Whether the input is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| isFocused |\n| --- |\n| Whether the input is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| isRequired |\n| --- |\n| Whether the input is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| setValue |\n| --- |\n| Sets the value of the input. The value will be set by simulating<br>keypresses that correspond to the given value. |\n| Parameters |\n| --- |\n| newValue<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatStartDateHarness`<br>that meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `DatepickerInputHarnessFilters = {}` | Options for filtering which input instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatStartDateHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatEndDateHarness) `MatEndDateHarness`\n\nHarness for interacting with a standard Material date range end input in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-end-date'` |  |\n\n##### Methods\n\n| blur |\n| --- |\n| Blurs the input and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| focus |\n| --- |\n| Focuses the input and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| getMax |\n| --- |\n| Gets the formatted maximum date for the input's value. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getMin |\n| --- |\n| Gets the formatted minimum date for the input's value. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| getPlaceholder |\n| --- |\n| Gets the placeholder of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| getValue |\n| --- |\n| Gets the value of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| isDisabled |\n| --- |\n| Whether the input is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| isFocused |\n| --- |\n| Whether the input is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| isRequired |\n| --- |\n| Whether the input is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| setValue |\n| --- |\n| Sets the value of the input. The value will be set by simulating<br>keypresses that correspond to the given value. |\n| Parameters |\n| --- |\n| newValue<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatEndDateHarness`<br>that meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `DatepickerInputHarnessFilters = {}` | Options for filtering which input instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatEndDateHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatDateRangeInputHarness) `MatDateRangeInputHarness`\n\nHarness for interacting with a standard Material date range input in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-date-range-input'` |  |\n\n##### Methods\n\n| closeCalendar |\n| --- |\n| Closes the calendar if it is open. |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| getCalendar |\n| --- |\n| Gets the `MatCalendarHarness` that is associated with the trigger. |\n| Parameters |\n| --- |\n| filter<br> `CalendarHarnessFilters = {}` | Optionally filters which calendar is included. |\n| Returns |\n| --- |\n| `Promise<MatCalendarHarness>` |  |\n\n| async<br> <br>getEndInput |\n| --- |\n| Gets the inner start date input inside the range input. |\n| Returns |\n| --- |\n| `Promise<MatEndDateHarness>` |  |\n\n| async<br> <br>getSeparator |\n| --- |\n| Gets the separator text between the values of the two inputs. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getStartInput |\n| --- |\n| Gets the inner start date input inside the range input. |\n| Returns |\n| --- |\n| `Promise<MatStartDateHarness>` |  |\n\n| async<br> <br>getValue |\n| --- |\n| Gets the combined value of the start and end inputs, including the separator. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| hasCalendar |\n| --- |\n| Gets whether there is a calendar associated with the trigger. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isCalendarOpen |\n| --- |\n| Opens the calendar associated with the input. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Gets whether the range input is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRequired |\n| --- |\n| Gets whether the range input is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| openCalendar |\n| --- |\n| Opens the calendar if the trigger is enabled and it has a calendar. |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatDateRangeInputHarness`<br>that meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `DateRangeInputHarnessFilters = {}` | Options for filtering which input instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatDateRangeInputHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatCalendarHarness) `MatCalendarHarness`extends [ComponentHarness](https://material.angular.io/components/datepicker/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard Material calendar in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-calendar'` |  |\n\n##### Methods\n\n| async<br> <br>changeView |\n| --- |\n| Changes the calendar view by clicking on the view toggle button. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getCells |\n| --- |\n| Gets a list of cells inside the calendar. |\n| Parameters |\n| --- |\n| filter<br> `CalendarCellHarnessFilters = {}` | Optionally filters which cells are included. |\n| Returns |\n| --- |\n| `Promise<MatCalendarCellHarness[]>` |  |\n\n| async<br> <br>getCurrentView |\n| --- |\n| Gets the current view that is being shown inside the calendar. |\n| Returns |\n| --- |\n| `Promise<CalendarView>` |  |\n\n| async<br> <br>getCurrentViewLabel |\n| --- |\n| Gets the label of the current calendar view. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>next |\n| --- |\n| Goes to the next page of the current view (e.g. next month when inside the month view). |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>previous |\n| --- |\n| Goes to the previous page of the current view<br>(e.g. previous month when inside the month view). |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>selectCell |\n| --- |\n| Selects a cell in the current calendar view. |\n| Parameters |\n| --- |\n| filter<br> `CalendarCellHarnessFilters = {}` | An optional filter to apply to the cells. The first cell matching the filter<br>will be selected. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatCalendarHarness`<br>that meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `CalendarHarnessFilters = {}` | Options for filtering which calendar instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatCalendarHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#MatCalendarCellHarness) `MatCalendarCellHarness`extends [ComponentHarness](https://material.angular.io/components/datepicker/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard Material calendar cell in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-calendar-body-cell'` |  |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Removes focus from the calendar cell. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the calendar cell. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAriaLabel |\n| --- |\n| Gets the aria-label of the calendar cell. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets the text of the calendar cell. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>hover |\n| --- |\n| Hovers over the calendar cell. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>isActive |\n| --- |\n| Whether the cell is currently activated using keyboard navigation. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isComparisonRangeEnd |\n| --- |\n| Whether the cell is the end of the comparison range. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isComparisonRangeStart |\n| --- |\n| Whether the cell is the start of the comparison range. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the cell is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isInComparisonRange |\n| --- |\n| Whether the cell is inside of the comparison range. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isInPreviewRange |\n| --- |\n| Whether the cell is inside of the preview range. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isInRange |\n| --- |\n| Whether the cell is part of the main range. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isPreviewRangeEnd |\n| --- |\n| Whether the cell is the end of the preview range. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isPreviewRangeStart |\n| --- |\n| Whether the cell is the start of the preview range. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRangeEnd |\n| --- |\n| Whether the cell is the end of the main range. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRangeStart |\n| --- |\n| Whether the cell is the start of the main range. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isSelected |\n| --- |\n| Whether the cell is selected. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isToday |\n| --- |\n| Whether the cell represents today's date. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>mouseAway |\n| --- |\n| Moves the mouse away from the calendar cell. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>select |\n| --- |\n| Selects the calendar cell. Won't do anything if the cell is disabled. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatCalendarCellHarness`<br>that meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `CalendarCellHarnessFilters = {}` | Options for filtering which cell instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatCalendarCellHarness>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/datepicker/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/datepicker/api\\#DatepickerInputHarnessFilters) `DatepickerInputHarnessFilters`\n\nA set of criteria that can be used to filter a list of datepicker input instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `placeholder: string | RegExp` | Filters based on the placeholder text of the input. |\n| `value: string | RegExp` | Filters based on the value of the input. |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#DatepickerToggleHarnessFilters) `DatepickerToggleHarnessFilters`\n\nA set of criteria that can be used to filter a list of datepicker toggle instances.\n\n#### [link](https://material.angular.io/components/datepicker/api\\#CalendarHarnessFilters) `CalendarHarnessFilters`\n\nA set of criteria that can be used to filter a list of calendar instances.\n\n#### [link](https://material.angular.io/components/datepicker/api\\#CalendarCellHarnessFilters) `CalendarCellHarnessFilters`\n\nA set of criteria that can be used to filter a list of calendar cell instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `active: boolean` | Filters based on whether the cell is activated using keyboard navigation |\n| `disabled: boolean` | Filters based on whether the cell is disabled. |\n| `inComparisonRange: boolean` | Filters based on whether the cell is inside of the comparison range. |\n| `inPreviewRange: boolean` | Filters based on whether the cell is inside of the preview range. |\n| `inRange: boolean` | Filters based on whether the cell is inside of the main range. |\n| `selected: boolean` | Filters based on whether the cell is selected. |\n| `text: string | RegExp` | Filters based on the text of the cell. |\n| `today: boolean` | Filters based on whether the cell represents today's date. |\n\n#### [link](https://material.angular.io/components/datepicker/api\\#DateRangeInputHarnessFilters) `DateRangeInputHarnessFilters`\n\nA set of criteria that can be used to filter a list of date range input instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `value: string | RegExp` | Filters based on the value of the input. |\n\nDatepicker\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard\n\nProvide your own internationalization string. Will be removed in v17.0.0 or later.",
  "title": "Datepicker | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/datepicker/api"
}