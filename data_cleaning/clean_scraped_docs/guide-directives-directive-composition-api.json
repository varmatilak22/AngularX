{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backDirectives\n  - [Overview](https://angular.dev/guide/directives)\n  - [Attribute directives](https://angular.dev/guide/directives/attribute-directives)\n  - [Structural directives](https://angular.dev/guide/directives/structural-directives)\n  - [Directive composition API](https://angular.dev/guide/directives/directive-composition-api)\n  - [Optimizing images with NgOptimizedImage](https://angular.dev/guide/image-optimization)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nAngular directives offer a great way to encapsulate reusable behaviors\u2014 directives can apply\nattributes, CSS classes, and event listeners to an element.\n\nThe _directive composition API_ lets you apply directives to a component's host element from\n_within_ the component TypeScript class.\n\n## [Adding directives to a component](https://angular.dev/guide/directives/directive-composition-api\\#adding-directives-to-a-component)\n\nYou apply directives to a component by adding a `hostDirectives` property to a component's\ndecorator. We call such directives _host directives_.\n\nIn this example, we apply the directive `MenuBehavior` to the host element of `AdminMenu`. This\nworks similarly to applying the `MenuBehavior` to the `<admin-menu>` element in a template.\n\n```\n      @Component({  selector: 'admin-menu',  template: 'admin-menu.html',  hostDirectives: [MenuBehavior],})export class AdminMenu { }\n\n```\n\ncheck\n\nWhen the framework renders a component, Angular also creates an instance of each host directive. The\ndirectives' host bindings apply to the component's host element. By default, host directive inputs\nand outputs are not exposed as part of the component's public API. See\n[Including inputs and outputs](https://angular.dev/guide/directives/directive-composition-api#including-inputs-and-outputs) below for more information.\n\n**Angular applies host directives statically at compile time.** You cannot dynamically add\ndirectives at runtime.\n\n**Directives used in `hostDirectives` may not specify `standalone: false`.**\n\n**Angular ignores the `selector` of directives applied in the `hostDirectives` property.**\n\n## [Including inputs and outputs](https://angular.dev/guide/directives/directive-composition-api\\#including-inputs-and-outputs)\n\nWhen you apply `hostDirectives` to your component, the inputs and outputs from the host directives\nare not included in your component's API by default. You can explicitly include inputs and outputs\nin your component's API by expanding the entry in `hostDirectives`:\n\n```\n      @Component({  selector: 'admin-menu',  template: 'admin-menu.html',  hostDirectives: [{    directive: MenuBehavior,    inputs: ['menuId'],    outputs: ['menuClosed'],  }],})export class AdminMenu { }\n\n```\n\ncheck\n\nBy explicitly specifying the inputs and outputs, consumers of the component with `hostDirective` can\nbind them in a template:\n\n```\n      <admin-menu menuId=\"top-menu\" (menuClosed)=\"logMenuClosed()\">\n\n```\n\ncheck\n\nFurthermore, you can alias inputs and outputs from `hostDirective` to customize the API of your\ncomponent:\n\n```\n      @Component({  selector: 'admin-menu',  template: 'admin-menu.html',  hostDirectives: [{    directive: MenuBehavior,    inputs: ['menuId: id'],    outputs: ['menuClosed: closed'],  }],})export class AdminMenu { }\n\n```\n\ncheck\n\n```\n      <admin-menu id=\"top-menu\" (closed)=\"logMenuClosed()\">\n\n```\n\ncheck\n\n## [Adding directives to another directive](https://angular.dev/guide/directives/directive-composition-api\\#adding-directives-to-another-directive)\n\nYou can also add `hostDirectives` to other directives, in addition to components. This enables the\ntransitive aggregation of multiple behaviors.\n\nIn the following example, we define two directives, `Menu` and `Tooltip`. We then compose the behavior\nof these two directives in `MenuWithTooltip`. Finally, we apply `MenuWithTooltip`\nto `SpecializedMenuWithTooltip`.\n\nWhen `SpecializedMenuWithTooltip` is used in a template, it creates instances of all of `Menu`\n, `Tooltip`, and `MenuWithTooltip`. Each of these directives' host bindings apply to the host\nelement of `SpecializedMenuWithTooltip`.\n\n```\n      @Directive({...})export class Menu { }@Directive({...})export class Tooltip { }// MenuWithTooltip can compose behaviors from multiple other directives@Directive({  hostDirectives: [Tooltip, Menu],})export class MenuWithTooltip { }// CustomWidget can apply the already-composed behaviors from MenuWithTooltip@Directive({  hostDirectives: [MenuWithTooltip],})export class SpecializedMenuWithTooltip { }\n\n```\n\ncheck\n\n## [Host directive semantics](https://angular.dev/guide/directives/directive-composition-api\\#host-directive-semantics)\n\n### [Directive execution order](https://angular.dev/guide/directives/directive-composition-api\\#directive-execution-order)\n\nHost directives go through the same lifecycle as components and directives used directly in a\ntemplate. However, host directives always execute their constructor, lifecycle hooks, and bindings _before_ the component or directive on which they are applied.\n\nThe following example shows minimal use of a host directive:\n\n```\n      @Component({  selector: 'admin-menu',  template: 'admin-menu.html',  hostDirectives: [MenuBehavior],})export class AdminMenu { }\n\n```\n\ncheck\n\nThe order of execution here is:\n\n1. `MenuBehavior` instantiated\n2. `AdminMenu` instantiated\n3. `MenuBehavior` receives inputs ( `ngOnInit`)\n4. `AdminMenu` receives inputs ( `ngOnInit`)\n5. `MenuBehavior` applies host bindings\n6. `AdminMenu` applies host bindings\n\nThis order of operations means that components with `hostDirectives` can override any host bindings\nspecified by a host directive.\n\nThis order of operations extends to nested chains of host directives, as shown in the following\nexample.\n\n```\n      @Directive({...})export class Tooltip { }@Directive({  hostDirectives: [Tooltip],})export class CustomTooltip { }@Directive({  hostDirectives: [CustomTooltip],})export class EvenMoreCustomTooltip { }\n\n```\n\ncheck\n\nIn the example above, the order of execution is:\n\n1. `Tooltip` instantiated\n2. `CustomTooltip` instantiated\n3. `EvenMoreCustomTooltip` instantiated\n4. `Tooltip` receives inputs ( `ngOnInit`)\n5. `CustomTooltip` receives inputs ( `ngOnInit`)\n6. `EvenMoreCustomTooltip` receives inputs ( `ngOnInit`)\n7. `Tooltip` applies host bindings\n8. `CustomTooltip` applies host bindings\n9. `EvenMoreCustomTooltip` applies host bindings\n\n### [Dependency injection](https://angular.dev/guide/directives/directive-composition-api\\#dependency-injection)\n\nA component or directive that specifies `hostDirectives` can inject the instances of those host\ndirectives and vice versa.\n\nWhen applying host directives to a component, both the component and host directives can define\nproviders.\n\nIf a component or directive with `hostDirectives` and those host directives both provide the same\ninjection token, the providers defined by class with `hostDirectives` take precedence over providers\ndefined by the host directives.",
  "title": "Directive composition API \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "directives",
    "angular",
    "directive",
    "https",
    "host",
    "dev",
    "component",
    "hostdirectives",
    "menu",
    "inputs"
  ],
  "sourceURL": "https://angular.dev/guide/directives/directive-composition-api"
}