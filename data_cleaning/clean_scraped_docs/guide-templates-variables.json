{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backTemplates\n  - [Overview](https://angular.dev/guide/templates)\n  - [Binding dynamic text, properties and attributes](https://angular.dev/guide/templates/binding)\n  - [Adding event listeners](https://angular.dev/guide/templates/event-listeners)\n  - [Two-way binding](https://angular.dev/guide/templates/two-way-binding)\n  - [Control flow](https://angular.dev/guide/templates/control-flow)\n  - [Pipes](https://angular.dev/guide/templates/pipes)\n  - [Slotting child content with ng-content](https://angular.dev/guide/templates/ng-content)\n  - [Create template fragments with ng-template](https://angular.dev/guide/templates/ng-template)\n  - [Grouping elements with ng-container](https://angular.dev/guide/templates/ng-container)\n  - [Variables in templates](https://angular.dev/guide/templates/variables)\n  - [Deferred loading with @defer](https://angular.dev/guide/templates/defer)\n  - [Expression syntax](https://angular.dev/guide/templates/expression-syntax)\n  - [Whitespace in templates](https://angular.dev/guide/templates/whitespace)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nAngular has two types of variable declarations in templates: local template variables and template reference variables.\n\n## [Local template variables with `@let`](https://angular.dev/guide/templates/variables\\#local-template-variables-with-let)\n\nAngular's `@let` syntax allows you to define a local variable and re-use it across a template, similar to the [JavaScript `let` syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let).\n\n### [Using `@let`](https://angular.dev/guide/templates/variables\\#using-let)\n\nUse `@let` to declare a variable whose value is based on the result of a template expression. Angular automatically keeps the variable's value up-to-date with the given expression, similar to [bindings](https://angular.dev/guide/templates/templates/bindings).\n\n```\n      @let name = user.name;@let greeting = 'Hello, ' + name;@let data = data$ | async;@let pi = 3.1459;@let coordinates = {x: 50, y: 100};@let longExpression = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit ' +                      'sed do eiusmod tempor incididunt ut labore et dolore magna ' +                      'Ut enim ad minim veniam...';\n\n```\n\ncheck\n\nEach `@let` block can declare exactly one variable. You cannot declare multiple variables in the same block with a comma.\n\n### [Referencing the value of `@let`](https://angular.dev/guide/templates/variables\\#referencing-the-value-of-let)\n\nOnce you've declared a variable with `@let`, you can reuse it in the same template:\n\n```\n      @let user = user$ | async;@if (user) {  <h1>Hello, {{user.name}}</h1>  <user-avatar [photo]=\"user.photo\"/>  <ul>    @for (snack of user.favoriteSnacks; track snack.id) {      <li>{{snack.name}}</li>    }  </ul>  <button (click)=\"update(user)\">Update profile</button>}\n\n```\n\ncheck\n\n### [Assignability](https://angular.dev/guide/templates/variables\\#assignability)\n\nA key difference between `@let` and JavaScript's `let` is that `@let` cannot be reassigned after declaration. However, Angular automatically keeps the variable's value up-to-date with the given expression.\n\n```\n      @let value = 1;<!-- Invalid - This does not work! --><button (click)=\"value = value + 1\">Increment the value</button>\n\n```\n\ncheck\n\n### [Variable scope](https://angular.dev/guide/templates/variables\\#variable-scope)\n\n`@let` declarations are scoped to the current view and its descendants. Angular creates a new view at component boundaries and wherever a template might contain dynamic content, such as control flow blocks, `@defer` blocks, or structural directives.\n\nSince `@let` declarations are not hoisted, they **cannot** be accessed by parent views or siblings:\n\n```\n      @let topLevel = value;<div>  @let insideDiv = value;</div>{{topLevel}} <!-- Valid -->{{insideDiv}} <!-- Valid -->@if (condition) {  {{topLevel + insideDiv}} <!-- Valid -->  @let nested = value;  @if (condition) {    {{topLevel + insideDiv + nested}} <!-- Valid -->  }}<div *ngIf=\"condition\">  {{topLevel + insideDiv}} <!-- Valid -->  @let nestedNgIf = value;  <div *ngIf=\"condition\">     {{topLevel + insideDiv + nestedNgIf}} <!-- Valid -->  </div></div>{{nested}} <!-- Error, not hoisted from @if -->{{nestedNgIf}} <!-- Error, not hoisted from *ngIf -->\n\n```\n\ncheck\n\n### [Full syntax](https://angular.dev/guide/templates/variables\\#full-syntax)\n\nThe `@let` syntax is formally defined as:\n\n- The `@let` keyword.\n- Followed by one or more whitespaces, not including new lines.\n- Followed by a valid JavaScript name and zero or more whitespaces.\n- Followed by the = symbol and zero or more whitespaces.\n- Followed by an Angular expression which can be multi-line.\n- Terminated by the `;` symbol.\n\n## [Template reference variables](https://angular.dev/guide/templates/variables\\#template-reference-variables)\n\nTemplate reference variables give you a way to declare a variable that references a value from an element in your template.\n\nA template reference variable can refer to the following:\n\n- a DOM element within a template (including [custom elements](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements))\n- an Angular component or directive\n- a [TemplateRef](https://angular.dev/api/core/TemplateRef) from an [ng-template](https://angular.dev/api/core/ng-template)\n\nYou can use template reference variables to read information from one part of the template in another part of the same template.\n\n### [Declaring a template reference variable](https://angular.dev/guide/templates/variables\\#declaring-a-template-reference-variable)\n\nYou can declare a variable on an element in a template by adding an attribute that starts with the hash character ( `#`) followed by the variable name.\n\n```\n      <!-- Create a template reference variable named \"taskInput\", referring to the HTMLInputElement. --><input #taskInput placeholder=\"Enter task name\">\n\n```\n\ncheck\n\n### [Assigning values to template reference variables](https://angular.dev/guide/templates/variables\\#assigning-values-to-template-reference-variables)\n\nAngular assigns a value to template variables based on the element on which the variable is declared.\n\nIf you declare the variable on a Angular component, the variable refers to the component instance.\n\n```\n      <!-- The `startDate` variable is assigned the instance of `MyDatepicker`. --><my-datepicker #startDate />\n\n```\n\ncheck\n\nIf you declare the variable on an `<ng-template>` element, the variable refers to a TemplateRef instance which represents the template. For more information, see [How Angular uses the asterisk, \\*, syntax](https://angular.dev/guide/directives/structural-directives#asterisk) in [Structural directives](https://angular.dev/guide/directives/structural-directives).\n\n```\n      <!-- The `myFragment` variable is assigned the `TemplateRef` instance corresponding to this template fragment. --><ng-template #myFragment>  <p>This is a template fragment</p></ng-template>\n\n```\n\ncheck\n\nIf you declare the variable on any other displayed element, the variable refers to the `HTMLElement` instance.\n\n```\n      <!-- The \"taskInput\" variable refers to the HTMLInputElement instance. --><input #taskInput placeholder=\"Enter task name\">\n\n```\n\ncheck\n\n#### [Assigning a reference to an Angular directive](https://angular.dev/guide/templates/variables\\#assigning-a-reference-to-an-angular-directive)\n\nAngular directives may have an `exportAs` property that defines a name by which the directive can be referenced in a template:\n\n```\n      @Directive({  selector: '[dropZone]',  exportAs: 'dropZone',})export class DropZone { /* ... */ }\n\n```\n\ncheck\n\nWhen you declare a template variable on an element, you can assign that variable a directive instance by specifying this `exportAs` name:\n\n```\n      <!-- The `firstZone` variable refers to the `DropZone` directive instance. --><section dropZone #firstZone=\"dropZone\"> ... </section>\n\n```\n\ncheck\n\nYou cannot refer to a directive that does not specify an `exportAs` name.\n\n### [Using template reference variables with queries](https://angular.dev/guide/templates/variables\\#using-template-reference-variables-with-queries)\n\nIn addition to using template variables to read values from another part of the same template, you can also use this style of variable declaration to \"mark\" an element for [component and directive queries](https://angular.dev/guide/components/queries).\n\nWhen you want to query for a specific element in a template, you can declare a template variable on that element and then query for the element based on the variable name.\n\n```\n       <input #description value=\"Original description\">\n\n```\n\ncheck\n\n```\n      @Component({  /* ... */,  template: `<input #description value=\"Original description\">`,})export class AppComponent {  // Query for the input element based on the template variable name.  @ViewChild('description') input: ElementRef | undefined;}\n\n```\n\ncheck\n\nSee [Referencing children with queries](https://angular.dev/guide/components/queries) for more information on queries.",
  "title": "Variables in templates \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "template",
    "dev",
    "variable",
    "guide",
    "let",
    "templates",
    "variables",
    "value"
  ],
  "sourceURL": "https://angular.dev/guide/templates/variables"
}