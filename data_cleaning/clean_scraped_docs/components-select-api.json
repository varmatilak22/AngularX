{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for select\n\n## API reference for Angular Material select\n\n`\n          import {MatSelectModule} from '@angular/material/select';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/select/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/select/api\\#MatSelect) `MatSelect`\n\nSelector:mat-select\n\nExported as:matSelect\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-label')<br> <br>`ariaLabel: string` | Aria label of the select. |\n| @Input('aria-labelledby')<br> <br>`ariaLabelledby: string` | Input that can be used to specify the `aria-labelledby` attribute. |\n| @Input({ transform: booleanAttribute })<br> <br>`canSelectNullableOptions: boolean` | By default selecting an option with a `null` or `undefined` value will reset the select's<br>value. Enable this option if the reset behavior doesn't match your requirements and instead<br>the nullable options should become selected. The value of this input can be controlled app-wide<br>using the `MAT_SELECT_CONFIG` injection token. |\n| @Input()<br>`compareWith: (o1: any, o2: any) => boolean` | Function to compare the option values with the selected values. The first argument<br>is a value from an option. The second is a value from the selection. A boolean<br>should be returned. |\n| @Input({ transform: booleanAttribute })<br> <br>`disableOptionCentering: this._defaultOptions?.disableOptionCentering ?? false` | Whether to center the active option over the trigger. |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether ripples in the select are disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the select is disabled. |\n| @Input()<br>`errorStateMatcher: ErrorStateMatcher` | Object used to control when error messages are shown. |\n| @Input({ transform: booleanAttribute })<br> <br>`hideSingleSelectionIndicator: boolean` | Whether checkmark indicator for single-selection options is hidden. |\n| @Input()<br>`id: string` | Unique id of the element. |\n| @Input({ transform: booleanAttribute })<br> <br>`multiple: boolean` | Whether the user should be allowed to select multiple options. |\n| @Input()<br>`panelClass: string | string[] | Set<string> | {<br>    [key: string]: any;<br>}` | Classes to be passed to the select panel. Supports the same syntax as `ngClass`. |\n| @Input()<br>`panelWidth: string | number | null` | Width of the panel. If set to `auto`, the panel will match the trigger width.<br>If set to null or an empty string, the panel will grow to match the longest option's text. |\n| @Input()<br>`placeholder: string` | Placeholder to be shown if no value has been selected. |\n| @Input({ transform: booleanAttribute })<br> <br>`required: boolean` | Whether the component is required. |\n| @Input()<br>`sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number` | Function used to sort the values in a select in multiple mode.<br>Follows the same logic as `Array.prototype.sort`. |\n| @Input({ transform: numberAttribute })<br> <br>`typeaheadDebounceInterval: number` | Time to wait in milliseconds after the last keystroke before moving focus to an item. |\n| @Input()<br>`value: any` | Value of the select control. |\n| @Output()<br>`openedChange: EventEmitter<boolean>` | Event emitted when the select panel has been toggled. |\n| @Output()<br>`selectionChange: EventEmitter<MatSelectChange>` | Event emitted when the selected value has been changed by the user. |\n| `controlType: 'mat-select'` | A name for this control that can be used by `mat-form-field`. |\n| `customTrigger: MatSelectTrigger` | User-supplied override of the trigger element. |\n| `empty: boolean` | Whether the select has a value. |\n| `errorState: boolean` | Whether the select is in an error state. |\n| `focused: boolean` | Whether the select is focused. |\n| `ngControl: inject(NgControl, { self: true, optional: true })!` |  |\n| `optionGroups: QueryList<MatOptgroup>` | All of the defined groups of options. |\n| `optionSelectionChanges: Observable<MatOptionSelectionChange>` | Combined stream of all of the child options' change events. |\n| `options: QueryList<MatOption>` | All of the defined select options. |\n| `panel: ElementRef` | Panel containing the select options. |\n| `panelOpen: boolean` | Whether or not the overlay panel is open. |\n| `selected: MatOption | MatOption[]` | The currently selected option. |\n| `trigger: ElementRef` | Trigger that opens the select. |\n| `triggerValue: string` | The value displayed in the trigger. |\n\n##### Methods\n\n| close |\n| --- |\n| Closes the overlay panel and focuses the host element. |\n\n| focus |\n| --- |\n| Focuses the select element. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n\n| open |\n| --- |\n| Opens the overlay panel. |\n\n| toggle |\n| --- |\n| Toggles the overlay panel open or closed. |\n\n| updateErrorState |\n| --- |\n| Refreshes the error state of the select. |\n\n#### [link](https://material.angular.io/components/select/api\\#MatSelectTrigger) `MatSelectTrigger`\n\nAllows the user to customize the trigger that is displayed when the select has a value.\n\nSelector:mat-select-trigger\n\n### [link](https://material.angular.io/components/select/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/select/api\\#MatSelectChange) `MatSelectChange`\n\nChange event object that is emitted when the select value has changed.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `source: MatSelect` | Reference to the select that emitted the change event. |\n| `value: T` | Current value of the select that emitted the event. |\n\n### [link](https://material.angular.io/components/select/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/select/api\\#MatSelectConfig) `MatSelectConfig`\n\nObject that can be used to configure the default options for the select module.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `canSelectNullableOptions: boolean` | Whether nullable options can be selected by default.<br>See `MatSelect.canSelectNullableOptions` for more information. |\n| `disableOptionCentering: boolean` | Whether option centering should be disabled. |\n| `hideSingleSelectionIndicator: boolean` | Whether icon indicators should be hidden for single-selection. |\n| `overlayPanelClass: string | string[]` | Class or list of classes to be applied to the menu's overlay panel. |\n| `panelWidth: string | number | null` | Width of the panel. If set to `auto`, the panel will match the trigger width.<br>If set to null or an empty string, the panel will grow to match the longest option's text. |\n| `typeaheadDebounceInterval: number` | Time to wait in milliseconds after the last keystroke before moving focus to an item. |\n\n### [link](https://material.angular.io/components/select/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/select/api\\#MAT_SELECT_SCROLL_STRATEGY) `MAT_SELECT_SCROLL_STRATEGY`\n\nInjection token that determines the scroll handling while a select is open.\n\n```docs-markdown-code\nconst MAT_SELECT_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\n```\n\n#### [link](https://material.angular.io/components/select/api\\#MAT_SELECT_CONFIG) `MAT_SELECT_CONFIG`\n\nInjection token that can be used to provide the default options the select module.\n\n```docs-markdown-code\nconst MAT_SELECT_CONFIG: InjectionToken<MatSelectConfig>;\n\n```\n\n#### [link](https://material.angular.io/components/select/api\\#MAT_SELECT_TRIGGER) `MAT_SELECT_TRIGGER`\n\nInjection token that can be used to reference instances of `MatSelectTrigger`. It serves as\nalternative token to the actual `MatSelectTrigger` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst MAT_SELECT_TRIGGER: InjectionToken<MatSelectTrigger>;\n\n```\n\n## API reference for Angular Material select-testing\n\n`\n          import {MatSelectHarness} from '@angular/material/select/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/select/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/select/api\\#MatSelectHarness) `MatSelectHarness`extends [MatFormFieldControlHarness](https://material.angular.io/components/select/api)\n\nHarness for interacting with a mat-select in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-select'` |  |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the select and returns a void promise that indicates when the action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>clickOptions |\n| --- |\n| Clicks the options that match the passed-in filter. If the select is in multi-selection<br>mode all options will be clicked, otherwise the harness will pick the first matching option. |\n| Parameters |\n| --- |\n| filter?<br> `OptionHarnessFilters` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>close |\n| --- |\n| Closes the select's panel. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the select and returns a void promise that indicates when the action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getOptionGroups |\n| --- |\n| Gets the groups of options inside the panel. |\n| Parameters |\n| --- |\n| filter?<br> `Omit<OptgroupHarnessFilters, \"ancestor\">` |  |\n| Returns |\n| --- |\n| `Promise<MatOptgroupHarness[]>` |  |\n\n| async<br> <br>getOptions |\n| --- |\n| Gets the options inside the select panel. |\n| Parameters |\n| --- |\n| filter?<br> `Omit<OptionHarnessFilters, \"ancestor\">` |  |\n| Returns |\n| --- |\n| `Promise<MatOptionHarness[]>` |  |\n\n| async<br> <br>getValueText |\n| --- |\n| Gets a promise for the select's value text. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Gets a boolean promise indicating if the select is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isEmpty |\n| --- |\n| Gets a boolean promise indicating if the select is empty (no value is selected). |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the select is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isMultiple |\n| --- |\n| Gets a boolean promise indicating if the select is in multi-selection mode. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isOpen |\n| --- |\n| Gets whether the select is open. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRequired |\n| --- |\n| Gets a boolean promise indicating if the select is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isValid |\n| --- |\n| Gets a boolean promise indicating if the select is valid. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>open |\n| --- |\n| Opens the select's panel. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a select with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `SelectHarnessFilters = {}` | Options for filtering which select instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/select/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/select/api\\#SelectHarnessFilters) `SelectHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatSelectHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disabled: boolean` | Only find instances which match the given disabled state. |\n\nSelect\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
  "title": "Select | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/select/api"
}