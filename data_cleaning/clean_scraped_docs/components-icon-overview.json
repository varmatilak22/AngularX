{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for icon\n\n`mat-icon` makes it easier to use _vector-based_ icons in your app. This directive supports both\nicon fonts and SVG icons, but not bitmap-based formats (png, jpg, etc.).\n\nBasic icons\n\nlinkcodeopen\\_in\\_new\n\n### [link](https://material.angular.io/components/icon/overview\\#registering-icons)  Registering icons\n\n`MatIconRegistry` is an injectable service that allows you to associate icon names with SVG URLs,\nHTML strings and to define aliases for CSS font classes. Its methods are discussed below and listed\nin the API summary.\n\n### [link](https://material.angular.io/components/icon/overview\\#font-icons-with-ligatures)  Font icons with ligatures\n\nSome fonts are designed to show icons by using\n[ligatures](https://en.wikipedia.org/wiki/Typographic_ligature), for example by rendering the text\n\"home\" as a home image. To use a ligature icon, put its text in the content of the `mat-icon`\ncomponent.\n\nBy default, `<mat-icon>` expects the\n[Material icons font](https://google.github.io/material-design-icons/#icon-font-for-the-web).\n(You will still need to include the HTML to load the font and its CSS, as described in the link).\n\nYou can specify a different font, such as Material's latest icons,\n[Material Symbols](https://fonts.google.com/icons), by setting the `fontSet` input to either the\nCSS class to apply to use the desired font, or to an alias previously registered with\n`MatIconRegistry.registerFontClassAlias`. Alternatively you can set the default for all\nyour application's icons using `MatIconRegistry.setDefaultFontSetClass`.\n\n### [link](https://material.angular.io/components/icon/overview\\#font-icons-with-css)  Font icons with CSS\n\nFonts can also display icons by defining a CSS class for each icon glyph, which typically uses a\n`:before` selector to cause the icon to appear.\n[Font Awesome](https://fontawesome.com/icons) uses this approach to display\nits icons. To use such a font, set the `fontSet` input to the font's CSS class (either the class\nitself or an alias registered with `MatIconRegistry.registerFontClassAlias`), and set the `fontIcon`\ninput to the class for the specific icon to show.\n\nFor both types of font icons, you can specify the default font class to use when `fontSet` is not\nexplicitly set by calling `MatIconRegistry.setDefaultFontSetClass`.\n\n### [link](https://material.angular.io/components/icon/overview\\#svg-icons)  SVG icons\n\n`<mat-icon>` displays SVG icons by directly inlining the SVG content into the DOM\nas a child of itself. This approach offers an advantage over an `<img>` tag or a CSS\n`background-image` because it allows styling the SVG with CSS. For example, the default color of the\nSVG content is the CSS\n[currentColor](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentColor_keyword)\nvalue. This makes SVG icons by default have the same color as surrounding text, and allows you to\nchange the color by setting the `color` style on the `mat-icon` element.\n\nIn order to guard against XSS vulnerabilities, any SVG URLs and HTML strings passed to the\n`MatIconRegistry` must be marked as trusted by using Angular's `DomSanitizer` service.\n\n`MatIconRegistry` fetches all remote SVG icons via Angular's `HttpClient` service. If you haven't\nincluded [`HttpClientModule` from the `@angular/common/http` package](https://angular.dev/guide/http)\nin your `NgModule` imports, you will get an error at runtime.\n\nNote that `HttpClient` fetches SVG icons registered with a URL via `XmlHttpRequest`, subject to the\n[Same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy). This\nmeans that icon URLs must have the same origin as the containing page or that the application's\nserver must be configured to allow cross-origin requests.\n\n#### [link](https://material.angular.io/components/icon/overview\\#named-icons)  Named icons\n\nTo associate a name with an icon URL, use the `addSvgIcon`, `addSvgIconInNamespace`,\n`addSvgIconLiteral` or `addSvgIconLiteralInNamespace` methods of `MatIconRegistry`. After\nregistering an icon, it can be displayed by setting the `svgIcon` input. For an icon in the\ndefault namespace, use the name directly. For a non-default namespace, use the format\n`[namespace]:[name]`.\n\n#### [link](https://material.angular.io/components/icon/overview\\#icon-sets)  Icon sets\n\nIcon sets allow grouping multiple icons into a single SVG file. This is done by creating a single\nroot `<svg>` tag that contains multiple nested `<svg>` tags in its `<defs>` section. Each of these\nnested tags is identified with an `id` attribute. This `id` is used as the name of the icon.\n\nIcon sets are registered using the `addSvgIconSet`, `addSvgIconSetInNamespace`,\n`addSvgIconSetLiteral` or `addSvgIconSetLiteralInNamespace` methods of `MatIconRegistry`.\nAfter an icon set is registered, each of its embedded icons can be accessed by their `id`\nattributes. To display an icon from an icon set, use the `svgIcon` input in the same way\nas for individually registered icons.\n\nMultiple icon sets can be registered in the same namespace. Requesting an icon whose id appears in\nmore than one icon set, the icon from the most recently registered set will be used.\n\n### [link](https://material.angular.io/components/icon/overview\\#accessibility)  Accessibility\n\nSimilar to an `<img>` element, an icon alone does not convey any useful information for a\nscreen-reader user. The user of `<mat-icon>` must provide additional information pertaining to how\nthe icon is used. Based on the use-cases described below, `mat-icon` is marked as\n`aria-hidden=\"true\"` by default, but this can be overridden by adding `aria-hidden=\"false\"` to the\nelement.\n\nIn thinking about accessibility, it is useful to place icon use into one of three categories:\n\n1. **Decorative**: the icon conveys no real semantic meaning and is purely cosmetic.\n2. **Interactive**: a user will click or otherwise interact with the icon to perform some action.\n3. **Indicator**: the icon is not interactive, but it conveys some information, such as a status.\nThis includes using the icon in place of text inside of a larger message.\n\n#### [link](https://material.angular.io/components/icon/overview\\#decorative-icons)  Decorative icons\n\nWhen the icon is purely cosmetic and conveys no real semantic meaning, the `<mat-icon>` element\nis marked with `aria-hidden=\"true\"`.\n\n#### [link](https://material.angular.io/components/icon/overview\\#interactive-icons)  Interactive icons\n\nIcons alone are not interactive elements for screen-reader users; when the user would interact with\nsome icon on the page, a more appropriate element should \"own\" the interaction:\n\n- The `<mat-icon>` element should be a child of a `<button>` or `<a>` element.\n- The parent `<button>` or `<a>` should either have a meaningful label provided either through\ndirect text content, `aria-label`, or `aria-labelledby`.\n\n#### [link](https://material.angular.io/components/icon/overview\\#indicator-icons)  Indicator icons\n\nWhen the presence of an icon communicates some information to the user whether as an indicator or\nby being inlined into a block of text, that information must also be made available to\nscreen-readers. The most straightforward way to do this is to\n\n1. Add a `<span>` as an adjacent sibling to the `<mat-icon>` element with text that conveys the same\ninformation as the icon.\n2. Add the `cdk-visually-hidden` class to the `<span>`. This will make the message invisible\non-screen but still available to screen-reader users.\n\n### [link](https://material.angular.io/components/icon/overview\\#bidirectionality)  Bidirectionality\n\nBy default icons in an RTL layout will look exactly the same as in LTR, however certain icons have\nto be [mirrored for RTL users](https://material.io/design/usability/bidirectionality.html). If\nyou want to mirror an icon only in an RTL layout, you can use the `mat-icon-rtl-mirror` CSS class.\n\n```html\n<mat-icon class=\"mat-icon-rtl-mirror\" svgIcon=\"thumb-up\"></mat-icon>\n\n```\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Basic icons example in StackBlitz\n\nCopy link to example\n\nView code",
  "title": "Icon | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/icon/overview"
}