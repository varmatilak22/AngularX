{
  "content": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\n## Overview for clipboard\n\nThe clipboard package provides helpers for working with the system clipboard.\n\n### [link](https://material.angular.io/cdk/clipboard/overview\\#click-an-element-to-copy)  Click an element to copy\n\nThe `cdkCopyToClipboard` directive can be used to easily add copy-on-click functionality to an\nexisting element. The directive selector doubles as an `@Input()` for the text to be copied.\n\n```html\n<img src=\"avatar.jpg\" alt=\"Hero avatar\" [cdkCopyToClipboard]=\"getShortBio()\">\n\n```\n\nClipboard overview\n\nlinkcodeopen\\_in\\_new\n\nText to be copiedCopy to clipboard\n\n### [link](https://material.angular.io/cdk/clipboard/overview\\#programmatically-copy-a-string)  Programmatically copy a string\n\nThe `Clipboard` service copies text to the user's clipboard. It has two methods: `copy` and\n`beginCopy`. For cases where you are copying a relatively small amount of text, you can call `copy`\ndirectly to place it on the clipboard.\n\n```typescript\nimport {Clipboard} from '@angular/cdk/clipboard';\n\nclass HeroProfile {\n  constructor(private clipboard: Clipboard) {}\n\n  copyHeroName() {\n    this.clipboard.copy('Alphonso');\n  }\n}\n\n```\n\nHowever, for longer text the browser needs time to fill an intermediate textarea element and copy\nthe content. Directly calling `copy` may fail in this case, so you can pre-load the text by calling\n`beginCopy`. This method returns a `PendingCopy` object that has a `copy` method to finish copying\nthe text that was buffered. Please note, if you call `beginCopy`, you must clean up the\n`PendingCopy` object by calling `destroy` on it after you are finished.\n\n```typescript\nimport {Clipboard} from '@angular/cdk/clipboard';\n\nclass HeroProfile {\n  lifetimeAchievements: string;\n\n  constructor(private clipboard: Clipboard) {}\n\n  copyAchievements() {\n    const pending = this.clipboard.beginCopy(this.lifetimeAchievements);\n    let remainingAttempts = 3;\n    const attempt = () => {\n      const result = pending.copy();\n      if (!result && --remainingAttempts) {\n        setTimeout(attempt);\n      } else {\n        // Remember to destroy when you're done!\n        pending.destroy();\n      }\n    };\n    attempt();\n  }\n}\n\n```\n\nIf you're using the `cdkCopyToClipboard` you can pass in the `cdkCopyToClipboardAttempts` input\nto automatically attempt to copy some text a certain number of times.\n\n```html\n<button [cdkCopyToClipboard]=\"longText\" [cdkCopyToClipboardAttempts]=\"5\">Copy text</button>\n\n```\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Clipboard overview example in StackBlitz\n\nCopy link to example\n\nView code",
  "title": "Clipboard | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/cdk/clipboard/overview"
}