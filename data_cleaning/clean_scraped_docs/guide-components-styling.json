{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backComponents\n  - [Anatomy of components](https://angular.dev/guide/components)\n  - [Selectors](https://angular.dev/guide/components/selectors)\n  - [Styling](https://angular.dev/guide/components/styling)\n  - [Accepting data with input properties](https://angular.dev/guide/components/inputs)\n  - [Custom events with outputs](https://angular.dev/guide/components/outputs)\n  - [Content projection with ng-content](https://angular.dev/guide/components/content-projection)\n  - [Host elements](https://angular.dev/guide/components/host-elements)\n  - [Lifecycle](https://angular.dev/guide/components/lifecycle)\n  - [Referencing component children with queries](https://angular.dev/guide/components/queries)\n  - [Using DOM APIs](https://angular.dev/guide/components/dom-apis)\n  - [Inheritance](https://angular.dev/guide/components/inheritance)\n  - [Programmatically rendering components](https://angular.dev/guide/components/programmatic-rendering)\n  - [Advanced configuration](https://angular.dev/guide/components/advanced-configuration)\n  - [Custom Elements](https://angular.dev/guide/elements)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n**TIP:** This guide assumes you've already read the [Essentials Guide](https://angular.dev/guide/components/essentials). Read that first if you're new to Angular.\n\nComponents can optionally include CSS styles that apply to that component's DOM:\n\n```\n      @Component({  selector: 'profile-photo',  template: `<img src=\"profile-photo.jpg\" alt=\"Your profile photo\">`,  styles: ` img { border-radius: 50%; } `,})export class ProfilePhoto { }\n\n```\n\ncheck\n\nYou can also choose to write your styles in separate files:\n\n```\n      @Component({  selector: 'profile-photo',  templateUrl: 'profile-photo.html',  styleUrl: 'profile-photo.css',})export class ProfilePhoto { }\n\n```\n\ncheck\n\nWhen Angular compiles your component, these styles are emitted with your component's JavaScript\noutput. This means that component styles participate in the JavaScript module system. When you\nrender an Angular component, the framework automatically includes its associated styles, even when\nlazy-loading a component.\n\nAngular works with any tool that outputs CSS,\nincluding [Sass](https://sass-lang.com/), [less](https://lesscss.org/),\nand [stylus](https://stylus-lang.com/).\n\n## [Style scoping](https://angular.dev/guide/components/styling\\#style-scoping)\n\nEvery component has a **view encapsulation** setting that determines how the framework scopes a\ncomponent's styles. There are three view encapsulation modes: `Emulated`, `ShadowDom`, and `None`.\nYou can specify the mode in the `@Component` decorator:\n\n```\n      @Component({  ...,  encapsulation: ViewEncapsulation.None,})export class ProfilePhoto { }\n\n```\n\ncheck\n\n### [ViewEncapsulation.Emulated](https://angular.dev/guide/components/styling\\#viewencapsulationemulated)\n\nBy default, Angular uses emulated encapsulation so that a component's styles only apply to elements\ndefined in that component's template. In this mode, the framework generates a unique HTML attribute\nfor each component instance, adds that attribute to elements in the component's template, and\ninserts that attribute into the CSS selectors defined in your component's styles.\n\nThis mode ensures that a component's styles do not leak out and affect other components. However,\nglobal styles defined outside of a component may still affect elements inside a component with\nemulated encapsulation.\n\nIn emulated mode, Angular supports\nthe [`:host`](https://developer.mozilla.org/docs/Web/CSS/:host)\nand [`:host-context()`](https://developer.mozilla.org/docs/Web/CSS/:host-context) pseudo\nclasses without\nusing [Shadow DOM](https://developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM).\nDuring compilation, the framework transforms these pseudo classes into attributes so it doesn't\ncomply with these native pseudo classes' rules at runtime (e.g. browser compatibility, specificity). Angular's\nemulated encapsulation mode does not support any other pseudo classes related to Shadow DOM, such\nas `::shadow` or `::part`.\n\n#### [`::ng-deep`](https://angular.dev/guide/components/styling\\#ng-deep)\n\nAngular's emulated encapsulation mode supports a custom pseudo class, `::ng-deep`. Applying this\npseudo class to a CSS rule disables encapsulation for that rule, effectively turning it into a\nglobal style. **The Angular team strongly discourages new use of `::ng-deep`**. These APIs remain\nexclusively for backwards compatibility.\n\n### [ViewEncapsulation.ShadowDom](https://angular.dev/guide/components/styling\\#viewencapsulationshadowdom)\n\nThis mode scopes styles within a component by\nusing [the web standard Shadow DOM API](https://developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM).\nWhen enabling this mode, Angular attaches a shadow root to the component's host element and renders\nthe component's template and styles into the corresponding shadow tree.\n\nThis mode strictly guarantees that _only_ that component's styles apply to elements in the\ncomponent's template. Global styles cannot affect elements in a shadow tree and styles inside the\nshadow tree cannot affect elements outside of that shadow tree.\n\nEnabling `ShadowDom` encapsulation, however, impacts more than style scoping. Rendering the\ncomponent in a shadow tree affects event propagation, interaction\nwith [the `<slot>` API](https://developer.mozilla.org/docs/Web/Web_Components/Using_templates_and_slots),\nand how browser developer tools show elements. Always understand the full implications of using\nShadow DOM in your application before enabling this option.\n\n### [ViewEncapsulation.None](https://angular.dev/guide/components/styling\\#viewencapsulationnone)\n\nThis mode disables all style encapsulation for the component. Any styles associated with the\ncomponent behave as global styles.\n\n**NOTE:** In `Emulated` and `ShadowDom` modes, Angular doesn't 100% guarantee that your component's styles will always override styles coming from outside it.\nIt is assumed that these styles have the same specificity as your component's styles in case of collision.\n\n## [Defining styles in templates](https://angular.dev/guide/components/styling\\#defining-styles-in-templates)\n\nYou can use the `<style>` element in a component's template to define additional styles. The\ncomponent's view encapsulation mode applies to styles defined this way.\n\nAngular does not support bindings inside of style elements.\n\n## [Referencing external style files](https://angular.dev/guide/components/styling\\#referencing-external-style-files)\n\nComponent templates can\nuse [the `<link>` element](https://developer.mozilla.org/docs/Web/HTML/Element/link) to\nreference CSS files. Additionally, your CSS may\nuse [the `@import` at-rule](https://developer.mozilla.org/docs/Web/CSS/@import) to reference\nCSS files. Angular treats these references as _external_ styles. External styles are not affected by\nemulated view encapsulation.",
  "title": "Styling \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "component",
    "dev",
    "components",
    "styles",
    "guide",
    "elements",
    "encapsulation",
    "css"
  ],
  "sourceURL": "https://angular.dev/guide/components/styling"
}