{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for icon\n\n## API reference for Angular Material icon\n\n`\n          import {MatIconModule} from '@angular/material/icon';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/icon/api\\#services)  Services\n\n#### [link](https://material.angular.io/components/icon/api\\#MatIconRegistry) `MatIconRegistry`\n\nService to register and display icons used by the `<mat-icon>` component.\n\n- Registers icon URLs by namespace and name.\n- Registers icon set URLs by namespace.\n- Registers aliases for CSS classes, for use with icon fonts.\n- Loads icons from URLs and extracts individual icons from icon sets.\n\n##### Methods\n\n| addSvgIcon |\n| --- |\n| Registers an icon by URL in the default namespace. |\n| Parameters |\n| --- |\n| iconName<br> `string` | Name under which the icon should be registered. |\n| url<br> `SafeResourceUrl` |  |\n| options?<br> `IconOptions` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconInNamespace |\n| --- |\n| Registers an icon by URL in the specified namespace. |\n| Parameters |\n| --- |\n| namespace<br> `string` | Namespace in which the icon should be registered. |\n| iconName<br> `string` | Name under which the icon should be registered. |\n| url<br> `SafeResourceUrl` |  |\n| options?<br> `IconOptions` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconLiteral |\n| --- |\n| Registers an icon using an HTML string in the default namespace. |\n| Parameters |\n| --- |\n| iconName<br> `string` | Name under which the icon should be registered. |\n| literal<br> `SafeHtml` | SVG source of the icon. |\n| options?<br> `IconOptions` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconLiteralInNamespace |\n| --- |\n| Registers an icon using an HTML string in the specified namespace. |\n| Parameters |\n| --- |\n| namespace<br> `string` | Namespace in which the icon should be registered. |\n| iconName<br> `string` | Name under which the icon should be registered. |\n| literal<br> `SafeHtml` | SVG source of the icon. |\n| options?<br> `IconOptions` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconResolver |\n| --- |\n| Registers an icon resolver function with the registry. The function will be invoked with the<br>name and namespace of an icon when the registry tries to resolve the URL from which to fetch<br>the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,<br>an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers<br>will be invoked in the order in which they have been registered. |\n| Parameters |\n| --- |\n| resolver<br> `IconResolver` | Resolver function to be registered. |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconSet |\n| --- |\n| Registers an icon set by URL in the default namespace. |\n| Parameters |\n| --- |\n| url<br> `SafeResourceUrl` |  |\n| options?<br> `IconOptions` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconSetInNamespace |\n| --- |\n| Registers an icon set by URL in the specified namespace. |\n| Parameters |\n| --- |\n| namespace<br> `string` | Namespace in which to register the icon set. |\n| url<br> `SafeResourceUrl` |  |\n| options?<br> `IconOptions` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconSetLiteral |\n| --- |\n| Registers an icon set using an HTML string in the default namespace. |\n| Parameters |\n| --- |\n| literal<br> `SafeHtml` | SVG source of the icon set. |\n| options?<br> `IconOptions` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconSetLiteralInNamespace |\n| --- |\n| Registers an icon set using an HTML string in the specified namespace. |\n| Parameters |\n| --- |\n| namespace<br> `string` | Namespace in which to register the icon set. |\n| literal<br> `SafeHtml` | SVG source of the icon set. |\n| options?<br> `IconOptions` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| classNameForFontAlias |\n| --- |\n| Returns the CSS class name associated with the alias by a previous call to<br>registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified. |\n| Parameters |\n| --- |\n| alias<br> `string` |  |\n| Returns |\n| --- |\n| `string` |  |\n\n| getDefaultFontSetClass |\n| --- |\n| Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not<br>have a fontSet input value, and is not loading an icon by name or URL. |\n| Returns |\n| --- |\n| `string[]` |  |\n\n| getNamedSvgIcon |\n| --- |\n| Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name<br>and namespace. The icon must have been previously registered with addIcon or addIconSet;<br>if not, the Observable will throw an error. |\n| Parameters |\n| --- |\n| name<br> `string` | Name of the icon to be retrieved. |\n| namespace<br> `string = ''` | Namespace in which to look for the icon. |\n| Returns |\n| --- |\n| `Observable<SVGElement>` |  |\n\n| getSvgIconFromUrl |\n| --- |\n| Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.<br>The response from the URL may be cached so this will not always cause an HTTP request, but<br>the produced element will always be a new copy of the originally fetched icon. (That is,<br>it will not contain any modifications made to elements previously returned). |\n| Parameters |\n| --- |\n| safeUrl<br> `SafeResourceUrl` | URL from which to fetch the SVG icon. |\n| Returns |\n| --- |\n| `Observable<SVGElement>` |  |\n\n| registerFontClassAlias |\n| --- |\n| Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon<br>component with the alias as the fontSet input will cause the class name to be applied<br>to the `<mat-icon>` element.<br>If the registered font is a ligature font, then don't forget to also include the special<br>class `mat-ligature-font` to allow the usage via attribute. So register like this:<br>```ts<br>iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');<br>```<br>And use like this:<br>```html<br><mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon><br>``` |\n| Parameters |\n| --- |\n| alias<br> `string` | Alias for the font. |\n| classNames<br> `string = alias` | Class names override to be used instead of the alias. |\n| Returns |\n| --- |\n| `this` |  |\n\n| setDefaultFontSetClass |\n| --- |\n| Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not<br>have a fontSet input value, and is not loading an icon by name or URL. |\n| Parameters |\n| --- |\n| ...classNames<br> `string[]` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n### [link](https://material.angular.io/components/icon/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/icon/api\\#MatIcon) `MatIcon`\n\nComponent to display an icon. It can be used in the following ways:\n\n- Specify the svgIcon input to load an SVG icon from a URL previously registered with the\naddSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\nMatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n\"\\[namespace\\]:\\[name\\]\", if not the value will be the name of an icon in the default namespace.\nExamples:\n`<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n    <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n\n- Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\ncontent of the `<mat-icon>` component. If you register a custom font class, don't forget to also\ninclude the special class `mat-ligature-font`. It is recommended to use the attribute alternative\nto prevent the ligature text to be selectable and to appear in search engine results.\nBy default, the Material icons font is used as described at\n[http://google.github.io/material-design-icons/#icon-font-for-the-web](http://google.github.io/material-design-icons/#icon-font-for-the-web). You can specify an\nalternate font by setting the fontSet input to either the CSS class to apply to use the\ndesired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\nExamples:\n`<mat-icon fontIcon=\"home\"></mat-icon>\n    <mat-icon>home</mat-icon>\n    <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n    <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n\n- Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\nfont, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\nCSS class which causes the glyph to be displayed via a :before selector, as in\n[https://fontawesome-v4.github.io/examples/](https://fontawesome-v4.github.io/examples/)\nExample:\n`<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n\n\nSelector:mat-icon\n\nExported as:matIcon\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`color: string` | Theme color of the icon. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/icon/styling](https://material.angular.io/components/icon/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input()<br>`fontIcon: string` | Name of an icon within a font set. |\n| @Input()<br>`fontSet: string` | Font set that the icon is a part of. |\n| @Input({ transform: booleanAttribute })<br> <br>`inline: boolean` | Whether the icon should be inlined, automatically sizing the icon to match the font size of<br>the element the icon is contained in. |\n| @Input()<br>`svgIcon: string` | Name of the icon in the SVG icon set. |\n\n### [link](https://material.angular.io/components/icon/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/icon/api\\#MatIconDefaultOptions) `MatIconDefaultOptions`\n\nDefault options for `mat-icon`.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `color: ThemePalette` | Theme color of the icon. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/icon/styling](https://material.angular.io/components/icon/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| `fontSet: string` | Font set that the icon is a part of. |\n\n#### [link](https://material.angular.io/components/icon/api\\#IconOptions) `IconOptions`\n\nOptions that can be used to configure how an icon or the icons in an icon set are presented.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `viewBox: string` | View box to set on the icon. |\n| `withCredentials: boolean` | Whether or not to fetch the icon or icon set using HTTP credentials. |\n\n#### [link](https://material.angular.io/components/icon/api\\#SafeResourceUrlWithIconOptions) `SafeResourceUrlWithIconOptions`\n\nObject that specifies a URL from which to fetch an icon and the options to use for it.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `options: IconOptions` |  |\n| `url: SafeResourceUrl` |  |\n\n### [link](https://material.angular.io/components/icon/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/icon/api\\#IconResolver) `IconResolver`\n\nFunction that will be invoked by the icon registry when trying to resolve the\nURL from which to fetch an icon. The returned URL will be used to make a request for the icon.\n\n```docs-markdown-code\ntype IconResolver = (name: string, namespace: string) => SafeResourceUrl | SafeResourceUrlWithIconOptions | null;\n\n```\n\n### [link](https://material.angular.io/components/icon/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/icon/api\\#MAT_ICON_DEFAULT_OPTIONS) `MAT_ICON_DEFAULT_OPTIONS`\n\nInjection token to be used to override the default options for `mat-icon`.\n\n```docs-markdown-code\nconst MAT_ICON_DEFAULT_OPTIONS: InjectionToken<MatIconDefaultOptions>;\n\n```\n\n## API reference for Angular Material icon-testing\n\n`\n          import {MatIconTestingModule} from '@angular/material/icon/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/icon/api\\#services)  Services\n\n#### [link](https://material.angular.io/components/icon/api\\#FakeMatIconRegistry) `FakeMatIconRegistry`\n\nA null icon registry that must be imported to allow disabling of custom\nicons.\n\n##### Methods\n\n| addSvgIcon |\n| --- |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconInNamespace |\n| --- |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconLiteral |\n| --- |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconLiteralInNamespace |\n| --- |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconResolver |\n| --- |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconSet |\n| --- |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconSetInNamespace |\n| --- |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconSetLiteral |\n| --- |\n| Returns |\n| --- |\n| `this` |  |\n\n| addSvgIconSetLiteralInNamespace |\n| --- |\n| Returns |\n| --- |\n| `this` |  |\n\n| classNameForFontAlias |\n| --- |\n| Parameters |\n| --- |\n| alias<br> `string` |  |\n| Returns |\n| --- |\n| `string` |  |\n\n| getDefaultFontSetClass |\n| --- |\n\n| getNamedSvgIcon |\n| --- |\n| Returns |\n| --- |\n| `Observable<SVGElement>` |  |\n\n| getSvgIconFromUrl |\n| --- |\n| Returns |\n| --- |\n| `Observable<SVGElement>` |  |\n\n| registerFontClassAlias |\n| --- |\n| Returns |\n| --- |\n| `this` |  |\n\n| setDefaultFontSetClass |\n| --- |\n| Returns |\n| --- |\n| `this` |  |\n\n### [link](https://material.angular.io/components/icon/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/icon/api\\#MatIconHarness) `MatIconHarness`extends [ComponentHarness](https://material.angular.io/components/icon/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard mat-icon in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-icon'` | The selector for the host element of a `MatIcon` instance. |\n\n##### Methods\n\n| async<br> <br>getName |\n| --- |\n| Gets the name of the icon. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getNamespace |\n| --- |\n| Gets the namespace of the icon. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getType |\n| --- |\n| Gets the type of the icon. |\n| Returns |\n| --- |\n| `Promise<IconType>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isInline |\n| --- |\n| Gets whether the icon is inline. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatIconHarness` that meets<br>certain criteria. |\n| Parameters |\n| --- |\n| options<br> `IconHarnessFilters = {}` | Options for filtering which icon instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatIconHarness>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/icon/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/icon/api\\#IconHarnessFilters) `IconHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatIconHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `name: string | RegExp` | Filters based on the name of the icon. |\n| `namespace: string | null | RegExp` | Filters based on the namespace of the icon. |\n| `type: IconType` | Filters based on the typef of the icon. |\n\nIcon\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
  "title": "Icon | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/icon/api"
}