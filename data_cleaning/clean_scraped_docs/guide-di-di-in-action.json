{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backDependency Injection\n  - [Overview](https://angular.dev/guide/di)\n  - [Understanding dependency injection](https://angular.dev/guide/di/dependency-injection)\n  - [Creating an injectable service](https://angular.dev/guide/di/creating-injectable-service)\n  - [Defining dependency providers](https://angular.dev/guide/di/dependency-injection-providers)\n  - [Injection context](https://angular.dev/guide/di/dependency-injection-context)\n  - [Hierarchical injectors](https://angular.dev/guide/di/hierarchical-dependency-injection)\n  - [Optimizing injection tokens](https://angular.dev/guide/di/lightweight-injection-tokens)\n  - [DI in action](https://angular.dev/guide/di/di-in-action)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nThis guide explores additional features of dependency injection in Angular.\n\n## [Custom providers with `@Inject`](https://angular.dev/guide/di/di-in-action\\#custom-providers-with-inject)\n\nUsing a custom provider allows you to provide a concrete implementation for implicit dependencies, such as built-in browser APIs.\nThe following example uses an `InjectionToken` to provide the [localStorage](https://developer.mozilla.org/docs/Web/API/Window/localStorage) browser API as a dependency in the `BrowserStorageService`:\n\n### src/app/storage.service.ts\n\n```\n      import { Inject, Injectable, InjectionToken } from '@angular/core';export const BROWSER_STORAGE = new InjectionToken<Storage>('Browser Storage', {  providedIn: 'root',  factory: () => localStorage});@Injectable({  providedIn: 'root'})export class BrowserStorageService {  public storage = inject(BROWSER_STORAGE);  get(key: string) {    return this.storage.getItem(key);  }  set(key: string, value: string) {    this.storage.setItem(key, value);  }}\n\n```\n\ncheck\n\nThe `factory` function returns the `localStorage` property that is attached to the browser's window object.\nThe `inject` function initializes the `storage` property with an instance of the token.\n\nThis custom provider can now be overridden during testing with a mock API of `localStorage` instead of interacting with real browser APIs.\n\n## [Inject the component's DOM element](https://angular.dev/guide/di/di-in-action\\#inject-the-components-dom-element)\n\nAlthough developers strive to avoid it, some visual effects and third-party tools require direct DOM access.\nAs a result, you might need to access a component's DOM element.\n\nAngular exposes the underlying element of a `@Component` or `@Directive` via injection using the `ElementRef` injection token:\n\n```\n      import { Directive, ElementRef } from '@angular/core';@Directive({  selector: '[appHighlight]'})export class HighlightDirective {  private element = inject(ElementRef)  update() {    this.element.nativeElement.style.color = 'red';  }}\n\n```\n\ncheck\n\n## [Resolve circular dependencies with a forward reference](https://angular.dev/guide/di/di-in-action\\#resolve-circular-dependencies-with-a-forward-reference)\n\nThe order of class declaration matters in TypeScript.\nYou can't refer directly to a class until it's been defined.\n\nThis isn't usually a problem, especially if you adhere to the recommended _one class per file_ rule.\nBut sometimes circular references are unavoidable.\nFor example, when class 'A' refers to class 'B' and 'B' refers to 'A', one of them has to be defined first.\n\nThe Angular `forwardRef()` function creates an _indirect_ reference that Angular can resolve later.\n\nYou face a similar problem when a class makes _a reference to itself_.\nFor example, in its `providers` array.\nThe `providers` array is a property of the `@Component()` decorator function, which must appear before the class definition.\nYou can break such circular references by using `forwardRef`.\n\n### app.component.ts\n\n```\n      providers: [  {    provide: PARENT_MENU_ITEM,    useExisting: forwardRef(() => MenuItem),  },],\n\n```\n\ncheck",
  "title": "DI in action \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "dev",
    "di",
    "guide",
    "injection",
    "class",
    "dependency",
    "inject",
    "google"
  ],
  "sourceURL": "https://angular.dev/guide/di/di-in-action"
}