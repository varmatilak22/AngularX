{
  "content": "Skip to main content\n\nmenu\n\nmenuAPI\n\n- [Roadmap](https://angular.dev/roadmap)\n- [Get involved](https://github.com/angular/angular/blob/main/CONTRIBUTING.md)\n- API Reference\n- CLI Reference\n- Error Encyclopedia\n- Extended Diagnostics\n- [Versioning and releases](https://angular.dev/reference/releases)\n- [Version compatibility](https://angular.dev/reference/versions)\n- [Update guide](https://angular.dev/update-guide)\n- Configurations\n- Migrations\n\n- arrow\\_backMigrations\n  - [Overview](https://angular.dev/reference/migrations)\n  - [Standalone](https://angular.dev/reference/migrations/standalone)\n  - [Control Flow Syntax](https://angular.dev/reference/migrations/control-flow)\n  - [inject() Function](https://angular.dev/reference/migrations/inject-function)\n  - [Lazy-loaded routes](https://angular.dev/reference/migrations/route-lazy-loading)\n  - [Signal inputs](https://angular.dev/reference/migrations/signal-inputs)\n  - [Outputs](https://angular.dev/reference/migrations/outputs)\n  - [Signal queries](https://angular.dev/reference/migrations/signal-queries)\n  - [Clean up unused imports](https://angular.dev/reference/migrations/cleanup-unused-imports)\n  - [Self-closing tags](https://angular.dev/reference/migrations/self-closing-tags)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nThis schematic helps developers to convert eagerly loaded component routes to lazy loaded routes. This allows the build process to split the production bundle into smaller chunks, to avoid big JS bundle that includes all routes, which negatively affects initial page load of an application.\n\nRun the schematic using the following command:\n\n```\n      ng generate @angular/core:route-lazy-loading\n\n```\n\ncheck\n\n### [`path` config option](https://angular.dev/reference/migrations/route-lazy-loading\\#path-config-option)\n\nBy default, migration will go over the entire application. If you want to apply this migration to a subset of the files, you can pass the path argument as shown below:\n\n```\n      ng generate @angular/core:route-lazy-loading --path src/app/sub-component\n\n```\n\ncheck\n\nThe value of the path parameter is a relative path within the project.\n\n### [How does it work?](https://angular.dev/reference/migrations/route-lazy-loading\\#how-does-it-work)\n\nThe schematic will attempt to find all the places where the application routes as defined:\n\n- `RouterModule.forRoot` and `RouterModule.forChild`\n- `Router.resetConfig`\n- `provideRouter`\n- `provideRoutes`\n- variables of type `Routes` or `Route[]` (e.g. `const routes: Routes = [{...}]`)\n\nThe migration will check all the components in the routes, check if they are standalone and eagerly loaded, and if so, it will convert them to lazy loaded routes.\n\n#### [Before](https://angular.dev/reference/migrations/route-lazy-loading\\#before)\n\n```\n      // app.module.tsimport { HomeComponent } from './home/home.component';@NgModule({  imports: [    RouterModule.forRoot([      {        path: 'home',        // HomeComponent is standalone and eagerly loaded        component: HomeComponent,      },    ]),  ],})export class AppModule {}\n\n```\n\ncheck\n\n#### [After](https://angular.dev/reference/migrations/route-lazy-loading\\#after)\n\n```\n      // app.module.ts@NgModule({  imports: [    RouterModule.forRoot([      {        path: 'home',        // \u2193 HomeComponent is now lazy loaded        loadComponent: () => import('./home/home.component').then(m => m.HomeComponent),      },    ]),  ],})export class AppModule {}\n\n```\n\ncheck\n\nThis migration will also collect information about all the components declared in NgModules and output the list of routes that use them (including corresponding location of the file). Consider making those components standalone and run this migration again. You can use an existing migration (see [https://angular.dev/reference/migrations/standalone](https://angular.dev/reference/migrations/standalone)) to convert those components to standalone.",
  "title": "Lazy-loaded routes \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "dev",
    "reference",
    "migrations",
    "lazy",
    "routes",
    "path",
    "route",
    "standalone"
  ],
  "sourceURL": "https://angular.dev/reference/migrations/route-lazy-loading"
}