{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backComponents\n  - [Anatomy of components](https://angular.dev/guide/components)\n  - [Selectors](https://angular.dev/guide/components/selectors)\n  - [Styling](https://angular.dev/guide/components/styling)\n  - [Accepting data with input properties](https://angular.dev/guide/components/inputs)\n  - [Custom events with outputs](https://angular.dev/guide/components/outputs)\n  - [Content projection with ng-content](https://angular.dev/guide/components/content-projection)\n  - [Host elements](https://angular.dev/guide/components/host-elements)\n  - [Lifecycle](https://angular.dev/guide/components/lifecycle)\n  - [Referencing component children with queries](https://angular.dev/guide/components/queries)\n  - [Using DOM APIs](https://angular.dev/guide/components/dom-apis)\n  - [Inheritance](https://angular.dev/guide/components/inheritance)\n  - [Programmatically rendering components](https://angular.dev/guide/components/programmatic-rendering)\n  - [Advanced configuration](https://angular.dev/guide/components/advanced-configuration)\n  - [Custom Elements](https://angular.dev/guide/elements)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n**TIP:** This guide assumes you've already read the [Essentials Guide](https://angular.dev/guide/components/essentials). Read that first if you're new to Angular.\n\nIn addition to using a component directly in a template, you can also dynamically render components.\nThere are two main ways to dynamically render a component: in a template with `NgComponentOutlet`,\nor in your TypeScript code with `ViewContainerRef`.\n\n## [Using NgComponentOutlet](https://angular.dev/guide/components/programmatic-rendering\\#using-ngcomponentoutlet)\n\n`NgComponentOutlet` is a structural directive that dynamically renders a given component in a\ntemplate.\n\n```\n      @Component({ ... })export class AdminBio { /* ... */ }@Component({ ... })export class StandardBio { /* ... */ }@Component({  ...,  template: `    <p>Profile for {{user.name}}</p>    <ng-container *ngComponentOutlet=\"getBioComponent()\" /> `})export class CustomDialog {  @Input() user: User;  getBioComponent() {    return this.user.isAdmin ? AdminBio : StandardBio;  }}\n\n```\n\ncheck\n\nSee the [NgComponentOutlet API reference](https://angular.dev/guide/components/api/common/NgComponentOutlet) for more information on the\ndirective's capabilities.\n\n## [Using ViewContainerRef](https://angular.dev/guide/components/programmatic-rendering\\#using-viewcontainerref)\n\nA **view container** is a node in Angular's component tree that can contain content. Any component\nor directive can inject `ViewContainerRef` to get a reference to a view container corresponding to\nthat component or directive's location in the DOM.\n\nYou can use the `createComponent` method on `ViewContainerRef` to dynamically create and render a\ncomponent. When you create a new component with a `ViewContainerRef`, Angular appends it into the\nDOM as the next sibling of the component or directive that injected the `ViewContainerRef`.\n\n```\n      @Component({  selector: 'leaf-content',  template: `    This is the leaf content  `,})export class LeafContent {}@Component({  selector: 'outer-container',  template: `    <p>This is the start of the outer container</p>    <inner-item />    <p>This is the end of the outer container</p>  `,})export class OuterContainer {}@Component({  selector: 'inner-item',  template: `    <button (click)=\"loadContent()\">Load content</button>  `,})export class InnerItem {  private viewContainer = inject(ViewContainerRef);  loadContent() {    this.viewContainer.createComponent(LeafContent);  }}\n\n```\n\ncheck\n\nIn the example above, clicking the \"Load content\" button results in the following DOM structure\n\n```\n      <outer-container>  <p>This is the start of the outer container</p>  <inner-item>    <button>Load content</button>  </inner-item>  <leaf-content>This is the leaf content</leaf-content>  <p>This is the end of the outer container</p></outer-container>\n\n```\n\ncheck\n\n## [Lazy-loading components](https://angular.dev/guide/components/programmatic-rendering\\#lazy-loading-components)\n\nYou can use both of the approaches described above, `NgComponentOutlet` and `ViewContainerRef`, to\nrender components that are lazy-loaded with a standard\nJavaScript [dynamic import](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/import).\n\n```\n      @Component({  ...,  template: `    <section>      <h2>Basic settings</h2>      <basic-settings />    </section>    <section>      <h2>Advanced settings</h2>      <button (click)=\"loadAdvanced()\" *ngIf=\"!advancedSettings\">        Load advanced settings      </button>      <ng-container *ngComponentOutlet=\"advancedSettings\" />    </section>  `})export class AdminSettings {  advancedSettings: {new(): AdvancedSettings} | undefined;  async loadAdvanced() {    const { AdvancedSettings } = await import('path/to/advanced_settings.js');    this.advancedSettings = AdvancedSettings;  }}\n\n```\n\ncheck\n\nThe example above loads and displays the `AdvancedSettings` upon receiving a button click.",
  "title": "Programmatically rendering components \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "dev",
    "components",
    "guide",
    "component",
    "content",
    "container",
    "button",
    "ngcomponentoutlet"
  ],
  "sourceURL": "https://angular.dev/guide/components/programmatic-rendering"
}