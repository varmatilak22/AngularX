{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for progress-bar\n\n`<mat-progress-bar>` is a horizontal progress-bar for indicating progress and activity.\n\n### [link](https://material.angular.io/components/progress-bar/overview\\#progress-mode)  Progress mode\n\nThe progress-bar supports four modes: determinate, indeterminate, buffer and query.\n\n#### [link](https://material.angular.io/components/progress-bar/overview\\#determinate)  Determinate\n\nOperations where the percentage of the operation complete is known should use the\ndeterminate indicator.\n\nDeterminate progress-bar\n\nlinkcodeopen\\_in\\_new\n\nThis is the default mode and the progress is represented by the `value` property.\n\n#### [link](https://material.angular.io/components/progress-bar/overview\\#indeterminate)  Indeterminate\n\nOperations where the user is asked to wait while something finishes and it\u2019s\nnot necessary to indicate how long it will take should use the indeterminate indicator.\n\nIndeterminate progress-bar\n\nlinkcodeopen\\_in\\_new\n\nIn this mode the `value` property is ignored.\n\n#### [link](https://material.angular.io/components/progress-bar/overview\\#buffer)  Buffer\n\nUse the `buffer` mode of the progress-bar to indicate some activity or loading from the server.\n\nBuffer progress-bar\n\nlinkcodeopen\\_in\\_new\n\nIn \"buffer\" mode, `value` determines the progress of the primary bar while the `bufferValue` is\nused to show the additional buffering progress.\n\n#### [link](https://material.angular.io/components/progress-bar/overview\\#query)  Query\n\nUse the `query` mode of the progress-bar to indicate pre-loading before the actual loading starts.\n\nQuery progress-bar\n\nlinkcodeopen\\_in\\_new\n\nIn \"query\" mode, the progress-bar renders as an inverted \"indeterminate\" bar. Once the response\nprogress is available, the `mode` should be changed to determinate to convey the progress. In\nthis mode the `value` property is ignored.\n\n### [link](https://material.angular.io/components/progress-bar/overview\\#accessibility)  Accessibility\n\n`MatProgressBar` implements the ARIA `role=\"progressbar\"` pattern. By default, the progress bar\nsets `aria-valuemin` to `0` and `aria-valuemax` to `100`. Avoid changing these values, as this may\ncause incompatibility with some assistive technology.\n\nAlways provide an accessible label via `aria-label` or `aria-labelledby` for each progress bar.\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Determinate progress-bar example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit Indeterminate progress-bar example in StackBlitz\n\nEdit Buffer progress-bar example in StackBlitz\n\nEdit Query progress-bar example in StackBlitz",
  "title": "Progress bar | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/progress-bar/overview"
}