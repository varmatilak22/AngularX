{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backAnimations\n  - [Overview](https://angular.dev/guide/animations)\n  - [Transition and Triggers](https://angular.dev/guide/animations/transition-and-triggers)\n  - [Complex Sequences](https://angular.dev/guide/animations/complex-sequences)\n  - [Reusable Animations](https://angular.dev/guide/animations/reusable-animations)\n  - [Route transition animations](https://angular.dev/guide/animations/route-animations)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nAnimation provides the illusion of motion: HTML elements change styling over time.\nWell-designed animations can make your application more fun and straightforward to use, but they aren't just cosmetic.\nAnimations can improve your application and user experience in a number of ways:\n\n- Without animations, web page transitions can seem abrupt and jarring\n- Motion greatly enhances the user experience, so animations give users a chance to detect the application's response to their actions\n- Good animations intuitively call the user's attention to where it is needed\n\nTypically, animations involve multiple style _transformations_ over time.\nAn HTML element can move, change color, grow or shrink, fade, or slide off the page.\nThese changes can occur simultaneously or sequentially. You can control the timing of each transformation.\n\nAngular's animation system is built on CSS functionality, which means you can animate any property that the browser considers animatable.\nThis includes positions, sizes, transforms, colors, borders, and more.\nThe W3C maintains a list of animatable properties on its [CSS Transitions](https://www.w3.org/TR/css-transitions-1) page.\n\n## [About this guide](https://angular.dev/guide/animations\\#about-this-guide)\n\nThis guide covers the basic Angular animation features to get you started on adding Angular animations to your project.\n\n## [Getting started](https://angular.dev/guide/animations\\#getting-started)\n\nThe main Angular modules for animations are `@angular/animations` and `@angular/platform-browser`.\n\nTo get started with adding Angular animations to your project, import the animation-specific modules along with standard Angular functionality.\n\n1. ### [Enabling the animations module](https://angular.dev/guide/animations\\#enabling-the-animations-module)\n\n\nImport `provideAnimationsAsync` from `@angular/platform-browser/animations/async` and add it to the providers list in the `bootstrapApplication` function call.\n\n\n\n\n\n### Enabling Animations\n\n\n\n\n\n```\n         1bootstrapApplication(AppComponent, {2  providers: [3    provideAnimationsAsync(),4  ]5});\n\n```\n\ncheck\n\n\n\n### If you need immediate animations in your application\n\n\n\nIf you need to have an animation happen immediately when your application is loaded,\nyou will want to switch to the eagerly loaded animations module. Import `provideAnimations`\nfrom `@angular/platform-browser/animations` instead, and use `provideAnimations` **in place of** `provideAnimationsAsync` in the `bootstrapApplication` function call.\n\n\n\nFor `NgModule` based applications import `BrowserAnimationsModule`, which introduces the animation capabilities into your Angular root application module.\n\n\n\n\n\n### src/app/app.module.ts\n\n\n\n\n\n```\n         import {NgModule} from '@angular/core';import {BrowserModule} from '@angular/platform-browser';import {BrowserAnimationsModule} from '@angular/platform-browser/animations';@NgModule({  imports: [BrowserModule, BrowserAnimationsModule],  declarations: [],  bootstrap: [],})export class AppModule {}\n\n```\n\ncheck\n\n2. ### [Importing animation functions into component files](https://angular.dev/guide/animations\\#importing-animation-functions-into-component-files)\n\n\nIf you plan to use specific animation functions in component files, import those functions from `@angular/animations`.\n\n\n\n\ncheck\n\n```\n         import {Component, HostBinding, inject} from '@angular/core';import {  trigger,  state,  style,  animate,  transition,  // ...} from '@angular/animations';import {ChildrenOutletContexts, RouterLink, RouterOutlet} from '@angular/router';import {slideInAnimation} from './animations';@Component({  selector: 'app-root',  templateUrl: 'app.component.html',  styleUrls: ['app.component.css'],  imports: [RouterLink, RouterOutlet],  animations: [    slideInAnimation,    // animation triggers go here  ],})export class AppComponent {  @HostBinding('@.disabled')  public animationsDisabled = false;  private contexts = inject(ChildrenOutletContexts);  getRouteAnimationData() {    return this.contexts.getContext('primary')?.route?.snapshot?.data?.['animation'];  }  toggleAnimations() {    this.animationsDisabled = !this.animationsDisabled;  }}\n\n```\n\n\n\n\n\n\nSee all [available animation functions](https://angular.dev/guide/guide/animations#animations-api-summary) at the end of this guide.\n\n3. ### [Adding the animation metadata property](https://angular.dev/guide/animations\\#adding-the-animation-metadata-property)\n\n\nIn the component file, add a metadata property called `animations:` within the `@Component()` decorator.\nYou put the trigger that defines an animation within the `animations` metadata property.\n\n\n\n\ncheck\n\n```\n         import {Component, HostBinding, inject} from '@angular/core';import {  trigger,  state,  style,  animate,  transition,  // ...} from '@angular/animations';import {ChildrenOutletContexts, RouterLink, RouterOutlet} from '@angular/router';import {slideInAnimation} from './animations';@Component({  selector: 'app-root',  templateUrl: 'app.component.html',  styleUrls: ['app.component.css'],  imports: [RouterLink, RouterOutlet],  animations: [    slideInAnimation,\\\n...    // animation triggers go here  ],})export class AppComponent {  @HostBinding('@.disabled')  public animationsDisabled = false;  private contexts = inject(ChildrenOutletContexts);  getRouteAnimationData() {    return this.contexts.getContext('primary')?.route?.snapshot?.data?.['animation'];  }  toggleAnimations() {    this.animationsDisabled = !this.animationsDisabled;  }}\n\n```\n\n\n## [Animating a transition](https://angular.dev/guide/animations\\#animating-a-transition)\n\nLet's animate a transition that changes a single HTML element from one state to another.\nFor example, you can specify that a button displays either **Open** or **Closed** based on the user's last action.\nWhen the button is in the `open` state, it's visible and yellow.\nWhen it's the `closed` state, it's translucent and blue.\n\nIn HTML, these attributes are set using ordinary CSS styles such as color and opacity.\nIn Angular, use the `style()` function to specify a set of CSS styles for use with animations.\nCollect a set of styles in an animation state, and give the state a name, such as `open` or `closed`.\n\n**HELPFUL:** Let's create a new `open-close` component to animate with simple transitions.\n\nRun the following command in terminal to generate the component:\n\n```\n      ng g component open-close\n\n```\n\ncheck\n\nThis will create the component at `src/app/open-close.component.ts`.\n\n### [Animation state and styles](https://angular.dev/guide/animations\\#animation-state-and-styles)\n\nUse Angular's [`state()`](https://angular.dev/guide/api/animations/state) function to define different states to call at the end of each transition.\nThis function takes two arguments:\nA unique name like `open` or `closed` and a `style()` function.\n\nUse the `style()` function to define a set of styles to associate with a given state name.\nYou must use _camelCase_ for style attributes that contain dashes, such as `backgroundColor` or wrap them in quotes, such as `'background-color'`.\n\nLet's see how Angular's [`state()`](https://angular.dev/guide/api/animations/state) function works with the `style\u2063\u00ad(\u2060)` function to set CSS style attributes.\nIn this code snippet, multiple style attributes are set at the same time for the state.\nIn the `open` state, the button has a height of 200 pixels, an opacity of 1, and a yellow background color.\n\ncheck\n\n```\n      import {Component, Input} from '@angular/core';import {trigger, transition, state, animate, style, AnimationEvent} from '@angular/animations';@Component({  selector: 'app-open-close',  animations: [    trigger('openClose', [      // ...      state(        'open',        style({          height: '200px',          opacity: 1,          backgroundColor: 'yellow',        }),      ),      state(        'closed',        style({          height: '100px',          opacity: 0.8,          backgroundColor: 'blue',        }),      ),      transition('open => closed', [animate('1s')]),      transition('closed => open', [animate('0.5s')]),      transition('* => closed', [animate('1s')]),      transition('* => open', [animate('0.5s')]),      transition('open <=> closed', [animate('0.5s')]),      transition('* => open', [animate('1s', style({opacity: '*'}))]),      transition('* => *', [animate('1s')]),    ]),  ],  templateUrl: 'open-close.component.html',  styleUrls: ['open-close.component.css'],})export class OpenCloseComponent {  @Input() logging = false;  isOpen = true;  toggle() {    this.isOpen = !this.isOpen;  }  onAnimationEvent(event: AnimationEvent) {    if (!this.logging) {      return;    }    // openClose is trigger name in this example    console.warn(`Animation Trigger: ${event.triggerName}`);    // phaseName is \"start\" or \"done\"    console.warn(`Phase: ${event.phaseName}`);    // in our example, totalTime is 1000 (number of milliseconds in a second)    console.warn(`Total time: ${event.totalTime}`);    // in our example, fromState is either \"open\" or \"closed\"    console.warn(`From: ${event.fromState}`);    // in our example, toState either \"open\" or \"closed\"    console.warn(`To: ${event.toState}`);    // the HTML element itself, the button in this case    console.warn(`Element: ${event.element}`);  }}\n\n```\n\nIn the following `closed` state, the button has a height of 100 pixels, an opacity of 0.8, and a background color of blue.\n\ncheck\n\n```\n      import {Component, Input} from '@angular/core';import {trigger, transition, state, animate, style, AnimationEvent} from '@angular/animations';@Component({  selector: 'app-open-close',  animations: [    trigger('openClose', [      // ...      state(        'open',        style({          height: '200px',          opacity: 1,          backgroundColor: 'yellow',        }),      ),      state(        'closed',        style({          height: '100px',          opacity: 0.8,          backgroundColor: 'blue',        }),      ),      transition('open => closed', [animate('1s')]),      transition('closed => open', [animate('0.5s')]),      transition('* => closed', [animate('1s')]),      transition('* => open', [animate('0.5s')]),      transition('open <=> closed', [animate('0.5s')]),      transition('* => open', [animate('1s', style({opacity: '*'}))]),      transition('* => *', [animate('1s')]),    ]),  ],  templateUrl: 'open-close.component.html',  styleUrls: ['open-close.component.css'],})export class OpenCloseComponent {  @Input() logging = false;  isOpen = true;  toggle() {    this.isOpen = !this.isOpen;  }  onAnimationEvent(event: AnimationEvent) {    if (!this.logging) {      return;    }    // openClose is trigger name in this example    console.warn(`Animation Trigger: ${event.triggerName}`);    // phaseName is \"start\" or \"done\"    console.warn(`Phase: ${event.phaseName}`);    // in our example, totalTime is 1000 (number of milliseconds in a second)    console.warn(`Total time: ${event.totalTime}`);    // in our example, fromState is either \"open\" or \"closed\"    console.warn(`From: ${event.fromState}`);    // in our example, toState either \"open\" or \"closed\"    console.warn(`To: ${event.toState}`);    // the HTML element itself, the button in this case    console.warn(`Element: ${event.element}`);  }}\n\n```\n\n### [Transitions and timing](https://angular.dev/guide/animations\\#transitions-and-timing)\n\nIn Angular, you can set multiple styles without any animation.\nHowever, without further refinement, the button instantly transforms with no fade, no shrinkage, or other visible indicator that a change is occurring.\n\nTo make the change less abrupt, you need to define an animation _transition_ to specify the changes that occur between one state and another over a period of time.\nThe `transition()` function accepts two arguments:\nThe first argument accepts an expression that defines the direction between two transition states, and the second argument accepts one or a series of `animate()` steps.\n\nUse the `animate()` function to define the length, delay, and easing of a transition, and to designate the style function for defining styles while transitions are taking place.\nUse the `animate()` function to define the `keyframes()` function for multi-step animations.\nThese definitions are placed in the second argument of the `animate()` function.\n\n#### [Animation metadata: duration, delay, and easing](https://angular.dev/guide/animations\\#animation-metadata-duration-delay-and-easing)\n\nThe `animate()` function (second argument of the transition function) accepts the `timings` and `styles` input parameters.\n\nThe `timings` parameter takes either a number or a string defined in three parts.\n\n```\n      animate (duration)\n\n```\n\ncheck\n\nor\n\n```\n      animate ('duration delay easing')\n\n```\n\ncheck\n\nThe first part, `duration`, is required.\nThe duration can be expressed in milliseconds as a number without quotes, or in seconds with quotes and a time specifier.\nFor example, a duration of a tenth of a second can be expressed as follows:\n\n- As a plain number, in milliseconds:\n`100`\n\n- In a string, as milliseconds:\n`'100ms'`\n\n- In a string, as seconds:\n`'0.1s'`\n\n\nThe second argument, `delay`, has the same syntax as `duration`.\nFor example:\n\n- Wait for 100ms and then run for 200ms: `'0.2s 100ms'`\n\nThe third argument, `easing`, controls how the animation [accelerates and decelerates](https://easings.net/) during its runtime.\nFor example, `ease-in` causes the animation to begin slowly, and to pick up speed as it progresses.\n\n- Wait for 100ms, run for 200ms.\nUse a deceleration curve to start out fast and slowly decelerate to a resting point:\n`'0.2s 100ms ease-out'`\n\n- Run for 200ms, with no delay.\nUse a standard curve to start slow, accelerate in the middle, and then decelerate slowly at the end:\n`'0.2s ease-in-out'`\n\n- Start immediately, run for 200ms.\nUse an acceleration curve to start slow and end at full velocity:\n`'0.2s ease-in'`\n\n\n**HELPFUL:** See the Material Design website's topic on [Natural easing curves](https://material.io/design/motion/speed.html#easing) for general information on easing curves.\n\nThis example provides a state transition from `open` to `closed` with a 1-second transition between states.\n\ncheck\n\n```\n      import {Component, Input} from '@angular/core';import {trigger, transition, state, animate, style, AnimationEvent} from '@angular/animations';@Component({  selector: 'app-open-close',  animations: [    trigger('openClose', [      // ...      state(        'open',        style({          height: '200px',          opacity: 1,          backgroundColor: 'yellow',        }),      ),      state(        'closed',        style({          height: '100px',          opacity: 0.8,          backgroundColor: 'blue',        }),      ),      transition('open => closed', [animate('1s')]),      transition('closed => open', [animate('0.5s')]),      transition('* => closed', [animate('1s')]),      transition('* => open', [animate('0.5s')]),      transition('open <=> closed', [animate('0.5s')]),      transition('* => open', [animate('1s', style({opacity: '*'}))]),      transition('* => *', [animate('1s')]),    ]),  ],  templateUrl: 'open-close.component.html',  styleUrls: ['open-close.component.css'],})export class OpenCloseComponent {  @Input() logging = false;  isOpen = true;  toggle() {    this.isOpen = !this.isOpen;  }  onAnimationEvent(event: AnimationEvent) {    if (!this.logging) {      return;    }    // openClose is trigger name in this example    console.warn(`Animation Trigger: ${event.triggerName}`);    // phaseName is \"start\" or \"done\"    console.warn(`Phase: ${event.phaseName}`);    // in our example, totalTime is 1000 (number of milliseconds in a second)    console.warn(`Total time: ${event.totalTime}`);    // in our example, fromState is either \"open\" or \"closed\"    console.warn(`From: ${event.fromState}`);    // in our example, toState either \"open\" or \"closed\"    console.warn(`To: ${event.toState}`);    // the HTML element itself, the button in this case    console.warn(`Element: ${event.element}`);  }}\n\n```\n\nIn the preceding code snippet, the `=>` operator indicates unidirectional transitions, and `<=>` is bidirectional.\nWithin the transition, `animate()` specifies how long the transition takes.\nIn this case, the state change from `open` to `closed` takes 1 second, expressed here as `1s`.\n\nThis example adds a state transition from the `closed` state to the `open` state with a 0.5-second transition animation arc.\n\ncheck\n\n```\n      import {Component, Input} from '@angular/core';import {trigger, transition, state, animate, style, AnimationEvent} from '@angular/animations';@Component({  selector: 'app-open-close',  animations: [    trigger('openClose', [      // ...      state(        'open',        style({          height: '200px',          opacity: 1,          backgroundColor: 'yellow',        }),      ),      state(        'closed',        style({          height: '100px',          opacity: 0.8,          backgroundColor: 'blue',        }),      ),      transition('open => closed', [animate('1s')]),      transition('closed => open', [animate('0.5s')]),      transition('* => closed', [animate('1s')]),      transition('* => open', [animate('0.5s')]),      transition('open <=> closed', [animate('0.5s')]),      transition('* => open', [animate('1s', style({opacity: '*'}))]),      transition('* => *', [animate('1s')]),    ]),  ],  templateUrl: 'open-close.component.html',  styleUrls: ['open-close.component.css'],})export class OpenCloseComponent {  @Input() logging = false;  isOpen = true;  toggle() {    this.isOpen = !this.isOpen;  }  onAnimationEvent(event: AnimationEvent) {    if (!this.logging) {      return;    }    // openClose is trigger name in this example    console.warn(`Animation Trigger: ${event.triggerName}`);    // phaseName is \"start\" or \"done\"    console.warn(`Phase: ${event.phaseName}`);    // in our example, totalTime is 1000 (number of milliseconds in a second)    console.warn(`Total time: ${event.totalTime}`);    // in our example, fromState is either \"open\" or \"closed\"    console.warn(`From: ${event.fromState}`);    // in our example, toState either \"open\" or \"closed\"    console.warn(`To: ${event.toState}`);    // the HTML element itself, the button in this case    console.warn(`Element: ${event.element}`);  }}\n\n```\n\n**HELPFUL:** Some additional notes on using styles within [`state`](https://angular.dev/guide/api/animations/state) and `transition` functions.\n\n- Use [`state()`](https://angular.dev/guide/api/animations/state) to define styles that are applied at the end of each transition, they persist after the animation completes\n- Use `transition()` to define intermediate styles, which create the illusion of motion during the animation\n- When animations are disabled, `transition()` styles can be skipped, but [`state()`](https://angular.dev/guide/api/animations/state) styles can't\n- Include multiple state pairs within the same `transition()` argument:\n\n\n```\n        transition( 'on => off, off => void' )\n\n```\n\ncheck\n\n\n### [Triggering the animation](https://angular.dev/guide/animations\\#triggering-the-animation)\n\nAn animation requires a _trigger_, so that it knows when to start.\nThe `trigger()` function collects the states and transitions, and gives the animation a name, so that you can attach it to the triggering element in the HTML template.\n\nThe `trigger()` function describes the property name to watch for changes.\nWhen a change occurs, the trigger initiates the actions included in its definition.\nThese actions can be transitions or other functions, as we'll see later on.\n\nIn this example, we'll name the trigger `openClose`, and attach it to the `button` element.\nThe trigger describes the open and closed states, and the timings for the two transitions.\n\n**HELPFUL:** Within each `trigger()` function call, an element can only be in one state at any given time.\nHowever, it's possible for multiple triggers to be active at once.\n\n### [Defining animations and attaching them to the HTML template](https://angular.dev/guide/animations\\#defining-animations-and-attaching-them-to-the-html-template)\n\nAnimations are defined in the metadata of the component that controls the HTML element to be animated.\nPut the code that defines your animations under the `animations:` property within the `@Component()` decorator.\n\ncheck\n\n```\n      import {Component, Input} from '@angular/core';import {trigger, transition, state, animate, style, AnimationEvent} from '@angular/animations';@Component({  selector: 'app-open-close',  animations: [    trigger('openClose', [      // ...      state(        'open',        style({          height: '200px',          opacity: 1,          backgroundColor: 'yellow',        }),      ),      state(        'closed',        style({          height: '100px',          opacity: 0.8,          backgroundColor: 'blue',        }),      ),      transition('open => closed', [animate('1s')]),      transition('closed => open', [animate('0.5s')]),      transition('* => closed', [animate('1s')]),      transition('* => open', [animate('0.5s')]),      transition('open <=> closed', [animate('0.5s')]),      transition('* => open', [animate('1s', style({opacity: '*'}))]),      transition('* => *', [animate('1s')]),\\\n...    ]),  ],  templateUrl: 'open-close.component.html',  styleUrls: ['open-close.component.css'],})export class OpenCloseComponent {  @Input() logging = false;\n...  isOpen = true;  toggle() {    this.isOpen = !this.isOpen;  }  onAnimationEvent(event: AnimationEvent) {    if (!this.logging) {      return;    }    // openClose is trigger name in this example    console.warn(`Animation Trigger: ${event.triggerName}`);    // phaseName is \"start\" or \"done\"    console.warn(`Phase: ${event.phaseName}`);    // in our example, totalTime is 1000 (number of milliseconds in a second)    console.warn(`Total time: ${event.totalTime}`);    // in our example, fromState is either \"open\" or \"closed\"    console.warn(`From: ${event.fromState}`);    // in our example, toState either \"open\" or \"closed\"    console.warn(`To: ${event.toState}`);    // the HTML element itself, the button in this case    console.warn(`Element: ${event.element}`);  }\n...}\n\n```\n\nWhen you've defined an animation trigger for a component, attach it to an element in that component's template by wrapping the trigger name in brackets and preceding it with an `@` symbol.\nThen, you can bind the trigger to a template expression using standard Angular property binding syntax as shown below, where `triggerName` is the name of the trigger, and `expression` evaluates to a defined animation state.\n\n```\n      <div [@triggerName]=\"expression\">\u2026</div>;\n\n```\n\ncheck\n\nThe animation is executed or triggered when the expression value changes to a new state.\n\nThe following code snippet binds the trigger to the value of the `isOpen` property.\n\ncheck\n\n```\n      <nav>  <button type=\"button\" (click)=\"toggle()\">Toggle Open/Close</button></nav><div [@openClose]=\"isOpen ? 'open' : 'closed'\" class=\"open-close-container\">  <p>The box is now {{ isOpen ? 'Open' : 'Closed' }}!</p></div>\n\n```\n\nIn this example, when the `isOpen` expression evaluates to a defined state of `open` or `closed`, it notifies the trigger `openClose` of a state change.\nThen it's up to the `openClose` code to handle the state change and kick off a state change animation.\n\nFor elements entering or leaving a page (inserted or removed from the DOM), you can make the animations conditional.\nFor example, use `*ngIf` with the animation trigger in the HTML template.\n\n**HELPFUL:** In the component file, set the trigger that defines the animations as the value of the `animations:` property in the `@Component()` decorator.\n\nIn the HTML template file, use the trigger name to attach the defined animations to the HTML element to be animated.\n\n### [Code review](https://angular.dev/guide/animations\\#code-review)\n\nHere are the code files discussed in the transition example.\n\ncheck\n\n### src/app/open-close.component.ts\n\n```\n      import {Component, Input} from '@angular/core';import {trigger, transition, state, animate, style, AnimationEvent} from '@angular/animations';@Component({  selector: 'app-open-close',  animations: [    trigger('openClose', [      // ...      state(        'open',        style({          height: '200px',          opacity: 1,          backgroundColor: 'yellow',        }),      ),      state(        'closed',        style({          height: '100px',          opacity: 0.8,          backgroundColor: 'blue',        }),      ),      transition('open => closed', [animate('1s')]),      transition('closed => open', [animate('0.5s')]),      transition('* => closed', [animate('1s')]),      transition('* => open', [animate('0.5s')]),      transition('open <=> closed', [animate('0.5s')]),      transition('* => open', [animate('1s', style({opacity: '*'}))]),      transition('* => *', [animate('1s')]),\\\n...    ]),  ],  templateUrl: 'open-close.component.html',  styleUrls: ['open-close.component.css'],})export class OpenCloseComponent {  @Input() logging = false;\n...  isOpen = true;  toggle() {    this.isOpen = !this.isOpen;  }  onAnimationEvent(event: AnimationEvent) {    if (!this.logging) {      return;    }    // openClose is trigger name in this example    console.warn(`Animation Trigger: ${event.triggerName}`);    // phaseName is \"start\" or \"done\"    console.warn(`Phase: ${event.phaseName}`);    // in our example, totalTime is 1000 (number of milliseconds in a second)    console.warn(`Total time: ${event.totalTime}`);    // in our example, fromState is either \"open\" or \"closed\"    console.warn(`From: ${event.fromState}`);    // in our example, toState either \"open\" or \"closed\"    console.warn(`To: ${event.toState}`);    // the HTML element itself, the button in this case    console.warn(`Element: ${event.element}`);  }\n...}\n\n```\n\n### [Summary](https://angular.dev/guide/animations\\#summary)\n\nYou learned to add animation to a transition between two states, using `style()` and [`state()`](https://angular.dev/guide/api/animations/state) along with `animate()` for the timing.\n\nLearn about more advanced features in Angular animations under the Animation section, beginning with advanced techniques in [transition and triggers](https://angular.dev/guide/guide/animations/transition-and-triggers).\n\n## [Animations API summary](https://angular.dev/guide/animations\\#animations-api-summary)\n\nThe functional API provided by the `@angular/animations` module provides a domain-specific language (DSL) for creating and controlling animations in Angular applications.\nSee the [API reference](https://angular.dev/guide/api#animations) for a complete listing and syntax details of the core functions and related data structures.\n\n| Function name | What it does |\n| :-- | :-- |\n| `trigger()` | Kicks off the animation and serves as a container for all other animation function calls. HTML template binds to `triggerName`. Use the first argument to declare a unique trigger name. Uses array syntax. |\n| `style()` | Defines one or more CSS styles to use in animations. Controls the visual appearance of HTML elements during animations. Uses object syntax. |\n| [`state()`](https://angular.dev/guide/api/animations/state) | Creates a named set of CSS styles that should be applied on successful transition to a given state. The state can then be referenced by name within other animation functions. |\n| `animate()` | Specifies the timing information for a transition. Optional values for `delay` and `easing`. Can contain `style()` calls within. |\n| `transition()` | Defines the animation sequence between two named states. Uses array syntax. |\n| `keyframes()` | Allows a sequential change between styles within a specified time interval. Use within `animate()`. Can include multiple `style()` calls within each `keyframe()`. Uses array syntax. |\n| [`group()`](https://angular.dev/guide/api/animations/group) | Specifies a group of animation steps ( _inner animations_) to be run in parallel. Animation continues only after all inner animation steps have completed. Used within `sequence()` or `transition()`. |\n| `query()` | Finds one or more inner HTML elements within the current element. |\n| `sequence()` | Specifies a list of animation steps that are run sequentially, one by one. |\n| `stagger()` | Staggers the starting time for animations for multiple elements. |\n| `animation()` | Produces a reusable animation that can be invoked from elsewhere. Used together with `useAnimation()`. |\n| `useAnimation()` | Activates a reusable animation. Used with `animation()`. |\n| `animateChild()` | Allows animations on child components to be run within the same timeframe as the parent. |\n\n## [More on Angular animations](https://angular.dev/guide/animations\\#more-on-angular-animations)\n\n**HELPFUL:** Check out this [presentation](https://www.youtube.com/watch?v=rnTK9meY5us), shown at the AngularConnect conference in November 2017, and the accompanying [source code](https://github.com/matsko/animationsftw.in).\n\nYou might also be interested in the following:",
  "title": "Animations \u2022 Overview \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "animations",
    "open",
    "transition",
    "animate",
    "state",
    "animation",
    "https",
    "closed",
    "component"
  ],
  "sourceURL": "https://angular.dev/guide/animations"
}