{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for tabs\n\n## API reference for Angular Material tabs\n\n`\n          import {MatTabsModule} from '@angular/material/tabs';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/tabs/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabContent) `MatTabContent`\n\nDecorates the `ng-template` tags and reads out the template from it.\n\nSelector:\\[matTabContent\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `template: inject<TemplateRef<any>>(TemplateRef)` |  |\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabLabel) `MatTabLabel`extends [CdkPortal](https://material.angular.io/components/tabs/cdk/portal/api\\#CdkPortal)\n\nUsed to flag tab labels for use with the portal directive\n\nSelector:\\[mat-tab-label\\]\\[matTabLabel\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `context: C` | Contextual data to be passed in to the embedded view. |\n| `injector: Injector` | The injector to use for the embedded view. |\n| `isAttached: boolean` | Whether this portal is attached to a host. |\n| `origin: ElementRef` |  |\n| `templateRef: TemplateRef<C>` | The embedded template that will be used to instantiate an embedded View in the host. |\n| `viewContainerRef: ViewContainerRef` | Reference to the ViewContainer into which the template will be stamped out. |\n\n##### Methods\n\n| attach |\n| --- |\n| Attach the portal to the provided `PortalOutlet`.<br>When a context is provided it will override the `context` property of the `TemplatePortal`<br>instance. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n| context<br> `C = this.context` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<C>` |  |\n\n| detach |\n| --- |\n\n| setAttachedHost |\n| --- |\n| Sets the PortalOutlet reference without performing `attach()`. This is used directly by<br>the PortalOutlet when it is performing an `attach()` or `detach()`. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTab) `MatTab`\n\nSelector:mat-tab\n\nExported as:matTab\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-label')<br> <br>`ariaLabel: string` | Aria label for the tab. |\n| @Input('aria-labelledby')<br> <br>`ariaLabelledby: string` | Reference to the element that the tab is labelled by.<br>Will be cleared if `aria-label` is set at the same time. |\n| @Input()<br>`bodyClass: string | string[]` | Classes to be passed to the tab mat-tab-body container. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | whether the tab is disabled. |\n| @Input()<br>`id: string | null` | Custom ID for the tab, overriding the auto-generated one by Material.<br>Note that when using this input, it's your responsibility to ensure that the ID is unique. |\n| @Input()<br>`labelClass: string | string[]` | Classes to be passed to the tab label inside the mat-tab-header container. |\n| @Input('label')<br> <br>`textLabel: string` | Plain text label for the tab, used when there is no template label. |\n| `isActive: false` | Whether the tab is currently active. |\n| `origin: number | null` | The initial relatively index origin of the tab if it was created and selected after there<br>was already a selected tab. Provides context of what position the tab should originate from. |\n| `position: number | null` | The relatively indexed position where 0 represents the center, negative is left, and positive<br>represents the right. |\n| `templateLabel: MatTabLabel` | Content for the tab label given by `<ng-template mat-tab-label>`. |\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabGroup) `MatTabGroup`\n\nMaterial design tab-group component. Supports basic tab pairs (label + content) and includes\nanimated ink-bar, keyboard navigation, and screen reader.\nSee: [https://material.io/design/components/tabs.html](https://material.io/design/components/tabs.html)\n\nSelector:mat-tab-group\n\nExported as:matTabGroup\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ alias: 'mat-align-tabs' })<br> <br>`alignTabs: string | null` | Alignment for tabs label. |\n| @Input()<br>`animationDuration: string` | Duration for the tab animation. Will be normalized to milliseconds if no units are set. |\n| @Input('aria-label')<br> <br>`ariaLabel: string` | Aria label of the inner `tablist` of the group. |\n| @Input('aria-labelledby')<br> <br>`ariaLabelledby: string` | Sets the `aria-labelledby` of the inner `tablist` of the group. |\n| @Input()<br>`color: ThemePalette` | Theme color of the tab group. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/tabs/styling](https://material.angular.io/components/tabs/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: numberAttribute })<br> <br>`contentTabIndex: number | null` | `tabindex` to be set on the inner element that wraps the tab content. Can be used for improved<br>accessibility when the tab does not have focusable elements or if it has scrollable content.<br>The `tabindex` will be removed automatically for inactive tabs.<br>Read more at [https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html](https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html) |\n| @Input({ transform: booleanAttribute })<br> <br>`disablePagination: boolean` | Whether pagination should be disabled. This can be used to avoid unnecessary<br>layout recalculations if it's known that pagination won't be required. |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether ripples in the tab group are disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`dynamicHeight: boolean` | Whether the tab group should grow to the size of the active tab. |\n| @Input({ transform: booleanAttribute })<br> <br>`fitInkBarToContent: boolean` | Whether the ink bar should fit its width to the size of the tab label content. |\n| @Input()<br>`headerPosition: MatTabHeaderPosition` | Position of the tab header. |\n| @Input({ transform: booleanAttribute })<br> <br>`preserveContent: boolean` | By default tabs remove their content from the DOM while it's off-screen.<br>Setting this to `true` will keep it in the DOM which will prevent elements<br>like iframes and videos from reloading next time it comes back into the view. |\n| @Input({ transform: numberAttribute })<br> <br>`selectedIndex: number | null` | The index of the active tab. |\n| @Input({ alias: 'mat-stretch-tabs', transform: booleanAttribute })<br> <br>`stretchTabs: boolean` | Whether tabs should be stretched to fill the header. |\n| @Output()<br>`animationDone: EventEmitter<void>` | Event emitted when the body animation has completed |\n| @Output()<br>`focusChange: EventEmitter<MatTabChangeEvent>` | Event emitted when focus has changed within a tab group. |\n| @Output()<br>`selectedIndexChange: EventEmitter<number>` | Output to enable support for two-way binding on `[(selectedIndex)]` |\n| @Output()<br>`selectedTabChange: EventEmitter<MatTabChangeEvent>` | Event emitted when the tab selection has changed. |\n| @Input()<br>Deprecated<br> <br>`backgroundColor: ThemePalette` | Theme color of the background of the tab group. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/tabs/styling](https://material.angular.io/components/tabs/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n\n##### Methods\n\n| focusTab |\n| --- |\n| Sets focus to a particular tab. |\n| Parameters |\n| --- |\n| index<br> `number` | Index of the tab to be focused. |\n\n| realignInkBar |\n| --- |\n| Re-aligns the ink bar to the selected tab element. |\n\n| updatePagination |\n| --- |\n| Recalculates the tab group's pagination dimensions.<br>WARNING: Calling this method can be very costly in terms of performance. It should be called<br>as infrequently as possible from outside of the Tabs component as it causes a reflow of the<br>page. |\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabNav) `MatTabNav`\n\nNavigation component matching the styles of the tab group header.\nProvides anchored navigation with animated ink bar.\n\nSelector:\\[mat-tab-nav-bar\\]\n\nExported as:matTabNavBar, matTabNav\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`animationDuration: string` |  |\n| @Input()<br>`backgroundColor: ThemePalette` | Theme color of the background of the tab nav. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/tabs/styling](https://material.angular.io/components/tabs/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input()<br>`color: ThemePalette` | Theme color of the nav bar. This API is supported in M2 themes only, it has<br>no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/tabs/styling](https://material.angular.io/components/tabs/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disablePagination: boolean` | Whether pagination should be disabled. This can be used to avoid unnecessary<br>layout recalculations if it's known that pagination won't be required. |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the ripple effect is disabled or not. |\n| @Input({ transform: booleanAttribute })<br> <br>`fitInkBarToContent: boolean` | Whether the ink bar should fit its width to the size of the tab label content. |\n| @Input({ transform: numberAttribute })<br> <br>`selectedIndex: number` | The index of the active tab. |\n| @Input({ alias: 'mat-stretch-tabs', transform: booleanAttribute })<br> <br>`stretchTabs: boolean` | Whether tabs should be stretched to fill the header. |\n| @Input()<br>`tabPanel: MatTabNavPanel` | Associated tab panel controlled by the nav bar. If not provided, then the nav bar<br>follows the ARIA link / navigation landmark pattern. If provided, it follows the<br>ARIA tabs design pattern. |\n| @Output()<br>`indexFocused: EventEmitter<number>` | Event emitted when a label is focused. |\n| @Output()<br>`selectFocusedIndex: EventEmitter<number>` | Event emitted when the option is selected. |\n| `focusIndex: number` | Tracks which element has focus; used for keyboard navigation |\n| `scrollDistance: number` | Sets the distance in pixels that the tab header should be transformed in the X-axis. |\n\n##### Methods\n\n| updateActiveLink |\n| --- |\n| Notifies the component that the active link has been changed. |\n\n| updatePagination |\n| --- |\n| Updates the view whether pagination should be enabled or not.<br>WARNING: Calling this method can be very costly in terms of performance. It should be called<br>as infrequently as possible from outside of the Tabs component as it causes a reflow of the<br>page. |\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabNavPanel) `MatTabNavPanel`\n\nTab panel component associated with MatTabNav.\n\nSelector:mat-tab-nav-panel\n\nExported as:matTabNavPanel\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`id: string` | Unique id for the tab panel. |\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabLink) `MatTabLink`\n\nLink inside a `mat-tab-nav-bar`.\n\nSelector:\\[mat-tab-link\\]\\[matTabLink\\]\n\nExported as:matTabLink\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`active: boolean` | Whether the link is active. |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether ripples are disabled on the tab link. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the tab link is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`fitInkBarToContent: boolean` | Whether the ink bar should fit to the entire tab or just its content. |\n| @Input()<br>`id: string` | Unique id for the tab. |\n| `elementRef: inject(ElementRef)` |  |\n\n##### Methods\n\n| activateInkBar |\n| --- |\n| Aligns the ink bar to the current item. |\n| Parameters |\n| --- |\n| previousIndicatorClientRect?<br> `DOMRect` |  |\n\n| deactivateInkBar |\n| --- |\n| Removes the ink bar from the current item. |\n\n| focus |\n| --- |\n| Focuses the tab link. |\n\n### [link](https://material.angular.io/components/tabs/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabChangeEvent) `MatTabChangeEvent`\n\nA simple change event emitted on focus or selection changes.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `index: number` | Index of the currently-selected tab. |\n| `tab: MatTab` | Reference to the currently-selected tab. |\n\n### [link](https://material.angular.io/components/tabs/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabsConfig) `MatTabsConfig`\n\nObject that can be used to configure the default options for the tabs module.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `alignTabs: 'start' | 'center' | 'end'` | Alignment for the tabs label. |\n| `animationDuration: string` | Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). |\n| `contentTabIndex: number` | `tabindex` to be set on the inner element that wraps the tab content. |\n| `disablePagination: boolean` | Whether pagination should be disabled. This can be used to avoid unnecessary<br>layout recalculations if it's known that pagination won't be required. |\n| `dynamicHeight: boolean` | Whether the tab group should grow to the size of the active tab. |\n| `fitInkBarToContent: boolean` | Whether the ink bar should fit its width to the size of the tab label content.<br>This only applies to the MDC-based tabs. |\n| `preserveContent: boolean` | By default tabs remove their content from the DOM while it's off-screen.<br>Setting this to `true` will keep it in the DOM which will prevent elements<br>like iframes and videos from reloading next time it comes back into the view. |\n| `stretchTabs: boolean` | Whether tabs should be stretched to fill the header. |\n\n### [link](https://material.angular.io/components/tabs/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/tabs/api\\#ScrollDirection) `ScrollDirection`\n\nThe directions that scrolling can go in when the header's tabs exceed the header width. 'After'\nwill scroll the header towards the end of the tabs list and 'before' will scroll towards the\nbeginning of the list.\n\n```docs-markdown-code\ntype ScrollDirection = 'after' | 'before';\n\n```\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabBodyPositionState) `MatTabBodyPositionState`\n\nDeprecated\n\nThese position states are used internally as animation states for the tab body. Setting the\nposition state to left, right, or center will transition the tab body from its current\nposition to its respective state. If there is not current position (void, in the case of a new\ntab body), then there will be no transition animation to its state.\n\nIn the case of a new tab body that should immediately be centered with an animating transition,\nthen left-origin-center or right-origin-center can be used, which will use left or right as its\npseudo-prior state.\n\n```docs-markdown-code\ntype MatTabBodyPositionState = 'left' | 'center' | 'right';\n\n```\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabBodyOriginState) `MatTabBodyOriginState`\n\nDeprecated\n\nThe origin state is an internally used state that is set on a new tab body indicating if it\nbegan to the left or right of the prior selected index. For example, if the selected index was\nset to 1, and a new tab is created and selected at index 2, then the tab body would have an\norigin of right because its index was greater than the prior selected index.\n\n```docs-markdown-code\ntype MatTabBodyOriginState = 'left' | 'right';\n\n```\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabHeaderPosition) `MatTabHeaderPosition`\n\nPossible positions for the tab header.\n\n```docs-markdown-code\ntype MatTabHeaderPosition = 'above' | 'below';\n\n```\n\n### [link](https://material.angular.io/components/tabs/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/tabs/api\\#MAT_TABS_CONFIG) `MAT_TABS_CONFIG`\n\nInjection token that can be used to provide the default options the tabs module.\n\n```docs-markdown-code\nconst MAT_TABS_CONFIG: InjectionToken<MatTabsConfig>;\n\n```\n\n#### [link](https://material.angular.io/components/tabs/api\\#MAT_TAB_CONTENT) `MAT_TAB_CONTENT`\n\nInjection token that can be used to reference instances of `MatTabContent`. It serves as\nalternative token to the actual `MatTabContent` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst MAT_TAB_CONTENT: InjectionToken<MatTabContent>;\n\n```\n\n#### [link](https://material.angular.io/components/tabs/api\\#MAT_TAB_LABEL) `MAT_TAB_LABEL`\n\nInjection token that can be used to reference instances of `MatTabLabel`. It serves as\nalternative token to the actual `MatTabLabel` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst MAT_TAB_LABEL: InjectionToken<MatTabLabel>;\n\n```\n\n## API reference for Angular Material tabs-testing\n\n`\n          import {MatTabGroupHarness} from '@angular/material/tabs/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/tabs/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabGroupHarness) `MatTabGroupHarness`extends [ComponentHarness](https://material.angular.io/components/tabs/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a mat-tab-group in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-tab-group'` | The selector for the host element of a `MatTabGroup` instance. |\n\n##### Methods\n\n| async<br> <br>getSelectedTab |\n| --- |\n| Gets the selected tab of the tab group. |\n| Returns |\n| --- |\n| `Promise<MatTabHarness>` |  |\n\n| async<br> <br>getTabs |\n| --- |\n| Gets the list of tabs in the tab group. |\n| Parameters |\n| --- |\n| filter<br> `TabHarnessFilters = {}` | Optionally filters which tabs are included. |\n| Returns |\n| --- |\n| `Promise<MatTabHarness[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>selectTab |\n| --- |\n| Selects a tab in this tab group. |\n| Parameters |\n| --- |\n| filter<br> `TabHarnessFilters = {}` | An optional filter to apply to the child tabs. The first tab matching the filter<br>will be selected. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a tab group with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `TabGroupHarnessFilters = {}` | Options for filtering which tab group instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabHarness) `MatTabHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/tabs/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with an Angular Material tab in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-tab'` | The selector for the host element of a `MatTab` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getAriaLabel |\n| --- |\n| Gets the aria-label of the tab. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getAriaLabelledby |\n| --- |\n| Gets the value of the \"aria-labelledby\" attribute. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getLabel |\n| --- |\n| Gets the label of the tab. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getRootHarnessLoader |\n| --- |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getTextContent |\n| --- |\n| Gets the text content of the tab. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the tab is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isSelected |\n| --- |\n| Whether the tab is selected. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>select |\n| --- |\n| Selects the given tab by clicking on the label. Tab cannot be selected if disabled. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a tab with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `TabHarnessFilters = {}` | Options for filtering which tab instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabNavBarHarness) `MatTabNavBarHarness`extends [ComponentHarness](https://material.angular.io/components/tabs/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a mat-tab-nav-bar in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-tab-nav-bar'` | The selector for the host element of a `MatTabNavBar` instance. |\n\n##### Methods\n\n| async<br> <br>clickLink |\n| --- |\n| Clicks a link inside the nav bar. |\n| Parameters |\n| --- |\n| filter<br> `TabLinkHarnessFilters = {}` | An optional filter to apply to the child link. The first link matching the filter<br>will be clicked. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getActiveLink |\n| --- |\n| Gets the active link in the nav bar. |\n| Returns |\n| --- |\n| `Promise<MatTabLinkHarness>` |  |\n\n| async<br> <br>getLinks |\n| --- |\n| Gets the list of links in the nav bar. |\n| Parameters |\n| --- |\n| filter<br> `TabLinkHarnessFilters = {}` | Optionally filters which links are included. |\n| Returns |\n| --- |\n| `Promise<MatTabLinkHarness[]>` |  |\n\n| async<br> <br>getPanel |\n| --- |\n| Gets the panel associated with the nav bar. |\n| Returns |\n| --- |\n| `Promise<MatTabNavPanelHarness>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a tab nav bar with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `TabNavBarHarnessFilters = {}` | Options for filtering which tab nav bar instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/tabs/api\\#MatTabLinkHarness) `MatTabLinkHarness`extends [ComponentHarness](https://material.angular.io/components/tabs/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a Angular Material tab link in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static\u00a0hostSelector: '.mat-mdc-tab-link'` | The selector for the host element of a `MatTabLink` instance. |\n\n##### Methods\n\n| async<br> <br>click |\n| --- |\n| Clicks on the link. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getLabel |\n| --- |\n| Gets the label of the link. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isActive |\n| --- |\n| Whether the link is active. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the link is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a tab link with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `TabLinkHarnessFilters = {}` | Options for filtering which tab link instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/tabs/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/tabs/api\\#TabHarnessFilters) `TabHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatTabHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `label: string | RegExp` | Only find instances whose label matches the given value. |\n| `selected: boolean` | Only find instances whose selected state matches the given value. |\n\n#### [link](https://material.angular.io/components/tabs/api\\#TabGroupHarnessFilters) `TabGroupHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatTabGroupHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `selectedTabLabel: string | RegExp` | Only find instances whose selected tab label matches the given value. |\n\n#### [link](https://material.angular.io/components/tabs/api\\#TabLinkHarnessFilters) `TabLinkHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatTabLinkHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `label: string | RegExp` | Only find instances whose label matches the given value. |\n\n#### [link](https://material.angular.io/components/tabs/api\\#TabNavBarHarnessFilters) `TabNavBarHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatTabNavBarHarness` instances.\n\n#### [link](https://material.angular.io/components/tabs/api\\#TabNavPanelHarnessFilters) `TabNavPanelHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatTabNavPanelHarness` instances.\n\nTabs\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard\n\nThe background color should be customized through Sass theming APIs. Will be removed in v20.0.0 Remove this input or later.\n\nWill stop being exported. Will be removed in v21.0.0 or later.\n\nNo longer being used. Will be removed. Will be removed in v21.0.0 or later.",
  "title": "Tabs | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/tabs/api"
}