{
  "content": "Skip to main content\n\nmenu\n\nmenuAPI\n\n- [Roadmap](https://angular.dev/roadmap)\n- [Get involved](https://github.com/angular/angular/blob/main/CONTRIBUTING.md)\n- API Reference\n- CLI Reference\n- Error Encyclopedia\n- Extended Diagnostics\n- [Versioning and releases](https://angular.dev/reference/releases)\n- [Version compatibility](https://angular.dev/reference/versions)\n- [Update guide](https://angular.dev/update-guide)\n- Configurations\n- Migrations\n\n- arrow\\_backMigrations\n  - [Overview](https://angular.dev/reference/migrations)\n  - [Standalone](https://angular.dev/reference/migrations/standalone)\n  - [Control Flow Syntax](https://angular.dev/reference/migrations/control-flow)\n  - [inject() Function](https://angular.dev/reference/migrations/inject-function)\n  - [Lazy-loaded routes](https://angular.dev/reference/migrations/route-lazy-loading)\n  - [Signal inputs](https://angular.dev/reference/migrations/signal-inputs)\n  - [Outputs](https://angular.dev/reference/migrations/outputs)\n  - [Signal queries](https://angular.dev/reference/migrations/signal-queries)\n  - [Clean up unused imports](https://angular.dev/reference/migrations/cleanup-unused-imports)\n  - [Self-closing tags](https://angular.dev/reference/migrations/self-closing-tags)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nAngular introduced an improved API for inputs that is considered\nproduction ready as of v19.\nRead more about signal inputs and their benefits in the [dedicated guide](https://angular.dev/reference/migrations/guide/signals/inputs).\n\nTo support existing teams that would like to use signal inputs, the Angular team\nprovides an automated migration that converts `@Input` fields to the new `input()` API.\n\nRun the schematic using the following command:\n\n```\n      ng generate @angular/core:signal-input-migration\n\n```\n\ncheck\n\nAlternatively, the migration is available as a [code refactor action](https://code.visualstudio.com/docs/typescript/typescript-refactoring#_refactoring) in VSCode.\nInstall the latest version of the VSCode extension and click on an `@Input` field.\nSee more details in the section [below](https://angular.dev/reference/migrations/signal-inputs#vscode-extension).\n\n## [What does the migration change?](https://angular.dev/reference/migrations/signal-inputs\\#what-does-the-migration-change)\n\n1. `@Input()` class members are updated to their signal `input()` equivalent.\n2. References to migrated inputs are updated to call the signal.\n   - This includes references in templates, host bindings or TypeScript code.\n\n**Before**\n\n```\n      import {Component, Input} from '@angular/core';@Component({  template: `Name: {{name ?? ''}}`})export class MyComponent {  @Input() name: string|undefined = undefined;  someMethod(): number {    if (this.name) {      return this.name.length;    }    return -1;  }}\n\n```\n\ncheck\n\n**After**\n\n```\n      import {Component, input} from '@angular/core';@Component({  template: `Name: {{name() ?? ''}}`})export class MyComponent {  readonly name = input<string>();  someMethod(): number {    const name = this.name();    if (name) {      return name.length;    }    return -1;  }}\n\n```\n\ncheck\n\n## [Configuration options](https://angular.dev/reference/migrations/signal-inputs\\#configuration-options)\n\nThe migration supports a few options for fine tuning the migration to your specific needs.\n\n### [`--path`](https://angular.dev/reference/migrations/signal-inputs\\#--path)\n\nBy default, the migration will update your whole Angular CLI workspace.\nYou can limit the migration to a specific sub-directory using this option.\n\n### [`--best-effort-mode`](https://angular.dev/reference/migrations/signal-inputs\\#--best-effort-mode)\n\nBy default, the migration skips inputs that cannot be safely migrated.\nThe migration tries to refactor code as safely as possible.\n\nWhen the `--best-effort-mode` flag is enabled, the migration eagerly\ntries to migrate as much as possible, even if it could break your build.\n\n### [`--insert-todos`](https://angular.dev/reference/migrations/signal-inputs\\#--insert-todos)\n\nWhen enabled, the migration will add TODOs to inputs that couldn't be migrated.\nThe TODOs will include reasoning on why inputs were skipped. E.g.\n\n```\n      // TODO: Skipped for migration because://  Your application code writes to the input. This prevents migration.@Input() myInput = false;\n\n```\n\ncheck\n\n### [`--analysis-dir`](https://angular.dev/reference/migrations/signal-inputs\\#--analysis-dir)\n\nIn large projects you may use this option to reduce the amount of files being analyzed.\nBy default, the migration analyzes the whole workspace, regardless of the `--path` option, in\norder to update all references affected by an `@Input()` migration.\n\nWith this option, you can limit analysis to a sub-folder. Note that this means that any\nreferences outside this directory are silently skipped, potentially breaking your build.\n\n## [VSCode extension](https://angular.dev/reference/migrations/signal-inputs\\#vscode-extension)\n\n![Screenshot of the VSCode extension and clicking on an `@Input` field](https://angular.dev/reference/migrations/assets/images/migrations/signal-inputs-vscode.png)\n\nThe migration is available as a [code refactor action](https://code.visualstudio.com/docs/typescript/typescript-refactoring#_refactoring) in VSCode.\n\nTo make use of the migration via VSCode, install the latest version of the VSCode extension and either click:\n\n- on a `@Input` field.\n- or, on a directive/component\n\nThen, wait for the yellow lightbulb VSCode refactoring button to appear.\nVia this button you can then select the signal input migration.",
  "title": "Signal inputs \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "dev",
    "reference",
    "migrations",
    "migration",
    "inputs",
    "signal",
    "input",
    "vscode"
  ],
  "sourceURL": "https://angular.dev/reference/migrations/signal-inputs"
}