{
  "content": "Skip to main content\n\nmenu\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nunfold\\_more\nLearn AngularForms\nReveal Answer\n\n[chevron\\_left](https://angular.dev/tutorials/learn-angular/14-routerLink) [chevron\\_right](https://angular.dev/tutorials/learn-angular/16-form-control-values)\n\nReveal Answer\n\nunfold\\_more\nLearn AngularForms\nReveal Answer\n\n[chevron\\_left](https://angular.dev/tutorials/learn-angular/14-routerLink) [chevron\\_right](https://angular.dev/tutorials/learn-angular/16-form-control-values)\n\nReveal Answer\n\nForms are a big part of many apps because they enable your app to accept user input. Let's learn about how forms are handled in Angular.\n\nIn Angular, there are two types of forms: template-driven and reactive. You'll learn about both over the next few activities.\n\nNote: Learn more about [forms in Angular in the in-depth guide](https://angular.dev/guide/forms).\n\nIn this activity, you'll learn how to set up a form using a template-driven approach.\n\n* * *\n\n1. ### [Create an input field](https://angular.dev/tutorials/learn-angular/15-forms\\#create-an-input-field)\n\n\nIn `user.component.ts`, update the template by adding a text input with the `id` set to `framework`, type set to `text`.\n\n\n\n```\n         <label for=\"framework\">  Favorite Framework:  <input id=\"framework\" type=\"text\" /></label>\n\n```\n\ncheck\n\n2. ### [Import `FormsModule`](https://angular.dev/tutorials/learn-angular/15-forms\\#import-formsmodule)\n\n\nFor this form to use Angular features that enable data binding to forms, you'll need to import the `FormsModule`.\n\nImport the `FormsModule` from `@angular/forms` and add it to the `imports` array of the `UserComponent`.\n\n\n\n```\n         import {Component} from '@angular/core';import {FormsModule} from '@angular/forms';@Component({...imports: [FormsModule],})export class UserComponent {}\n\n```\n\ncheck\n\n3. ### [Add binding to the value of the input](https://angular.dev/tutorials/learn-angular/15-forms\\#add-binding-to-the-value-of-the-input)\n\n\nThe `FormsModule` has a directive called `ngModel` that binds the value of the input to a property in your class.\n\nUpdate the input to use the `ngModel` directive, specifically with the following syntax `[(ngModel)]=\"favoriteFramework\"` to bind to the `favoriteFramework` property.\n\n\n\n```\n         <label for=\"framework\">  Favorite Framework:  <input id=\"framework\" type=\"text\" [(ngModel)]=\"favoriteFramework\" /></label>\n\n```\n\ncheck\n\nAfter you've made changes, try entering a value in the input field. Notice how it updates on the screen (yes, very cool).\n\nNOTE: The syntax `[()]` is known as \"banana in a box\" but it represents two-way binding: property binding and event binding. Learn more in the [Angular docs about two-way data binding](https://angular.dev/guide/templates/two-way-binding).\n\n\nYou've now taken an important first step towards building forms with Angular.\n\nNice work. Let's keep the momentum going!\n\napp/user.component.ts editdelete\n\nadd\n\nlaunchdownload\n\n99\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n\u203a\n\nimport{Component}from'@angular/core';\n\n@Component({\n\nselector:'app-user',\n\ntemplate:\\`\n\n<p>Username: {{username}}</p>\n\n<p>{{username}}'s favorite framework: {{favoriteFramework}}</p>\n\n<labelfor=\"framework\">Favorite Framework:</label>\n\n\\`,\n\nimports:\\[\\],\n\n})\n\nexportclassUserComponent{\n\nusername='youngTech';\n\nfavoriteFramework='';\n\n}\n\nPreview\n\nBooting\n\nConsole\n\nTerminal\n\nrefresh\n\nStackBlitz",
  "title": "Forms \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "learn",
    "forms",
    "input",
    "framework",
    "https",
    "dev",
    "binding",
    "formsmodule",
    "import"
  ],
  "sourceURL": "https://angular.dev/tutorials/learn-angular/15-forms"
}