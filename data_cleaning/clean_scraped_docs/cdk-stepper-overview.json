{
  "content": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\n## Overview for stepper\n\nCDK stepper provides a foundation upon which more concrete stepper varieties can be built. A\nstepper is a wizard-like workflow that divides content into logical steps\n\n### [link](https://material.angular.io/cdk/stepper/overview\\#behavior-captured-by-cdkstepper)  Behavior captured by CdkStepper\n\nThe base CDK version of the stepper primarily manages which step is active. This includes handling\nkeyboard interactions and exposing an API for advancing or rewinding through the workflow.\n\n#### [link](https://material.angular.io/cdk/stepper/overview\\#linear-stepper)  Linear stepper\n\nA stepper marked as `linear` requires the user to complete previous steps before proceeding.\nFor each step, the `stepControl` attribute can be set to the top level `AbstractControl` that\nis used to check the validity of the step.\n\nThere are two possible approaches. One is using a single form for stepper, and the other is\nusing a different form for each step.\n\nAlternatively, if you don't want to use the Angular forms, you can pass in the `completed` property\nto each of the steps which won't allow the user to continue until it becomes `true`. Note that if\nboth `completed` and `stepControl` are set, the `stepControl` will take precedence.\n\n#### [link](https://material.angular.io/cdk/stepper/overview\\#using-a-single-form-for-the-entire-stepper)  Using a single form for the entire stepper\n\nWhen using a single form for the stepper, any intermediate next/previous buttons within the steps\nmust be set to `type=\"button\"` in order to prevent submission of the form before all steps are\ncomplete.\n\n#### [link](https://material.angular.io/cdk/stepper/overview\\#using-a-form-for-each-individual-step)  Using a form for each individual step\n\nWhen using a form for each step, the workflow is advanced whenever one of the forms is submitted.\n\n### [link](https://material.angular.io/cdk/stepper/overview\\#types-of-steps)  Types of steps\n\n#### [link](https://material.angular.io/cdk/stepper/overview\\#optional-step)  Optional step\n\nIf completion of a step in linear stepper is not required, then the `optional` attribute can be set\non `CdkStep` in a `linear` stepper.\n\n#### [link](https://material.angular.io/cdk/stepper/overview\\#editable-step)  Editable step\n\nBy default, steps are editable, which means users can return to previously completed steps and\nedit their responses. `editable=\"false\"` can be set on `CdkStep` to change the default.\n\n#### [link](https://material.angular.io/cdk/stepper/overview\\#completed-step)  Completed step\n\nBy default, the `completed` attribute of a step returns `true` if the step is valid (in case of\nlinear stepper) and the user has interacted with the step. The user, however, can also override\nthis default `completed` behavior by setting the `completed` attribute as needed.\n\n### [link](https://material.angular.io/cdk/stepper/overview\\#stepper-buttons)  Stepper buttons\n\nThere are two button directives to support navigation between different steps:\n`CdkStepperNext` and `CdkStepperPrevious`. When placed inside a step, these will automatically\nadd click handlers to advance or rewind the workflow, respectively.\n\n### [link](https://material.angular.io/cdk/stepper/overview\\#resetting-a-stepper)  Resetting a stepper\n\nIf you want to reset a stepper to its initial state, you can use the `reset` method. Note that\nresetting it will call `reset` on the underlying form control which clears the value.\n\n### [link](https://material.angular.io/cdk/stepper/overview\\#keyboard-interaction)  Keyboard interaction\n\n| Keyboard shortcut | Action |\n| --- | --- |\n| `Left Arrow` | Focus the previous step header. |\n| `Right Arrow` | Focus the next step header. |\n| `Enter` | Select the focused step. |\n| `Space` | Select the focused step. |\n\n### [link](https://material.angular.io/cdk/stepper/overview\\#accessibility)  Accessibility\n\nApart from the built-in keyboard support, the stepper doesn't apply any treatment. When implementing\nyour own component, it is recommended that the stepper is treated as a tabbed view for accessibility\npurposes by giving it a `role=\"tablist\"`. The header of step that can be clicked to select the step\nshould be given `role=\"tab\"`, and the content that can be expanded upon selection should be given\n`role=\"tabpanel\"`. Furthermore, the step header should have an `aria-selected` attribute that\nreflects its selected state.\n\nYou can refer to the [Angular Material stepper](https://github.com/angular/components/tree/main/src/material/stepper) as an example of an accessible implementation.\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation",
  "title": "Stepper | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/cdk/stepper/overview"
}