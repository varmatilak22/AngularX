{
  "content": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\nAPI for a11y\n\n## API reference for Angular CDK a11y\n\n`\n          import {A11yModule} from '@angular/cdk/a11y';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/cdk/a11y/api\\#services)  Services\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#InputModalityDetector) `InputModalityDetector`\n\nService that detects the user's input modality.\n\nThis service does not update the input modality when a user navigates with a screen reader\n(e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\ncursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\nfire as expected in these modes) but is also arguably the correct behavior. Navigating with a\nscreen reader is akin to visually scanning a page, and should not be interpreted as actual user\ninput interaction.\n\nWhen a user is not navigating but _interacting_ with a screen reader, this service attempts to\nupdate the input modality to keyboard, but in general this service's behavior is largely\nundefined.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `modalityChanged: Observable<InputModality>` | Emits when the input modality changes. |\n| `modalityDetected: Observable<InputModality>` | Emits whenever an input modality is detected. |\n| `mostRecentModality: InputModality` | The most recently detected input modality. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#HighContrastModeDetector) `HighContrastModeDetector`\n\nService to determine whether the browser is currently in a high-contrast-mode environment.\n\nMicrosoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\nchanges the appearance of all applications, including web applications, to dramatically increase\ncontrast.\n\nIE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\nMode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\nbrowser extension.\n\n##### Methods\n\n| getHighContrastMode |\n| --- |\n| Gets the current high-contrast-mode for the page. |\n| Returns |\n| --- |\n| `HighContrastMode` |  |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#AriaDescriber) `AriaDescriber`\n\nUtility that creates visually hidden elements with a message content. Useful for elements that\nwant to use aria-describedby to further describe themselves without adding additional visual\ncontent.\n\n##### Methods\n\n| describe |\n| --- |\n| Adds to the host element an aria-describedby reference to a hidden element that contains<br>the message. If the same message has already been registered, then it will reuse the created<br>message element. |\n| Parameters |\n| --- |\n| hostElement<br> `Element` |  |\n| message<br> `string` |  |\n| role?<br> `string` |  |\n\n| describe |\n| --- |\n| Adds to the host element an aria-describedby reference to an already-existing message element. |\n| Parameters |\n| --- |\n| hostElement<br> `Element` |  |\n| message<br> `HTMLElement` |  |\n\n| removeDescription |\n| --- |\n| Parameters |\n| --- |\n| hostElement<br> `Element` |  |\n| message<br> `string | HTMLElement` |  |\n| role?<br> `string` |  |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#ConfigurableFocusTrapFactory) `ConfigurableFocusTrapFactory`\n\nFactory that allows easy instantiation of configurable focus traps.\n\n##### Methods\n\n| create |\n| --- |\n| Creates a focus-trapped region around the given element. |\n| Parameters |\n| --- |\n| element<br> `HTMLElement` | The element around which focus will be trapped. |\n| config?<br> `ConfigurableFocusTrapConfig` | The focus trap configuration. |\n| Returns |\n| --- |\n| `ConfigurableFocusTrap` | The created focus trap instance. |\n\n| Deprecated<br> <br>create |\n| --- |\n| Parameters |\n| --- |\n| element<br> `HTMLElement` |  |\n| deferCaptureElements<br> `boolean` |  |\n| Returns |\n| --- |\n| `ConfigurableFocusTrap` |  |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#FocusTrapFactory) `FocusTrapFactory`\n\nFactory that allows easy instantiation of focus traps.\n\n##### Methods\n\n| create |\n| --- |\n| Creates a focus-trapped region around the given element. |\n| Parameters |\n| --- |\n| element<br> `HTMLElement` | The element around which focus will be trapped. |\n| deferCaptureElements<br> `boolean = false` | Defers the creation of focus-capturing elements to be done<br>manually by the user. |\n| Returns |\n| --- |\n| `FocusTrap` | The created focus trap instance. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#InteractivityChecker) `InteractivityChecker`\n\nUtility for checking the interactivity of an element, such as whether it is focusable or\ntabbable.\n\n##### Methods\n\n| isDisabled |\n| --- |\n| Gets whether an element is disabled. |\n| Parameters |\n| --- |\n| element<br> `HTMLElement` | Element to be checked. |\n| Returns |\n| --- |\n| `boolean` | Whether the element is disabled. |\n\n| isFocusable |\n| --- |\n| Gets whether an element can be focused by the user. |\n| Parameters |\n| --- |\n| element<br> `HTMLElement` | Element to be checked. |\n| config?<br> `IsFocusableConfig` | The config object with options to customize this method's behavior |\n| Returns |\n| --- |\n| `boolean` | Whether the element is focusable. |\n\n| isTabbable |\n| --- |\n| Gets whether an element can be reached via Tab key.<br>Assumes that the element has already been checked with isFocusable. |\n| Parameters |\n| --- |\n| element<br> `HTMLElement` | Element to be checked. |\n| Returns |\n| --- |\n| `boolean` | Whether the element is tabbable. |\n\n| isVisible |\n| --- |\n| Gets whether an element is visible for the purposes of interactivity.<br>This will capture states like `display: none` and `visibility: hidden`, but not things like<br>being clipped by an `overflow: hidden` parent or being outside the viewport. |\n| Parameters |\n| --- |\n| element<br> `HTMLElement` |  |\n| Returns |\n| --- |\n| `boolean` | Whether the element is visible. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#LiveAnnouncer) `LiveAnnouncer`\n\n##### Methods\n\n| async<br> <br>announce |\n| --- |\n| Announces a message to screen readers. |\n| Parameters |\n| --- |\n| message<br> `string` | Message to be announced to the screen reader. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that will be resolved when the message is added to the DOM. |\n\n| async<br> <br>announce |\n| --- |\n| Announces a message to screen readers. |\n| Parameters |\n| --- |\n| message<br> `string` | Message to be announced to the screen reader. |\n| politeness?<br> `AriaLivePoliteness` | The politeness of the announcer element. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that will be resolved when the message is added to the DOM. |\n\n| async<br> <br>announce |\n| --- |\n| Announces a message to screen readers. |\n| Parameters |\n| --- |\n| message<br> `string` | Message to be announced to the screen reader. |\n| duration?<br> `number` | Time in milliseconds after which to clear out the announcer element. Note<br>that this takes effect after the message has been added to the DOM, which can be up to<br>100ms after `announce` has been called. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that will be resolved when the message is added to the DOM. |\n\n| async<br> <br>announce |\n| --- |\n| Announces a message to screen readers. |\n| Parameters |\n| --- |\n| message<br> `string` | Message to be announced to the screen reader. |\n| politeness?<br> `AriaLivePoliteness` | The politeness of the announcer element. |\n| duration?<br> `number` | Time in milliseconds after which to clear out the announcer element. Note<br>that this takes effect after the message has been added to the DOM, which can be up to<br>100ms after `announce` has been called. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that will be resolved when the message is added to the DOM. |\n\n| clear |\n| --- |\n| Clears the current text from the announcer element. Can be used to prevent<br>screen readers from reading the text out again while the user is going<br>through the page landmarks. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#FocusMonitor) `FocusMonitor`\n\nMonitors mouse and keyboard events to determine the cause of focus events.\n\n##### Methods\n\n| focusVia |\n| --- |\n| Focuses the element via the specified focus origin. |\n| Parameters |\n| --- |\n| element<br> `HTMLElement` | Element to focus. |\n| origin<br> `FocusOrigin` | Focus origin. |\n| options?<br> `FocusOptions` | Options that can be used to configure the focus behavior. |\n\n| focusVia |\n| --- |\n| Focuses the element via the specified focus origin. |\n| Parameters |\n| --- |\n| element<br> `ElementRef<HTMLElement>` | Element to focus. |\n| origin<br> `FocusOrigin` | Focus origin. |\n| options?<br> `FocusOptions` | Options that can be used to configure the focus behavior. |\n\n| monitor |\n| --- |\n| Monitors focus on an element and applies appropriate CSS classes. |\n| Parameters |\n| --- |\n| element<br> `HTMLElement` | The element to monitor |\n| checkChildren?<br> `boolean` | Whether to count the element as focused when its children are focused. |\n| Returns |\n| --- |\n| `Observable<FocusOrigin>` | An observable that emits when the focus state of the element changes.<br>When the element is blurred, null will be emitted. |\n\n| monitor |\n| --- |\n| Monitors focus on an element and applies appropriate CSS classes. |\n| Parameters |\n| --- |\n| element<br> `ElementRef<HTMLElement>` | The element to monitor |\n| checkChildren?<br> `boolean` | Whether to count the element as focused when its children are focused. |\n| Returns |\n| --- |\n| `Observable<FocusOrigin>` | An observable that emits when the focus state of the element changes.<br>When the element is blurred, null will be emitted. |\n\n| stopMonitoring |\n| --- |\n| Parameters |\n| --- |\n| element<br> `HTMLElement | ElementRef<HTMLElement>` |  |\n\n### [link](https://material.angular.io/cdk/a11y/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#CdkTrapFocus) `CdkTrapFocus`\n\nDirective for trapping focus within a region.\n\nSelector:\\[cdkTrapFocus\\]\n\nExported as:cdkTrapFocus\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ alias: 'cdkTrapFocusAutoCapture', transform: booleanAttribute })<br> <br>`autoCapture: boolean` | Whether the directive should automatically move focus into the trapped region upon<br>initialization and return focus to the previous activeElement upon destruction. |\n| @Input({ alias: 'cdkTrapFocus', transform: booleanAttribute })<br> <br>`enabled: boolean` | Whether the focus trap is active. |\n| `focusTrap: FocusTrap` | Underlying FocusTrap instance. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#CdkAriaLive) `CdkAriaLive`\n\nA directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\nwith a wider range of browsers and screen readers.\n\nSelector:\\[cdkAriaLive\\]\n\nExported as:cdkAriaLive\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('cdkAriaLiveDuration')<br> <br>`duration: number` | Time in milliseconds after which to clear out the announcer element. |\n| @Input('cdkAriaLive')<br> <br>`politeness: AriaLivePoliteness` | The aria-live politeness level to use when announcing messages. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#CdkMonitorFocus) `CdkMonitorFocus`\n\nDirective that determines how a particular element was focused (via keyboard, mouse, touch, or\nprogrammatically) and adds corresponding classes to the element.\n\nThere are two variants of this directive:\n\n1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\nfocused.\n2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n\nSelector:\\[cdkMonitorElementFocus\\]\\[cdkMonitorSubtreeFocus\\]\n\nExported as:cdkMonitorFocus\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Output()<br>`cdkFocusChange: EventEmitter<FocusOrigin>` |  |\n| `focusOrigin: FocusOrigin` |  |\n\n### [link](https://material.angular.io/cdk/a11y/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#ActiveDescendantKeyManager) `ActiveDescendantKeyManager`extends [ListKeyManager](https://material.angular.io/cdk/a11y/cdk/a11y/api\\#ListKeyManager)\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `activeItem: T | null` | The active item. |\n| `activeItemIndex: number | null` | Index of the currently active item. |\n| `change: Subject<number>` | Stream that emits whenever the active item of the list manager changes. |\n| `tabOut: Subject<void>` | Stream that emits any time the TAB key is pressed, so components can react<br>when focus is shifted off of the list. |\n\n##### Methods\n\n| cancelTypeahead |\n| --- |\n| Cancels the current typeahead sequence. |\n| Returns |\n| --- |\n| `this` |  |\n\n| destroy |\n| --- |\n| Cleans up the key manager. |\n\n| isTyping |\n| --- |\n| Gets whether the user is currently typing into the manager using the typeahead feature. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| onKeydown |\n| --- |\n| Sets the active item depending on the key event passed in. |\n| Parameters |\n| --- |\n| event<br> `KeyboardEvent` | Keyboard event to be used for determining which element should be active. |\n\n| setActiveItem |\n| --- |\n| Sets the active item to the item at the specified index and adds the<br>active styles to the newly active item. Also removes active styles<br>from the previously active item. |\n| Parameters |\n| --- |\n| index<br> `number` | Index of the item to be set as active. |\n\n| setActiveItem |\n| --- |\n| Sets the active item to the item to the specified one and adds the<br>active styles to the it. Also removes active styles from the<br>previously active item. |\n| Parameters |\n| --- |\n| item<br> `T` | Item to be set as active. |\n\n| setFirstItemActive |\n| --- |\n| Sets the active item to the first enabled item in the list. |\n\n| setLastItemActive |\n| --- |\n| Sets the active item to the last enabled item in the list. |\n\n| setNextItemActive |\n| --- |\n| Sets the active item to the next enabled item in the list. |\n\n| setPreviousItemActive |\n| --- |\n| Sets the active item to a previous enabled item in the list. |\n\n| skipPredicate |\n| --- |\n| Sets the predicate function that determines which items should be skipped by the<br>list key manager. |\n| Parameters |\n| --- |\n| predicate<br> `(item: T) => boolean` | Function that determines whether the given item should be skipped. |\n| Returns |\n| --- |\n| `this` |  |\n\n| updateActiveItem |\n| --- |\n| Allows setting the active without any other effects. |\n| Parameters |\n| --- |\n| index<br> `number` | Index of the item to be set as active. |\n\n| updateActiveItem |\n| --- |\n| Allows setting the active item without any other effects. |\n| Parameters |\n| --- |\n| item<br> `T` | Item to be set as active. |\n\n| withAllowedModifierKeys |\n| --- |\n| Modifier keys which are allowed to be held down and whose default actions will be prevented<br>as the user is pressing the arrow keys. Defaults to not allowing any modifier keys. |\n| Parameters |\n| --- |\n| keys<br> `ListKeyManagerModifierKey[]` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| withHomeAndEnd |\n| --- |\n| Configures the key manager to activate the first and last items<br>respectively when the Home or End key is pressed. |\n| Parameters |\n| --- |\n| enabled<br> `boolean = true` | Whether pressing the Home or End key activates the first/last item. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withHorizontalOrientation |\n| --- |\n| Configures the key manager to move the selection horizontally.<br>Passing in `null` will disable horizontal movement. |\n| Parameters |\n| --- |\n| direction<br> `\"ltr\" | \"rtl\"` | Direction in which the selection can be moved. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withPageUpDown |\n| --- |\n| Configures the key manager to activate every 10th, configured or first/last element in up/down direction<br>respectively when the Page-Up or Page-Down key is pressed. |\n| Parameters |\n| --- |\n| enabled<br> `boolean = true` | Whether pressing the Page-Up or Page-Down key activates the first/last item. |\n| delta<br> `number = 10` | Whether pressing the Home or End key activates the first/last item. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withTypeAhead |\n| --- |\n| Turns on typeahead mode which allows users to set the active item by typing. |\n| Parameters |\n| --- |\n| debounceInterval<br> `number = 200` | Time to wait after the last keystroke before setting the active item. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withVerticalOrientation |\n| --- |\n| Configures whether the key manager should be able to move the selection vertically. |\n| Parameters |\n| --- |\n| enabled<br> `boolean = true` | Whether vertical selection should be enabled. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withWrap |\n| --- |\n| Configures wrapping mode, which determines whether the active item will wrap to<br>the other end of list when there are no more items in the given direction. |\n| Parameters |\n| --- |\n| shouldWrap<br> `boolean = true` | Whether the list should wrap when reaching the end. |\n| Returns |\n| --- |\n| `this` |  |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#FocusKeyManager) `FocusKeyManager`extends [ListKeyManager](https://material.angular.io/cdk/a11y/cdk/a11y/api\\#ListKeyManager)\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `activeItem: T | null` | The active item. |\n| `activeItemIndex: number | null` | Index of the currently active item. |\n| `change: Subject<number>` | Stream that emits whenever the active item of the list manager changes. |\n| `tabOut: Subject<void>` | Stream that emits any time the TAB key is pressed, so components can react<br>when focus is shifted off of the list. |\n\n##### Methods\n\n| cancelTypeahead |\n| --- |\n| Cancels the current typeahead sequence. |\n| Returns |\n| --- |\n| `this` |  |\n\n| destroy |\n| --- |\n| Cleans up the key manager. |\n\n| isTyping |\n| --- |\n| Gets whether the user is currently typing into the manager using the typeahead feature. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| onKeydown |\n| --- |\n| Sets the active item depending on the key event passed in. |\n| Parameters |\n| --- |\n| event<br> `KeyboardEvent` | Keyboard event to be used for determining which element should be active. |\n\n| setActiveItem |\n| --- |\n| Sets the active item to the item at the specified<br>index and focuses the newly active item. |\n| Parameters |\n| --- |\n| index<br> `number` | Index of the item to be set as active. |\n\n| setActiveItem |\n| --- |\n| Sets the active item to the item that is specified and focuses it. |\n| Parameters |\n| --- |\n| item<br> `T` | Item to be set as active. |\n\n| setFirstItemActive |\n| --- |\n| Sets the active item to the first enabled item in the list. |\n\n| setFocusOrigin |\n| --- |\n| Sets the focus origin that will be passed in to the items for any subsequent `focus` calls. |\n| Parameters |\n| --- |\n| origin<br> `FocusOrigin` | Focus origin to be used when focusing items. |\n| Returns |\n| --- |\n| `this` |  |\n\n| setLastItemActive |\n| --- |\n| Sets the active item to the last enabled item in the list. |\n\n| setNextItemActive |\n| --- |\n| Sets the active item to the next enabled item in the list. |\n\n| setPreviousItemActive |\n| --- |\n| Sets the active item to a previous enabled item in the list. |\n\n| skipPredicate |\n| --- |\n| Sets the predicate function that determines which items should be skipped by the<br>list key manager. |\n| Parameters |\n| --- |\n| predicate<br> `(item: T) => boolean` | Function that determines whether the given item should be skipped. |\n| Returns |\n| --- |\n| `this` |  |\n\n| updateActiveItem |\n| --- |\n| Allows setting the active without any other effects. |\n| Parameters |\n| --- |\n| index<br> `number` | Index of the item to be set as active. |\n\n| updateActiveItem |\n| --- |\n| Allows setting the active item without any other effects. |\n| Parameters |\n| --- |\n| item<br> `T` | Item to be set as active. |\n\n| withAllowedModifierKeys |\n| --- |\n| Modifier keys which are allowed to be held down and whose default actions will be prevented<br>as the user is pressing the arrow keys. Defaults to not allowing any modifier keys. |\n| Parameters |\n| --- |\n| keys<br> `ListKeyManagerModifierKey[]` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| withHomeAndEnd |\n| --- |\n| Configures the key manager to activate the first and last items<br>respectively when the Home or End key is pressed. |\n| Parameters |\n| --- |\n| enabled<br> `boolean = true` | Whether pressing the Home or End key activates the first/last item. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withHorizontalOrientation |\n| --- |\n| Configures the key manager to move the selection horizontally.<br>Passing in `null` will disable horizontal movement. |\n| Parameters |\n| --- |\n| direction<br> `\"ltr\" | \"rtl\"` | Direction in which the selection can be moved. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withPageUpDown |\n| --- |\n| Configures the key manager to activate every 10th, configured or first/last element in up/down direction<br>respectively when the Page-Up or Page-Down key is pressed. |\n| Parameters |\n| --- |\n| enabled<br> `boolean = true` | Whether pressing the Page-Up or Page-Down key activates the first/last item. |\n| delta<br> `number = 10` | Whether pressing the Home or End key activates the first/last item. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withTypeAhead |\n| --- |\n| Turns on typeahead mode which allows users to set the active item by typing. |\n| Parameters |\n| --- |\n| debounceInterval<br> `number = 200` | Time to wait after the last keystroke before setting the active item. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withVerticalOrientation |\n| --- |\n| Configures whether the key manager should be able to move the selection vertically. |\n| Parameters |\n| --- |\n| enabled<br> `boolean = true` | Whether vertical selection should be enabled. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withWrap |\n| --- |\n| Configures wrapping mode, which determines whether the active item will wrap to<br>the other end of list when there are no more items in the given direction. |\n| Parameters |\n| --- |\n| shouldWrap<br> `boolean = true` | Whether the list should wrap when reaching the end. |\n| Returns |\n| --- |\n| `this` |  |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#ListKeyManager) `ListKeyManager`\n\nThis class manages keyboard events for selectable lists. If you pass it a query list\nof items, it will set the active item correctly when arrow events occur.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `activeItem: T | null` | The active item. |\n| `activeItemIndex: number | null` | Index of the currently active item. |\n| `change: Subject<number>` | Stream that emits whenever the active item of the list manager changes. |\n| `tabOut: Subject<void>` | Stream that emits any time the TAB key is pressed, so components can react<br>when focus is shifted off of the list. |\n\n##### Methods\n\n| cancelTypeahead |\n| --- |\n| Cancels the current typeahead sequence. |\n| Returns |\n| --- |\n| `this` |  |\n\n| destroy |\n| --- |\n| Cleans up the key manager. |\n\n| isTyping |\n| --- |\n| Gets whether the user is currently typing into the manager using the typeahead feature. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| onKeydown |\n| --- |\n| Sets the active item depending on the key event passed in. |\n| Parameters |\n| --- |\n| event<br> `KeyboardEvent` | Keyboard event to be used for determining which element should be active. |\n\n| setActiveItem |\n| --- |\n| Sets the active item to the item at the index specified. |\n| Parameters |\n| --- |\n| index<br> `number` | The index of the item to be set as active. |\n\n| setActiveItem |\n| --- |\n| Sets the active item to the specified item. |\n| Parameters |\n| --- |\n| item<br> `T` | The item to be set as active. |\n\n| setFirstItemActive |\n| --- |\n| Sets the active item to the first enabled item in the list. |\n\n| setLastItemActive |\n| --- |\n| Sets the active item to the last enabled item in the list. |\n\n| setNextItemActive |\n| --- |\n| Sets the active item to the next enabled item in the list. |\n\n| setPreviousItemActive |\n| --- |\n| Sets the active item to a previous enabled item in the list. |\n\n| skipPredicate |\n| --- |\n| Sets the predicate function that determines which items should be skipped by the<br>list key manager. |\n| Parameters |\n| --- |\n| predicate<br> `(item: T) => boolean` | Function that determines whether the given item should be skipped. |\n| Returns |\n| --- |\n| `this` |  |\n\n| updateActiveItem |\n| --- |\n| Allows setting the active without any other effects. |\n| Parameters |\n| --- |\n| index<br> `number` | Index of the item to be set as active. |\n\n| updateActiveItem |\n| --- |\n| Allows setting the active item without any other effects. |\n| Parameters |\n| --- |\n| item<br> `T` | Item to be set as active. |\n\n| withAllowedModifierKeys |\n| --- |\n| Modifier keys which are allowed to be held down and whose default actions will be prevented<br>as the user is pressing the arrow keys. Defaults to not allowing any modifier keys. |\n| Parameters |\n| --- |\n| keys<br> `ListKeyManagerModifierKey[]` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| withHomeAndEnd |\n| --- |\n| Configures the key manager to activate the first and last items<br>respectively when the Home or End key is pressed. |\n| Parameters |\n| --- |\n| enabled<br> `boolean = true` | Whether pressing the Home or End key activates the first/last item. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withHorizontalOrientation |\n| --- |\n| Configures the key manager to move the selection horizontally.<br>Passing in `null` will disable horizontal movement. |\n| Parameters |\n| --- |\n| direction<br> `\"ltr\" | \"rtl\"` | Direction in which the selection can be moved. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withPageUpDown |\n| --- |\n| Configures the key manager to activate every 10th, configured or first/last element in up/down direction<br>respectively when the Page-Up or Page-Down key is pressed. |\n| Parameters |\n| --- |\n| enabled<br> `boolean = true` | Whether pressing the Page-Up or Page-Down key activates the first/last item. |\n| delta<br> `number = 10` | Whether pressing the Home or End key activates the first/last item. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withTypeAhead |\n| --- |\n| Turns on typeahead mode which allows users to set the active item by typing. |\n| Parameters |\n| --- |\n| debounceInterval<br> `number = 200` | Time to wait after the last keystroke before setting the active item. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withVerticalOrientation |\n| --- |\n| Configures whether the key manager should be able to move the selection vertically. |\n| Parameters |\n| --- |\n| enabled<br> `boolean = true` | Whether vertical selection should be enabled. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withWrap |\n| --- |\n| Configures wrapping mode, which determines whether the active item will wrap to<br>the other end of list when there are no more items in the given direction. |\n| Parameters |\n| --- |\n| shouldWrap<br> `boolean = true` | Whether the list should wrap when reaching the end. |\n| Returns |\n| --- |\n| `this` |  |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#TreeKeyManager) `TreeKeyManager`\n\nThis class manages keyboard events for trees. If you pass it a QueryList or other list of tree\nitems, it will set the active item, focus, handle expansion and typeahead correctly when\nkeyboard events occur.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `change: Subject<T | null>` | Stream that emits any time the focused item changes. |\n\n##### Methods\n\n| destroy |\n| --- |\n| Cleans up the key manager. |\n\n| focusItem |\n| --- |\n| Focus the provided item by index. |\n| Parameters |\n| --- |\n| index<br> `number` | The index of the item to focus. |\n| options?<br> `{ emitChangeEvent?: boolean; }` | Additional focusing options. |\n\n| focusItem |\n| --- |\n| Parameters |\n| --- |\n| item<br> `T` |  |\n| options?<br> `{ emitChangeEvent?: boolean; }` |  |\n\n| focusItem |\n| --- |\n| Parameters |\n| --- |\n| itemOrIndex<br> `number | T` |  |\n| options?<br> `{ emitChangeEvent?: boolean; }` |  |\n\n| getActiveItem |\n| --- |\n| The currently active item. |\n| Returns |\n| --- |\n| `T | null` |  |\n\n| getActiveItemIndex |\n| --- |\n| Index of the currently active item. |\n| Returns |\n| --- |\n| `number | null` |  |\n\n| onKeydown |\n| --- |\n| Handles a keyboard event on the tree. |\n| Parameters |\n| --- |\n| event<br> `KeyboardEvent` | Keyboard event that represents the user interaction with the tree. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#ConfigurableFocusTrap) `ConfigurableFocusTrap`extends [FocusTrap](https://material.angular.io/cdk/a11y/cdk/a11y/api\\#FocusTrap)\n\nClass that allows for trapping focus within a DOM element.\n\nThis class uses a strategy pattern that determines how it traps focus.\nSee FocusTrapInertStrategy.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `enabled: boolean` | Whether the FocusTrap is enabled. |\n\n##### Methods\n\n| attachAnchors |\n| --- |\n| Inserts the anchors into the DOM. This is usually done automatically<br>in the constructor, but can be deferred for cases like directives with `*ngIf`. |\n| Returns |\n| --- |\n| `boolean` | Whether the focus trap managed to attach successfully. This may not be the case<br>if the target element isn't currently in the DOM. |\n\n| destroy |\n| --- |\n| Notifies the FocusTrapManager that this FocusTrap will be destroyed. |\n\n| focusFirstTabbableElement |\n| --- |\n| Focuses the first tabbable element within the focus trap region. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| Returns |\n| --- |\n| `boolean` | Whether focus was moved successfully. |\n\n| async<br> <br>focusFirstTabbableElementWhenReady |\n| --- |\n| Waits for the zone to stabilize, then focuses<br>the first tabbable element within the focus trap region. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` | Returns a promise that resolves with a boolean, depending<br>on whether focus was moved successfully. |\n\n| focusInitialElement |\n| --- |\n| Focuses the element that should be focused when the focus trap is initialized. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| Returns |\n| --- |\n| `boolean` | Whether focus was moved successfully. |\n\n| async<br> <br>focusInitialElementWhenReady |\n| --- |\n| Waits for the zone to stabilize, then focuses the first tabbable element. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` | Returns a promise that resolves with a boolean, depending<br>on whether focus was moved successfully. |\n\n| focusLastTabbableElement |\n| --- |\n| Focuses the last tabbable element within the focus trap region. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| Returns |\n| --- |\n| `boolean` | Whether focus was moved successfully. |\n\n| async<br> <br>focusLastTabbableElementWhenReady |\n| --- |\n| Waits for the zone to stabilize, then focuses<br>the last tabbable element within the focus trap region. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` | Returns a promise that resolves with a boolean, depending<br>on whether focus was moved successfully. |\n\n| hasAttached |\n| --- |\n| Checks whether the focus trap has successfully been attached. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#EventListenerFocusTrapInertStrategy) `EventListenerFocusTrapInertStrategy`\n\nLightweight FocusTrapInertStrategy that adds a document focus event\nlistener to redirect focus back inside the FocusTrap.\n\n##### Methods\n\n| allowFocus |\n| --- |\n| Removes the event listener added in preventFocus. |\n| Parameters |\n| --- |\n| focusTrap<br> `ConfigurableFocusTrap` |  |\n\n| preventFocus |\n| --- |\n| Adds a document event listener that keeps focus inside the FocusTrap. |\n| Parameters |\n| --- |\n| focusTrap<br> `ConfigurableFocusTrap` |  |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#FocusTrap) `FocusTrap`\n\nClass that allows for trapping focus within a DOM element.\n\nThis class currently uses a relatively simple approach to focus trapping.\nIt assumes that the tab order is the same as DOM order, which is not necessarily true.\nThings like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `enabled: boolean` | Whether the focus trap is active. |\n| `endAnchorListener: () => this.focusFirstTabbableElement()` |  |\n| `startAnchorListener: () => this.focusLastTabbableElement()` |  |\n\n##### Methods\n\n| attachAnchors |\n| --- |\n| Inserts the anchors into the DOM. This is usually done automatically<br>in the constructor, but can be deferred for cases like directives with `*ngIf`. |\n| Returns |\n| --- |\n| `boolean` | Whether the focus trap managed to attach successfully. This may not be the case<br>if the target element isn't currently in the DOM. |\n\n| destroy |\n| --- |\n| Destroys the focus trap by cleaning up the anchors. |\n\n| focusFirstTabbableElement |\n| --- |\n| Focuses the first tabbable element within the focus trap region. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| Returns |\n| --- |\n| `boolean` | Whether focus was moved successfully. |\n\n| async<br> <br>focusFirstTabbableElementWhenReady |\n| --- |\n| Waits for the zone to stabilize, then focuses<br>the first tabbable element within the focus trap region. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` | Returns a promise that resolves with a boolean, depending<br>on whether focus was moved successfully. |\n\n| focusInitialElement |\n| --- |\n| Focuses the element that should be focused when the focus trap is initialized. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| Returns |\n| --- |\n| `boolean` | Whether focus was moved successfully. |\n\n| async<br> <br>focusInitialElementWhenReady |\n| --- |\n| Waits for the zone to stabilize, then focuses the first tabbable element. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` | Returns a promise that resolves with a boolean, depending<br>on whether focus was moved successfully. |\n\n| focusLastTabbableElement |\n| --- |\n| Focuses the last tabbable element within the focus trap region. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| Returns |\n| --- |\n| `boolean` | Whether focus was moved successfully. |\n\n| async<br> <br>focusLastTabbableElementWhenReady |\n| --- |\n| Waits for the zone to stabilize, then focuses<br>the last tabbable element within the focus trap region. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` | Returns a promise that resolves with a boolean, depending<br>on whether focus was moved successfully. |\n\n| hasAttached |\n| --- |\n| Checks whether the focus trap has successfully been attached. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| toggleAnchors |\n| --- |\n| Toggles the `tabindex` of both anchors to either trap Tab focus or allow it to escape. |\n| Parameters |\n| --- |\n| enabled:<br> `` | Whether the anchors should trap Tab. |\n| enabled<br> `boolean` |  |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#IsFocusableConfig) `IsFocusableConfig`\n\nConfiguration for the isFocusable method.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `ignoreVisibility: boolean` | Whether to count an element as focusable even if it is not currently visible. |\n\n### [link](https://material.angular.io/cdk/a11y/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#InputModalityDetectorOptions) `InputModalityDetectorOptions`\n\nOptions to configure the behavior of the InputModalityDetector.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `ignoreKeys: number[]` | Keys to ignore when detecting keyboard input modality. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#RegisteredMessage) `RegisteredMessage`\n\nInterface used to register message elements and keep a count of how many registrations have\nthe same message and the reference to the message element used for the `aria-describedby`.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `messageElement: Element` | The element containing the message. |\n| `referenceCount: number` | The number of elements that reference this message element via `aria-describedby`. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#Highlightable) `Highlightable`\n\nThis is the interface for highlightable items (used by the ActiveDescendantKeyManager).\nEach item must know how to style itself as active or inactive and whether or not it is\ncurrently disabled.\n\n##### Methods\n\n| setActiveStyles |\n| --- |\n| Applies the styles for an active item to this item. |\n\n| setInactiveStyles |\n| --- |\n| Applies the styles for an inactive item to this item. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#FocusableOption) `FocusableOption`\n\nThis is the interface for focusable items (used by the FocusKeyManager).\nEach item must know how to focus itself, whether or not it is currently disabled\nand be able to supply its label.\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the `FocusableOption`. |\n| Parameters |\n| --- |\n| origin?<br> `FocusOrigin` |  |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#ListKeyManagerOption) `ListKeyManagerOption`\n\nThis interface is for items that can be passed to a ListKeyManager.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disabled: boolean` | Whether the option is disabled. |\n\n##### Methods\n\n| getLabel |\n| --- |\n| Gets the label for this option. |\n| Returns |\n| --- |\n| `string` |  |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#TreeKeyManagerItem) `TreeKeyManagerItem`\n\nRepresents an item within a tree that can be passed to a TreeKeyManager.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `isDisabled: (() => boolean) | boolean` | Whether the item is disabled. |\n| `isExpanded: (() => boolean) | boolean` | Determines if the item is currently expanded. |\n\n##### Methods\n\n| activate |\n| --- |\n| Perform the main action (i.e. selection) for this item. |\n\n| collapse |\n| --- |\n| Collapses the item, hiding its children. |\n\n| expand |\n| --- |\n| Expands the item, showing its children. |\n\n| focus |\n| --- |\n| Focuses the item. This should provide some indication to the user that this item is focused. |\n\n| getChildren |\n| --- |\n| Retrieves the children for this item. |\n| Returns |\n| --- |\n| `TreeKeyManagerItem[] | Observable<TreeKeyManagerItem[]>` |  |\n\n| getLabel |\n| --- |\n| The user-facing label for this item. |\n| Returns |\n| --- |\n| `string` |  |\n\n| getParent |\n| --- |\n| Retrieves the parent for this item. This is `null` if there is no parent. |\n| Returns |\n| --- |\n| `TreeKeyManagerItem | null` |  |\n\n| makeFocusable |\n| --- |\n| Sets the item to be focusable without actually focusing it. |\n\n| unfocus |\n| --- |\n| Unfocus the item. This should remove the focus state. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#TreeKeyManagerOptions) `TreeKeyManagerOptions`\n\nConfiguration for the TreeKeyManager.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `horizontalOrientation: 'rtl' | 'ltr'` | The direction in which the tree items are laid out horizontally. This influences which key<br>will be interpreted as expand or collapse. |\n| `shouldActivationFollowFocus: boolean` | If true, then the key manager will call `activate` in addition to calling `focus` when a<br>particular item is focused. |\n| `skipPredicate: (item: T) => boolean` | If provided, navigation \"skips\" over items that pass the given predicate.<br>If the item is to be skipped, predicate function should return false. |\n| `trackBy: (treeItem: T) => unknown` | If provided, determines how the key manager determines if two items are equivalent.<br>It should provide a unique key for each unique tree item. If two tree items are equivalent,<br>then this function should return the same value. |\n| `typeAheadDebounceInterval: true | number` | If a value is provided, enables typeahead mode, which allows users to set the active item<br>by typing the visible label of the item.<br>If a number is provided, this will be the time to wait after the last keystroke before<br>setting the active item. If `true` is provided, the default interval of 200ms will be used. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#TreeKeyManagerStrategy) `TreeKeyManagerStrategy`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `change: Subject<T | null>` | Stream that emits any time the focused item changes. |\n\n##### Methods\n\n| destroy |\n| --- |\n| Cleans up the key manager. |\n\n| focusItem |\n| --- |\n| Focus the provided item by index.<br>Updates the state of the currently active item. Emits to `change` stream if active item<br>Changes. |\n| Parameters |\n| --- |\n| index<br> `number` | The index of the item to focus. |\n| options?<br> `{ emitChangeEvent?: boolean; }` | Additional focusing options. |\n\n| getActiveItem |\n| --- |\n| The currently active item. |\n| Returns |\n| --- |\n| `T | null` |  |\n\n| getActiveItemIndex |\n| --- |\n| Index of the currently active item. |\n| Returns |\n| --- |\n| `number | null` |  |\n\n| onKeydown |\n| --- |\n| Handles a keyboard event on the tree. |\n| Parameters |\n| --- |\n| event<br> `KeyboardEvent` | Keyboard event that represents the user interaction with the tree. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#ConfigurableFocusTrapConfig) `ConfigurableFocusTrapConfig`\n\nOptions for creating a ConfigurableFocusTrap.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `defer: boolean` | Whether to defer the creation of FocusTrap elements to be done manually by the user. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#FocusTrapInertStrategy) `FocusTrapInertStrategy`\n\nA strategy that dictates how FocusTrap should prevent elements\noutside of the FocusTrap from being focused.\n\n##### Methods\n\n| allowFocus |\n| --- |\n| Reverts elements made unfocusable by preventFocus to their previous state. |\n| Parameters |\n| --- |\n| focusTrap<br> `FocusTrap` |  |\n\n| preventFocus |\n| --- |\n| Makes all elements outside focusTrap unfocusable. |\n| Parameters |\n| --- |\n| focusTrap<br> `FocusTrap` |  |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#LiveAnnouncerDefaultOptions) `LiveAnnouncerDefaultOptions`\n\nObject that can be used to configure the default options for the LiveAnnouncer.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `duration: number` | Default duration for the announcement messages. |\n| `politeness: AriaLivePoliteness` | Default politeness for the announcements. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#FocusOptions) `FocusOptions`\n\nCorresponds to the options that can be passed to the native `focus` event.\nvia [https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus)\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `preventScroll: boolean` | Whether the browser should scroll to the element when it is focused. |\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#FocusMonitorOptions) `FocusMonitorOptions`\n\nInjectable service-level options for FocusMonitor.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `detectionMode: FocusMonitorDetectionMode` |  |\n\n### [link](https://material.angular.io/cdk/a11y/api\\#functions)  Functions\n\n| addAriaReferencedId |\n| --- |\n| Adds the given ID to the specified ARIA attribute on an element.<br>Used for attributes such as aria-labelledby, aria-owns, etc. |\n| Parameters |\n| --- |\n| el<br> `Element` |  |\n| attr<br> `` `aria-${string}` `` |  |\n| id<br> `string` |  |\n\n| removeAriaReferencedId |\n| --- |\n| Removes the given ID from the specified ARIA attribute on an element.<br>Used for attributes such as aria-labelledby, aria-owns, etc. |\n| Parameters |\n| --- |\n| el<br> `Element` |  |\n| attr<br> `` `aria-${string}` `` |  |\n| id<br> `string` |  |\n\n| getAriaReferenceIds |\n| --- |\n| Gets the list of IDs referenced by the given ARIA attribute on an element.<br>Used for attributes such as aria-labelledby, aria-owns, etc. |\n| Parameters |\n| --- |\n| el<br> `Element` |  |\n| attr<br> `string` |  |\n| Returns |\n| --- |\n| `string[]` |  |\n\n| isFakeMousedownFromScreenReader |\n| --- |\n| Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. |\n| Parameters |\n| --- |\n| event<br> `MouseEvent` |  |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| isFakeTouchstartFromScreenReader |\n| --- |\n| Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. |\n| Parameters |\n| --- |\n| event<br> `TouchEvent` |  |\n| Returns |\n| --- |\n| `boolean` |  |\n\n### [link](https://material.angular.io/cdk/a11y/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#InputModality) `InputModality`\n\nThe input modalities detected by this service. Null is used if the input modality is unknown.\n\n```docs-markdown-code\ntype InputModality = 'keyboard' | 'mouse' | 'touch' | null;\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#ListKeyManagerModifierKey) `ListKeyManagerModifierKey`\n\nModifier keys handled by the ListKeyManager.\n\n```docs-markdown-code\ntype ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#TreeKeyManagerFactory) `TreeKeyManagerFactory`\n\n```docs-markdown-code\ntype TreeKeyManagerFactory = (items: Observable<T[]> | QueryList<T> | T[], options: TreeKeyManagerOptions<T>) => TreeKeyManagerStrategy<T>;\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#AriaLivePoliteness) `AriaLivePoliteness`\n\nPossible politeness levels.\n\n```docs-markdown-code\ntype AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#FocusOrigin) `FocusOrigin`\n\n```docs-markdown-code\ntype FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n```\n\n### [link](https://material.angular.io/cdk/a11y/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS) `INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS`\n\nDefault options for the InputModalityDetector.\n\nModifier keys are ignored by default (i.e. when pressed won't cause the service to detect\nkeyboard input modality) for two reasons:\n\n1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\nin new tab', and are thus less representative of actual keyboard interaction.\n2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\nconfusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\nthese keys so as to not update the input modality.\n\nNote that we do not by default ignore the right Meta key on Safari because it has the same key\ncode as the ContextMenu key on other browsers. When we switch to using event.key, we can\ndistinguish between the two.\n\n```docs-markdown-code\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS: InputModalityDetectorOptions;\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#INPUT_MODALITY_DETECTOR_OPTIONS) `INPUT_MODALITY_DETECTOR_OPTIONS`\n\nInjectable options for the InputModalityDetector. These are shallowly merged with the default\noptions.\n\n```docs-markdown-code\nconst INPUT_MODALITY_DETECTOR_OPTIONS: InjectionToken<InputModalityDetectorOptions>;\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#MESSAGES_CONTAINER_ID) `MESSAGES_CONTAINER_ID`\n\nDeprecated\n\nID used for the body container where all messages are appended.\n\n```docs-markdown-code\nconst MESSAGES_CONTAINER_ID: \"cdk-describedby-message-container\";\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#CDK_DESCRIBEDBY_ID_PREFIX) `CDK_DESCRIBEDBY_ID_PREFIX`\n\nDeprecated\n\nID prefix used for each created message element.\n\n```docs-markdown-code\nconst CDK_DESCRIBEDBY_ID_PREFIX: \"cdk-describedby-message\";\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#CDK_DESCRIBEDBY_HOST_ATTRIBUTE) `CDK_DESCRIBEDBY_HOST_ATTRIBUTE`\n\nDeprecated\n\nAttribute given to each host element that is described by a message element.\n\n```docs-markdown-code\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE: \"cdk-describedby-host\";\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#TREE_KEY_MANAGER) `TREE_KEY_MANAGER`\n\nInjection token that determines the key manager to use.\n\n```docs-markdown-code\nconst TREE_KEY_MANAGER: InjectionToken<TreeKeyManagerFactory<any>>;\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#FOCUS_TRAP_INERT_STRATEGY) `FOCUS_TRAP_INERT_STRATEGY`\n\nThe injection token used to specify the inert strategy.\n\n```docs-markdown-code\nconst FOCUS_TRAP_INERT_STRATEGY: InjectionToken<FocusTrapInertStrategy>;\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#LIVE_ANNOUNCER_ELEMENT_TOKEN) `LIVE_ANNOUNCER_ELEMENT_TOKEN`\n\n```docs-markdown-code\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN: InjectionToken<HTMLElement>;\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#LIVE_ANNOUNCER_DEFAULT_OPTIONS) `LIVE_ANNOUNCER_DEFAULT_OPTIONS`\n\nInjection token that can be used to configure the default options for the LiveAnnouncer.\n\n```docs-markdown-code\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS: InjectionToken<LiveAnnouncerDefaultOptions>;\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/api\\#FOCUS_MONITOR_DEFAULT_OPTIONS) `FOCUS_MONITOR_DEFAULT_OPTIONS`\n\nInjectionToken for FocusMonitorOptions.\n\n```docs-markdown-code\nconst FOCUS_MONITOR_DEFAULT_OPTIONS: InjectionToken<FocusMonitorOptions>;\n\n```\n\nAccessibility\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nPass a config object instead of the \\`deferCaptureElements\\` flag. Will be removed in v11.0.0 or later.\n\nNo longer being used. To be removed. Will be removed in v14.0.0 or later.\n\nTo be turned into a private variable. Will be removed in v14.0.0 or later.\n\nCopy import to the clipboard",
  "title": "Accessibility | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/cdk/a11y/api"
}