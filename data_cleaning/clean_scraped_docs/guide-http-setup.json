{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backHTTP Client\n  - [Overview](https://angular.dev/guide/http)\n  - [Setting up HttpClient](https://angular.dev/guide/http/setup)\n  - [Making requests](https://angular.dev/guide/http/making-requests)\n  - [Intercepting requests and responses](https://angular.dev/guide/http/interceptors)\n  - [Testing](https://angular.dev/guide/http/testing)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nBefore you can use `HttpClient` in your app, you must configure it using [dependency injection](https://angular.dev/guide/http/guide/di).\n\n## [Providing `HttpClient` through dependency injection](https://angular.dev/guide/http/setup\\#providing-httpclient-through-dependency-injection)\n\n`HttpClient` is provided using the `provideHttpClient` helper function, which most apps include in the application `providers` in `app.config.ts`.\n\n```\n      export const appConfig: ApplicationConfig = {  providers: [    provideHttpClient(),  ]};\n\n```\n\ncheck\n\nIf your app is using NgModule-based bootstrap instead, you can include `provideHttpClient` in the providers of your app's NgModule:\n\n```\n      @NgModule({  providers: [    provideHttpClient(),  ],  // ... other application configuration})export class AppModule {}\n\n```\n\ncheck\n\nYou can then inject the `HttpClient` service as a dependency of your components, services, or other classes:\n\n```\n      @Injectable({providedIn: 'root'})export class ConfigService {  private http = inject(HttpClient);  // This service can now make HTTP requests via `this.http`.}\n\n```\n\ncheck\n\n## [Configuring features of `HttpClient`](https://angular.dev/guide/http/setup\\#configuring-features-of-httpclient)\n\n`provideHttpClient` accepts a list of optional feature configurations, to enable or configure the behavior of different aspects of the client. This section details the optional features and their usages.\n\n### [`withFetch`](https://angular.dev/guide/http/setup\\#withfetch)\n\n```\n      export const appConfig: ApplicationConfig = {  providers: [    provideHttpClient(      withFetch(),    ),  ]};\n\n```\n\ncheck\n\nBy default, `HttpClient` uses the [`XMLHttpRequest`](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest) API to make requests. The `withFetch` feature switches the client to use the [`fetch`](https://developer.mozilla.org/docs/Web/API/Fetch_API) API instead.\n\n`fetch` is a more modern API and is available in a few environments where `XMLHttpRequest` is not supported. It does have a few limitations, such as not producing upload progress events.\n\n### [`withInterceptors(...)`](https://angular.dev/guide/http/setup\\#withinterceptors)\n\n`withInterceptors` configures the set of interceptor functions which will process requests made through `HttpClient`. See the [interceptor guide](https://angular.dev/guide/http/guide/http/interceptors) for more information.\n\n### [`withInterceptorsFromDi()`](https://angular.dev/guide/http/setup\\#withinterceptorsfromdi)\n\n`withInterceptorsFromDi` includes the older style of class-based interceptors in the `HttpClient` configuration. See the [interceptor guide](https://angular.dev/guide/http/guide/http/interceptors) for more information.\n\n**HELPFUL:** Functional interceptors (through `withInterceptors`) have more predictable ordering and we recommend them over DI-based interceptors.\n\n### [`withRequestsMadeViaParent()`](https://angular.dev/guide/http/setup\\#withrequestsmadeviaparent)\n\nBy default, when you configure `HttpClient` using `provideHttpClient` within a given injector, this configuration overrides any configuration for `HttpClient` which may be present in the parent injector.\n\nWhen you add `withRequestsMadeViaParent()`, `HttpClient` is configured to instead pass requests up to the `HttpClient` instance in the parent injector, once they've passed through any configured interceptors at this level. This is useful if you want to _add_ interceptors in a child injector, while still sending the request through the parent injector's interceptors as well.\n\n**CRITICAL:** You must configure an instance of `HttpClient` above the current injector, or this option is not valid and you'll get a runtime error when you try to use it.\n\n### [`withJsonpSupport()`](https://angular.dev/guide/http/setup\\#withjsonpsupport)\n\nIncluding `withJsonpSupport` enables the `.jsonp()` method on `HttpClient`, which makes a GET request via the [JSONP convention](https://en.wikipedia.org/wiki/JSONP) for cross-domain loading of data.\n\n**HELPFUL:** Prefer using [CORS](https://developer.mozilla.org/docs/Web/HTTP/CORS) to make cross-domain requests instead of JSONP when possible.\n\n### [`withXsrfConfiguration(...)`](https://angular.dev/guide/http/setup\\#withxsrfconfiguration)\n\nIncluding this option allows for customization of `HttpClient`'s built-in XSRF security functionality. See the [security guide](https://angular.dev/guide/http/best-practices/security) for more information.\n\n### [`withNoXsrfProtection()`](https://angular.dev/guide/http/setup\\#withnoxsrfprotection)\n\nIncluding this option disables `HttpClient`'s built-in XSRF security functionality. See the [security guide](https://angular.dev/guide/http/best-practices/security) for more information.\n\n## [`HttpClientModule`-based configuration](https://angular.dev/guide/http/setup\\#httpclientmodule-based-configuration)\n\nSome applications may configure `HttpClient` using the older API based on NgModules.\n\nThis table lists the NgModules available from `@angular/common/http` and how they relate to the provider configuration functions above.\n\n| **NgModule** | `provideHttpClient()` equivalent |\n| --- | --- |\n| `HttpClientModule` | `provideHttpClient(withInterceptorsFromDi())` |\n| `HttpClientJsonpModule` | `withJsonpSupport()` |\n| `HttpClientXsrfModule.withOptions(...)` | `withXsrfConfiguration(...)` |\n| `HttpClientXsrfModule.disable()` | `withNoXsrfProtection()` |\n\n### Use caution when using HttpClientModule in multiple injectors\n\nWhen `HttpClientModule` is present in multiple injectors, the behavior of interceptors is poorly defined and depends on the exact options and provider/import ordering.\n\nPrefer `provideHttpClient` for multi-injector configurations, as it has more stable behavior. See the `withRequestsMadeViaParent` feature above.",
  "title": "Setting up HttpClient \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "dev",
    "guide",
    "http",
    "httpclient",
    "setup",
    "interceptors",
    "providehttpclient",
    "requests"
  ],
  "sourceURL": "https://angular.dev/guide/http/setup"
}