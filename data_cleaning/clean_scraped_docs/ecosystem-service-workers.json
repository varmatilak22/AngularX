{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backService Workers & PWAs\n  - [Overview](https://angular.dev/ecosystem/service-workers)\n  - [Getting started](https://angular.dev/ecosystem/service-workers/getting-started)\n  - [Configuration file](https://angular.dev/ecosystem/service-workers/config)\n  - [Communicating with the service worker](https://angular.dev/ecosystem/service-workers/communications)\n  - [Push notifications](https://angular.dev/ecosystem/service-workers/push-notifications)\n  - [Service worker devops](https://angular.dev/ecosystem/service-workers/devops)\n  - [App shell pattern](https://angular.dev/ecosystem/service-workers/app-shell)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nService workers augment the traditional web deployment model and empower applications to deliver a user experience with the reliability and performance on par with code that is written to run on your operating system and hardware.\nAdding a service worker to an Angular application is one of the steps for turning an application into a [Progressive Web App](https://web.dev/progressive-web-apps/) (also known as a PWA).\n\nAt its simplest, a service worker is a script that runs in the web browser and manages caching for an application.\n\nService workers function as a network proxy.\nThey intercept all outgoing HTTP requests made by the application and can choose how to respond to them.\nFor example, they can query a local cache and deliver a cached response if one is available.\nProxying isn't limited to requests made through programmatic APIs, such as `fetch`; it also includes resources referenced in HTML and even the initial request to `index.html`.\nService worker-based caching is thus completely programmable and doesn't rely on server-specified caching headers.\n\nUnlike the other scripts that make up an application, such as the Angular application bundle, the service worker is preserved after the user closes the tab.\nThe next time that browser loads the application, the service worker loads first, and can intercept every request for resources to load the application.\nIf the service worker is designed to do so, it can _completely satisfy the loading of the application, without the need for the network_.\n\nEven across a fast reliable network, round-trip delays can introduce significant latency when loading the application.\nUsing a service worker to reduce dependency on the network can significantly improve the user experience.\n\n## [Service workers in Angular](https://angular.dev/ecosystem/service-workers\\#service-workers-in-angular)\n\nAngular applications, as single-page applications, are in a prime position to benefit from the advantages of service workers. Angular ships with a service worker implementation. Angular developers can take advantage of this service worker and benefit from the increased reliability and performance it provides, without needing to code against low-level APIs.\n\nAngular's service worker is designed to optimize the end user experience of using an application over a slow or unreliable network connection, while also minimizing the risks of serving outdated content.\n\nTo achieve this, the Angular service worker follows these guidelines:\n\n- Caching an application is like installing a native application.\nThe application is cached as one unit, and all files update together.\n\n- A running application continues to run with the same version of all files.\nIt does not suddenly start receiving cached files from a newer version, which are likely incompatible.\n\n- When users refresh the application, they see the latest fully cached version.\nNew tabs load the latest cached code.\n\n- Updates happen in the background, relatively quickly after changes are published.\nThe previous version of the application is served until an update is installed and ready.\n\n- The service worker conserves bandwidth when possible.\nResources are only downloaded if they've changed.\n\n\nTo support these behaviors, the Angular service worker loads a _manifest_ file from the server.\nThe file, called `ngsw.json` (not to be confused with the [web app manifest](https://developer.mozilla.org/docs/Web/Manifest)), describes the resources to cache and includes hashes of every file's contents.\nWhen an update to the application is deployed, the contents of the manifest change, informing the service worker that a new version of the application should be downloaded and cached.\nThis manifest is generated from a CLI-generated configuration file called `ngsw-config.json`.\n\nInstalling the Angular service worker is as straightforward as [running an Angular CLI command](https://angular.dev/ecosystem/ecosystem/service-workers/getting-started#adding-a-service-worker-to-your-project).\nIn addition to registering the Angular service worker with the browser, this also makes a few services available for injection which interact with the service worker and can be used to control it.\nFor example, an application can ask to be notified when a new update becomes available, or an application can ask the service worker to check the server for available updates.\n\n## [Before you start](https://angular.dev/ecosystem/service-workers\\#before-you-start)\n\nTo make use of all the features of Angular service workers, use the latest versions of Angular and the [Angular CLI](https://angular.dev/ecosystem/tools/cli).\n\nFor service workers to be registered, the application must be accessed over HTTPS, not HTTP.\nBrowsers ignore service workers on pages that are served over an insecure connection.\nThe reason is that service workers are quite powerful, so extra care is needed to ensure the service worker script has not been tampered with.\n\nThere is one exception to this rule: to make local development more straightforward, browsers do _not_ require a secure connection when accessing an application on `localhost`.\n\n### [Browser support](https://angular.dev/ecosystem/service-workers\\#browser-support)\n\nTo benefit from the Angular service worker, your application must run in a web browser that supports service workers in general.\nCurrently, service workers are supported in the latest versions of Chrome, Firefox, Edge, Safari, Opera, UC Browser (Android version) and Samsung Internet.\nBrowsers like IE and Opera Mini do not support service workers.\n\nIf the user is accessing your application with a browser that does not support service workers, the service worker is not registered and related behavior such as offline cache management and push notifications does not happen.\nMore specifically:\n\n- The browser does not download the service worker script and the `ngsw.json` manifest file\n- Active attempts to interact with the service worker, such as calling `SwUpdate.checkForUpdate()`, return rejected promises\n- The observable events of related services, such as `SwUpdate.available`, are not triggered\n\nIt is highly recommended that you ensure that your application works even without service worker support in the browser.\nAlthough an unsupported browser ignores service worker caching, it still reports errors if the application attempts to interact with the service worker.\nFor example, calling `SwUpdate.checkForUpdate()` returns rejected promises.\nTo avoid such an error, check whether the Angular service worker is enabled using `SwUpdate.isEnabled`.\n\nTo learn more about other browsers that are service worker ready, see the [Can I Use](https://caniuse.com/#feat=serviceworkers) page and [MDN docs](https://developer.mozilla.org/docs/Web/API/Service_Worker_API).\n\n## [Related resources](https://angular.dev/ecosystem/service-workers\\#related-resources)\n\nThe rest of the articles in this section specifically address the Angular implementation of service workers.\n\nFor more information about service workers in general, see [Service Workers: an Introduction](https://developers.google.com/web/fundamentals/primers/service-workers).\n\nFor more information about browser support, see the [browser support](https://developers.google.com/web/fundamentals/primers/service-workers/#browser_support) section of [Service Workers: an Introduction](https://developers.google.com/web/fundamentals/primers/service-workers), Jake Archibald's [Is Serviceworker ready?](https://jakearchibald.github.io/isserviceworkerready), and [Can I Use](https://caniuse.com/serviceworkers).\n\nFor additional recommendations and examples, see:\n\n## [Next step](https://angular.dev/ecosystem/service-workers\\#next-step)\n\nTo begin using Angular service workers, see [Getting Started with service workers](https://angular.dev/ecosystem/ecosystem/service-workers/getting-started).",
  "title": "Service Workers & PWAs \u2022 Overview \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "service",
    "angular",
    "https",
    "workers",
    "worker",
    "dev",
    "application",
    "ecosystem",
    "web",
    "browser"
  ],
  "sourceURL": "https://angular.dev/ecosystem/service-workers"
}