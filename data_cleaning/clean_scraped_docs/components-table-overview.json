{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for table\n\nThe `mat-table` provides a Material Design styled data-table that can be used to display rows of\ndata.\n\nThis table builds on the foundation of the CDK data-table and uses a similar interface for its\ndata input and template, except that its element and attribute selectors will be prefixed\nwith `mat-` instead of `cdk-`. For more information on the interface and a detailed look at how\nthe table is implemented, see the\n[guide covering the CDK data-table](https://material.angular.io/guide/cdk-table).\n\n### [link](https://material.angular.io/components/table/overview\\#getting-started)  Getting Started\n\nBasic use of \\`<table mat-table>\\`\n\nlinkcodeopen\\_in\\_new\n\n| No. | Name | Weight | Symbol |\n| --- | --- | --- | --- |\n| 1 | Hydrogen | 1.0079 | H |\n| 2 | Helium | 4.0026 | He |\n| 3 | Lithium | 6.941 | Li |\n| 4 | Beryllium | 9.0122 | Be |\n| 5 | Boron | 10.811 | B |\n| 6 | Carbon | 12.0107 | C |\n| 7 | Nitrogen | 14.0067 | N |\n| 8 | Oxygen | 15.9994 | O |\n| 9 | Fluorine | 18.9984 | F |\n| 10 | Neon | 20.1797 | Ne |\n\n#### [link](https://material.angular.io/components/table/overview\\#1-write-your-mat-table-and-provide-data)  1\\. Write your mat-table and provide data\n\nBegin by adding the `<table mat-table>` component to your template and passing in data.\n\nThe simplest way to provide data to the table is by passing a data array to the table's `dataSource`\ninput. The table will take the array and render a row for each object in the data array.\n\n```html\n<table mat-table [dataSource]=\"myDataArray\">\n  ...\n</table>\n\n```\n\nSince the table optimizes for performance, it will not automatically check for changes to the data\narray. Instead, when objects are added, removed, or moved on the data array, you can trigger an\nupdate to the table's rendered rows by calling its `renderRows()` method.\n\nWhile an array is the _simplest_ way to bind data into the data source, it is also\nthe most limited. For more complex applications, using a `DataSource` instance\nis recommended. See the section \"Advanced data sources\" below for more information.\n\n#### [link](https://material.angular.io/components/table/overview\\#2-define-the-column-templates)  2\\. Define the column templates\n\nNext, write your table's column templates.\n\nEach column definition should be given a unique name and contain the content for its header and row\ncells.\n\nHere's a simple column definition with the name `'score'`. The header cell contains the text\n\"Score\" and each row cell will render the `score` property of each row's data.\n\n```html\n<ng-container matColumnDef=\"score\">\n  <th mat-header-cell *matHeaderCellDef> Score </th>\n  <td mat-cell *matCellDef=\"let user\"> {{user.score}} </td>\n</ng-container>\n\n```\n\nNote that the cell templates are not restricted to only showing simple string values, but are\nflexible and allow you to provide any template.\n\nIf your column is only responsible for rendering a single string value for the header and cells,\nyou can instead define your column using the `mat-text-column`. The following column definition is\nequivalent to the one above.\n\n```html\n<mat-text-column name=\"score\"></mat-text-column>\n\n```\n\nCheck out the API docs and examples of the `mat-text-column` to see how you can customize the header\ntext, text alignment, and cell data accessor. Note that this is not compatible with the flex-layout\ntable. Also, a data accessor should be provided if your data may have its properties minified\nsince the string name will no longer match after minification.\n\n#### [link](https://material.angular.io/components/table/overview\\#3-define-the-row-templates)  3\\. Define the row templates\n\nFinally, once you have defined your columns, you need to tell the table which columns will be\nrendered in the header and data rows.\n\nTo start, create a variable in your component that contains the list of the columns you want to\nrender.\n\n```ts\ncolumnsToDisplay = ['userName', 'age'];\n\n```\n\nThen add `mat-header-row` and `mat-row` to the content of your `mat-table` and provide your\ncolumn list as inputs.\n\n```html\n<tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n<tr mat-row *matRowDef=\"let myRowData; columns: columnsToDisplay\"></tr>\n\n```\n\nNote that this list of columns provided to the rows can be in any order, not necessarily the order in\nwhich you wrote the column definitions. Also, you do not necessarily have to include every column\nthat was defined in your template.\n\nThis means that by changing your column list provided to the rows, you can easily re-order and\ninclude/exclude columns dynamically.\n\n### [link](https://material.angular.io/components/table/overview\\#advanced-data-sources)  Advanced data sources\n\nThe simplest way to provide data to your table is by passing a data array. More complex use-cases\nmay benefit from a more flexible approach involving an Observable stream or by encapsulating your\ndata source logic into a `DataSource` class.\n\n#### [link](https://material.angular.io/components/table/overview\\#observable-stream-of-data-arrays)  Observable stream of data arrays\n\nAn alternative approach to providing data to the table is by passing an Observable stream that emits\nthe data array to be rendered each time it is changed. The table will listen to this stream and\nautomatically trigger an update to the rows each time a new data array is emitted.\n\n#### [link](https://material.angular.io/components/table/overview\\#datasource)  DataSource\n\nFor most real-world applications, providing the table a `DataSource` instance will be the best way to\nmanage data. The `DataSource` is meant to serve as a place to encapsulate any sorting, filtering,\npagination, and data retrieval logic specific to the application.\n\nA `DataSource` is simply a class that has at a minimum the following methods: `connect` and\n`disconnect`. The `connect` method will be called by the table to provide an `Observable` that emits\nthe data array that should be rendered. The table will call `disconnect` when the table is destroyed,\nwhich may be the right time to clean up any subscriptions that may have been registered in the\n`connect` method.\n\nAlthough Angular Material provides a ready-made table `DataSource` class, `MatTableDataSource`, you may\nwant to create your own custom `DataSource` class for more complex use cases. This can be done by\nextending the abstract `DataSource` class with a custom `DataSource` class that then implements the\n`connect` and `disconnect` methods. For use cases where the custom `DataSource` must also inherit\nfunctionality by extending a different base class, the `DataSource` base class can be\nimplemented instead ( `MyCustomDataSource extends SomeOtherBaseClass implements DataSource`) to\nrespect Typescript's restriction to only implement one base class.\n\n### [link](https://material.angular.io/components/table/overview\\#styling-columns)  Styling Columns\n\nEach table cell has an automatically generated class based on which column it appears in. The format for this\ngenerated class is `mat-column-NAME`. For example, cells in a column named \"symbol\" can be targeted with the\nselector `.mat-column-symbol`.\n\nStyling columns using their auto-generated column names\n\nlinkcodeopen\\_in\\_new\n\n| No. | Name | Weight | Symbol |\n| --- | --- | --- | --- |\n| 1 | Hydrogen | 1.0079 | H |\n| 2 | Helium | 4.0026 | He |\n| 3 | Lithium | 6.941 | Li |\n| 4 | Beryllium | 9.0122 | Be |\n| 5 | Boron | 10.811 | B |\n| 6 | Carbon | 12.0107 | C |\n| 7 | Nitrogen | 14.0067 | N |\n| 8 | Oxygen | 15.9994 | O |\n| 9 | Fluorine | 18.9984 | F |\n| 10 | Neon | 20.1797 | Ne |\n\n### [link](https://material.angular.io/components/table/overview\\#row-templates)  Row Templates\n\nEvent handlers and property binding on the row templates will be applied to each row rendered by the table. For example,\nadding a `(click)` handler to the row template will cause each individual row to call the handler when clicked.\n\nBinding event handlers and properties to the table rows.\n\nlinkcodeopen\\_in\\_new\n\n| No. | Name | Weight | Symbol |\n| --- | --- | --- | --- |\n| 1 | Hydrogen | 1.0079 | H |\n| 2 | Helium | 4.0026 | He |\n| 3 | Lithium | 6.941 | Li |\n| 4 | Beryllium | 9.0122 | Be |\n| 5 | Boron | 10.811 | B |\n| 6 | Carbon | 12.0107 | C |\n| 7 | Nitrogen | 14.0067 | N |\n| 8 | Oxygen | 15.9994 | O |\n| 9 | Fluorine | 18.9984 | F |\n| 10 | Neon | 20.1797 | Ne |\n\n### Click Log\n\nClicked rows will be logged here\n\n### [link](https://material.angular.io/components/table/overview\\#features)  Features\n\nThe `MatTable` is focused on a single responsibility: efficiently render rows of data in a\nperformant and accessible way.\n\nYou'll notice that the table itself doesn't come out of the box with a lot of features, but expects\nthat the table will be included in a composition of components that fills out its features.\n\nFor example, you can add sorting and pagination to the table by using MatSort and MatPaginator and\nmutating the data provided to the table according to their outputs.\n\nTo simplify the use case of having a table that can sort, paginate, and filter an array of data,\nthe Angular Material library comes with a `MatTableDataSource` that has already implemented\nthe logic of determining what rows should be rendered according to the current table state. To add\nthese feature to the table, check out their respective sections below.\n\n#### [link](https://material.angular.io/components/table/overview\\#pagination)  Pagination\n\nTo paginate the table's data, add a `<mat-paginator>` after the table.\n\nIf you are using the `MatTableDataSource` for your table's data source, simply provide the\n`MatPaginator` to your data source. It will automatically listen for page changes made by the user\nand send the right paged data to the table.\n\nOtherwise if you are implementing the logic to paginate your data, you will want to listen to the\npaginator's `(page)` output and pass the right slice of data to your table.\n\nFor more information on using and configuring the `<mat-paginator>`, check out the\n[mat-paginator docs](https://material.angular.io/components/paginator/overview).\n\nThe `MatPaginator` is one provided solution to paginating your table's data, but it is not the only\noption. In fact, the table can work with any custom pagination UI or strategy since the `MatTable`\nand its interface is not tied to any one specific implementation.\n\nTable with pagination\n\nlinkcodeopen\\_in\\_new\n\n| No. | Name | Weight | Symbol |\n| --- | --- | --- | --- |\n| 1 | Hydrogen | 1.0079 | H |\n| 2 | Helium | 4.0026 | He |\n| 3 | Lithium | 6.941 | Li |\n| 4 | Beryllium | 9.0122 | Be |\n| 5 | Boron | 10.811 | B |\n\nItems per page:\n\n5\n\n1 \u2013 5 of 20\n\n#### [link](https://material.angular.io/components/table/overview\\#sorting)  Sorting\n\nTo add sorting behavior to the table, add the `matSort` directive to the table and add\n`mat-sort-header` to each column header cell that should trigger sorting. Note that you have to import `MatSortModule` in order to initialize the `matSort` directive (see [API docs](https://material.angular.io/components/sort/api)).\n\n```html\n<!-- Name Column -->\n<ng-container matColumnDef=\"position\">\n  <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\n  <td mat-cell *matCellDef=\"let element\"> {{element.position}} </td>\n</ng-container>\n\n```\n\nIf you are using the `MatTableDataSource` for your table's data source, provide the `MatSort`\ndirective to the data source and it will automatically listen for sorting changes and change the\norder of data rendered by the table.\n\nBy default, the `MatTableDataSource` sorts with the assumption that the sorted column's name\nmatches the data property name that the column displays. For example, the following column\ndefinition is named `position`, which matches the name of the property displayed in the row cell.\n\nNote that if the data properties do not match the column names, or if a more complex data property\naccessor is required, then a custom `sortingDataAccessor` function can be set to override the\ndefault data accessor on the `MatTableDataSource`.\n\nWhen updating the data soure asynchronously avoid doing so by recreating the entire `MatTableDataSource` as this could break sorting. Rather update it through the `MatTableDataSource.data` property.\n\nIf you are not using the `MatTableDataSource`, but instead implementing custom logic to sort your\ndata, listen to the sort's `(matSortChange)` event and re-order your data according to the sort state.\nIf you are providing a data array directly to the table, don't forget to call `renderRows()` on the\ntable, since it will not automatically check the array for changes.\n\nTable with sorting\n\nlinkcodeopen\\_in\\_new\n\n| No. | Name | Weight | Symbol |\n| --- | --- | --- | --- |\n| 1 | Hydrogen | 1.0079 | H |\n| 2 | Helium | 4.0026 | He |\n| 3 | Lithium | 6.941 | Li |\n| 4 | Beryllium | 9.0122 | Be |\n| 5 | Boron | 10.811 | B |\n| 6 | Carbon | 12.0107 | C |\n| 7 | Nitrogen | 14.0067 | N |\n| 8 | Oxygen | 15.9994 | O |\n| 9 | Fluorine | 18.9984 | F |\n| 10 | Neon | 20.1797 | Ne |\n\nFor more information on using and configuring the sorting behavior, check out the\n[matSort docs](https://material.angular.io/components/sort/overview).\n\nThe `MatSort` is one provided solution to sorting your table's data, but it is not the only option.\nIn fact, the table can work with any custom sorting UI or strategy since the `MatTable` and\nits interface is not tied to any one specific implementation.\n\n#### [link](https://material.angular.io/components/table/overview\\#filtering)  Filtering\n\nAngular Material does not provide a specific component to be used for filtering the `MatTable`\nsince there is no single common approach to adding a filter UI to table data.\n\nA general strategy is to add an input where users can type in a filter string and listen to this\ninput to change what data is offered from the data source to the table.\n\nIf you are using the `MatTableDataSource`, simply provide the filter string to the\n`MatTableDataSource`. The data source will reduce each row data to a serialized form and will filter\nout the row if it does not contain the filter string. By default, the row data reducing function\nwill concatenate all the object values and convert them to lowercase.\n\nFor example, the data object `{id: 123, name: 'Mr. Smith', favoriteColor: 'blue'}` will be reduced\nto `123mr. smithblue`. If your filter string was `blue` then it would be considered a match because\nit is contained in the reduced string, and the row would be displayed in the table.\n\nTo override the default filtering behavior, a custom `filterPredicate` function can be set which\ntakes a data object and filter string and returns true if the data object is considered a match.\n\nIf you want to show a message when not data matches the filter, you can use the `*matNoDataRow`\ndirective.\n\n#### [link](https://material.angular.io/components/table/overview\\#selection)  Selection\n\nRight now there is no formal support for adding a selection UI to the table, but Angular Material\ndoes offer the right components and pieces to set this up. The following steps are one solution but\nit is not the only way to incorporate row selection in your table.\n\n##### [link](https://material.angular.io/components/table/overview\\#1-add-a-selection-model)  1\\. Add a selection model\n\nGet started by setting up a `SelectionModel` from `@angular/cdk/collections` that will maintain the\nselection state.\n\n```js\nconst initialSelection = [];\nconst allowMultiSelect = true;\nthis.selection = new SelectionModel<MyDataType>(allowMultiSelect, initialSelection);\n\n```\n\n##### [link](https://material.angular.io/components/table/overview\\#2-define-a-selection-column)  2\\. Define a selection column\n\nAdd a column definition for displaying the row checkboxes, including a main toggle checkbox for\nthe header. The column name should be added to the list of displayed columns provided to the\nheader and data row.\n\n```html\n<ng-container matColumnDef=\"select\">\n  <th mat-header-cell *matHeaderCellDef>\n    <mat-checkbox (change)=\"$event ? toggleAllRows() : null\"\n                  [checked]=\"selection.hasValue() && isAllSelected()\"\n                  [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\n    </mat-checkbox>\n  </th>\n  <td mat-cell *matCellDef=\"let row\">\n    <mat-checkbox (click)=\"$event.stopPropagation()\"\n                  (change)=\"$event ? selection.toggle(row) : null\"\n                  [checked]=\"selection.isSelected(row)\">\n    </mat-checkbox>\n  </td>\n</ng-container>\n\n```\n\n##### [link](https://material.angular.io/components/table/overview\\#3-add-event-handling-logic)  3\\. Add event handling logic\n\nImplement the behavior in your component's logic to handle the header's main toggle and checking\nif all rows are selected.\n\n```js\n/** Whether the number of selected elements matches the total number of rows. */\nisAllSelected() {\n  const numSelected = this.selection.selected.length;\n  const numRows = this.dataSource.data.length;\n  return numSelected == numRows;\n}\n\n/** Selects all rows if they are not all selected; otherwise clear selection. */\ntoggleAllRows() {\n  this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n}\n\n```\n\n##### [link](https://material.angular.io/components/table/overview\\#4-include-overflow-styling)  4\\. Include overflow styling\n\nFinally, adjust the styling for the select column so that its overflow is not hidden. This allows\nthe ripple effect to extend beyond the cell.\n\n```css\n.mat-column-select {\n  overflow: initial;\n}\n\n```\n\n#### [link](https://material.angular.io/components/table/overview\\#footer-row)  Footer row\n\nA footer row can be added to the table by adding a footer row definition to the table and adding\nfooter cell templates to column definitions. The footer row will be rendered after the rendered\ndata rows.\n\n```html\n<ng-container matColumnDef=\"cost\">\n  <th mat-header-cell *matHeaderCellDef> Cost </th>\n  <td mat-cell *matCellDef=\"let data\"> {{data.cost}} </td>\n  <td mat-footer-cell *matFooterCellDef> {{totalCost}} </td>\n</ng-container>\n\n...\n\n<tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n<tr mat-row *matRowDef=\"let myRowData; columns: columnsToDisplay\"></tr>\n<tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n\n```\n\n#### [link](https://material.angular.io/components/table/overview\\#sticky-rows-and-columns)  Sticky Rows and Columns\n\nBy using `position: sticky` styling, the table's rows and columns can be fixed so that they do not\nleave the viewport even when scrolled. The table provides inputs that will automatically apply the\ncorrect CSS styling so that the rows and columns become sticky.\n\nIn order to fix the header row to the top of the scrolling viewport containing the table, you can\nadd a `sticky` input to the `matHeaderRowDef`.\n\nSimilarly, this can also be applied to the table's footer row. Note that if you are using the native\n`<table>` and using Safari, then the footer will only stick if `sticky` is applied to all the\nrendered footer rows.\n\nIt is also possible to fix cell columns to the start or end of the horizontally scrolling viewport.\nTo do this, add the `sticky` or `stickyEnd` directive to the `ng-container` column definition.\n\nNote that on Safari mobile when using the flex-based table, a cell stuck in more than one direction\nwill struggle to stay in the correct position as you scroll. For example, if a header row is stuck\nto the top and the first column is stuck, then the top-left-most cell will appear jittery as you\nscroll.\n\nAlso, sticky positioning in Edge will appear shaky for special cases. For example, if the scrolling\ncontainer has a complex box shadow and has sibling elements, the stuck cells will appear jittery.\nThere is currently an [open issue with Edge](https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/17514118/)\nto resolve this.\n\n#### [link](https://material.angular.io/components/table/overview\\#multiple-row-templates)  Multiple row templates\n\nWhen using the `multiTemplateDataRows` directive to support multiple rows for each data object, the context of `*matRowDef` is the same except that the `index` value is replaced by `dataIndex` and `renderIndex`.\n\n### [link](https://material.angular.io/components/table/overview\\#accessibility)  Accessibility\n\nBy default, `MatTable` applies `role=\"table\"`, assuming the table's contains primarily static\ncontent. You can change the role by explicitly setting `role=\"grid\"` or `role=\"treegrid\"` on the\ntable element. While changing the role will update child element roles, such as changing\n`role=\"cell\"` to `role=\"gridcell\"`, this does _not_ apply additional keyboard input handling or\nfocus management to the table.\n\nAlways provide an accessible label for your tables via `aria-label` or `aria-labelledby` on the\ntable element.\n\n### [link](https://material.angular.io/components/table/overview\\#tables-with-display-flex)  Tables with `display: flex`\n\nThe `MatTable` does not require that you use a native HTML table. Instead, you can use an\nalternative approach that uses `display: flex` for the table's styles.\n\nThis alternative approach replaces the native table element tags with the `MatTable` directive\nselectors. For example, `<table mat-table>` becomes `<mat-table>`; `<tr mat-row>` becomes\n`<mat-row>`. The following shows a previous example using this alternative template:\n\n```html\n<mat-table [dataSource]=\"dataSource\">\n  <!-- User name Definition -->\n  <ng-container matColumnDef=\"username\">\n    <mat-header-cell *matHeaderCellDef> User name </mat-header-cell>\n    <mat-cell *matCellDef=\"let row\"> {{row.username}} </mat-cell>\n  </ng-container>\n\n  <!-- Age Definition -->\n  <ng-container matColumnDef=\"age\">\n    <mat-header-cell *matHeaderCellDef> Age </mat-header-cell>\n    <mat-cell *matCellDef=\"let row\"> {{row.age}} </mat-cell>\n  </ng-container>\n\n  <!-- Title Definition -->\n  <ng-container matColumnDef=\"title\">\n    <mat-header-cell *matHeaderCellDef> Title </mat-header-cell>\n    <mat-cell *matCellDef=\"let row\"> {{row.title}} </mat-cell>\n  </ng-container>\n\n  <!-- Header and Row Declarations -->\n  <mat-header-row *matHeaderRowDef=\"['username', 'age', 'title']\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: ['username', 'age', 'title']\"></mat-row>\n</mat-table>\n\n```\n\nNote that this approach means you cannot include certain native-table features such colspan/rowspan\nor have columns that resize themselves based on their content.\n\n### [link](https://material.angular.io/components/table/overview\\#tables-with-matripple)  Tables with `MatRipple`\n\nBy default, `MatTable` does not set up Material Design ripples for rows. A ripple effect can be\nadded to table rows by using the `MatRipple` directive from `@angular/material/core`. Due to\nlimitations in browsers, ripples cannot be applied native `th` or `tr` elements. The recommended\napproach for setting up ripples is using the non-native `display: flex` variant of `MatTable`.\n\nMore details about ripples on native table rows and their limitations can be found [in this issue](https://github.com/angular/components/issues/11883#issuecomment-634942981).\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Basic use of \\`<table mat-table>\\` example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit Styling columns using their auto-generated column names example in StackBlitz\n\nEdit Binding event handlers and properties to the table rows. example in StackBlitz\n\nEdit Table with pagination example in StackBlitz\n\nEdit Table with sorting example in StackBlitz\n\nSort by number\n\nSort by name\n\nSort by weight\n\nSort by symbol",
  "title": "Table | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/table/overview"
}