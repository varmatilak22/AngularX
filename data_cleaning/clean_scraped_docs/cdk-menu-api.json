{
  "content": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\nAPI for menu\n\n## API reference for Angular CDK menu\n\n`\n          import {CdkMenuModule} from '@angular/cdk/menu';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/cdk/menu/api\\#services)  Services\n\n#### [link](https://material.angular.io/cdk/menu/api\\#ContextMenuTracker) `ContextMenuTracker`\n\nTracks the last open context menu trigger across the entire application.\n\n##### Methods\n\n| update |\n| --- |\n| Close the previous open context menu and set the given one as being open. |\n| Parameters |\n| --- |\n| trigger<br> `CdkContextMenuTrigger` | The trigger for the currently open Context Menu. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#MenuStack) `MenuStack`\n\nMenuStack allows subscribers to listen for close events (when a MenuStackItem is popped off\nof the stack) in order to perform closing actions. Upon the MenuStack being empty it emits\nfrom the `empty` observable specifying the next focus action which the listener should perform\nas requested by the closer.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `closed: Observable<MenuStackCloseEvent>` | Observable which emits the MenuStackItem which has been requested to close. |\n| `emptied: Observable<FocusNext | undefined>` | Observable which emits when the MenuStack is empty after popping off the last element. It<br>emits a FocusNext event which specifies the action the closer has requested the listener<br>perform. |\n| `hasFocus: Observable<boolean>` | Observable which emits whether any menu in the menu stack has focus. |\n| `id: inject(_IdGenerator).getId('cdk-menu-stack-')` | The ID of this menu stack. |\n\n##### Methods\n\n| close |\n| --- |\n| Pop items off of the stack up to and including `lastItem` and emit each on the close<br>observable. If the stack is empty or `lastItem` is not on the stack it does nothing. |\n| Parameters |\n| --- |\n| lastItem<br> `MenuStackItem` | the last item to pop off the stack. |\n| options?<br> `CloseOptions` | Options that configure behavior on close. |\n\n| closeAll |\n| --- |\n| Pop off all MenuStackItems and emit each one on the `close` observable one by one. |\n| Parameters |\n| --- |\n| options?<br> `CloseOptions` | Options that configure behavior on close. |\n\n| closeSubMenuOf |\n| --- |\n| Pop items off of the stack up to but excluding `lastItem` and emit each on the close<br>observable. If the stack is empty or `lastItem` is not on the stack it does nothing. |\n| Parameters |\n| --- |\n| lastItem<br> `MenuStackItem` | the element which should be left on the stack |\n\n| hasInlineMenu |\n| --- |\n| Whether the menu stack is associated with an inline menu. |\n\n| static<br> <br>inline |\n| --- |\n| Creates a menu stack that originates from an inline menu. |\n| Parameters |\n| --- |\n| orientation<br> `\"horizontal\" | \"vertical\"` |  |\n\n| inlineMenuOrientation |\n| --- |\n| The orientation of the associated inline menu. |\n\n| isEmpty |\n| --- |\n| Return true if this stack is empty. |\n\n| length |\n| --- |\n| Return the length of the stack. |\n\n| peek |\n| --- |\n| Get the top most element on the stack. |\n| Returns |\n| --- |\n| `MenuStackItem | undefined` |  |\n\n| push |\n| --- |\n| Adds an item to the menu stack. |\n| Parameters |\n| --- |\n| menu<br> `MenuStackItem` | the MenuStackItem to put on the stack. |\n\n| setHasFocus |\n| --- |\n| Sets whether the menu stack contains the focused element. |\n| Parameters |\n| --- |\n| hasFocus<br> `boolean` |  |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#TargetMenuAim) `TargetMenuAim`\n\nTargetMenuAim predicts if a user is moving into a submenu. It calculates the\ntrajectory of the user's mouse movement in the current menu to determine if the\nmouse is moving towards an open submenu.\n\nThe determination is made by calculating the slope of the users last NUM\\_POINTS moves where each\npair of points determines if the trajectory line points into the submenu. It uses consensus\napproach by checking if at least NUM\\_POINTS / 2 pairs determine that the user is moving towards\nto submenu.\n\n##### Methods\n\n| initialize |\n| --- |\n| Set the Menu and its PointerFocusTracker. |\n| Parameters |\n| --- |\n| menu<br> `Menu` | The menu that this menu aim service controls. |\n| pointerTracker<br> `PointerFocusTracker<FocusableElement & Toggler>` | The `PointerFocusTracker` for the given menu. |\n\n| toggle |\n| --- |\n| Calls the `doToggle` callback when it is deemed that the user is not moving towards<br>the submenu. |\n| Parameters |\n| --- |\n| doToggle<br> `() => void` | the function called when the user is not moving towards the submenu. |\n\n### [link](https://material.angular.io/cdk/menu/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CdkMenuBar) `CdkMenuBar`extends [CdkMenuBase](https://material.angular.io/cdk/menu/cdk/menu/api\\#CdkMenuBase)\n\nDirective applied to an element which configures it as a MenuBar by setting the appropriate\nrole, aria attributes, and accessible keyboard and mouse handling logic. The component that\nthis directive is applied to should contain components marked with CdkMenuItem.\n\nSelector:\\[cdkMenuBar\\]\n\nExported as:cdkMenuBar\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`id: string` | The id of the menu's host element. |\n| `isInline: true` | Whether the menu is displayed inline (i.e. always present vs a conditional popup that the user triggers with a trigger element). |\n| `items: QueryList<CdkMenuItem>` | All child MenuItem elements nested in this Menu. |\n| `menuStack: MenuStack` | The stack of menus this menu belongs to. |\n| `nativeElement: HTMLElement` | The menu's native DOM host element. |\n| `orientation: 'horizontal'` | The direction items in the menu flow. |\n\n##### Methods\n\n| focusFirstItem |\n| --- |\n| Place focus on the first MenuItem in the menu and set the focus origin. |\n| Parameters |\n| --- |\n| focusOrigin<br> `FocusOrigin = 'program'` | The origin input mode of the focus event. |\n\n| focusLastItem |\n| --- |\n| Place focus on the last MenuItem in the menu and set the focus origin. |\n| Parameters |\n| --- |\n| focusOrigin<br> `FocusOrigin = 'program'` | The origin input mode of the focus event. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CdkMenu) `CdkMenu`extends [CdkMenuBase](https://material.angular.io/cdk/menu/cdk/menu/api\\#CdkMenuBase)\n\nDirective which configures the element as a Menu which should contain child elements marked as\nCdkMenuItem or CdkMenuGroup. Sets the appropriate role and aria-attributes for a menu and\ncontains accessible keyboard and mouse handling logic.\n\nIt also acts as a RadioGroup for elements marked with role `menuitemradio`.\n\nSelector:\\[cdkMenu\\]\n\nExported as:cdkMenu\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`id: string` | The id of the menu's host element. |\n| @Output()<br>`closed: EventEmitter<void>` | Event emitted when the menu is closed. |\n| `isInline: !this._parentTrigger` | Whether the menu is displayed inline (i.e. always present vs a conditional popup that the user triggers with a trigger element). |\n| `items: QueryList<CdkMenuItem>` | All child MenuItem elements nested in this Menu. |\n| `menuStack: MenuStack` | The stack of menus this menu belongs to. |\n| `nativeElement: HTMLElement` | The menu's native DOM host element. |\n| `orientation: 'vertical'` | The direction items in the menu flow. |\n\n##### Methods\n\n| focusFirstItem |\n| --- |\n| Place focus on the first MenuItem in the menu and set the focus origin. |\n| Parameters |\n| --- |\n| focusOrigin<br> `FocusOrigin = 'program'` | The origin input mode of the focus event. |\n\n| focusLastItem |\n| --- |\n| Place focus on the last MenuItem in the menu and set the focus origin. |\n| Parameters |\n| --- |\n| focusOrigin<br> `FocusOrigin = 'program'` | The origin input mode of the focus event. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CdkMenuBase) `CdkMenuBase`extends [CdkMenuGroup](https://material.angular.io/cdk/menu/cdk/menu/api\\#CdkMenuGroup)\n\nAbstract directive that implements shared logic common to all menus.\nThis class can be extended to create custom menu types.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`id: string` | The id of the menu's host element. |\n| `destroyed: Subject<void>` | Emits when the MenuBar is destroyed. |\n| `dir: inject(Directionality, { optional: true })` | The directionality (text direction) of the current page. |\n| `isInline: false` | Whether the menu is displayed inline (i.e. always present vs a conditional popup that the<br>user triggers with a trigger element). |\n| `items: QueryList<CdkMenuItem>` | All child MenuItem elements nested in this Menu. |\n| `keyManager: FocusKeyManager<CdkMenuItem>` | Handles keyboard events for the menu. |\n| `menuAim: inject(MENU_AIM, { optional: true, self: true })` | The menu aim service used by this menu. |\n| `menuStack: MenuStack` | The stack of menus this menu belongs to. |\n| `nativeElement: HTMLElement` | The menu's native DOM host element. |\n| `ngZone: inject(NgZone)` |  |\n| `orientation: 'horizontal' | 'vertical'` | The direction items in the menu flow. |\n| `pointerTracker: PointerFocusTracker<CdkMenuItem>` | Tracks the users mouse movements over the menu. |\n| `triggerItem: CdkMenuItem` | The Menu Item which triggered the open submenu. |\n\n##### Methods\n\n| closeOpenMenu |\n| --- |\n| Close the open menu if the current active item opened the requested MenuStackItem. |\n| Parameters |\n| --- |\n| menu<br> `MenuStackItem` | The menu requested to be closed. |\n| options?<br> `{ focusParentTrigger?: boolean; }` | Options to configure the behavior on close.<br>- `focusParentTrigger` Whether to focus the parent trigger after closing the menu. |\n\n| focusFirstItem |\n| --- |\n| Place focus on the first MenuItem in the menu and set the focus origin. |\n| Parameters |\n| --- |\n| focusOrigin<br> `FocusOrigin = 'program'` | The origin input mode of the focus event. |\n\n| focusLastItem |\n| --- |\n| Place focus on the last MenuItem in the menu and set the focus origin. |\n| Parameters |\n| --- |\n| focusOrigin<br> `FocusOrigin = 'program'` | The origin input mode of the focus event. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CdkMenuItem) `CdkMenuItem`\n\nDirective which provides the ability for an element to be focused and navigated to using the\nkeyboard when residing in a CdkMenu, CdkMenuBar, or CdkMenuGroup. It performs user defined\nbehavior when clicked.\n\nSelector:\\[cdkMenuItem\\]\n\nExported as:cdkMenuItem\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ alias: 'cdkMenuItemDisabled', transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the CdkMenuItem is disabled - defaults to false |\n| @Input('cdkMenuitemTypeaheadLabel')<br> <br>`typeaheadLabel: string | null` | The text used to locate this item during menu typeahead. If not specified,<br>the `textContent` of the item will be used. |\n| @Output('cdkMenuItemTriggered')<br> <br>`triggered: EventEmitter<void>` | If this MenuItem is a regular MenuItem, outputs when it is triggered by a keyboard or mouse<br>event. |\n| `closeOnSpacebarTrigger: true` | Whether the item should close the menu if triggered by the spacebar. |\n| `destroyed: Subject<void>` | Emits when the menu item is destroyed. |\n| `hasMenu: ` | Whether the menu item opens a menu. |\n\n##### Methods\n\n| focus |\n| --- |\n| Place focus on the element. |\n\n| getLabel |\n| --- |\n| Get the label for this element which is required by the FocusableOption interface. |\n| Returns |\n| --- |\n| `string` |  |\n\n| getMenu |\n| --- |\n| Get a reference to the rendered Menu if the Menu is open and it is visible in the DOM. |\n| Returns |\n| --- |\n| `Menu | undefined` | the menu if it is open, otherwise undefined. |\n\n| getMenuTrigger |\n| --- |\n| Get the CdkMenuTrigger associated with this element. |\n| Returns |\n| --- |\n| `CdkMenuTrigger | null` |  |\n\n| isMenuOpen |\n| --- |\n| Return true if this MenuItem has an attached menu and it is open. |\n\n| trigger |\n| --- |\n| If the menu item is not disabled and the element does not have a menu trigger attached, emit<br>on the cdkMenuItemTriggered emitter and close all open menus. |\n| Parameters |\n| --- |\n| options?<br> `{ keepOpen: boolean; }` | Options the configure how the item is triggered<br>- keepOpen: specifies that the menu should be kept open after triggering the item. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CdkMenuItemCheckbox) `CdkMenuItemCheckbox`extends [CdkMenuItemSelectable](https://material.angular.io/cdk/menu/cdk/menu/api\\#CdkMenuItemSelectable)\n\nA directive providing behavior for the \"menuitemcheckbox\" ARIA role, which behaves similarly to a\nconventional checkbox.\n\nSelector:\\[cdkMenuItemCheckbox\\]\n\nExported as:cdkMenuItemCheckbox\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ alias: 'cdkMenuItemChecked', transform: booleanAttribute })<br> <br>`checked: boolean` | Whether the element is checked |\n| @Input({ alias: 'cdkMenuItemDisabled', transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the CdkMenuItem is disabled - defaults to false |\n| @Input('cdkMenuitemTypeaheadLabel')<br> <br>`typeaheadLabel: string | null` | The text used to locate this item during menu typeahead. If not specified,<br>the `textContent` of the item will be used. |\n| @Output('cdkMenuItemTriggered')<br> <br>`triggered: EventEmitter<void>` | If this MenuItem is a regular MenuItem, outputs when it is triggered by a keyboard or mouse<br>event. |\n| `hasMenu: ` | Whether the menu item opens a menu. |\n\n##### Methods\n\n| focus |\n| --- |\n| Place focus on the element. |\n\n| getLabel |\n| --- |\n| Get the label for this element which is required by the FocusableOption interface. |\n| Returns |\n| --- |\n| `string` |  |\n\n| getMenu |\n| --- |\n| Get a reference to the rendered Menu if the Menu is open and it is visible in the DOM. |\n| Returns |\n| --- |\n| `Menu | undefined` | the menu if it is open, otherwise undefined. |\n\n| getMenuTrigger |\n| --- |\n| Get the CdkMenuTrigger associated with this element. |\n| Returns |\n| --- |\n| `CdkMenuTrigger | null` |  |\n\n| isMenuOpen |\n| --- |\n| Return true if this MenuItem has an attached menu and it is open. |\n\n| trigger |\n| --- |\n| Toggle the checked state of the checkbox. |\n| Parameters |\n| --- |\n| options?<br> `{ keepOpen: boolean; }` | Options the configure how the item is triggered<br>- keepOpen: specifies that the menu should be kept open after triggering the item. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CdkMenuItemRadio) `CdkMenuItemRadio`extends [CdkMenuItemSelectable](https://material.angular.io/cdk/menu/cdk/menu/api\\#CdkMenuItemSelectable)\n\nA directive providing behavior for the \"menuitemradio\" ARIA role, which behaves similarly to\na conventional radio-button. Any sibling `CdkMenuItemRadio` instances within the same `CdkMenu`\nor `CdkMenuGroup` comprise a radio group with unique selection enforced.\n\nSelector:\\[cdkMenuItemRadio\\]\n\nExported as:cdkMenuItemRadio\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ alias: 'cdkMenuItemChecked', transform: booleanAttribute })<br> <br>`checked: boolean` | Whether the element is checked |\n| @Input({ alias: 'cdkMenuItemDisabled', transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the CdkMenuItem is disabled - defaults to false |\n| @Input('cdkMenuitemTypeaheadLabel')<br> <br>`typeaheadLabel: string | null` | The text used to locate this item during menu typeahead. If not specified,<br>the `textContent` of the item will be used. |\n| @Output('cdkMenuItemTriggered')<br> <br>`triggered: EventEmitter<void>` | If this MenuItem is a regular MenuItem, outputs when it is triggered by a keyboard or mouse<br>event. |\n| `hasMenu: ` | Whether the menu item opens a menu. |\n\n##### Methods\n\n| focus |\n| --- |\n| Place focus on the element. |\n\n| getLabel |\n| --- |\n| Get the label for this element which is required by the FocusableOption interface. |\n| Returns |\n| --- |\n| `string` |  |\n\n| getMenu |\n| --- |\n| Get a reference to the rendered Menu if the Menu is open and it is visible in the DOM. |\n| Returns |\n| --- |\n| `Menu | undefined` | the menu if it is open, otherwise undefined. |\n\n| getMenuTrigger |\n| --- |\n| Get the CdkMenuTrigger associated with this element. |\n| Returns |\n| --- |\n| `CdkMenuTrigger | null` |  |\n\n| isMenuOpen |\n| --- |\n| Return true if this MenuItem has an attached menu and it is open. |\n\n| trigger |\n| --- |\n| Toggles the checked state of the radio-button. |\n| Parameters |\n| --- |\n| options?<br> `{ keepOpen: boolean; }` | Options the configure how the item is triggered<br>- keepOpen: specifies that the menu should be kept open after triggering the item. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CdkMenuTrigger) `CdkMenuTrigger`extends [CdkMenuTriggerBase](https://material.angular.io/cdk/menu/cdk/menu/api\\#CdkMenuTriggerBase)\n\nA directive that turns its host element into a trigger for a popup menu.\nIt can be combined with cdkMenuItem to create sub-menus. If the element is in a top level\nMenuBar it will open the menu on click, or if a sibling is already opened it will open on hover.\nIf it is inside of a Menu it will open the attached Submenu on hover regardless of its sibling\nstate.\n\nSelector:\\[cdkMenuTriggerFor\\]\n\nExported as:cdkMenuTriggerFor\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input(cdkMenuTriggerData)<br> <br>`menuData: unknown` | Context data to be passed along to the menu template |\n| @Input(cdkMenuPosition)<br> <br>`menuPosition: ConnectedPosition[]` | A list of preferred menu positions to be used when constructing the<br>`FlexibleConnectedPositionStrategy` for this trigger's menu. |\n| @Input(cdkMenuTriggerFor)<br> <br>`menuTemplateRef: TemplateRef<unknown> | null` | Template reference variable to the menu this trigger opens |\n| @Output( cdkMenuClosed)<br> <br>`closed: EventEmitter<void>` | Emits when the attached menu is requested to close |\n| @Output( cdkMenuOpened)<br> <br>`opened: EventEmitter<void>` | Emits when the attached menu is requested to open |\n| `injector: inject(Injector)` | The DI injector for this component. |\n\n##### Methods\n\n| close |\n| --- |\n| Close the opened menu. |\n\n| getMenu |\n| --- |\n| Get a reference to the rendered Menu if the Menu is open and rendered in the DOM. |\n| Returns |\n| --- |\n| `Menu | undefined` |  |\n\n| isOpen |\n| --- |\n| Whether the attached menu is open. |\n\n| open |\n| --- |\n| Open the attached menu. |\n\n| registerChildMenu |\n| --- |\n| Registers a child menu as having been opened by this trigger. |\n| Parameters |\n| --- |\n| child<br> `Menu` |  |\n\n| toggle |\n| --- |\n| Toggle the attached menu. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CdkMenuGroup) `CdkMenuGroup`\n\nA grouping container for `CdkMenuItemRadio` instances, similar to a `role=\"radiogroup\"` element.\n\nSelector:\\[cdkMenuGroup\\]\n\nExported as:cdkMenuGroup\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CdkMenuItemSelectable) `CdkMenuItemSelectable`extends [CdkMenuItem](https://material.angular.io/cdk/menu/cdk/menu/api\\#CdkMenuItem)\n\nBase class providing checked state for selectable MenuItems.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ alias: 'cdkMenuItemChecked', transform: booleanAttribute })<br> <br>`checked: boolean` | Whether the element is checked |\n| @Input({ alias: 'cdkMenuItemDisabled', transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the CdkMenuItem is disabled - defaults to false |\n| @Input('cdkMenuitemTypeaheadLabel')<br> <br>`typeaheadLabel: string | null` | The text used to locate this item during menu typeahead. If not specified,<br>the `textContent` of the item will be used. |\n| @Output('cdkMenuItemTriggered')<br> <br>`triggered: EventEmitter<void>` | If this MenuItem is a regular MenuItem, outputs when it is triggered by a keyboard or mouse<br>event. |\n| `closeOnSpacebarTrigger: false` | Whether the item should close the menu if triggered by the spacebar. |\n| `hasMenu: ` | Whether the menu item opens a menu. |\n\n##### Methods\n\n| focus |\n| --- |\n| Place focus on the element. |\n\n| getLabel |\n| --- |\n| Get the label for this element which is required by the FocusableOption interface. |\n| Returns |\n| --- |\n| `string` |  |\n\n| getMenu |\n| --- |\n| Get a reference to the rendered Menu if the Menu is open and it is visible in the DOM. |\n| Returns |\n| --- |\n| `Menu | undefined` | the menu if it is open, otherwise undefined. |\n\n| getMenuTrigger |\n| --- |\n| Get the CdkMenuTrigger associated with this element. |\n| Returns |\n| --- |\n| `CdkMenuTrigger | null` |  |\n\n| isMenuOpen |\n| --- |\n| Return true if this MenuItem has an attached menu and it is open. |\n\n| trigger |\n| --- |\n| If the menu item is not disabled and the element does not have a menu trigger attached, emit<br>on the cdkMenuItemTriggered emitter and close all open menus. |\n| Parameters |\n| --- |\n| options?<br> `{ keepOpen: boolean; }` | Options the configure how the item is triggered<br>- keepOpen: specifies that the menu should be kept open after triggering the item. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CdkContextMenuTrigger) `CdkContextMenuTrigger`extends [CdkMenuTriggerBase](https://material.angular.io/cdk/menu/cdk/menu/api\\#CdkMenuTriggerBase)\n\nA directive that opens a menu when a user right-clicks within its host element.\nIt is aware of nested context menus and will trigger only the lowest level non-disabled context menu.\n\nSelector:\\[cdkContextMenuTriggerFor\\]\n\nExported as:cdkContextMenuTriggerFor\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ alias: 'cdkContextMenuDisabled', transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the context menu is disabled. |\n| @Input(cdkContextMenuTriggerData)<br> <br>`menuData: unknown` | Context data to be passed along to the menu template |\n| @Input(cdkContextMenuPosition)<br> <br>`menuPosition: ConnectedPosition[]` | A list of preferred menu positions to be used when constructing the<br>`FlexibleConnectedPositionStrategy` for this trigger's menu. |\n| @Input(cdkContextMenuTriggerFor)<br> <br>`menuTemplateRef: TemplateRef<unknown> | null` | Template reference variable to the menu this trigger opens |\n| @Output( cdkContextMenuClosed)<br> <br>`closed: EventEmitter<void>` | Emits when the attached menu is requested to close |\n| @Output( cdkContextMenuOpened)<br> <br>`opened: EventEmitter<void>` | Emits when the attached menu is requested to open |\n| `injector: inject(Injector)` | The DI injector for this component. |\n\n##### Methods\n\n| close |\n| --- |\n| Close the currently opened context menu. |\n\n| isOpen |\n| --- |\n| Whether the attached menu is open. |\n\n| open |\n| --- |\n| Open the attached menu at the specified location. |\n| Parameters |\n| --- |\n| coordinates<br> `ContextMenuCoordinates` | where to open the context menu |\n\n| registerChildMenu |\n| --- |\n| Registers a child menu as having been opened by this trigger. |\n| Parameters |\n| --- |\n| child<br> `Menu` |  |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CdkMenuTriggerBase) `CdkMenuTriggerBase`\n\nAbstract directive that implements shared logic common to all menu triggers.\nThis class can be extended to create custom menu trigger types.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `childMenu: Menu` | The child menu opened by this trigger. |\n| `closed: EventEmitter<void>` | Emits when the attached menu is requested to close |\n| `destroyed: Subject<void>` | Emits when this trigger is destroyed. |\n| `injector: inject(Injector)` | The DI injector for this component. |\n| `menuData: unknown` | Context data to be passed along to the menu template |\n| `menuPosition: ConnectedPosition[]` | A list of preferred menu positions to be used when constructing the<br>`FlexibleConnectedPositionStrategy` for this trigger's menu. |\n| `menuScrollStrategy: inject(MENU_SCROLL_STRATEGY)` | Function used to configure the scroll strategy for the menu. |\n| `menuStack: MenuStack` | The menu stack in which this menu resides. |\n| `menuTemplateRef: TemplateRef<unknown> | null` | Template reference variable to the menu this trigger opens |\n| `opened: EventEmitter<void>` | Emits when the attached menu is requested to open |\n| `overlayRef: OverlayRef | null` | A reference to the overlay which manages the triggered menu |\n| `stopOutsideClicksListener: merge(this.closed, this.destroyed)` | Emits when the outside pointer events listener on the overlay should be stopped. |\n| `viewContainerRef: inject(ViewContainerRef)` | The view container ref for this component |\n\n##### Methods\n\n| getMenuContentPortal |\n| --- |\n| Get the portal to be attached to the overlay which contains the menu. Allows for the menu<br>content to change dynamically and be reflected in the application. |\n\n| isElementInsideMenuStack |\n| --- |\n| Whether the given element is inside the scope of this trigger's menu stack. |\n| Parameters |\n| --- |\n| element<br> `Element` | The element to check. |\n\n| isOpen |\n| --- |\n| Whether the attached menu is open. |\n\n| registerChildMenu |\n| --- |\n| Registers a child menu as having been opened by this trigger. |\n| Parameters |\n| --- |\n| child<br> `Menu` |  |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CdkTargetMenuAim) `CdkTargetMenuAim`\n\nCdkTargetMenuAim is a provider for the TargetMenuAim service. It can be added to an\nelement with either the `cdkMenu` or `cdkMenuBar` directive and child menu items.\n\nSelector:\\[cdkTargetMenuAim\\]\n\nExported as:cdkTargetMenuAim\n\n### [link](https://material.angular.io/cdk/menu/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/cdk/menu/api\\#PointerFocusTracker) `PointerFocusTracker`\n\nPointerFocusTracker keeps track of the currently active item under mouse focus. It also has\nobservables which emit when the users mouse enters and leaves a tracked element.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `activeElement: T` | The element currently under mouse focus. |\n| `entered: Observable<T>` | Emits when an element is moused into. |\n| `exited: Observable<T>` | Emits when an element is moused out. |\n| `previousElement: T` | The element previously under mouse focus. |\n\n##### Methods\n\n| destroy |\n| --- |\n| Stop the managers listeners. |\n\n### [link](https://material.angular.io/cdk/menu/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/cdk/menu/api\\#FocusableElement) `FocusableElement`\n\nItem to track for mouse focus events.\n\n#### [link](https://material.angular.io/cdk/menu/api\\#MenuStackItem) `MenuStackItem`\n\nA single item (menu) in the menu stack.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `menuStack: MenuStack` | A reference to the menu stack this menu stack item belongs to. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CloseOptions) `CloseOptions`\n\nOptions that can be provided to the close or closeAll methods.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `focusNextOnEmpty: FocusNext` | The element to focus next if the close operation causes the menu stack to become empty. |\n| `focusParentTrigger: boolean` | Whether to focus the parent trigger after closing the menu. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#MenuStackCloseEvent) `MenuStackCloseEvent`\n\nEvent dispatched when a menu is closed.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `focusParentTrigger: boolean` | Whether to focus the parent trigger after closing the menu. |\n| `item: MenuStackItem` | The menu being closed. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#Menu) `Menu`\n\nInterface which specifies Menu operations and used to break circular dependency issues\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `id: string` | The id of the menu's host element. |\n| `nativeElement: HTMLElement` | The menu's native DOM host element. |\n| `orientation: 'horizontal' | 'vertical'` | The direction items in the menu flow. |\n\n##### Methods\n\n| focusFirstItem |\n| --- |\n| Place focus on the first MenuItem in the menu. |\n| Parameters |\n| --- |\n| focusOrigin<br> `FocusOrigin` |  |\n\n| focusLastItem |\n| --- |\n| Place focus on the last MenuItem in the menu. |\n| Parameters |\n| --- |\n| focusOrigin<br> `FocusOrigin` |  |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#MenuAim) `MenuAim`\n\nMenuAim is responsible for determining if a sibling menuitem's menu should be closed when a\nToggler item is hovered into. It is up to the hovered in item to call the MenuAim service in\norder to determine if it may perform its close actions.\n\n##### Methods\n\n| initialize |\n| --- |\n| Set the Menu and its PointerFocusTracker. |\n| Parameters |\n| --- |\n| menu<br> `Menu` | The menu that this menu aim service controls. |\n| pointerTracker<br> `PointerFocusTracker<FocusableElement & Toggler>` | The `PointerFocusTracker` for the given menu. |\n\n| toggle |\n| --- |\n| Calls the `doToggle` callback when it is deemed that the user is not moving towards<br>the submenu. |\n| Parameters |\n| --- |\n| doToggle<br> `() => void` | the function called when the user is not moving towards the submenu. |\n\n#### [link](https://material.angular.io/cdk/menu/api\\#Toggler) `Toggler`\n\nAn element which when hovered over may open or close a menu.\n\n##### Methods\n\n| getMenu |\n| --- |\n| Gets the open menu, or undefined if no menu is open. |\n| Returns |\n| --- |\n| `Menu | undefined` |  |\n\n### [link](https://material.angular.io/cdk/menu/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/cdk/menu/api\\#ContextMenuCoordinates) `ContextMenuCoordinates`\n\nThe coordinates where the context menu should open.\n\n```docs-markdown-code\ntype ContextMenuCoordinates = {\n    x: number;\n    y: number;\n};\n\n```\n\n### [link](https://material.angular.io/cdk/menu/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/cdk/menu/api\\#MENU_TRIGGER) `MENU_TRIGGER`\n\nInjection token used for an implementation of MenuStack.\n\n```docs-markdown-code\nconst MENU_TRIGGER: InjectionToken<CdkMenuTriggerBase>;\n\n```\n\n#### [link](https://material.angular.io/cdk/menu/api\\#MENU_SCROLL_STRATEGY) `MENU_SCROLL_STRATEGY`\n\nInjection token used to configure the behavior of the menu when the page is scrolled.\n\n```docs-markdown-code\nconst MENU_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\n```\n\n#### [link](https://material.angular.io/cdk/menu/api\\#MENU_STACK) `MENU_STACK`\n\nInjection token used for an implementation of MenuStack.\n\n```docs-markdown-code\nconst MENU_STACK: InjectionToken<MenuStack>;\n\n```\n\n#### [link](https://material.angular.io/cdk/menu/api\\#PARENT_OR_NEW_MENU_STACK_PROVIDER) `PARENT_OR_NEW_MENU_STACK_PROVIDER`\n\nProvider that provides the parent menu stack, or a new menu stack if there is no parent one.\n\n```docs-markdown-code\nconst PARENT_OR_NEW_MENU_STACK_PROVIDER: { provide: InjectionToken<MenuStack>; deps: Optional[][]; useFactory: (parentMenuStack?: MenuStack) => MenuStack; };\n\n```\n\n#### [link](https://material.angular.io/cdk/menu/api\\#PARENT_OR_NEW_INLINE_MENU_STACK_PROVIDER) `PARENT_OR_NEW_INLINE_MENU_STACK_PROVIDER`\n\nProvider that provides the parent menu stack, or a new inline menu stack if there is no parent one.\n\n```docs-markdown-code\nconst PARENT_OR_NEW_INLINE_MENU_STACK_PROVIDER: (orientation: \"horizontal\" | \"vertical\") => { provide: InjectionToken<MenuStack>; deps: Optional[][]; useFactory: (parentMenuStack?: MenuStack) => MenuStack; };\n\n```\n\n#### [link](https://material.angular.io/cdk/menu/api\\#CDK_MENU) `CDK_MENU`\n\nInjection token used to return classes implementing the Menu interface\n\n```docs-markdown-code\nconst CDK_MENU: InjectionToken<Menu>;\n\n```\n\n#### [link](https://material.angular.io/cdk/menu/api\\#MENU_AIM) `MENU_AIM`\n\nInjection token used for an implementation of MenuAim.\n\n```docs-markdown-code\nconst MENU_AIM: InjectionToken<MenuAim>;\n\n```\n\nMenu\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
  "title": "Menu | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/cdk/menu/api"
}