{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for ripple\n\nConnect user input to screen reactions by using ripples to both indicate the point of touch, and to\nconfirm that touch input was received. For touch or mouse, this occurs at the point of contact.\n\nThe `matRipple` attribute directive defines an area in which a ripple animates on user interaction.\n\n```html\n<div matRipple [matRippleColor]=\"myColor\">\n  <ng-content></ng-content>\n</div>\n\n```\n\nBy default, a ripple is activated when the host element of the `matRipple` directive receives\nmouse or touch events. Upon being pressed, a ripple will begin fading in from the point of contact,\nradiating to cover the host element. Each ripple will fade out only upon release of the mouse or touch.\n\nRipples can also be triggered programmatically by getting a reference to the MatRipple directive\nand calling its `launch` method.\n\n### [link](https://material.angular.io/components/ripple/overview\\#ripple-trigger)  Ripple trigger\n\nBy default ripples will fade in on interaction with the directive's host element.\nIn some situations, developers may want to show ripples on interaction with _some other_ element,\nbut still want to have the ripples placed in another location. This can be done by specifying\nthe `matRippleTrigger` option that expects a reference to an `HTMLElement`.\n\n```html\n<div>\n  <div matRipple [matRippleTrigger]=\"trigger\" class=\"my-ripple-container\">\n    <!-- This is the ripple container, but not the trigger element for ripples. -->\n  </div>\n\n  <div #trigger></div>\n</div>\n\n```\n\n### [link](https://material.angular.io/components/ripple/overview\\#manual-ripples)  Manual ripples\n\nRipples can be shown programmatically by getting a reference to the `MatRipple` directive.\n\n```ts\nclass MyComponent {\n\n  /** Reference to the directive instance of the ripple. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /** Shows a centered and persistent ripple. */\n  launchRipple() {\n    const rippleRef = this.ripple.launch({\n      persistent: true,\n      centered: true\n    });\n\n    // Fade out the ripple later.\n    rippleRef.fadeOut();\n  }\n}\n\n```\n\nIn the example above, no specific coordinates have been passed, because the `centered`\nripple option has been set to `true` and the coordinates would not matter.\n\nRipples that are being dispatched programmatically can be launched with the `persistent` option.\nThis means that the ripples will not fade out automatically, and need to be faded out using\nthe `RippleRef` ( _useful for focus indicators_).\n\nIn case, developers want to launch ripples at specific coordinates within the element, the\n`launch()` method also accepts `x` and `y` coordinates as parameters. Those coordinates\nare relative to the ripple container element.\n\n```ts\nconst rippleRef = this.ripple.launch(10, 10, {persistent: true});\n\n```\n\n### [link](https://material.angular.io/components/ripple/overview\\#global-options)  Global options\n\nDevelopers are able to specify options for all ripples inside of their application.\n\nThe speed of the ripples can be adjusted and the ripples can be disabled globally as well.\n\nGlobal ripple options can be specified by setting the `MAT_RIPPLE_GLOBAL_OPTIONS` provider.\n\n```ts\nconst globalRippleConfig: RippleGlobalOptions = {\n  disabled: true,\n  animation: {\n    enterDuration: 300,\n    exitDuration: 0\n  }\n};\n\n@NgModule({\n  providers: [\\\n    {provide: MAT_RIPPLE_GLOBAL_OPTIONS, useValue: globalRippleConfig}\\\n  ]\n})\n\n```\n\nAll available global options can be seen in the `RippleGlobalOptions` interface.\n\n### [link](https://material.angular.io/components/ripple/overview\\#disabling-animation)  Disabling animation\n\nThe animation of ripples can be disabled by using the `animation` global option. If the\n`enterDuration` and `exitDuration` is being set to `0`, ripples will just appear without any\nanimation.\n\nThis is specifically useful in combination with the `disabled` global option, because globally\ndisabling ripples won't affect the focus indicator ripples. If someone still wants to disable\nthose ripples for performance reasons, the duration can be set to `0`, to remove the ripple feel.\n\n```ts\nconst globalRippleConfig: RippleGlobalOptions = {\n  disabled: true,\n  animation: {\n    enterDuration: 0,\n    exitDuration: 0\n  }\n};\n\n```\n\n**Note**: Ripples will also have no animation if the `NoopAnimationsModule` is being used. This\nalso means that the durations in the `animation` configuration won't be taken into account.\n\n### [link](https://material.angular.io/components/ripple/overview\\#animation-behavior)  Animation behavior\n\nThere are two different animation behaviors for the fade-out of ripples shown in the Material\nDesign specifications.\n\nBy default, all ripples will start fading out if the mouse or touch is released and the enter\nanimation completed. The second possible behavior, which is also shown in the specifications, is\nthat ripples start to fade out immediately on mouse or touch release.\n\nIn some scenarios, developers might prefer that behavior over the default and would like to have\nthe same for Angular Material. This behavior can be activated by specifying the\n`terminateOnPointerUp` global ripple option.\n\n```ts\nconst globalRippleConfig: RippleGlobalOptions = {\n  terminateOnPointerUp: true\n};\n\n```\n\n### [link](https://material.angular.io/components/ripple/overview\\#updating-global-options-at-runtime)  Updating global options at runtime\n\nTo change global ripple options at runtime, just inject the `MAT_RIPPLE_GLOBAL_OPTIONS`\nprovider and update the desired options.\n\nThere are various ways of injecting the global options. In order to make it easier to\ninject and update options at runtime, it's recommended to create a service that implements\nthe `RippleGlobalOptions` interface.\n\n```ts\n@Injectable({providedIn: 'root'})\nexport class AppGlobalRippleOptions implements RippleGlobalOptions {\n  /** Whether ripples should be disabled globally. */\n  disabled: boolean = false;\n}\n\n```\n\n```ts\n@NgModule({\n  providers: [\\\n    {provide: MAT_RIPPLE_GLOBAL_OPTIONS, useExisting: AppGlobalRippleOptions},\\\n  ]\n})\nexport class MyModule {...}\n\n```\n\nNow that the global ripple options are set to a service we can inject, the service can be\nused update any global ripple option at runtime.\n\n```ts\n@Component(...)\nexport class MyComponent {\n  constructor(private _appRippleOptions: AppGlobalRippleOptions) {}\n\n  disableRipples() {\n    this._appRippleOptions.disabled = true;\n  }\n}\n\n```\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation",
  "title": "Ripples | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/ripple/overview"
}