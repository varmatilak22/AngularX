{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backTemplates\n  - [Overview](https://angular.dev/guide/templates)\n  - [Binding dynamic text, properties and attributes](https://angular.dev/guide/templates/binding)\n  - [Adding event listeners](https://angular.dev/guide/templates/event-listeners)\n  - [Two-way binding](https://angular.dev/guide/templates/two-way-binding)\n  - [Control flow](https://angular.dev/guide/templates/control-flow)\n  - [Pipes](https://angular.dev/guide/templates/pipes)\n  - [Slotting child content with ng-content](https://angular.dev/guide/templates/ng-content)\n  - [Create template fragments with ng-template](https://angular.dev/guide/templates/ng-template)\n  - [Grouping elements with ng-container](https://angular.dev/guide/templates/ng-container)\n  - [Variables in templates](https://angular.dev/guide/templates/variables)\n  - [Deferred loading with @defer](https://angular.dev/guide/templates/defer)\n  - [Expression syntax](https://angular.dev/guide/templates/expression-syntax)\n  - [Whitespace in templates](https://angular.dev/guide/templates/whitespace)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n`<ng-container>` is a special element in Angular that groups multiple elements together or marks a location in a template without rendering a real element in the DOM.\n\n```\n      <!-- Component template --><section>  <ng-container>    <h3>User bio</h3>    <p>Here's some info about the user</p>  </ng-container></section>\n\n```\n\ncheck\n\n```\n      <!-- Rendered DOM --><section>  <h3>User bio</h3>  <p>Here's some info about the user</p></section>\n\n```\n\ncheck\n\nYou can apply directives to `<ng-container>` to add behaviors or configuration to a part of your template.\n\nAngular ignores all attribute bindings and event listeners applied to `<ng-container>`, including those applied via directive.\n\n## [Using `<ng-container>` to display dynamic contents](https://angular.dev/guide/templates/ng-container\\#using-ng-container-to-display-dynamic-contents)\n\n`<ng-container>` can act as a placeholder for rendering dynamic content.\n\n### [Rendering components](https://angular.dev/guide/templates/ng-container\\#rendering-components)\n\nYou can use Angular's built-in `NgComponentOutlet` directive to dynamically render a component to the location of the `<ng-container>`.\n\n```\n      @Component({  template: `    <h2>Your profile</h2>    <ng-container [ngComponentOutlet]=\"profileComponent()\" />  `})export class UserProfile {  isAdmin = input(false);  profileComponent = computed(() => this.isAdmin() ? AdminProfile : BasicUserProfile);}\n\n```\n\ncheck\n\nIn the example above, the `NgComponentOutlet` directive dynamically renders either `AdminProfile` or `BasicUserProfile` in the location of the `<ng-container>` element.\n\n### [Rendering template fragments](https://angular.dev/guide/templates/ng-container\\#rendering-template-fragments)\n\nYou can use Angular's built-in `NgTemplateOutlet` directive to dynamically render a template fragment to the location of the `<ng-container>`.\n\n```\n      @Component({  template: `    <h2>Your profile</h2>    <ng-container [ngTemplateOutlet]=\"profileTemplate()\" />    <ng-template #admin>This is the admin profile</ng-template>    <ng-template #basic>This is the basic profile</ng-template>  `})export class UserProfile {  isAdmin = input(false);  adminTemplate = viewChild('admin', {read: TemplateRef});  basicTemplate = viewChild('basic', {read: TemplateRef});  profileTemplate = computed(() => this.isAdmin() ? this.adminTemplate() : this.basicTemplate());}\n\n```\n\ncheck\n\nIn the example above, the `ngTemplateOutlet` directive dynamically renders one of two template fragments in the location of the `<ng-container>` element.\n\nFor more information regarding NgTemplateOutlet, see the [NgTemplateOutlets API documentation page](https://angular.dev/api/common/NgTemplateOutlet).\n\n## [Using `<ng-container>` with structural directives](https://angular.dev/guide/templates/ng-container\\#using-ng-container-with-structural-directives)\n\nYou can also apply structural directives to `<ng-container>` elements. Common examples of this include `ngIf` and `ngFor`.\n\n```\n      <ng-container *ngIf=\"permissions == 'admin'\">  <h1>Admin Dashboard</h1>  <admin-infographic></admin-infographic></ng-container><ng-container *ngFor=\"let item of items; index as i; trackBy: trackByFn\">  <h2>{{ item.title }}</h2>  <p>{{ item.description }}</p></ng-container>\n\n```\n\ncheck\n\n## [Using `<ng-container>` for injection](https://angular.dev/guide/templates/ng-container\\#using-ng-container-for-injection)\n\nSee the Dependency Injection guide for more information on Angular's dependency injection system.\n\nWhen you apply a directive to `<ng-container>`, descendant elements can inject the directive or anything that the directive provides. Use this when you want to declaratively provide a value to a specific part of your template.\n\n```\n      @Directive({  selector: '[theme]',})export class Theme {  // Create an input that accepts 'light' or 'dark`, defaulting to 'light'.  mode = input<'light' | 'dark'>('light');}\n\n```\n\ncheck\n\n```\n      <ng-container theme=\"dark\">  <profile-pic />  <user-bio /></ng-container>\n\n```\n\ncheck\n\nIn the example above, the `ProfilePic` and `UserBio` components can inject the `Theme` directive and apply styles based on its `mode`.",
  "title": "Grouping elements with ng-container \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "ng",
    "https",
    "container",
    "dev",
    "guide",
    "templates",
    "template",
    "directive",
    "admin"
  ],
  "sourceURL": "https://angular.dev/guide/templates/ng-container"
}