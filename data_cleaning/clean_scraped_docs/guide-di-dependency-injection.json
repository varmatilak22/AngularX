{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backDependency Injection\n  - [Overview](https://angular.dev/guide/di)\n  - [Understanding dependency injection](https://angular.dev/guide/di/dependency-injection)\n  - [Creating an injectable service](https://angular.dev/guide/di/creating-injectable-service)\n  - [Defining dependency providers](https://angular.dev/guide/di/dependency-injection-providers)\n  - [Injection context](https://angular.dev/guide/di/dependency-injection-context)\n  - [Hierarchical injectors](https://angular.dev/guide/di/hierarchical-dependency-injection)\n  - [Optimizing injection tokens](https://angular.dev/guide/di/lightweight-injection-tokens)\n  - [DI in action](https://angular.dev/guide/di/di-in-action)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nDependency injection, or DI, is one of the fundamental concepts in Angular. DI is wired into the Angular framework and allows classes with Angular decorators, such as Components, Directives, Pipes, and Injectables, to configure dependencies that they need.\n\nTwo main roles exist in the DI system: dependency consumer and dependency provider.\n\nAngular facilitates the interaction between dependency consumers and dependency providers using an abstraction called `Injector`. When a dependency is requested, the injector checks its registry to see if there is an instance already available there. If not, a new instance is created and stored in the registry. Angular creates an application-wide injector (also known as the \"root\" injector) during the application bootstrap process. In most cases you don't need to manually create injectors, but you should know that there is a layer that connects providers and consumers.\n\nThis topic covers basic scenarios of how a class can act as a dependency. Angular also allows you to use functions, objects, primitive types such as string or Boolean, or any other types as dependencies. For more information, see [Dependency providers](https://angular.dev/guide/di/guide/di/dependency-injection-providers).\n\n## [Providing a dependency](https://angular.dev/guide/di/dependency-injection\\#providing-a-dependency)\n\nConsider a class called `HeroService` that needs to act as a dependency in a component.\n\nThe first step is to add the `@Injectable` decorator to show that the class can be injected.\n\n```\n      @Injectable()class HeroService {}\n\n```\n\ncheck\n\nThe next step is to make it available in the DI by providing it.\nA dependency can be provided in multiple places:\n\n- [Understanding dependency injection](https://angular.dev/guide/di/dependency-injection#understanding-dependency-injection)\n  - [Providing a dependency](https://angular.dev/guide/di/dependency-injection#providing-a-dependency)\n    - [**Preferred**: At the application root level using `providedIn`](https://angular.dev/guide/di/dependency-injection#preferred-at-the-application-root-level-using-providedin)\n    - [At the Component level](https://angular.dev/guide/di/dependency-injection#at-the-component-level)\n    - [At the application root level using `ApplicationConfig`](https://angular.dev/guide/di/dependency-injection#at-the-application-root-level-using-applicationconfig)\n    - [`NgModule` based applications](https://angular.dev/guide/di/dependency-injection#ngmodule-based-applications)\n  - [Injecting/consuming a dependency](https://angular.dev/guide/di/dependency-injection#injectingconsuming-a-dependency)\n  - [What's next](https://angular.dev/guide/di/dependency-injection#whats-next)\n\n### [**Preferred**: At the application root level using `providedIn`](https://angular.dev/guide/di/dependency-injection\\#preferred-at-the-application-root-level-using-providedin)\n\nProviding a service at the application root level using `providedIn` allows injecting the service into all other classes.\nUsing `providedIn` enables Angular and JavaScript code optimizers to effectively remove services that are unused (known as tree-shaking).\n\nYou can provide a service by using `providedIn: 'root'` in the `@Injectable` decorator:\n\n```\n      @Injectable({  providedIn: 'root'})class HeroService {}\n\n```\n\ncheck\n\nWhen you provide the service at the root level, Angular creates a single, shared instance of the `HeroService` and injects it into any class that asks for it.\n\n### [At the Component level](https://angular.dev/guide/di/dependency-injection\\#at-the-component-level)\n\nYou can provide services at `@Component` level by using the `providers` field of the `@Component` decorator.\nIn this case the `HeroService` becomes available to all instances of this component and other components and directives used in the template.\n\nFor example:\n\n```\n      @Component({  selector: 'hero-list',  template: '...',  providers: [HeroService]})class HeroListComponent {}\n\n```\n\ncheck\n\nWhen you register a provider at the component level, you get a new instance of the service with each new instance of that component.\n\n**NOTE:** Declaring a service like this causes `HeroService` to always be included in your application\u2014 even if the service is unused.\n\n### [At the application root level using `ApplicationConfig`](https://angular.dev/guide/di/dependency-injection\\#at-the-application-root-level-using-applicationconfig)\n\nYou can use the `providers` field of the `ApplicationConfig` (passed to the `bootstrapApplication` function) to provide a service or other `Injectable` at the application level.\n\nIn the example below, the `HeroService` is available to all components, directives, and pipes:\n\n```\n      export const appConfig: ApplicationConfig = {    providers: [      { provide: HeroService },    ]};\n\n```\n\ncheck\n\nThen, in `main.ts`:\n\n```\n      bootstrapApplication(AppComponent, appConfig)\n\n```\n\ncheck\n\n**NOTE:** Declaring a service like this causes `HeroService` to always be included in your application\u2014 even if the service is unused.\n\n### [`NgModule` based applications](https://angular.dev/guide/di/dependency-injection\\#ngmodule-based-applications)\n\n`@NgModule`-based applications use the `providers` field of the `@NgModule` decorator to provide a service or other `Injectable` available at the application level.\n\nA service provided in a module is available to all declarations of the module, or to any other modules which share the same `ModuleInjector`.\nTo understand all edge-cases, see [Hierarchical injectors](https://angular.dev/guide/di/guide/di/hierarchical-dependency-injection).\n\n**NOTE:** Declaring a service using `providers` causes the service to be included in your application\u2014 even if the service is unused.\n\n## [Injecting/consuming a dependency](https://angular.dev/guide/di/dependency-injection\\#injecting-consuming-a-dependency)\n\nUse Angular's `inject` function to retrieve dependencies.\n\n```\n      import {inject, Component} from 'angular/core';@Component({/* ... */})export class UserProfile {  // You can use the `inject` function in property initializers.  private userClient = inject(UserClient);  constructor() {    // You can also use the `inject` function in a constructor.    const logger = inject(Logger);  }}\n\n```\n\ncheck\n\nYou can use the `inject` function in any [injection context](https://angular.dev/guide/di/guide/di/dependency-injection-context). Most of the time, this is in a class property initializer or a class constructor for components, directives, services, and pipes.\n\nWhen Angular discovers that a component depends on a service, it first checks if the injector has any existing instances of that service. If a requested service instance doesn't yet exist, the injector creates one using the registered provider, and adds it to the injector before returning the service to Angular.\n\nWhen all requested services have been resolved and returned, Angular can call the component's constructor with those services as arguments.\n\nInjector\n\nService A\n\nHeroService\n\nService C\n\nService D\n\nComponent\n\nheroService = inject(HeroService)\n\n## [What's next](https://angular.dev/guide/di/dependency-injection\\#whats-next)",
  "title": "Understanding dependency injection \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "dependency",
    "https",
    "dev",
    "di",
    "guide",
    "injection",
    "service",
    "level",
    "application"
  ],
  "sourceURL": "https://angular.dev/guide/di/dependency-injection"
}