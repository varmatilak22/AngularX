{
  "content": "Skip to main content\n\nmenu\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nunfold\\_more\nDeferrable ViewsDefer triggers\nReveal Answer\n\n[chevron\\_left](https://angular.dev/tutorials/deferrable-views/2-loading-error-placeholder) chevron\\_right\n\nReveal Answer\n\nunfold\\_more\nDeferrable ViewsDefer triggers\nReveal Answer\n\n[chevron\\_left](https://angular.dev/tutorials/deferrable-views/2-loading-error-placeholder) chevron\\_right\n\nReveal Answer\n\nWhile the default options for `@defer` offer great options for lazy loading parts of your components it may still be desirable to further customize the deferred loading experience.\n\nBy default, deferred content loads when the browser is idle. You can, however, customize when this loading occurs by specifying a **trigger**. This lets you pick the loading behavior best suited to your component.\n\nDeferrable views offer two types of loading trigger:\n\n|     |     |\n| --- | --- |\n| `on` | A trigger condition using a trigger from the list of built-in triggers.<br> For example: `@defer (on viewport)` |\n| `when` | A condition as an expression which is evaluated for truthiness. When the expression is truthy, the placeholder is swapped with the lazily loaded content.<br> For example: `@defer (when customizedCondition)` |\n\nIf the `when` condition evaluates to `false`, the `defer` block is not reverted back to the placeholder. The swap is a one-time operation.\n\nYou can define multiple event triggers at once, these triggers will be evaluated as OR conditions.\n\n- Ex: `@defer (on viewport; on timer(2s))`\n- Ex: `@defer (on viewport; when customizedCondition)`\n\nIn this activity, you'll learn how to use triggers to specify the condition to load the deferrable views.\n\n* * *\n\n1. ### [Add `on hover` trigger](https://angular.dev/tutorials/deferrable-views/3-defer-triggers\\#add-on-hover-trigger)\n\n\nIn your `app.component.ts`, add an `on hover` trigger to the `@defer` block.\n\n\n\n```\n         @defer (on hover) {  <article-comments />} @placeholder (minimum 1s) {  <p>Placeholder for comments</p>} @loading (minimum 1s; after 500ms) {  <p>Loading comments...</p>} @error {  <p>Failed to load comments</p>}\n\n```\n\ncheck\n\nNow, the page will not render the comments section until you hover its placeholder.\n\n2. ### [Add a 'Show all comments' button](https://angular.dev/tutorials/deferrable-views/3-defer-triggers\\#add-a-show-all-comments-button)\n\n\nNext, update the template to include a button with the label \"Show all comments\". Include a template variable called `#showComments` with the button.\n\n\n\n```\n         <button type=\"button\" #showComments>Show all comments</button>@defer (on hover) {  <article-comments />} @placeholder (minimum 1s) {  <p>Placeholder for comments</p>} @loading (minimum 1s; after 500ms) {  <p>Loading comments...</p>} @error {  <p>Failed to load comments</p>}\n\n```\n\ncheck\n\nNOTE: for more information on [template variables check the documentation](https://angular.dev/guide/templates/reference-variables#).\n\n3. ### [Add `on interaction` trigger](https://angular.dev/tutorials/deferrable-views/3-defer-triggers\\#add-on-interaction-trigger)\n\n\nUpdate the `@defer` block in the template to use the `on interaction` trigger. Provide the `showComments` template variable as the parameter to `interaction`.\n\n\n\n```\n         <button type=\"button\" #showComments>Show all comments</button>@defer (on hover; on interaction(showComments)) {  <article-comments />} @placeholder (minimum 1s) {  <p>Placeholder for comments</p>} @loading (minimum 1s; after 500ms) {  <p>Loading comments...</p>} @error {  <p>Failed to load comments</p>}\n\n```\n\ncheck\n\nWith these changes, the page will wait for one of the following conditions before rendering the comments section:\n\n\n   - User hovers the comments section\u2019s placeholder\n   - User clicks on the \u201cShow all comments\" button\n\nYou can reload the page to try out different triggers to render the comments section.\n\nIf you would like to learn more, check out the documentation for [Deferrable View](https://angular.dev/guide/defer).\nKeep learning to unlock more of Angular's great features.\n\napp/app.component.ts\n\napp/article-comments.component.ts\n\nadd\n\nlaunchdownload\n\n99\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n\u203a\n\n\u2304\n\n\u2304\n\n\u2304\n\n\u2304\n\nimport{Component}from'@angular/core';\n\nimport{ArticleCommentsComponent}from'./article-comments.component';\n\n@Component({\n\nselector:'app-root',\n\ntemplate:\\`\n\n<div>\n\n<h1>How I feel about Angular</h1>\n\n<article>\n\n<p>\n\nAngular is my favorite framework, and\n\nthis is why. Angular has the coolest\n\ndeferrable view feature that makes defer\n\nloading content the easiest and most\n\nergonomic it could possibly be.\n\n</p>\n\n</article>\n\n@defer {\n\n<article-comments/>\n\n} @placeholder (minimum 1s) {\n\n<p>Placeholder for comments</p>\n\n} @loading (minimum 1s; after 500ms) {\n\n<p>Loading comments...</p>\n\n} @error {\n\n<p>Failed to load comments</p>\n\n}\n\n</div>\n\n\\`,\n\nimports:\\[ArticleCommentsComponent\\],\n\n})\n\nexportclassAppComponent{}\n\nPreview\n\nBooting\n\nConsole\n\nTerminal\n\nrefresh\n\nStackBlitz",
  "title": "Defer triggers \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "comments",
    "defer",
    "loading",
    "placeholder",
    "angular",
    "button",
    "deferrable",
    "trigger",
    "triggers",
    "1s"
  ],
  "sourceURL": "https://angular.dev/tutorials/deferrable-views/3-defer-triggers"
}