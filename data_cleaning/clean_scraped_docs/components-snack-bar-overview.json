{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for snack-bar\n\n`MatSnackBar` is a service for displaying snack-bar notifications.\n\nBasic snack-bar\n\nlinkcodeopen\\_in\\_new\n\nMessage\n\nAction\n\nShow snack-bar\n\n### [link](https://material.angular.io/components/snack-bar/overview\\#opening-a-snackbar)  Opening a snackbar\n\nA snackbar can contain either a string message or a given component.\n\n```ts\n// Simple message.\nlet snackBarRef = snackBar.open('Message archived');\n\n// Simple message with an action.\nlet snackBarRef = snackBar.open('Message archived', 'Undo');\n\n// Load the given component into the snackbar.\nlet snackBarRef = snackBar.openFromComponent(MessageArchivedComponent);\n\n```\n\nIn either case, a `MatSnackBarRef` is returned. This can be used to dismiss the snackbar or to\nreceive notification of when the snackbar is dismissed. For simple messages with an action, the\n`MatSnackBarRef` exposes an observable for when the action is triggered.\nIf you want to close a custom snackbar that was opened via `openFromComponent`, from within the\ncomponent itself, you can inject the `MatSnackBarRef`.\n\n```ts\nsnackBarRef.afterDismissed().subscribe(() => {\n  console.log('The snackbar was dismissed');\n});\n\nsnackBarRef.onAction().subscribe(() => {\n  console.log('The snackbar action was triggered!');\n});\n\nsnackBarRef.dismiss();\n\n```\n\n### [link](https://material.angular.io/components/snack-bar/overview\\#dismissal)  Dismissal\n\nA snackbar can be dismissed manually by calling the `dismiss` method on the `MatSnackBarRef`\nreturned from the call to `open`.\n\nOnly one snackbar can ever be opened at one time. If a new snackbar is opened while a previous\nmessage is still showing, the older message will be automatically dismissed.\n\nA snackbar can also be given a duration via the optional configuration object:\n\n```ts\nsnackBar.open('Message archived', 'Undo', {\n  duration: 3000\n});\n\n```\n\n### [link](https://material.angular.io/components/snack-bar/overview\\#sharing-data-with-a-custom-snackbar)  Sharing data with a custom snackbar\n\nYou can share data with the custom snackbar, that you opened via the `openFromComponent` method,\nby passing it through the `data` property.\n\n```ts\nsnackBar.openFromComponent(MessageArchivedComponent, {\n  data: 'some data'\n});\n\n```\n\nTo access the data in your component, you have to use the `MAT_SNACK_BAR_DATA` injection token:\n\n```ts\nimport {Component, Inject} from '@angular/core';\nimport {MAT_SNACK_BAR_DATA} from '../snack-bar';\n\n@Component({\n  selector: 'your-snackbar',\n  template: 'passed in {{ data }}',\n})\nexport class MessageArchivedComponent {\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: string) { }\n}\n\n```\n\n### [link](https://material.angular.io/components/snack-bar/overview\\#annotating-custom-snackbar-content)  Annotating custom snackbar content\n\nWhen opening a custom snackbar via the `snackBar.openFromComponent` method, you can use the\nfollowing directives to annotate the content and ensure that it is styled consistently compared to\nsnackbars opened via `snackBar.open`.\n\n- `matSnackBarLabel` \\- Marks the text of the snackbar shown to users\n- `matSnackBarActions` \\- Marks the container element containing any action buttons\n- `matSnackBarAction` \\- Marks an individual action button\n\nIf no annotations are used, all the content will be treated as text content.\n\nSnack-bar with an annotated custom component\n\nlinkcodeopen\\_in\\_new\n\nSnack bar duration (seconds)\n\nPizza party\n\n### [link](https://material.angular.io/components/snack-bar/overview\\#setting-the-global-configuration-defaults)  Setting the global configuration defaults\n\nIf you want to override the default snack bar options, you can do so using the\n`MAT_SNACK_BAR_DEFAULT_OPTIONS` injection token.\n\n```ts\n@NgModule({\n  providers: [\\\n    {provide: MAT_SNACK_BAR_DEFAULT_OPTIONS, useValue: {duration: 2500}}\\\n  ]\n})\n\n```\n\n### [link](https://material.angular.io/components/snack-bar/overview\\#accessibility)  Accessibility\n\n`MatSnackBar` announces messages via an `aria-live` region. While announcements use the `polite`\nsetting by default, you can customize this by setting the `politeness` property of\n`MatSnackBarConfig`.\n\n`MatSnackBar` does not move focus to the snackbar element. Moving focus like this would disrupt\nusers in the middle of a workflow. For any action offered in the snackbar, your application should\nprovide an alternative way to perform the action. Alternative interactions are typically keyboard\nshortcuts or menu options. You should dismiss the snackbar once the user performs its corresponding\naction. A snackbar can contain a single action with an additional optional \"dismiss\" or \"cancel\"\naction.\n\nAvoid setting a `duration` for snackbars that have an action available, as screen reader users may\nwant to navigate to the snackbar element to activate the action. If the user has manually moved\ntheir focus within the snackbar, you should return focus somewhere that makes sense in the context\nof the user's workflow.\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Basic snack-bar example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit Snack-bar with an annotated custom component example in StackBlitz",
  "title": "Snackbar | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/snack-bar/overview"
}