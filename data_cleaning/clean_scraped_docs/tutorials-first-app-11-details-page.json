{
  "content": "Skip to main content\n\nmenu\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nunfold\\_more\nYour first Angular appCustomize the details page\n\n[chevron\\_left](https://angular.dev/tutorials/first-app/10-routing) [chevron\\_right](https://angular.dev/tutorials/first-app/12-forms)\n\nunfold\\_more\nYour first Angular appCustomize the details page\n\n[chevron\\_left](https://angular.dev/tutorials/first-app/10-routing) [chevron\\_right](https://angular.dev/tutorials/first-app/12-forms)\n\nThis tutorial lesson demonstrates how to connect the details page to your app.\n\nServices in Angular - Learning Angular (Part 6) - YouTube\n\nAngular\n\n159K subscribers\n\n[Services in Angular - Learning Angular (Part 6)](https://www.youtube.com/watch?v=-jRxG84AzCI)\n\nAngular\n\nSearch\n\nWatch later\n\nShare\n\nCopy link\n\nInfo\n\nShopping\n\nTap to unmute\n\nIf playback doesn't begin shortly, try restarting your device.\n\nYou're signed out\n\nVideos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.\n\nCancelConfirm\n\nMore videos\n\n## More videos\n\nShare\n\nInclude playlist\n\nAn error occurred while retrieving sharing information. Please try again later.\n\n[Watch on](https://www.youtube.com/watch?t=345&v=-jRxG84AzCI&embeds_referring_euri=https%3A%2F%2Fangular.dev%2F)\n\n5:45\n\n5:45 / 14:05\n\u2022Live\n\n\u2022\n\n[Watch on YouTube](https://www.youtube.com/watch?v=-jRxG84AzCI \"Watch on YouTube\")\n\n**IMPORTANT:** We recommend using your local environment to learn routing.\n\n## [What you'll learn](https://angular.dev/tutorials/first-app/11-details-page\\#what-youll-learn)\n\nAt the end of this lesson your application will have support for routing to the details page.\n\n## [Conceptual preview of routing with route parameters](https://angular.dev/tutorials/first-app/11-details-page\\#conceptual-preview-of-routing-with-route-parameters)\n\nEach housing location has specific details that should be displayed when a user navigates to the details page for that item. To accomplish this goal, you will need to use route parameters.\n\nRoute parameters enable you to include dynamic information as a part of your route URL. To identify which housing location a user has clicked on you will use the `id` property of the `HousingLocation` type.\n\n1. ### [Using `routerLink` for dynamic navigation](https://angular.dev/tutorials/first-app/11-details-page\\#using-routerlink-for-dynamic-navigation)\n\n\nIn lesson 10, you added a second route to `src/app/routes.ts` which includes a special segment that identifies the route parameter, `id`:\n\n\n\n```\n         'details/:id'\n\n```\n\ncheck\n\nIn this case, `:id` is dynamic and will change based on how the route is requested by the code.\n1. In `src/app/housing-location/housing-location.component.ts`, add an anchor tag to the `section` element and include the `routerLink` directive:\n\n\n\n\n      check\n\n      ```\n            import {Component, Input} from '@angular/core';import {CommonModule} from '@angular/common';import {HousingLocation} from '../housinglocation';import {RouterModule} from '@angular/router';@Component({  selector: 'app-housing-location',  imports: [CommonModule, RouterModule],  template: `    <section class=\"listing\">      <img        class=\"listing-photo\"        [src]=\"housingLocation.photo\"        alt=\"Exterior photo of {{ housingLocation.name }}\"        crossorigin      />      <h2 class=\"listing-heading\">{{ housingLocation.name }}</h2>      <p class=\"listing-location\">{{ housingLocation.city }}, {{ housingLocation.state }}</p>      <a [routerLink]=\"['/details', housingLocation.id]\">Learn More</a>    </section>  `,  styleUrls: ['./housing-location.component.css'],})export class HousingLocationComponent {  @Input() housingLocation!: HousingLocation;}\n\n      ```\n\n\n\n\n\n\n       The `routerLink` directive enables Angular's router to create dynamic links in the application. The value assigned to the `routerLink` is an array with two entries: the static portion of the path and the dynamic data.\n\n       For the `routerLink` to work in the template, add a file level import of `RouterLink` and `RouterOutlet` from '@angular/router', then update the component `imports` array to include both `RouterLink` and `RouterOutlet`.\n\n2. At this point you can confirm that the routing is working in your app. In the browser, refresh the home page and click the \"Learn More\" button for a housing location.\n      ![details page displaying the text 'details works!'](https://angular.dev/assets/images/tutorials/first-app/homes-app-lesson-11-step-1.png)\n2. ### [Get route parameters](https://angular.dev/tutorials/first-app/11-details-page\\#get-route-parameters)\n\n\nIn this step, you will get the route parameter in the `DetailsComponent`. Currently, the app displays `details works!`. Next you'll update the code to display the `id` value passed using the route parameters.\n1. In `src/app/details/details.component.ts` update the template to import the functions, classes and services that you'll need to use in the `DetailsComponent`:\n\n\n\n\n      check\n\n      ```\n            import {Component, inject} from '@angular/core';import {CommonModule} from '@angular/common';import {ActivatedRoute} from '@angular/router';import {HousingService} from '../housing.service';import {HousingLocation} from '../housinglocation';@Component({  selector: 'app-details',  imports: [CommonModule],  template: `    <article>      <img        class=\"listing-photo\"        [src]=\"housingLocation?.photo\"        alt=\"Exterior photo of {{ housingLocation?.name }}\"        crossorigin      />      <section class=\"listing-description\">        <h2 class=\"listing-heading\">{{ housingLocation?.name }}</h2>        <p class=\"listing-location\">{{ housingLocation?.city }}, {{ housingLocation?.state }}</p>      </section>      <section class=\"listing-features\">        <h2 class=\"section-heading\">About this housing location</h2>        <ul>          <li>Units available: {{ housingLocation?.availableUnits }}</li>          <li>Does this location have wifi: {{ housingLocation?.wifi }}</li>          <li>Does this location have laundry: {{ housingLocation?.laundry }}</li>        </ul>      </section>    </article>  `,  styleUrls: ['./details.component.css'],})export class DetailsComponent {  route: ActivatedRoute = inject(ActivatedRoute);  housingService = inject(HousingService);  housingLocation: HousingLocation | undefined;  constructor() {    const housingLocationId = Number(this.route.snapshot.params['id']);    this.housingLocation = this.housingService.getHousingLocationById(housingLocationId);  }}\n\n      ```\n\n2. Update the `template` property of the `@Component` decorator to display the value `housingLocationId`:\n\n\n\n      ```\n            template: `<p>details works! {{ housingLocationId }}</p>`,\n\n      ```\n\n      check\n\n3. Update the body of the `DetailsComponent` class with the following code:\n\n\n\n      ```\n            export class DetailsComponent {         route: ActivatedRoute = inject(ActivatedRoute);         housingLocationId = -1;         constructor() {             this.housingLocationId = Number(this.route.snapshot.params['id']);         }     }\n\n      ```\n\n      check\n\n       This code gives the `DetailsComponent` access to the `ActivatedRoute` router feature that enables you to have access to the data about the current route. In the `constructor`, the code converts the `id` parameter acquired from the route from a string to a number.\n\n4. Save all changes.\n\n5. In the browser, click on one of the housing location's \"Learn More\" links and confirm that the numeric value displayed on the page matches the `id` property for that location in the data.\n3. ### [Customize the `DetailComponent`](https://angular.dev/tutorials/first-app/11-details-page\\#customize-the-detailcomponent)\n\n\nNow that routing is working properly in the application this is a great time to update the template of the `DetailsComponent` to display the specific data represented by the housing location for the route parameter.\n\nTo access the data you will add a call to the `HousingService`.\n1. Update the template code to match the following code:\n\n\n\n\n      check\n\n      ```\n            import {Component, inject} from '@angular/core';import {CommonModule} from '@angular/common';import {ActivatedRoute} from '@angular/router';import {HousingService} from '../housing.service';import {HousingLocation} from '../housinglocation';@Component({  selector: 'app-details',  imports: [CommonModule],  template: `    <article>      <img        class=\"listing-photo\"        [src]=\"housingLocation?.photo\"        alt=\"Exterior photo of {{ housingLocation?.name }}\"        crossorigin      />      <section class=\"listing-description\">        <h2 class=\"listing-heading\">{{ housingLocation?.name }}</h2>        <p class=\"listing-location\">{{ housingLocation?.city }}, {{ housingLocation?.state }}</p>      </section>      <section class=\"listing-features\">        <h2 class=\"section-heading\">About this housing location</h2>        <ul>          <li>Units available: {{ housingLocation?.availableUnits }}</li>          <li>Does this location have wifi: {{ housingLocation?.wifi }}</li>          <li>Does this location have laundry: {{ housingLocation?.laundry }}</li>        </ul>      </section>    </article>  `,  styleUrls: ['./details.component.css'],})export class DetailsComponent {  route: ActivatedRoute = inject(ActivatedRoute);  housingService = inject(HousingService);  housingLocation: HousingLocation | undefined;  constructor() {    const housingLocationId = Number(this.route.snapshot.params['id']);    this.housingLocation = this.housingService.getHousingLocationById(housingLocationId);  }}\n\n      ```\n\n\n\n\n\n\n       Notice that the `housingLocation` properties are being accessed with the optional chaining operator `?`. This ensures that if the `housingLocation` value is null or undefined the application doesn't crash.\n\n2. Update the body of the `DetailsComponent` class to match the following code:\n\n\n\n\n      check\n\n      ```\n            import {Component, inject} from '@angular/core';import {CommonModule} from '@angular/common';import {ActivatedRoute} from '@angular/router';import {HousingService} from '../housing.service';import {HousingLocation} from '../housinglocation';@Component({  selector: 'app-details',  imports: [CommonModule],  template: `    <article>      <img        class=\"listing-photo\"        [src]=\"housingLocation?.photo\"        alt=\"Exterior photo of {{ housingLocation?.name }}\"        crossorigin      />      <section class=\"listing-description\">        <h2 class=\"listing-heading\">{{ housingLocation?.name }}</h2>        <p class=\"listing-location\">{{ housingLocation?.city }}, {{ housingLocation?.state }}</p>      </section>      <section class=\"listing-features\">        <h2 class=\"section-heading\">About this housing location</h2>        <ul>          <li>Units available: {{ housingLocation?.availableUnits }}</li>          <li>Does this location have wifi: {{ housingLocation?.wifi }}</li>          <li>Does this location have laundry: {{ housingLocation?.laundry }}</li>        </ul>      </section>    </article>  `,  styleUrls: ['./details.component.css'],})export class DetailsComponent {  route: ActivatedRoute = inject(ActivatedRoute);  housingService = inject(HousingService);  housingLocation: HousingLocation | undefined;  constructor() {    const housingLocationId = Number(this.route.snapshot.params['id']);    this.housingLocation = this.housingService.getHousingLocationById(housingLocationId);  }}\n\n      ```\n\n\n\n\n\n\n       Now the component has the code to display the correct information based on the selected housing location. The `constructor` now includes a call to the `HousingService` to pass the route parameter as an argument to the `getHousingLocationById` service function.\n\n3. Copy the following styles into the `src/app/details/details.component.css` file:\n\n\n\n\n      check\n\n      ```\n            .listing-photo {  height: 600px;  width: 50%;  object-fit: cover;  border-radius: 30px;  float: right;}.listing-heading {  font-size: 48pt;  font-weight: bold;  margin-bottom: 15px;}.listing-location::before {  content: url('/assets/location-pin.svg') / '';}.listing-location {  font-size: 24pt;  margin-bottom: 15px;}.listing-features > .section-heading {  color: var(--secondary-color);  font-size: 24pt;  margin-bottom: 15px;}.listing-features {  margin-bottom: 20px;}.listing-features li {  font-size: 14pt;}li {  list-style-type: none;}.listing-apply .section-heading {  font-size: 18pt;  margin-bottom: 15px;}label, input {  display: block;}label {  color: var(--secondary-color);  font-weight: bold;  text-transform: uppercase;  font-size: 12pt;}input {  font-size: 16pt;  margin-bottom: 15px;  padding: 10px;  width: 400px;  border-top: none;  border-right: none;  border-left: none;  border-bottom: solid .3px;}@media (max-width: 1024px) {  .listing-photo {    width: 100%;    height: 400px;  }}\n\n      ```\n\n4. Save your changes.\n\n5. In the browser refresh the page and confirm that when you click on the \"Learn More\" link for a given housing location the details page displays the correct information based on the data for that selected item.\n      ![Details page listing home info](https://angular.dev/assets/images/tutorials/first-app/homes-app-lesson-11-step-3.png)\n4. ### [Add navigation to the `HomeComponent`](https://angular.dev/tutorials/first-app/11-details-page\\#add-navigation-to-the-homecomponent)\n\n\nIn a previous lesson you updated the `AppComponent` template to include a `routerLink`. Adding that code updated your app to enable navigation back to the `HomeComponent` whenever the logo is clicked.\n1. Confirm that your code matches the following:\n\n\n\n\n      check\n\n      ```\n            import {Component} from '@angular/core';import {HomeComponent} from './home/home.component';import {RouterLink, RouterOutlet} from '@angular/router';@Component({  selector: 'app-root',  imports: [HomeComponent, RouterLink, RouterOutlet],  template: `    <main>      <a [routerLink]=\"['/']\">        <header class=\"brand-name\">          <img class=\"brand-logo\" src=\"/assets/logo.svg\" alt=\"logo\" aria-hidden=\"true\" />        </header>      </a>      <section class=\"content\">        <router-outlet></router-outlet>      </section>    </main>  `,  styleUrls: ['./app.component.css'],})export class AppComponent {  title = 'homes';}\n\n      ```\n\n\n\n\n\n\n       Your code may already be up-to-date but confirm to be sure.\n\n**SUMMARY:** In this lesson you added routing to show details pages.\n\nYou now know how to:\n\n- use route parameters to pass data to a route\n- use the `routerLink` directive to use dynamic data to create a route\n- use route parameter to retrieve data from the `HousingService` to display specific housing location information.\n\nReally great work so far.\n\nFor more information about the topics covered in this lesson, visit:",
  "title": "Customize the details page \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "housinglocation",
    "angular",
    "class",
    "details",
    "listing",
    "location",
    "app",
    "route",
    "import",
    "component"
  ],
  "sourceURL": "https://angular.dev/tutorials/first-app/11-details-page"
}