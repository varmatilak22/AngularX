{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backAngular CLI\n  - [Overview](https://angular.dev/tools/cli)\n  - [Local set-up](https://angular.dev/tools/cli/setup-local)\n  - [Building Angular apps](https://angular.dev/tools/cli/build)\n  - [Serving Angular apps for development](https://angular.dev/tools/cli/serve)\n  - [Deployment](https://angular.dev/tools/cli/deployment)\n  - [End-to-End Testing](https://angular.dev/tools/cli/end-to-end)\n  - [Migrating to new build system](https://angular.dev/tools/cli/build-system-migration)\n  - [Build environments](https://angular.dev/tools/cli/environments)\n  - [Angular CLI builders](https://angular.dev/tools/cli/cli-builder)\n  - [Generating code using schematics](https://angular.dev/tools/cli/schematics)\n  - [Authoring schematics](https://angular.dev/tools/cli/schematics-authoring)\n  - [Schematics for libraries](https://angular.dev/tools/cli/schematics-for-libraries)\n  - [Template type checking](https://angular.dev/tools/cli/template-typecheck)\n  - [Ahead-of-time (AOT) compilation](https://angular.dev/tools/cli/aot-compiler)\n  - [AOT metadata errors](https://angular.dev/tools/cli/aot-metadata-errors)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nWhen you are ready to deploy your Angular application to a remote server, you have various options.\n\n## [Automatic deployment with the CLI](https://angular.dev/tools/cli/deployment\\#automatic-deployment-with-the-cli)\n\nThe Angular CLI command `ng deploy` executes the `deploy` [CLI builder](https://angular.dev/tools/cli/tools/cli/cli-builder) associated with your project.\nA number of third-party builders implement deployment capabilities to different platforms.\nYou can add any of them to your project with `ng add`.\n\nWhen you add a package with deployment capability, it will automatically update your workspace configuration ( `angular.json` file) with a `deploy` section for the selected project.\nYou can then use the `ng deploy` command to deploy that project.\n\nFor example, the following command automatically deploys a project to [Firebase](https://firebase.google.com/).\n\n```\n      ng add @angular/fireng deploy\n\n```\n\ncheck\n\nThe command is interactive.\nIn this case, you must have or create a Firebase account and authenticate using it.\nThe command prompts you to select a Firebase project for deployment before building your application and uploading the production assets to Firebase.\n\nThe table below lists tools which implement deployment functionality to different platforms.\nThe `deploy` command for each package may require different command line options.\nYou can read more by following the links associated with the package names below:\n\n| Deployment to | Setup Command |\n| :-- | :-- |\n| [Firebase hosting](https://firebase.google.com/docs/hosting) | [`ng add @angular/fire`](https://npmjs.org/package/@angular/fire) |\n| [Vercel](https://vercel.com/solutions/angular) | [`vercel init angular`](https://github.com/vercel/vercel/tree/main/examples/angular) |\n| [Netlify](https://www.netlify.com/) | [`ng add @netlify-builder/deploy`](https://npmjs.org/package/@netlify-builder/deploy) |\n| [GitHub pages](https://pages.github.com/) | [`ng add angular-cli-ghpages`](https://npmjs.org/package/angular-cli-ghpages) |\n| [Amazon Cloud S3](https://aws.amazon.com/s3/?nc2=h_ql_prod_st_s3) | [`ng add @jefiozie/ngx-aws-deploy`](https://www.npmjs.com/package/@jefiozie/ngx-aws-deploy) |\n\nIf you're deploying to a self-managed server or there's no builder for your favorite cloud platform, you can either [create a builder](https://angular.dev/tools/cli/tools/cli/cli-builder) that allows you to use the `ng deploy` command, or read through this guide to learn how to manually deploy your application.\n\n## [Manual deployment to a remote server](https://angular.dev/tools/cli/deployment\\#manual-deployment-to-a-remote-server)\n\nTo manually deploy your application, create a production build and copy the output directory to a web server or content delivery network (CDN).\nBy default, `ng build` uses the `production` configuration.\nIf you have customized your build configurations, you may want to confirm [production optimizations](https://angular.dev/tools/cli/tools/cli/deployment#production-optimizations) are being applied before deploying.\n\n`ng build` outputs the built artifacts to `dist/my-app/` by default, however this path can be configured with the `outputPath` option in the `@angular-devkit/build-angular:browser` builder.\nCopy this directory to the server and configure it to serve the directory.\n\nWhile this is a minimal deployment solution, there are a few requirements for the server to serve your Angular application correctly.\n\n## [Server configuration](https://angular.dev/tools/cli/deployment\\#server-configuration)\n\nThis section covers changes you may need to configure on the server to run your Angular application.\n\n### [Routed apps must fall back to `index.html`](https://angular.dev/tools/cli/deployment\\#routed-apps-must-fall-back-to-indexhtml)\n\nClient-side rendered Angular applications are perfect candidates for serving with a static HTML server because all the content is static and generated at build time.\n\nIf the application uses the Angular router, you must configure the server to return the application's host page ( `index.html`) when asked for a file that it does not have.\n\nA routed application should support \"deep links\".\nA _deep link_ is a URL that specifies a path to a component inside the application.\nFor example, `http://my-app.test/users/42` is a _deep link_ to the user detail page that displays the user with `id` 42.\n\nThere is no issue when the user initially loads the index page and then navigates to that URL from within a running client.\nThe Angular router performs the navigation _client-side_ and does not request a new HTML page.\n\nBut clicking a deep link in an email, entering it in the browser address bar, or even refreshing the browser while already on the deep linked page will all be handled by the browser itself, _outside_ the running application.\nThe browser makes a direct request to the server for `/users/42`, bypassing Angular's router.\n\nA static server routinely returns `index.html` when it receives a request for `http://my-app.test/`.\nBut most servers by default will reject `http://my-app.test/users/42` and returns a `404 - Not Found` error _unless_ it is configured to return `index.html` instead.\nConfigure the fallback route or 404 page to `index.html` for your server, so Angular is served for deep links and can display the correct route.\nSome servers call this fallback behavior \"Single-Page Application\" (SPA) mode.\n\nOnce the browser loads the application, Angular router will read the URL to determine which page it is on and display `/users/42` correctly.\n\nFor \"real\" 404 pages such as `http://my-app.test/does-not-exist`, the server does not require any additional configuration.\n[404 pages implemented in the Angular router](https://angular.dev/tools/cli/guide/routing/common-router-tasks#displaying-a-404-page) will be displayed correctly.\n\n### [Requesting data from a different server (CORS)](https://angular.dev/tools/cli/deployment\\#requesting-data-from-a-different-server-cors)\n\nWeb developers may encounter a [_cross-origin resource sharing_](https://developer.mozilla.org/docs/Web/HTTP/CORS \"Cross-origin\") error when making a network request to a server other than the application's own host server.\nBrowsers forbid such requests unless the server explicitly permits them.\n\nThere isn't anything Angular or the client application can do about these errors.\nThe _server_ must be configured to accept the application's requests.\nRead about how to enable CORS for specific servers at [enable-cors.org](https://enable-cors.org/server.html \"Enabling\").\n\n## [Production optimizations](https://angular.dev/tools/cli/deployment\\#production-optimizations)\n\n`ng build` uses the `production` configuration unless configured otherwise. This configuration enables the following build optimization features.\n\n| Features | Details |\n| :-- | :-- |\n| [Ahead-of-Time (AOT) Compilation](https://angular.dev/tools/cli/tools/cli/aot-compiler) | Pre-compiles Angular component templates. |\n| [Production mode](https://angular.dev/tools/cli/tools/cli/deployment#development-only-features) | Optimizes the application for the best runtime performance |\n| Bundling | Concatenates your many application and library files into a minimum number of deployed files. |\n| Minification | Removes excess whitespace, comments, and optional tokens. |\n| Mangling | Renames functions, classes, and variables to use shorter, arbitrary identifiers. |\n| Dead code elimination | Removes unreferenced modules and unused code. |\n\nSee [`ng build`](https://angular.dev/tools/cli/cli/build) for more about CLI build options and their effects.\n\n### [Development-only features](https://angular.dev/tools/cli/deployment\\#development-only-features)\n\nWhen you run an application locally using `ng serve`, Angular uses the development configuration\nat runtime which enables:\n\n- Extra safety checks such as [`expression-changed-after-checked`](https://angular.dev/tools/cli/errors/NG0100) detection.\n- More detailed error messages.\n- Additional debugging utilities such as the global `ng` variable with [debugging functions](https://angular.dev/tools/cli/api#core-global) and [Angular DevTools](https://angular.dev/tools/cli/tools/devtools) support.\n\nThese features are helpful during development, but they require extra code in the app, which is\nundesirable in production. To ensure these features do not negatively impact bundle size for end users, Angular CLI\nremoves development-only code from the bundle when building for production.\n\nBuilding your application with `ng build` by default uses the `production` configuration which removes these features from the output for optimal bundle size.\n\n## [`--deploy-url`](https://angular.dev/tools/cli/deployment\\#--deploy-url)\n\n`--deploy-url` is a command line option used to specify the base path for resolving relative URLs for assets such as images, scripts, and style sheets at _compile_ time.\n\n```\n      ng build --deploy-url /my/assets\n\n```\n\ncheck\n\nThe effect and purpose of `--deploy-url` overlaps with [`<base href>`](https://angular.dev/tools/cli/guide/routing/common-router-tasks). Both can be used for initial scripts, stylesheets, lazy scripts, and css resources.\n\nUnlike `<base href>` which can be defined in a single place at runtime, the `--deploy-url` needs to be hard-coded into an application at build time.\nPrefer `<base href>` where possible.",
  "title": "Deployment \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "cli",
    "dev",
    "tools",
    "server",
    "deployment",
    "application",
    "deploy",
    "build"
  ],
  "sourceURL": "https://angular.dev/tools/cli/deployment"
}