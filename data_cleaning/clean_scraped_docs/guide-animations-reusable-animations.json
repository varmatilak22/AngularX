{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backAnimations\n  - [Overview](https://angular.dev/guide/animations)\n  - [Transition and Triggers](https://angular.dev/guide/animations/transition-and-triggers)\n  - [Complex Sequences](https://angular.dev/guide/animations/complex-sequences)\n  - [Reusable Animations](https://angular.dev/guide/animations/reusable-animations)\n  - [Route transition animations](https://angular.dev/guide/animations/route-animations)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nThis topic provides some examples of how to create reusable animations.\n\n## [Create reusable animations](https://angular.dev/guide/animations/reusable-animations\\#create-reusable-animations)\n\nTo create a reusable animation, use the [`animation()`](https://angular.dev/guide/animations/api/animations/animation) function to define an animation in a separate `.ts` file and declare this animation definition as a `const` export variable.\nYou can then import and reuse this animation in any of your application components using the [`useAnimation()`](https://angular.dev/guide/animations/api/animations/useAnimation) function.\n\ncheck\n\n```\n      import {animation, style, animate, trigger, transition, useAnimation} from '@angular/animations';export const transitionAnimation = animation([  style({    height: '{{ height }}',    opacity: '{{ opacity }}',    backgroundColor: '{{ backgroundColor }}',  }),  animate('{{ time }}'),]);export const triggerAnimation = trigger('openClose', [  transition('open => closed', [    useAnimation(transitionAnimation, {      params: {        height: 0,        opacity: 1,        backgroundColor: 'red',        time: '1s',      },    }),  ]),]);\n\n```\n\nIn the preceding code snippet, `transitionAnimation` is made reusable by declaring it as an export variable.\n\n**HELPFUL:** The `height`, `opacity`, `backgroundColor`, and `time` inputs are replaced during runtime.\n\nYou can also export a part of an animation.\nFor example, the following snippet exports the animation `trigger`.\n\ncheck\n\n```\n      import {animation, style, animate, trigger, transition, useAnimation} from '@angular/animations';export const transitionAnimation = animation([  style({    height: '{{ height }}',    opacity: '{{ opacity }}',    backgroundColor: '{{ backgroundColor }}',  }),  animate('{{ time }}'),]);\n...export const triggerAnimation = trigger('openClose', [  transition('open => closed', [    useAnimation(transitionAnimation, {      params: {        height: 0,        opacity: 1,        backgroundColor: 'red',        time: '1s',      },    }),  ]),]);\n\n```\n\nFrom this point, you can import reusable animation variables in your component class.\nFor example, the following code snippet imports the `transitionAnimation` variable and uses it via the `useAnimation()` function.\n\ncheck\n\n```\n      import {Component, Input} from '@angular/core';import {transition, trigger, useAnimation, AnimationEvent} from '@angular/animations';import {transitionAnimation} from './animations';@Component({  selector: 'app-open-close-reusable',  animations: [    trigger('openClose', [      transition('open => closed', [        useAnimation(transitionAnimation, {          params: {            height: 0,            opacity: 1,            backgroundColor: 'red',            time: '1s',          },        }),      ]),    ]),  ],  templateUrl: 'open-close.component.html',  styleUrls: ['open-close.component.css'],})export class OpenCloseBooleanComponent {  isOpen = false;  toggle() {    this.isOpen = !this.isOpen;  }  @Input() logging = false;  onAnimationEvent(event: AnimationEvent) {    if (!this.logging) {      return;    }  }}\n\n```\n\n## [More on Angular animations](https://angular.dev/guide/animations/reusable-animations\\#more-on-angular-animations)\n\nYou might also be interested in the following:",
  "title": "Reusable Animations \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "animations",
    "https",
    "dev",
    "animation",
    "guide",
    "reusable",
    "transition",
    "useanimation",
    "backgroundcolor"
  ],
  "sourceURL": "https://angular.dev/guide/animations/reusable-animations"
}