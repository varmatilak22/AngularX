{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backTemplates\n  - [Overview](https://angular.dev/guide/templates)\n  - [Binding dynamic text, properties and attributes](https://angular.dev/guide/templates/binding)\n  - [Adding event listeners](https://angular.dev/guide/templates/event-listeners)\n  - [Two-way binding](https://angular.dev/guide/templates/two-way-binding)\n  - [Control flow](https://angular.dev/guide/templates/control-flow)\n  - [Pipes](https://angular.dev/guide/templates/pipes)\n  - [Slotting child content with ng-content](https://angular.dev/guide/templates/ng-content)\n  - [Create template fragments with ng-template](https://angular.dev/guide/templates/ng-template)\n  - [Grouping elements with ng-container](https://angular.dev/guide/templates/ng-container)\n  - [Variables in templates](https://angular.dev/guide/templates/variables)\n  - [Deferred loading with @defer](https://angular.dev/guide/templates/defer)\n  - [Expression syntax](https://angular.dev/guide/templates/expression-syntax)\n  - [Whitespace in templates](https://angular.dev/guide/templates/whitespace)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nAngular expressions are based on JavaScript, but differ in some key ways. This guide walks through the similarities and differences between Angular expressions and standard JavaScript.\n\n## [Value literals](https://angular.dev/guide/templates/expression-syntax\\#value-literals)\n\nAngular supports a subset of [literal values](https://developer.mozilla.org/en-US/docs/Glossary/Literal) from JavaScript.\n\n### [Supported value literals](https://angular.dev/guide/templates/expression-syntax\\#supported-value-literals)\n\n| Literal type | Example values |\n| --- | --- |\n| String | `'Hello'`, `\"World\"` |\n| Boolean | `true`, `false` |\n| Number | `123`, `3.14` |\n| Object | `{name: 'Alice'}` |\n| Array | `['Onion', 'Cheese', 'Garlic']` |\n| null | `null` |\n| Template string | `` `Hello ${name}` `` |\n\n### [Unsupported literals](https://angular.dev/guide/templates/expression-syntax\\#unsupported-literals)\n\n| Literal type | Example value |\n| --- | --- |\n| RegExp | `/\\d+/` |\n| Tagged template string | ``tag`Hello ${name}` `` |\n\n## [Globals](https://angular.dev/guide/templates/expression-syntax\\#globals)\n\nAngular expressions support the following [globals](https://developer.mozilla.org/en-US/docs/Glossary/Global_object):\n\n- [undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)\n- [$any](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any)\n\nNo other JavaScript globals are supported. Common JavaScript globals include `Number`, `Boolean`, `NaN`, `Infinity`, `parseInt`, and more.\n\n## [Local variables](https://angular.dev/guide/templates/expression-syntax\\#local-variables)\n\nAngular automatically makes special local variables available for use in expressions in specific contexts. These special variables always start with the dollar sign character ( `$`).\n\nFor example, `@for` blocks make several local variables corresponding to information about the loop, such as `$index`.\n\n## [What operators are supported?](https://angular.dev/guide/templates/expression-syntax\\#what-operators-are-supported)\n\n### [Supported operators](https://angular.dev/guide/templates/expression-syntax\\#supported-operators)\n\nAngular supports the following operators from standard JavaScript.\n\n| Operator | Example(s) |\n| --- | --- |\n| Add / Concatenate | `1 + 2` |\n| Subtract | `52 - 3` |\n| Multiply | `41 * 6` |\n| Divide | `20 / 4` |\n| Remainder (Modulo) | `17 % 5` |\n| Parenthesis | `9 * (8 + 4)` |\n| Conditional (Ternary) | `a > b ? true : false` |\n| And (Logical) | `&&` |\n| Or (Logical) | `||` |\n| Not (Logical) | `!` |\n| Nullish Coalescing | `const foo = null ?? 'default'` |\n| Comparison Operators | `<`, `<=`, `>`, `>=`, `==`, `===`, `!==` |\n| Unary Negation | `const y = -x` |\n| Unary Plus | `const x = +y` |\n| Property Accessor | `person['name'] = 'Mirabel'` |\n\nAngular expressions additionally also support the following non-standard operators:\n\n| Operator | Example(s) |\n| --- | --- |\n| [Pipe](https://angular.dev/guide/templates/pipes) | `{{ total | currency }}` |\n| Optional chaining\\* | `someObj.someProp?.nestedProp` |\n| Non-null assertion (TypeScript) | `someObj!.someProp` |\n\n\\*NOTE: Optional chaining behaves differently from the standard JavaScript version in that if the left side of Angular\u2019s optional chaining operator is `null` or `undefined`, it returns `null` instead of `undefined`.\n\n### [Unsupported operators](https://angular.dev/guide/templates/expression-syntax\\#unsupported-operators)\n\n| Operator | Example(s) |\n| --- | --- |\n| All bitwise operators | `&`, `&=`, `~`, `|=`, `^=`, etc. |\n| Assignment operators | `=` |\n| Object destructuring | `const { name } = person` |\n| Array destructuring | `const [firstItem] = items` |\n| Comma operator | `x = (x++, x)` |\n| typeof | `typeof 42` |\n| void | `void 1` |\n| in | `'model' in car` |\n| instanceof | `car instanceof Automobile` |\n| new | `new Car()` |\n\n## [Lexical context for expressions](https://angular.dev/guide/templates/expression-syntax\\#lexical-context-for-expressions)\n\nAngular expressions are evaluated within the context of the component class as well as any relevant [template variables](https://angular.dev/guide/templates/variables), locals, and globals.\n\nWhen referring to class members, `this` is always implied.\n\n## [Declarations](https://angular.dev/guide/templates/expression-syntax\\#declarations)\n\nGenerally speaking, declarations are not supported in Angular expressions. This includes, but is not limited to:\n\n| Declarations | Example(s) |\n| --- | --- |\n| Variables | `let label = 'abc'`, `const item = 'apple'` |\n| Functions | `function myCustomFunction() { }` |\n| Arrow Functions | `() => { }` |\n| Classes | `class Rectangle { }` |\n\nEvent handlers are **statements** rather than expressions. While they support all of the same syntax as Angular expressions, the are two key differences:\n\n1. Statements **do support** assignment operators (but not destructing assignments)\n2. Statements **do not support** pipes",
  "title": "Expression syntax \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "dev",
    "guide",
    "templates",
    "syntax",
    "expression",
    "operators",
    "expressions",
    "variables"
  ],
  "sourceURL": "https://angular.dev/guide/templates/expression-syntax"
}