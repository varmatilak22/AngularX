{
  "content": "Skip to main content\n\nmenu\n\nmenuAPI\n\n- [Roadmap](https://angular.dev/roadmap)\n- [Get involved](https://github.com/angular/angular/blob/main/CONTRIBUTING.md)\n- API Reference\n- CLI Reference\n- Error Encyclopedia\n- Extended Diagnostics\n- [Versioning and releases](https://angular.dev/reference/releases)\n- [Version compatibility](https://angular.dev/reference/versions)\n- [Update guide](https://angular.dev/update-guide)\n- Configurations\n- Migrations\n\n- arrow\\_backConfigurations\n  - [File structure](https://angular.dev/reference/configs/file-structure)\n  - [Workspace configuration](https://angular.dev/reference/configs/workspace-config)\n  - [Angular compiler options](https://angular.dev/reference/configs/angular-compiler-options)\n  - [npm dependencies](https://angular.dev/reference/configs/npm-packages)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nWhen you use [ahead-of-time compilation (AOT)](https://angular.dev/reference/configs/tools/cli/aot-compiler), you can control how your application is compiled by specifying Angular compiler options in the [TypeScript configuration file](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html).\n\nThe Angular options object, `angularCompilerOptions`, is a sibling to the `compilerOptions` object that supplies standard options to the TypeScript compiler.\n\ncheck\n\n```\n      /* To learn more about this file see: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */{  \"compileOnSave\": false,  \"compilerOptions\": {    \"baseUrl\": \"./\",    \"outDir\": \"./dist/out-tsc\",    \"forceConsistentCasingInFileNames\": true,    \"strict\": true,    \"noImplicitOverride\": true,    \"noPropertyAccessFromIndexSignature\": true,    \"noImplicitReturns\": true,    \"noFallthroughCasesInSwitch\": true,    \"sourceMap\": true,    \"declaration\": false,    \"downlevelIteration\": true,    \"experimentalDecorators\": true,    \"moduleResolution\": \"node\",    \"importHelpers\": true,    \"target\": \"es2020\",    \"module\": \"es2020\",    \"lib\": [      \"es2020\",      \"dom\"    ]\n...  },  \"angularCompilerOptions\": {    \"enableI18nLegacyMessageIdFormat\": false,    \"strictInjectionParameters\": true,    \"strictInputAccessModifiers\": true,    \"strictTemplates\": true\n...  }}\n\n```\n\n## [Configuration inheritance with `extends`](https://angular.dev/reference/configs/angular-compiler-options\\#configuration-inheritance-with-extends)\n\nLike the TypeScript compiler, the Angular AOT compiler also supports `extends` in the `angularCompilerOptions` section of the TypeScript configuration file.\nThe `extends` property is at the top level, parallel to `compilerOptions` and `angularCompilerOptions`.\n\nA TypeScript configuration can inherit settings from another file using the `extends` property.\nThe configuration options from the base file are loaded first, then overridden by those in the inheriting configuration file.\n\nFor example:\n\ncheck\n\n```\n      /* To learn more about this file see: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */{    \"extends\": \"./tsconfig.json\",    \"compilerOptions\": {      \"outDir\": \"./out-tsc/app\",      \"types\": []\n...    },    \"files\": [      \"src/main.ts\"    ],    \"include\": [      \"src/**/*.d.ts\"    ],    \"exclude\": [      \"src/test.ts\",      \"src/**/*.spec.ts\",      \"src/**/*-specs.ts\",      \"src/**/*.avoid.ts\",      \"src/**/*.0.ts\",      \"src/**/*.1.ts\",      \"src/**/*.1b.ts\",      \"src/**/*.2.ts\",      \"src/**/*.3.ts\",      \"src/**/*.4.ts\",      \"src/**/*.5.ts\",      \"src/**/*.6.ts\",      \"src/**/*.7.ts\",      \"src/**/testing\"    ],\n...    \"angularCompilerOptions\": {      \"strictTemplates\": true,      \"preserveWhitespaces\": true,      \"sourceMap\": true,      \"declaration\": false\n...    }  }\n\n```\n\nFor more information, see the [TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html).\n\n## [Template options](https://angular.dev/reference/configs/angular-compiler-options\\#template-options)\n\nThe following options are available for configuring the Angular AOT compiler.\n\n### [`annotationsAs`](https://angular.dev/reference/configs/angular-compiler-options\\#annotationsas)\n\nModifies how Angular-specific annotations are emitted to improve tree-shaking.\nNon-Angular annotations are not affected.\nOne of `static fields` or `decorators`. The default value is `static fields`.\n\n- By default, the compiler replaces decorators with a static field in the class, which allows advanced tree-shakers like [Closure compiler](https://github.com/google/closure-compiler) to remove unused classes\n\n- The `decorators` value leaves the decorators in place, which makes compilation faster.\nTypeScript emits calls to the `__decorate` helper.\nUse `--emitDecoratorMetadata` for runtime reflection.\n\nHELPFUL: That the resulting code cannot tree-shake properly.\n\n\n### [`annotateForClosureCompiler`](https://angular.dev/reference/configs/angular-compiler-options\\#annotateforclosurecompiler)\n\nWhen `true`, use [Tsickle](https://github.com/angular/tsickle) to annotate the emitted JavaScript with [JSDoc](https://jsdoc.app/) comments needed by the [Closure Compiler](https://github.com/google/closure-compiler).\nDefault is `false`.\n\n### [`compilationMode`](https://angular.dev/reference/configs/angular-compiler-options\\#compilationmode)\n\nSpecifies the compilation mode to use.\nThe following modes are available:\n\n| Modes | Details |\n| :-- | :-- |\n| `'full'` | Generates fully AOT-compiled code according to the version of Angular that is currently being used. |\n| `'partial'` | Generates code in a stable, but intermediate form suitable for a published library. |\n\nThe default value is `'full'`.\n\nFor most applications, `'full'` is the correct compilation mode.\n\nUse `'partial'` for independently published libraries, such as NPM packages.\n`'partial'` compilations output a stable, intermediate format which better supports usage by applications built at different Angular versions from the library.\nLibraries built at \"HEAD\" alongside their applications and using the same version of Angular such as in a mono-repository can use `'full'` since there is no risk of version skew.\n\n### [`disableExpressionLowering`](https://angular.dev/reference/configs/angular-compiler-options\\#disableexpressionlowering)\n\nWhen `true`, the default, transforms code that is or could be used in an annotation, to allow it to be imported from template factory modules.\nSee [metadata rewriting](https://angular.dev/reference/configs/tools/cli/aot-compiler#metadata-rewriting) for more information.\n\nWhen `false`, disables this rewriting, requiring the rewriting to be done manually.\n\n### [`disableTypeScriptVersionCheck`](https://angular.dev/reference/configs/angular-compiler-options\\#disabletypescriptversioncheck)\n\nWhen `true`, the compiler does not look at the TypeScript version and does not report an error when an unsupported version of TypeScript is used.\nNot recommended, as unsupported versions of TypeScript might have undefined behavior.\nDefault is `false`.\n\n### [`enableI18nLegacyMessageIdFormat`](https://angular.dev/reference/configs/angular-compiler-options\\#enablei18nlegacymessageidformat)\n\nInstructs the Angular template compiler to create legacy ids for messages that are tagged in templates by the `i18n` attribute.\nSee [Mark text for translations](https://angular.dev/reference/configs/guide/i18n/prepare#mark-text-in-component-template \"Mark\") for more information about marking messages for localization.\n\nSet this option to `false` unless your project relies upon translations that were created earlier using legacy IDs.\nDefault is `true`.\n\nThe pre-Ivy message extraction tooling created a variety of legacy formats for extracted message IDs.\nThese message formats have some issues, such as whitespace handling and reliance upon information inside the original HTML of a template.\n\nThe new message format is more resilient to whitespace changes, is the same across all translation file formats, and can be created directly from calls to `$localize`.\nThis allows `$localize` messages in application code to use the same ID as identical `i18n` messages in component templates.\n\n### [`enableResourceInlining`](https://angular.dev/reference/configs/angular-compiler-options\\#enableresourceinlining)\n\nWhen `true`, replaces the `templateUrl` and `styleUrls` properties in all `@Component` decorators with inline content in the `template` and `styles` properties.\n\nWhen enabled, the `.js` output of `ngc` does not include any lazy-loaded template or style URLs.\n\nFor library projects created with the Angular CLI, the development configuration default is `true`.\n\n### [`enableLegacyTemplate`](https://angular.dev/reference/configs/angular-compiler-options\\#enablelegacytemplate)\n\nWhen `true`, enables the deprecated `<template>` element in place of `<ng-template>`.\nDefault is `false`.\nMight be required by some third-party Angular libraries.\n\n### [`flatModuleId`](https://angular.dev/reference/configs/angular-compiler-options\\#flatmoduleid)\n\nThe module ID to use for importing a flat module (when `flatModuleOutFile` is `true`).\nReferences created by the template compiler use this module name when importing symbols from the flat module.\nIgnored if `flatModuleOutFile` is `false`.\n\n### [`flatModuleOutFile`](https://angular.dev/reference/configs/angular-compiler-options\\#flatmoduleoutfile)\n\nWhen `true`, generates a flat module index of the given filename and the corresponding flat module metadata.\nUse to create flat modules that are packaged similarly to `@angular/core` and `@angular/common`.\nWhen this option is used, the `package.json` for the library should refer to the created flat module index instead of the library index file.\n\nProduces only one `.metadata.json` file, which contains all the metadata necessary for symbols exported from the library index.\nIn the created `.ngfactory.js` files, the flat module index is used to import symbols. Symbols that include both the public API from the library index and shrouded internal symbols.\n\nBy default, the `.ts` file supplied in the `files` field is assumed to be the library index.\nIf more than one `.ts` file is specified, `libraryIndex` is used to select the file to use.\nIf more than one `.ts` file is supplied without a `libraryIndex`, an error is produced.\n\nA flat module index `.d.ts` and `.js` is created with the given `flatModuleOutFile` name in the same location as the library index `.d.ts` file.\n\nFor example, if a library uses the `public_api.ts` file as the library index of the module, the `tsconfig.json` `files` field would be `[\"public_api.ts\"]`.\nThe `flatModuleOutFile` option could then be set, for example, to `\"index.js\"`, which produces `index.d.ts` and `index.metadata.json` files.\nThe `module` field of the library's `package.json` would be `\"index.js\"` and the `typings` field would be `\"index.d.ts\"`.\n\n### [`fullTemplateTypeCheck`](https://angular.dev/reference/configs/angular-compiler-options\\#fulltemplatetypecheck)\n\nWhen `true`, the recommended value, enables the [binding expression validation](https://angular.dev/reference/configs/tools/cli/aot-compiler#binding-expression-validation) phase of the template compiler. This phase uses TypeScript to verify binding expressions.\nFor more information, see [Template type checking](https://angular.dev/reference/configs/tools/cli/template-typecheck).\n\nDefault is `false`, but when you use the Angular CLI command `ng new --strict`, it is set to `true` in the new project's configuration.\n\n**IMPORTANT:** The `fullTemplateTypeCheck` option has been deprecated in Angular 13 in favor of the `strictTemplates` family of compiler options.\n\n### [`generateCodeForLibraries`](https://angular.dev/reference/configs/angular-compiler-options\\#generatecodeforlibraries)\n\nWhen `true`, creates factory files ( `.ngfactory.js` and `.ngstyle.js`) for `.d.ts` files with a corresponding `.metadata.json` file. The default value is `true`.\n\nWhen `false`, factory files are created only for `.ts` files.\nDo this when using factory summaries.\n\n### [`preserveWhitespaces`](https://angular.dev/reference/configs/angular-compiler-options\\#preservewhitespaces)\n\nWhen `false`, the default, removes blank text nodes from compiled templates, which results in smaller emitted template factory modules.\nSet to `true` to preserve blank text nodes.\n\n**HELPFUL:** When using hydration, it is recommended that you use `preserveWhitespaces: false`, which is the default value. If you choose to enable preserving whitespaces by adding `preserveWhitespaces: true` to your tsconfig, it is possible you may encounter issues with hydration. This is not yet a fully supported configuration. Ensure this is also consistently set between the server and client tsconfig files. See the [hydration guide](https://angular.dev/reference/configs/guide/hydration#preserve-whitespaces) for more details.\n\n### [`skipMetadataEmit`](https://angular.dev/reference/configs/angular-compiler-options\\#skipmetadataemit)\n\nWhen `true`, does not produce `.metadata.json` files.\nDefault is `false`.\n\nThe `.metadata.json` files contain information needed by the template compiler from a `.ts` file that is not included in the `.d.ts` file produced by the TypeScript compiler.\nThis information includes, for example, the content of annotations, such as a component's template, which TypeScript emits to the `.js` file but not to the `.d.ts` file.\n\nYou can set to `true` when using factory summaries, because the factory summaries include a copy of the information that is in the `.metadata.json` file.\n\nSet to `true` if you are using TypeScript's `--outFile` option, because the metadata files are not valid for this style of TypeScript output.\nThe Angular community does not recommend using `--outFile` with Angular.\nUse a bundler, such as [webpack](https://webpack.js.org/), instead.\n\n### [`skipTemplateCodegen`](https://angular.dev/reference/configs/angular-compiler-options\\#skiptemplatecodegen)\n\nWhen `true`, does not emit `.ngfactory.js` and `.ngstyle.js` files.\nThis turns off most of the template compiler and disables the reporting of template diagnostics.\n\nCan be used to instruct the template compiler to produce `.metadata.json` files for distribution with an `npm` package. This avoids the production of `.ngfactory.js` and `.ngstyle.js` files that cannot be distributed to `npm`.\n\nFor library projects created with the Angular CLI, the development configuration default is `true`.\n\n### [`strictMetadataEmit`](https://angular.dev/reference/configs/angular-compiler-options\\#strictmetadataemit)\n\nWhen `true`, reports an error to the `.metadata.json` file if `\"skipMetadataEmit\"` is `false`.\nDefault is `false`.\nUse only when `\"skipMetadataEmit\"` is `false` and `\"skipTemplateCodegen\"` is `true`.\n\nThis option is intended to verify the `.metadata.json` files emitted for bundling with an `npm` package.\nThe validation is strict and can emit errors for metadata that would never produce an error when used by the template compiler.\nYou can choose to suppress the error emitted by this option for an exported symbol by including `@dynamic` in the comment documenting the symbol.\n\nIt is valid for `.metadata.json` files to contain errors.\nThe template compiler reports these errors if the metadata is used to determine the contents of an annotation.\nThe metadata collector cannot predict the symbols that are designed for use in an annotation. It preemptively includes error nodes in the metadata for the exported symbols.\nThe template compiler can then use the error nodes to report an error if these symbols are used.\n\nIf the client of a library intends to use a symbol in an annotation, the template compiler does not normally report this. It gets reported after the client actually uses the symbol.\nThis option allows detection of these errors during the build phase of the library and is used, for example, in producing Angular libraries themselves.\n\nFor library projects created with the Angular CLI, the development configuration default is `true`.\n\n### [`strictInjectionParameters`](https://angular.dev/reference/configs/angular-compiler-options\\#strictinjectionparameters)\n\nWhen `true`, reports an error for a supplied parameter whose injection type cannot be determined.\nWhen `false`, constructor parameters of classes marked with `@Injectable` whose type cannot be resolved produce a warning.\nThe recommended value is `true`, but the default value is `false`.\n\nWhen you use the Angular CLI command `ng new --strict`, it is set to `true` in the created project's configuration.\n\n### [`strictTemplates`](https://angular.dev/reference/configs/angular-compiler-options\\#stricttemplates)\n\nWhen `true`, enables [strict template type checking](https://angular.dev/reference/configs/tools/cli/template-typecheck#strict-mode).\n\nThe strictness flags that this option enables allow you to turn on and off specific types of strict template type checking.\nSee [troubleshooting template errors](https://angular.dev/reference/configs/tools/cli/template-typecheck#troubleshooting-template-errors).\n\nWhen you use the Angular CLI command `ng new --strict`, it is set to `true` in the new project's configuration.\n\n### [`strictStandalone`](https://angular.dev/reference/configs/angular-compiler-options\\#strictstandalone)\n\nWhen `true`, reports an error if a component, directive, or pipe is not standalone.\n\n### [`trace`](https://angular.dev/reference/configs/angular-compiler-options\\#trace)\n\nWhen `true`, prints extra information while compiling templates.\nDefault is `false`.\n\n## [Command line options](https://angular.dev/reference/configs/angular-compiler-options\\#command-line-options)\n\nMost of the time, you interact with the Angular Compiler indirectly using [Angular CLI](https://angular.dev/reference/configs/reference/configs/angular-compiler-options). When debugging certain issues, you might find it useful to invoke the Angular Compiler directly.\nYou can use the `ngc` command provided by the `@angular/compiler-cli` npm package to call the compiler from the command line.\n\nThe `ngc` command is a wrapper around TypeScript's `tsc` compiler command. The Angular Compiler is primarily configured through `tsconfig.json` while Angular CLI is primarily configured through `angular.json`.\n\nBesides the configuration file, you can also use [`tsc` command line options](https://www.typescriptlang.org/docs/handbook/compiler-options.html) to configure `ngc`.",
  "title": "Angular compiler options \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "compiler",
    "https",
    "true",
    "reference",
    "dev",
    "options",
    "configs",
    "template",
    "ts"
  ],
  "sourceURL": "https://angular.dev/reference/configs/angular-compiler-options"
}