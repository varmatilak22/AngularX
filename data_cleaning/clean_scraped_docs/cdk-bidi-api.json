{
  "content": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\nAPI for bidi\n\n## API reference for Angular CDK bidi\n\n`\n          import {BidiModule} from '@angular/cdk/bidi';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/cdk/bidi/api\\#services)  Services\n\n#### [link](https://material.angular.io/cdk/bidi/api\\#Directionality) `Directionality`\n\nThe directionality (LTR / RTL) context for the application (or a subtree of it).\nExposes the current direction and a stream of direction changes.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `change: EventEmitter<Direction>` | Stream that emits whenever the 'ltr' / 'rtl' state changes. |\n| `value: Direction` | The current 'ltr' or 'rtl' value. |\n\n### [link](https://material.angular.io/cdk/bidi/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/cdk/bidi/api\\#Dir) `Dir`\n\nDirective to listen for changes of direction of part of the DOM.\n\nProvides itself as Directionality such that descendant directives only need to ever inject\nDirectionality to get the closest direction.\n\nSelector:\\[dir\\]\n\nExported as:dir\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Output('dirChange')<br> <br>`change: EventEmitter<Direction>` | Event emitted when the direction changes. |\n| `value: Direction` | Current layout direction of the element. |\n\n### [link](https://material.angular.io/cdk/bidi/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/cdk/bidi/api\\#Direction) `Direction`\n\n```docs-markdown-code\ntype Direction = 'ltr' | 'rtl';\n\n```\n\nBidirectionality\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
  "title": "Bidirectionality | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/cdk/bidi/api"
}