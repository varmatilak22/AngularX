{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for sidenav\n\nAngular Material provides two sets of components designed to add collapsible side content (often\nnavigation, though it can be any content) alongside some primary content. These are the sidenav and\ndrawer components.\n\nThe sidenav components are designed to add side content to a fullscreen app. To set up a sidenav we\nuse three components: `<mat-sidenav-container>` which acts as a structural container for our content\nand sidenav, `<mat-sidenav-content>` which represents the main content, and `<mat-sidenav>` which\nrepresents the added side content.\n\nBasic sidenav\n\nlinkcodeopen\\_in\\_new\n\nPlease open on Stackblitz to see result\n\nThe drawer component is designed to add side content to a small section of your app. This is\naccomplished using the `<mat-drawer-container>`, `<mat-drawer-content>`, and `<mat-drawer>`\ncomponents, which are analogous to their sidenav equivalents. Rather than adding side content to the\napp as a whole, these are designed to add side content to a small section of your app. They support\nalmost all of the same features, but do not support fixed positioning.\n\nBasic drawer\n\nlinkcodeopen\\_in\\_new\n\nDrawer content\n\nMain content\n\n### [link](https://material.angular.io/components/sidenav/overview\\#specifying-the-main-and-side-content)  Specifying the main and side content\n\nBoth the main and side content should be placed inside of the `<mat-sidenav-container>`, content\nthat you don't want to be affected by the sidenav, such as a header or footer, can be placed outside\nof the container.\n\nThe side content should be wrapped in a `<mat-sidenav>` element. The `position` property can be used\nto specify which end of the main content to place the side content on. `position` can be either\n`start` or `end` which places the side content on the left or right respectively in left-to-right\nlanguages. If the `position` is not set, the default value of `start` will be assumed. A\n`<mat-sidenav-container>` can have up to two `<mat-sidenav>` elements total, but only one for any\ngiven side. The `<mat-sidenav>` must be placed as an immediate child of the `<mat-sidenav-container>`.\n\nThe main content should be wrapped in a `<mat-sidenav-content>`. If no `<mat-sidenav-content>` is\nspecified for a `<mat-sidenav-container>`, one will be created implicitly and all of the content\ninside the `<mat-sidenav-container>` other than the `<mat-sidenav>` elements will be placed inside\nof it.\n\nImplicit main content with two sidenavs\n\nlinkcodeopen\\_in\\_new\n\nPlease open on Stackblitz to see result\n\nThe following are examples of valid sidenav layouts:\n\n```html\n<!-- Creates a layout with a left-positioned sidenav and explicit content. -->\n<mat-sidenav-container>\n  <mat-sidenav>Start</mat-sidenav>\n  <mat-sidenav-content>Main</mat-sidenav-content>\n</mat-sidenav-container>\n\n```\n\n```html\n<!-- Creates a layout with a left and right sidenav and implicit content. -->\n<mat-sidenav-container>\n  <mat-sidenav>Start</mat-sidenav>\n  <mat-sidenav position=\"end\">End</mat-sidenav>\n  <section>Main</section>\n</mat-sidenav-container>\n\n```\n\n```html\n<!-- Creates an empty sidenav container with no sidenavs and implicit empty content. -->\n<mat-sidenav-container></mat-sidenav-container>\n\n```\n\nAnd these are examples of invalid sidenav layouts:\n\n```html\n<!-- Invalid because there are two `start` position sidenavs. -->\n<mat-sidenav-container>\n  <mat-sidenav>Start</mat-sidenav>\n  <mat-sidenav position=\"start\">Start 2</mat-sidenav>\n</mat-sidenav-container>\n\n```\n\n```html\n<!-- Invalid because there are multiple `<mat-sidenav-content>` elements. -->\n<mat-sidenav-container>\n  <mat-sidenav-content>Main</mat-sidenav-content>\n  <mat-sidenav-content>Main 2</mat-sidenav-content>\n</mat-sidenav-container>\n\n```\n\n```html\n<!-- Invalid because the `<mat-sidenav>` is outside of the `<mat-sidenav-container>`. -->\n<mat-sidenav-container></mat-sidenav-container>\n<mat-sidenav></mat-sidenav>\n\n```\n\nThese same rules all apply to the drawer components as well.\n\n### [link](https://material.angular.io/components/sidenav/overview\\#opening-and-closing-a-sidenav)  Opening and closing a sidenav\n\nA `<mat-sidenav>` can be opened or closed using the `open()`, `close()` and `toggle()` methods. Each\nof these methods returns a `Promise<boolean>` that will be resolved with `true` when the sidenav\nfinishes opening or `false` when it finishes closing.\n\nThe opened state can also be set via a property binding in the template using the `opened` property.\nThe property supports 2-way binding.\n\n`<mat-sidenav>` also supports output properties for just open and just close events, The `(opened)`\nand `(closed)` properties respectively.\n\nSidenav open & close behavior\n\nlinkcodeopen\\_in\\_new\n\nPlease open on Stackblitz to see result\n\nAll of these properties and methods work on `<mat-drawer>` as well.\n\n### [link](https://material.angular.io/components/sidenav/overview\\#changing-the-sidenavs-behavior)  Changing the sidenav's behavior\n\nThe `<mat-sidenav>` can render in one of three different ways based on the `mode` property.\n\n| Mode | Description |\n| --- | --- |\n| `over` | Sidenav floats over the primary content, which is covered by a backdrop |\n| `push` | Sidenav pushes the primary content out of its way, also covering it with a backdrop |\n| `side` | Sidenav appears side-by-side with the main content, shrinking the main content's width to make space for the sidenav. |\n\nIf no `mode` is specified, `over` is used by default.\n\nSidenav with configurable mode\n\nlinkcodeopen\\_in\\_new\n\nThis example contains tests. Open in Stackblitz to run the tests.\n\nThe `over` and `push` sidenav modes show a backdrop by default, while the `side` mode does not. This\ncan be customized by setting the `hasBackdrop` property on `mat-sidenav-container`. Explicitly\nsetting `hasBackdrop` to `true` or `false` will override the default backdrop visibility setting for\nall sidenavs regardless of mode. Leaving the property unset or setting it to `null` will use the\ndefault backdrop visibility for each mode.\n\nDrawer with explicit backdrop setting\n\nlinkcodeopen\\_in\\_new\n\nI'm a drawer\n\nSidenav mode\n\nSide\n\nHas backdrop\n\nToggle drawer\n\n`<mat-drawer>` also supports all of these same modes and options.\n\n### [link](https://material.angular.io/components/sidenav/overview\\#disabling-automatic-close)  Disabling automatic close\n\nClicking on the backdrop or pressing the `Esc` key will normally close an open sidenav.\nHowever, this automatic closing behavior can be disabled by setting the `disableClose` property on\nthe `<mat-sidenav>` or `<mat-drawer>` that you want to disable the behavior for.\n\nCustom handling for `Esc` can be done by adding a keydown listener to the `<mat-sidenav>`.\nCustom handling for backdrop clicks can be done via the `(backdropClick)` output property on\n`<mat-sidenav-container>`.\n\nSidenav with custom escape and backdrop click behavior\n\nlinkcodeopen\\_in\\_new\n\nPlease open on Stackblitz to see result\n\n### [link](https://material.angular.io/components/sidenav/overview\\#resizing-an-open-sidenav)  Resizing an open sidenav\n\nBy default, Material will only measure and resize the drawer container in a few key moments\n(on open, on window resize, on mode change) in order to avoid layout thrashing, however there\nare cases where this can be problematic. If your app requires for a drawer to change its width\nwhile it is open, you can use the `autosize` option to tell Material to continue measuring it.\nNote that you should use this option **at your own risk**, because it could cause performance\nissues.\n\nAutosize sidenav\n\nlinkcodeopen\\_in\\_new\n\nAuto-resizing sidenav\n\nToggle extra text\n\nToggle sidenav\n\n### [link](https://material.angular.io/components/sidenav/overview\\#setting-the-sidenavs-size)  Setting the sidenav's size\n\nThe `<mat-sidenav>` and `<mat-drawer>` will, by default, fit the size of its content. The width can\nbe explicitly set via CSS:\n\n```css\nmat-sidenav {\n  width: 200px;\n}\n\n```\n\nTry to avoid percent based width as `resize` events are not (yet) supported.\n\n### [link](https://material.angular.io/components/sidenav/overview\\#fixed-position-sidenavs)  Fixed position sidenavs\n\nFor `<mat-sidenav>` only (not `<mat-drawer>`) fixed positioning is supported. It can be enabled by\nsetting the `fixedInViewport` property. Additionally, top and bottom space can be set via the\n`fixedTopGap` and `fixedBottomGap`. These properties accept a pixel value amount of space to add at\nthe top or bottom.\n\nFixed sidenav\n\nlinkcodeopen\\_in\\_new\n\nPlease open on StackBlitz to see result\n\n### [link](https://material.angular.io/components/sidenav/overview\\#creating-a-responsive-layout-for-mobile--desktop)  Creating a responsive layout for mobile & desktop\n\nA sidenav often needs to behave differently on a mobile vs a desktop display. On a desktop, it may\nmake sense to have just the content section scroll. However, on mobile you often want the body to be\nthe element that scrolls; this allows the address bar to auto-hide. The sidenav can be styled with\nCSS to adjust to either type of device.\n\nResponsive sidenav\n\nlinkcodeopen\\_in\\_new\n\nPlease open on Stackblitz to see result\n\n### [link](https://material.angular.io/components/sidenav/overview\\#reacting-to-scroll-events-inside-the-sidenav-container)  Reacting to scroll events inside the sidenav container\n\nTo react to scrolling inside the `<mat-sidenav-container>`, you can get a hold of the underlying\n`CdkScrollable` instance through the `MatSidenavContainer`.\n\n```ts\nclass YourComponent implements AfterViewInit {\n  @ViewChild(MatSidenavContainer) sidenavContainer: MatSidenavContainer;\n\n  ngAfterViewInit() {\n    this.sidenavContainer.scrollable.elementScrolled().subscribe(() => /* react to scrolling */);\n  }\n}\n\n```\n\n### [link](https://material.angular.io/components/sidenav/overview\\#accessibility)  Accessibility\n\nThe `<mat-sidenav>` and `<mat-sidenav-content>` should each be given an appropriate `role` attribute\ndepending on the context in which they are used.\n\nFor example, a `<mat-sidenav>` that contains links\nto other pages might be marked `role=\"navigation\"`, whereas one that contains a table of\ncontents about might be marked as `role=\"directory\"`. If there is no more specific role that\ndescribes your sidenav, `role=\"region\"` is recommended.\n\nSimilarly, the `<mat-sidenav-content>` should be given a role based on what it contains. If it\nrepresents the primary content of the page, it may make sense to mark it `role=\"main\"`. If no more\nspecific role makes sense, `role=\"region\"` is again a good fallback.\n\n#### [link](https://material.angular.io/components/sidenav/overview\\#focus-management)  Focus management\n\nThe sidenav has the ability to capture focus. This behavior is turned on for the `push` and `over` modes and it is off for `side` mode. You can change its default behavior by the `autoFocus` input.\n\nBy default the first tabbable element will receive focus upon open. If you want a different element to be focused, you can set the `cdkFocusInitial` attribute on it.\n\n### [link](https://material.angular.io/components/sidenav/overview\\#troubleshooting)  Troubleshooting\n\n#### [link](https://material.angular.io/components/sidenav/overview\\#error-a-drawer-was-already-declared-for-position)  Error: A drawer was already declared for 'position=\"...\"'\n\nThis error is thrown if you have more than one sidenav or drawer in a given container with the same\n`position`. The `position` property defaults to `start`, so the issue may just be that you forgot to\nmark the `end` sidenav with `position=\"end\"`.\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Basic sidenav example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit Basic drawer example in StackBlitz\n\nEdit Implicit main content with two sidenavs example in StackBlitz\n\nEdit Sidenav open & close behavior example in StackBlitz\n\nEdit Sidenav with configurable mode example in StackBlitz\n\nEdit Drawer with explicit backdrop setting example in StackBlitz\n\nEdit Sidenav with custom escape and backdrop click behavior example in StackBlitz\n\nEdit Autosize sidenav example in StackBlitz\n\nEdit Fixed sidenav example in StackBlitz\n\nEdit Responsive sidenav example in StackBlitz",
  "title": "Sidenav | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/sidenav/overview"
}