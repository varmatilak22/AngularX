{
  "content": "Skip to main content\n\nmenu\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nunfold\\_more\nLearn AngularCreate a pipe\nReveal Answer\n\n[chevron\\_left](https://angular.dev/tutorials/learn-angular/23-pipes-format-data) [chevron\\_right](https://angular.dev/tutorials/learn-angular/25-next-steps)\n\nReveal Answer\n\nunfold\\_more\nLearn AngularCreate a pipe\nReveal Answer\n\n[chevron\\_left](https://angular.dev/tutorials/learn-angular/23-pipes-format-data) [chevron\\_right](https://angular.dev/tutorials/learn-angular/25-next-steps)\n\nReveal Answer\n\nYou can create custom pipes in Angular to fit your data transformation needs.\n\nNote: Learn more about [creating custom pipes in the in-depth guide](https://angular.dev/guide/templates/pipes#creating-custom-pipes).\n\nIn this activity, you will create a custom pipe and use it in your template.\n\n* * *\n\nA pipe is a TypeScript class with a `@Pipe` decorator. Here's an example:\n\n```\n      import {Pipe, PipeTransform} from '@angular/core';@Pipe({  name: 'star',})export class StarPipe implements PipeTransform {  transform(value: string): string {    return `\u2b50\ufe0f ${value} \u2b50\ufe0f`;  }}\n\n```\n\ncheck\n\nThe `StarPipe` accepts a string value and returns that string with stars around it. Take note that:\n\n- the name in the `@Pipe` decorator configuration is what will be used in the template\n- the `transform` function is where you put your logic\n\nAlright, it's your turn to give this a try \u2014 you'll create the `ReversePipe`:\n\n1. ### [Create the `ReversePipe`](https://angular.dev/tutorials/learn-angular/24-create-a-pipe\\#create-the-reversepipe)\n\n\nIn `reverse.pipe.ts` add the `@Pipe` decorator to the `ReversePipe` class and provide the following configuration:\n\n\n\n```\n         @Pipe({    name: 'reverse'})\n\n```\n\ncheck\n\n2. ### [Implement the `transform` function](https://angular.dev/tutorials/learn-angular/24-create-a-pipe\\#implement-the-transform-function)\n\n\nNow the `ReversePipe` class is a pipe. Update the `transform` function to add the reversing logic:\n\n\n\n```\n         export class ReversePipe implements PipeTransform {    transform(value: string): string {        let reverse = '';        for (let i = value.length - 1; i >= 0; i--) {            reverse += value[i];        }        return reverse;    }}\n\n```\n\ncheck\n\n3. ### [Use the `ReversePipe` in the template](https://angular.dev/tutorials/learn-angular/24-create-a-pipe\\#use-the-reversepipe-in-the-template)\n\n\nWith the pipe logic implemented, the final step is to use it in the template. In `app.component.ts` include the pipe in the template and add it to the component imports:\n\n```\n      @Component({    ...    template: `Reverse Machine: {{ word | reverse }}`    imports: [ReversePipe]})\n\n```\n\ncheck\n\nAnd with that you've done it. Congratulations on completing this activity. You now know how to use pipes and even how to implement your own custom pipes.\n\napp/app.component.ts\n\napp/reverse.pipe.ts\n\nadd\n\nlaunchdownload\n\n99\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n\u203a\n\nimport{Component}from'@angular/core';\n\nimport{ReversePipe}from'./reverse.pipe';\n\n@Component({\n\nselector:'app-root',\n\ntemplate:\\`\n\nReverse Machine: {{word}}\n\n\\`,\n\nimports:\\[\\],\n\n})\n\nexportclassAppComponent{\n\nword='You are a champion';\n\n}\n\nPreview\n\nBooting\n\nConsole\n\nTerminal\n\nrefresh\n\nStackBlitz",
  "title": "Create a pipe \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "pipe",
    "angular",
    "learn",
    "reverse",
    "reversepipe",
    "https",
    "create",
    "dev",
    "pipes",
    "template"
  ],
  "sourceURL": "https://angular.dev/tutorials/learn-angular/24-create-a-pipe"
}