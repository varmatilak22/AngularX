{
  "content": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for form-field\n\n`<mat-form-field>` is a component used to wrap several Angular Material components and apply common\n[Text field](https://material.io/guidelines/components/text-fields.html) styles such as the\nunderline, floating label, and hint messages.\n\nIn this document, \"form field\" refers to the wrapper component `<mat-form-field>` and\n\"form field control\" refers to the component that the `<mat-form-field>` is wrapping\n(e.g. the input, textarea, select, etc.)\n\nThe following Angular Material components are designed to work inside a `<mat-form-field>`:\n\n- [`<input matNativeControl>` & `<textarea matNativeControl>`](https://material.angular.io/components/input/overview)\n- [`<select matNativeControl>`](https://material.angular.io/components/select/overview)\n- [`<mat-select>`](https://material.angular.io/components/select/overview)\n- [`<mat-chip-set>`](https://material.angular.io/components/chips/overview)\n\nSimple form field\n\nlinkcodeopen\\_in\\_new\n\nInput\n\nSelect\n\nTextarea\n\n### [link](https://material.angular.io/components/form-field/overview\\#form-field-appearance-variants)  Form field appearance variants\n\n`mat-form-field` supports two different appearance variants which can be set via the `appearance`\ninput: `fill` and `outline`. The `fill` appearance displays the form field with a filled background\nbox and an underline, while the `outline` appearance shows the form field with a border all the way\naround.\n\nOut of the box, if you do not specify an `appearance` for the `<mat-form-field>` it will default to\n`fill`. However, this can be configured using a global provider to choose a different default\nappearance for your app.\n\n```ts\n@NgModule({\n  providers: [\\\n    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {appearance: 'outline'}}\\\n  ]\n})\n\n```\n\nForm field appearance variants\n\nlinkcodeopen\\_in\\_new\n\nFill form field\n\nsentiment\\_very\\_satisfied\n\nHint\n\nOutline form field\n\nsentiment\\_very\\_satisfied\n\nHint\n\n### [link](https://material.angular.io/components/form-field/overview\\#floating-label)  Floating label\n\nThe floating label is a text label displayed on top of the form field control when\nthe control does not contain any text or when `<select matNativeControl>` does not show any option\ntext. By default, when text is present the floating label floats above the form field control. The\nlabel for a form field can be specified by adding a `mat-label` element.\n\nIf the form field control is marked with a `required` attribute, an asterisk will be appended to the\nlabel to indicate the fact that it is a required field. If unwanted, this can be disabled by\nsetting the `hideRequiredMarker` property on `<mat-form-field>`\n\nThe `floatLabel` property of `<mat-form-field>` can be used to change this default floating\nbehavior. It can be set to `always` to float the label even when no text is present in the form\nfield control, or to `auto` to restore the default behavior.\n\nForm field with label\n\nlinkcodeopen\\_in\\_new\n\nHide required marker\n\nFloat label:\n\nAuto\n\nAlways\n\nBoth a label and a placeholder\n\nfavorite **Fancy** _label_\n\nThe floating label behavior can be adjusted globally by providing a value for\n`MAT_FORM_FIELD_DEFAULT_OPTIONS` in your application's root module. Like the `floatLabel` input,\nthe option can be either set to `always` or `auto`.\n\n```ts\n@NgModule({\n  providers: [\\\n    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {floatLabel: 'always'}}\\\n  ]\n})\n\n```\n\n### [link](https://material.angular.io/components/form-field/overview\\#hint-labels)  Hint labels\n\nHint labels are additional descriptive text that appears below the form field's underline. A\n`<mat-form-field>` can have up to two hint labels; one start-aligned (left in an LTR language, right\nin RTL), and one end-aligned.\n\nHint labels are specified in one of two ways: either by using the `hintLabel` property of\n`<mat-form-field>`, or by adding a `<mat-hint>` element inside the form field. When adding a hint\nvia the `hintLabel` property, it will be treated as the start hint. Hints added via the\n`<mat-hint>` hint element can be added to either side by setting the `align` property on\n`<mat-hint>` to either `start` or `end`. Attempting to add multiple hints to the same side will\nraise an error.\n\nForm field with hints\n\nlinkcodeopen\\_in\\_new\n\nEnter some input\n\nMax 10 characters\n\n0/10\n\nSelect me\n\nHere's the dropdown arrow ^\n\n### [link](https://material.angular.io/components/form-field/overview\\#error-messages)  Error messages\n\nError messages can be shown under the form field underline by adding `mat-error` elements inside the\nform field. Errors are hidden initially and will be displayed on invalid form fields after the user\nhas interacted with the element or the parent form has been submitted. Since the errors occupy the\nsame space as the hints, the hints are hidden when the errors are shown.\n\nIf a form field can have more than one error state, it is up to the consumer to toggle which\nmessages should be displayed. This can be done with CSS, `@if` or `@switch`. Multiple error\nmessages can be shown at the same time if desired, but the `<mat-form-field>` only reserves enough\nspace to display one error message at a time. Ensuring that enough space is available to display\nmultiple errors is up to the user.\n\nForm field with error messages\n\nlinkcodeopen\\_in\\_new\n\nEnter your email\n\n### [link](https://material.angular.io/components/form-field/overview\\#prefix--suffix)  Prefix & suffix\n\nCustom content can be included before and after the input tag, as a prefix or suffix. It will be\nincluded within the visual container that wraps the form control as per the Material specification.\n\nAdding the `matPrefix` directive to an element inside the `<mat-form-field>` will designate it as\nthe prefix. Similarly, adding `matSuffix` will designate it as the suffix.\n\nIf the prefix/suffix content is purely text-based, it is recommended to use the `matTextPrefix` or\n`matTextSuffix` directives which ensure that the text is aligned with the form control.\n\nForm field with prefix & suffix\n\nlinkcodeopen\\_in\\_new\n\nEnter your password\n\nvisibility\\_off\n\n$\n\nAmount\n\n.00\n\n### [link](https://material.angular.io/components/form-field/overview\\#custom-form-field-controls)  Custom form field controls\n\nIn addition to the form field controls that Angular Material provides, it is possible to create\ncustom form field controls that work with `<mat-form-field>` in the same way. For additional\ninformation on this see the guide on\n[Creating Custom mat-form-field Controls](https://material.angular.io/guide/creating-a-custom-form-field-control).\n\n### [link](https://material.angular.io/components/form-field/overview\\#theming)  Theming\n\nThe color of the form-field can be changed by specifying a `$color-variant` when applying the\n`mat.form-field-theme` or `mat.form-field-color` mixins (see the\n[theming guide](https://material.angular.io/guide/theming#using-component-color-variants) to learn more.) By default, the\nform-field uses the theme's primary palette. This can be changed to `'secondary'`, `'tertiary'`, or\n`'error'`.\n\n### [link](https://material.angular.io/components/form-field/overview\\#accessibility)  Accessibility\n\nBy itself, `MatFormField` does not apply any additional accessibility treatment to a control.\nHowever, several of the form field's optional features interact with the control contained within\nthe form field.\n\nWhen you provide a label via `<mat-label>`, `MatFormField` automatically associates this label with\nthe field's control via a native `<label>` element, using the `for` attribute to reference the\ncontrol's ID.\n\nIf a floating label is specified, it will be automatically used as the label for the form\nfield control. If no floating label is specified, the user should label the form field control\nthemselves using `aria-label`, `aria-labelledby` or `<label for=...>`.\n\nWhen you provide informational text via `<mat-hint>` or `<mat-error>`, `MatFormField` automatically\nadds these elements' IDs to the control's `aria-describedby` attribute. Additionally, `MatError`\napplies `aria-live=\"polite\"` by default such that assistive technology will announce errors when\nthey appear.\n\n### [link](https://material.angular.io/components/form-field/overview\\#troubleshooting)  Troubleshooting\n\n#### [link](https://material.angular.io/components/form-field/overview\\#error-a-hint-was-already-declared-for-align)  Error: A hint was already declared for align=\"...\"\n\nThis error occurs if you have added multiple hints for the same side. Keep in mind that the\n`hintLabel` property adds a hint to the start side.\n\n#### [link](https://material.angular.io/components/form-field/overview\\#error-mat-form-field-must-contain-a-matformfieldcontrol)  Error: mat-form-field must contain a MatFormFieldControl\n\nThis error occurs when you have not added a form field control to your form field. If your form\nfield contains a native `<input>` or `<textarea>` element, make sure you've added the `matInput`\ndirective to it and have imported `MatInputModule`. Other components that can act as a form field\ncontrol include `<mat-select>`, `<mat-chip-list>`, and any custom form field controls you've\ncreated.\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Simple form field example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit Form field appearance variants example in StackBlitz\n\nEdit Form field with label example in StackBlitz\n\nEdit Form field with hints example in StackBlitz\n\nEdit Form field with error messages example in StackBlitz\n\nEdit Form field with prefix & suffix example in StackBlitz",
  "title": "Form field | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/components/form-field/overview"
}