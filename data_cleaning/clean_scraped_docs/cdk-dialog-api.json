{
  "content": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\nAPI for dialog\n\n## API reference for Angular CDK dialog\n\n`\n          import {DialogModule} from '@angular/cdk/dialog';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/cdk/dialog/api\\#services)  Services\n\n#### [link](https://material.angular.io/cdk/dialog/api\\#Dialog) `Dialog`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `afterAllClosed: Observable<void>` | Stream that emits when all open dialog have finished closing.<br>Will emit on subscribe if there are no open dialogs to begin with. |\n| `afterOpened: Subject<DialogRef<any, any>>` | Stream that emits when a dialog has been opened. |\n| `openDialogs: readonly DialogRef<any, any>[]` | Keeps track of the currently-open dialogs. |\n\n##### Methods\n\n| closeAll |\n| --- |\n| Closes all of the currently-open dialogs. |\n\n| getDialogById |\n| --- |\n| Finds an open dialog by its id. |\n| Parameters |\n| --- |\n| id<br> `string` | ID to use when looking up the dialog. |\n| Returns |\n| --- |\n| `DialogRef<R, C> | undefined` |  |\n\n| open |\n| --- |\n| Opens a modal dialog containing the given component. |\n| Parameters |\n| --- |\n| component<br> `ComponentType<C>` | Type of the component to load into the dialog. |\n| config?<br> `DialogConfig<D, DialogRef<R, C>, BasePortalOutlet>` | Extra configuration options. |\n| Returns |\n| --- |\n| `DialogRef<R, C>` | Reference to the newly-opened dialog. |\n\n| open |\n| --- |\n| Opens a modal dialog containing the given template. |\n| Parameters |\n| --- |\n| template<br> `TemplateRef<C>` | TemplateRef to instantiate as the dialog content. |\n| config?<br> `DialogConfig<D, DialogRef<R, C>, BasePortalOutlet>` | Extra configuration options. |\n| Returns |\n| --- |\n| `DialogRef<R, C>` | Reference to the newly-opened dialog. |\n\n| open |\n| --- |\n| Parameters |\n| --- |\n| componentOrTemplateRef<br> `ComponentType<C> | TemplateRef<C>` |  |\n| config?<br> `DialogConfig<D, DialogRef<R, C>, BasePortalOutlet>` |  |\n| Returns |\n| --- |\n| `DialogRef<R, C>` |  |\n\n### [link](https://material.angular.io/cdk/dialog/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/cdk/dialog/api\\#DialogConfig) `DialogConfig`\n\nConfiguration for opening a modal dialog.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `ariaDescribedBy: string | null` | ID of the element that describes the dialog. |\n| `ariaLabel: string | null` | Dialog label applied via `aria-label` |\n| `ariaLabelledBy: string | null` | ID of the element that labels the dialog. |\n| `ariaModal: boolean` | Whether this is a modal dialog. Used to set the `aria-modal` attribute. Off by default,<br>because it can interfere with other overlay-based components (e.g. `mat-select`) and because<br>it is redundant since the dialog marks all outside content as `aria-hidden` anyway. |\n| `autoFocus: AutoFocusTarget | string | boolean` | Where the dialog should focus on open. |\n| `backdropClass: string | string[]` | Optional CSS class or classes applied to the overlay backdrop. |\n| `closeOnDestroy: boolean` | Whether the dialog should close when the dialog service is destroyed. This is useful if<br>another service is wrapping the dialog and is managing the destruction instead. |\n| `closeOnNavigation: boolean` | Whether the dialog should close when the user navigates backwards or forwards through browser<br>history. This does not apply to navigation via anchor element unless using URL-hash based<br>routing ( `HashLocationStrategy` in the Angular router). |\n| `closeOnOverlayDetachments: boolean` | Whether the dialog should close when the underlying overlay is detached. This is useful if<br>another service is wrapping the dialog and is managing the destruction instead. E.g. an<br>external detachment can happen as a result of a scroll strategy triggering it or when the<br>browser location changes. |\n| `container: Type<C> | {<br>    type: Type<C>;<br>    providers: (config: DialogConfig<D, R, C>) => StaticProvider[];<br>}` | Component into which the dialog content will be rendered. Defaults to `CdkDialogContainer`.<br>A configuration object can be passed in to customize the providers that will be exposed<br>to the dialog container. |\n| `data: D | null` | Data being injected into the child component. |\n| `direction: Direction` | Layout direction for the dialog's content. |\n| `disableClose: boolean` | Whether the dialog closes with the escape key or pointer events outside the panel element. |\n| `hasBackdrop: boolean` | Whether the dialog has a backdrop. |\n| `height: string` | Height of the dialog. |\n| `id: string` | ID for the dialog. If omitted, a unique one will be generated. |\n| `injector: Injector` | Injector used for the instantiation of the component to be attached. If provided,<br>takes precedence over the injector indirectly provided by `ViewContainerRef`. |\n| `maxHeight: number | string` | Max-height of the dialog. If a number is provided, assumes pixel units. |\n| `maxWidth: number | string` | Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. |\n| `minHeight: number | string` | Min-height of the dialog. If a number is provided, assumes pixel units. |\n| `minWidth: number | string` | Min-width of the dialog. If a number is provided, assumes pixel units. |\n| `panelClass: string | string[]` | Optional CSS class or classes applied to the overlay panel. |\n| `positionStrategy: PositionStrategy` | Strategy to use when positioning the dialog. Defaults to centering it on the page. |\n| `providers: StaticProvider[] | ((dialogRef: R, config: DialogConfig<D, R, C>, container: C) => StaticProvider[])` | Providers that will be exposed to the contents of the dialog. Can also<br>be provided as a function in order to generate the providers lazily. |\n| `restoreFocus: boolean | string | HTMLElement` | Whether the dialog should restore focus to the previously-focused element upon closing.<br>Has the following behavior based on the type that is passed in:<br>- `boolean` \\- when true, will return focus to the element that was focused before the dialog<br>   was opened, otherwise won't restore focus at all.<br>- `string` \\- focus will be restored to the first element that matches the CSS selector.<br>- `HTMLElement` \\- focus will be restored to the specific element. |\n| `role: DialogRole` | The ARIA role of the dialog element. |\n| `scrollStrategy: ScrollStrategy` | Scroll strategy to be used for the dialog. This determines how<br>the dialog responds to scrolling underneath the panel element. |\n| `templateContext: Record<string, any> | (() => Record<string, any>)` | Context that will be passed to template-based dialogs.<br>A function can be passed in to resolve the context lazily. |\n| `viewContainerRef: ViewContainerRef` | Where the attached component should live in Angular's _logical_ component tree.<br>This affects what is available for injection and the change detection order for the<br>component instantiated inside of the dialog. This does not affect where the dialog<br>content will be rendered. |\n| `width: string` | Width of the dialog. |\n| Deprecated<br> <br>`componentFactoryResolver: unknown` | Alternate `ComponentFactoryResolver` to use when resolving the associated component. |\n\n#### [link](https://material.angular.io/cdk/dialog/api\\#DialogRef) `DialogRef`\n\nReference to a dialog opened via the Dialog service.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `backdropClick: Observable<MouseEvent>` | Emits when the backdrop of the dialog is clicked. |\n| `closed: Observable<R | undefined>` | Emits when the dialog has been closed. |\n| `componentInstance: C | null` | Instance of component opened into the dialog. Will be<br>null when the dialog is opened using a `TemplateRef`. |\n| `componentRef: ComponentRef<C> | null` | `ComponentRef` of the component opened into the dialog. Will be<br>null when the dialog is opened using a `TemplateRef`. |\n| `config: DialogConfig<any, DialogRef<R, C>, BasePortalOutlet>` |  |\n| `containerInstance: BasePortalOutlet & {<br>    _closeInteractionType?: FocusOrigin;<br>}` | Instance of the container that is rendering out the dialog content. |\n| `disableClose: boolean | undefined` | Whether the user is allowed to close the dialog. |\n| `id: string` | Unique ID for the dialog. |\n| `keydownEvents: Observable<KeyboardEvent>` | Emits when on keyboard events within the dialog. |\n| `outsidePointerEvents: Observable<MouseEvent>` | Emits on pointer events that happen outside of the dialog. |\n| `overlayRef: OverlayRef` |  |\n\n##### Methods\n\n| addPanelClass |\n| --- |\n| Add a CSS class or an array of classes to the overlay pane. |\n| Parameters |\n| --- |\n| classes<br> `string | string[]` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| close |\n| --- |\n| Close the dialog. |\n| Parameters |\n| --- |\n| result?<br> `R` | Optional result to return to the dialog opener. |\n| options?<br> `DialogCloseOptions` | Additional options to customize the closing behavior. |\n\n| removePanelClass |\n| --- |\n| Remove a CSS class or an array of classes from the overlay pane. |\n| Parameters |\n| --- |\n| classes<br> `string | string[]` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| updatePosition |\n| --- |\n| Updates the position of the dialog based on the current position strategy. |\n| Returns |\n| --- |\n| `this` |  |\n\n| updateSize |\n| --- |\n| Updates the dialog's width and height. |\n| Parameters |\n| --- |\n| width<br> `string | number = ''` | New width of the dialog. |\n| height<br> `string | number = ''` | New height of the dialog. |\n| Returns |\n| --- |\n| `this` |  |\n\n### [link](https://material.angular.io/cdk/dialog/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/cdk/dialog/api\\#DialogCloseOptions) `DialogCloseOptions`\n\nAdditional options that can be passed in when closing a dialog.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `focusOrigin: FocusOrigin` | Focus original to use when restoring focus. |\n\n### [link](https://material.angular.io/cdk/dialog/api\\#functions)  Functions\n\n| throwDialogContentAlreadyAttachedError |\n| --- |\n\n### [link](https://material.angular.io/cdk/dialog/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/cdk/dialog/api\\#AutoFocusTarget) `AutoFocusTarget`\n\nOptions for where to set focus to automatically on dialog open\n\n```docs-markdown-code\ntype AutoFocusTarget = 'dialog' | 'first-tabbable' | 'first-heading';\n\n```\n\n#### [link](https://material.angular.io/cdk/dialog/api\\#DialogRole) `DialogRole`\n\nValid ARIA roles for a dialog.\n\n```docs-markdown-code\ntype DialogRole = 'dialog' | 'alertdialog';\n\n```\n\n### [link](https://material.angular.io/cdk/dialog/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/cdk/dialog/api\\#DIALOG_SCROLL_STRATEGY) `DIALOG_SCROLL_STRATEGY`\n\nInjection token for the Dialog's ScrollStrategy.\n\n```docs-markdown-code\nconst DIALOG_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\n```\n\n#### [link](https://material.angular.io/cdk/dialog/api\\#DIALOG_DATA) `DIALOG_DATA`\n\nInjection token for the Dialog's Data.\n\n```docs-markdown-code\nconst DIALOG_DATA: InjectionToken<any>;\n\n```\n\n#### [link](https://material.angular.io/cdk/dialog/api\\#DEFAULT_DIALOG_CONFIG) `DEFAULT_DIALOG_CONFIG`\n\nInjection token that can be used to provide default options for the dialog module.\n\n```docs-markdown-code\nconst DEFAULT_DIALOG_CONFIG: InjectionToken<DialogConfig<unknown, unknown, BasePortalOutlet>>;\n\n```\n\nDialog\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nNo longer used. Will be removed. Will be removed in v20.0.0 or later.\n\nCopy import to the clipboard",
  "title": "Dialog | Angular Material",
  "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
  "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
  "sourceURL": "https://material.angular.io/cdk/dialog/api"
}