{
  "content": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! \ud83d\ude80](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backPerformance\n  - [Overview](https://angular.dev/best-practices/runtime-performance)\n  - [Zone pollution](https://angular.dev/best-practices/zone-pollution)\n  - [Slow computations](https://angular.dev/best-practices/slow-computations)\n  - [Skipping component subtrees](https://angular.dev/best-practices/skipping-subtrees)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n**Zone.js** is a signaling mechanism that Angular uses to detect when an application state might have changed. It captures asynchronous operations like `setTimeout`, network requests, and event listeners. Angular schedules change detection based on signals from Zone.js.\n\nIn some cases scheduled [tasks](https://developer.mozilla.org/docs/Web/API/HTML_DOM_API/Microtask_guide#tasks) or [microtasks](https://developer.mozilla.org/docs/Web/API/HTML_DOM_API/Microtask_guide#microtasks) don\u2019t make any changes in the data model, which makes running change detection unnecessary. Common examples are:\n\n- `requestAnimationFrame`, `setTimeout` or `setInterval`\n- Task or microtask scheduling by third-party libraries\n\nThis section covers how to identify such conditions, and how to run code outside the Angular zone to avoid unnecessary change detection calls.\n\n## [Identifying unnecessary change detection calls](https://angular.dev/best-practices/zone-pollution\\#identifying-unnecessary-change-detection-calls)\n\nYou can detect unnecessary change detection calls using Angular DevTools. Often they appear as consecutive bars in the profiler\u2019s timeline with source `setTimeout`, `setInterval`, `requestAnimationFrame`, or an event handler. When you have limited calls within your application of these APIs, the change detection invocation is usually caused by a third-party library.\n\n![Angular DevTools profiler preview showing Zone pollution](https://angular.dev/best-practices/assets/images/best-practices/runtime-performance/zone-pollution.png)\n\nIn the image above, there is a series of change detection calls triggered by event handlers associated with an element. That\u2019s a common challenge when using third-party, non-native Angular components, which do not alter the default behavior of `NgZone`.\n\n## [Run tasks outside `NgZone`](https://angular.dev/best-practices/zone-pollution\\#run-tasks-outside-ngzone)\n\nIn such cases, you can instruct Angular to avoid calling change detection for tasks scheduled by a given piece of code using [NgZone](https://angular.dev/api/core/NgZone).\n\n### Run outside of the Zone\n\n```\n      1import { Component, NgZone, OnInit } from '@angular/core';23@Component(...)4class AppComponent implements OnInit {5  private ngZone = inject(NgZone);67  ngOnInit() {8    this.ngZone.runOutsideAngular(() => setInterval(pollForUpdates), 500);9  }10}\n\n```\n\ncheck\n\nThe preceding snippet instructs Angular to call `setInterval` outside the Angular Zone and skip running change detection after `pollForUpdates` runs.\n\nThird-party libraries commonly trigger unnecessary change detection cycles when their APIs are invoked within the Angular zone. This phenomenon particularly affects libraries that set up event listeners or initiate other tasks (such as timers, XHR requests, etc.). Avoid these extra cycles by calling library APIs outside the Angular zone:\n\n### Move the plot initialization outside of the Zone\n\n```\n      1import { Component, NgZone, OnInit } from '@angular/core';2import * as Plotly from 'plotly.js-dist-min';34@Component(...)5class AppComponent implements OnInit {6  private ngZone = inject(NgZone);78  ngOnInit() {9    this.ngZone.runOutsideAngular(() => {10      Plotly.newPlot('chart', data);11    });12  }13}\n\n```\n\ncheck\n\nRunning `Plotly.newPlot('chart', data);` within `runOutsideAngular` instructs the framework that it shouldn\u2019t run change detection after the execution of tasks scheduled by the initialization logic.\n\nFor example, if `Plotly.newPlot('chart', data)` adds event listeners to a DOM element, Angular does not run change detection after the execution of their handlers.\n\nBut sometimes, you may need to listen to events dispatched by third-party APIs. In such cases, it's important to remember that those event listeners will also execute outside of the Angular zone if the initialization logic was done there:\n\n### Check whether the handler is called outside of the Zone\n\n```\n      1import { Component, NgZone, OnInit, output } from '@angular/core';2import * as Plotly from 'plotly.js-dist-min';34@Component(...)5class AppComponent implements OnInit {6  private ngZone = inject(NgZone);78  plotlyClick = output<Plotly.PlotMouseEvent>();910  ngOnInit() {11    this.ngZone.runOutsideAngular(() => {12      this.createPlotly();13    });14  }1516  private async createPlotly() {17    const plotly = await Plotly.newPlot('chart', data);1819    plotly.on('plotly_click', (event: Plotly.PlotMouseEvent) => {20      // This handler will be called outside of the Angular zone because21      // the initialization logic is also called outside of the zone. To check22      // whether we're in the Angular zone, we can call the following:23      console.log(NgZone.isInAngularZone());24      this.plotlyClick.emit(event);25    });26  }27}\n\n```\n\ncheck\n\nIf you need to dispatch events to parent components and execute specific view update logic, you should consider re-entering the Angular zone to instruct the framework to run change detection or run change detection manually:\n\n### Re-enter the Angular zone when dispatching event\n\n```\n      1import { Component, NgZone, OnInit, output } from '@angular/core';2import * as Plotly from 'plotly.js-dist-min';34@Component(...)5class AppComponent implements OnInit {6  private ngZone = inject(NgZone);78  plotlyClick = output<Plotly.PlotMouseEvent>();910  ngOnInit() {11    this.ngZone.runOutsideAngular(() => {12      this.createPlotly();13    });14  }1516  private async createPlotly() {17    const plotly = await Plotly.newPlot('chart', data);1819    plotly.on('plotly_click', (event: Plotly.PlotMouseEvent) => {20      this.ngZone.run(() => {21        this.plotlyClick.emit(event);22      });23    });24  }25}\n\n```\n\ncheck\n\nThe scenario of dispatching events outside of the Angular zone may also arise. It's important to remember that triggering change detection (for example, manually) may result to the creation/update of views outside of the Angular zone.",
  "title": "Zone pollution \u2022 Angular",
  "description": "The web development framework for building modern apps.",
  "keywords": [
    "angular",
    "https",
    "ngzone",
    "zone",
    "dev",
    "plotly",
    "change",
    "detection",
    "outside",
    "best"
  ],
  "sourceURL": "https://angular.dev/best-practices/zone-pollution"
}