{
  "scrapeId": "7d4db7c5-3b39-4289-832e-fa25af35415a",
  "sourceURL": "https://angular.dev/guide/signals/resource",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backSignals\n  - [Overview](https://angular.dev/guide/signals)\n  - [Dependent state with linkedSignal](https://angular.dev/guide/signals/linked-signal)\n  - [Async reactivity with resources](https://angular.dev/guide/signals/resource)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n**IMPORTANT:** `resource` is [experimental](https://angular.dev/guide/signals/reference/releases#experimental). It's ready for you to try, but it might change before it is stable.\n\nMost signal APIs are synchronousâ€” `signal`, `computed`, `input`, etc. However, applications often need to deal with data that is available asynchronously. A `Resource` gives you a way to incorporate async data into your application's signal-based code.\n\nYou can use a `Resource` to perform any kind of async operation, but the most common use-case for `Resource` is fetching data from a server. The following example creates a resource to fetch some user data.\n\nThe easiest way to create a `Resource` is the `resource` function.\n\n```\n      import {resource, Signal} from '@angular/core';const userId: Signal<string> = getUserId();const userResource = resource({  // Define a reactive request computation.  // The request value recomputes whenever any read signals change.  request: () => ({id: userId()}),  // Define an async loader that retrieves data.  // The resource calls this function every time the `request` value changes.  loader: ({request}) => fetchUser(request),});// Create a computed signal based on the result of the resource's loader function.const firstName = computed(() => userResource.value().firstName);\n\n```\n\ncheck\n\nThe `resource` function accepts a `ResourceOptions` object with two main properties: `request` and `loader`.\n\nThe `request` property defines a reactive computation that produce a request value. Whenever signals read in this computation change, the resource produces a new request value, similar to `computed`.\n\nThe `loader` property defines a `ResourceLoader`â€” an async function that retrieves some state. The resource calls the loader every time the `request` computation produces a new value, passing that value to the loader. See [Resource loaders](https://angular.dev/guide/signals/resource#resource-loaders) below for more details.\n\n`Resource` has a `value` signal that contains the results of the loader.\n\n## [Resource loaders](https://angular.dev/guide/signals/resource\\#resource-loaders)\n\nWhen creating a resource, you specify a `ResourceLoader`. This loader is an async function that accepts a single parameterâ€” a `ResourceLoaderParams` objectâ€” and returns a value.\n\nThe `ResourceLoaderParams` object contains three properties: `request`, `previous`, and `abortSignal`.\n\n| Property | Description |\n| --- | --- |\n| `request` | The value of the resource's `request` computation. |\n| `previous` | An object with a `status` property, containing the previous `ResourceStatus`. |\n| `abortSignal` | An [`AbortSignal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal). See [Aborting requests](https://angular.dev/guide/signals/resource#aborting-requests) below for details. |\n\nIf the `request` computation returns `undefined`, the loader function does not run and the resource status becomes `Idle`.\n\n### [Aborting requests](https://angular.dev/guide/signals/resource\\#aborting-requests)\n\nA resource aborts an outstanding request if the `request` computation changes while the resource is loading.\n\nYou can use the `abortSignal` in `ResourceLoaderParams` to respond to aborted requests. For example, the native `fetch` function accepts an `AbortSignal`:\n\n```\n      const userId: Signal<string> = getUserId();const userResource = resource({  request: () => ({id: userId()}),  loader: ({request, abortSignal}): Promise<User> => {    // fetch cancels any outstanding HTTP requests when the given `AbortSignal`    // indicates that the request has been aborted.    return fetch(`users/${request.id}`, {signal: abortSignal});  },});\n\n```\n\ncheck\n\nSee [`AbortSignal` on MDN](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) for more details on request cancellation with `AbortSignal`.\n\n### [Reloading](https://angular.dev/guide/signals/resource\\#reloading)\n\nYou can programmatically trigger a resource's `loader` by calling the `reload` method.\n\n```\n      const userId: Signal<string> = getUserId();const userResource = resource({  request: () => ({id: userId()}),  loader: ({request}) => fetchUser(request),});// ...userResource.reload();\n\n```\n\ncheck\n\n## [Resource status](https://angular.dev/guide/signals/resource\\#resource-status)\n\nThe resource object has several signal properties for reading the status of the asynchronous loader.\n\n| Property | Description |\n| --- | --- |\n| `value` | The most recent value of the resource, or `undefined` if no value has been received. |\n| `hasValue` | Whether the resource has a value. |\n| `error` | The most recent error encountered while running the resource's loader, or `undefined` if no error has occurred. |\n| `isLoading` | Whether the resource loader is currently running. |\n| `status` | The resource's specific `ResourceStatus`, as described below. |\n\nThe `status` signal provides a specific `ResourceStatus` that describes the state of the resource.\n\n| Status | `value()` | Description |\n| --- | :-- | --- |\n| `Idle` | `undefined` | The resource has no valid request and the loader has not run. |\n| `Error` | `undefined` | The loader has encountered an error. |\n| `Loading` | `undefined` | The loader is running as a result of the `request` value changing. |\n| `Reloading` | Previous value | The loader is running as a result calling of the resource's `reload` method. |\n| `Resolved` | Resolved value | The loader has completed. |\n| `Local` | Locally set value | The resource's value has been set locally via `.set()` or `.update()` |\n\nYou can use this status information to conditionally display user interface elements, such loading indicators and error messages.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-29e9acf2-2c78-4d79-896d-fcf840b90233.png"
  },
  "metadata": {
    "msapplication-TileColor": "#e90464",
    "ogUrl": "https://angular.dev/",
    "application-name": "Angular",
    "viewport": "width=device-width, initial-scale=1",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "theme-color": "#ffffff",
    "og:type": "website",
    "twitter:url": "https://angular.dev/",
    "twitter:description": "The web development framework for building modern apps.",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "apple-mobile-web-app-title": "Angular",
    "ogDescription": "The web development framework for building modern apps.",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "description": "The web development framework for building modern apps.",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "og:url": "https://angular.dev/",
    "og:title": "Angular",
    "twitter:title": "Angular",
    "title": "Async reactivity with resources â€¢ Angular",
    "language": "en",
    "og:description": "The web development framework for building modern apps.",
    "twitter:card": "summary_large_image",
    "scrapeId": "7d4db7c5-3b39-4289-832e-fa25af35415a",
    "sourceURL": "https://angular.dev/guide/signals/resource",
    "url": "https://angular.dev/guide/signals/resource",
    "statusCode": 200
  }
}