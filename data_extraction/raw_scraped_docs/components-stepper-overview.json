{
  "scrapeId": "83e16490-ec9f-40ee-a0ef-88119d910613",
  "sourceURL": "https://material.angular.io/components/stepper/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for stepper\n\nAngular Material's stepper provides a wizard-like workflow by dividing content into logical steps.\n\nMaterial stepper builds on the foundation of the CDK stepper that is responsible for the logic\nthat drives a stepped workflow. Material stepper extends the CDK stepper and has Material Design\nstyling.\n\n### [link](https://material.angular.io/components/stepper/overview\\#stepper-variants)  Stepper variants\n\nThere are two stepper variants: `horizontal` and `vertical`. You can switch between the two using\nthe `orientation` attribute.\n\nStepper overview\n\nlinkcodeopen\\_in\\_new\n\nEnable linear mode\n\n1\n\nFill out your name\n\n2\n\nFill out your address\n\n3\n\nDone\n\nName\n\nNext\n\nAddress\n\nBackNext\n\nYou are now done.\n\nBackReset\n\nStepper vertical\n\nlinkcodeopen\\_in\\_new\n\nEnable linear mode\n\n1\n\nFill out your name\n\nName\n\nNext\n\n2\n\nFill out your address\n\nAddress\n\nBackNext\n\n3\n\nDone\n\nYou are now done.\n\nBackReset\n\n### [link](https://material.angular.io/components/stepper/overview\\#labels)  Labels\n\nIf a step's label is only text, then the `label` attribute can be used.\n\ncontent\\_copy\n\n```\n<mat-step [stepControl]=\"secondFormGroup\" label=\"Fill out your address\">\n```\n\nFor more complex labels, add a template with the `matStepLabel` directive inside the\n`mat-step`.\n\ncontent\\_copy\n\n```\n<ng-template matStepLabel>Fill out your name</ng-template>\n```\n\n#### [link](https://material.angular.io/components/stepper/overview\\#label-position)  Label position\n\nFor a horizontal `mat-stepper` it's possible to define the position of the label. `end` is the\ndefault value, while `bottom` will place it under the step icon instead of at its side.\nThis behaviour is controlled by `labelPosition` property.\n\ncontent\\_copy\n\n```\n<mat-stepper labelPosition=\"bottom\" #stepper>\n```\n\n#### [link](https://material.angular.io/components/stepper/overview\\#header-position)  Header position\n\nIf you're using a horizontal stepper, you can control where the stepper's content is positioned\nusing the `headerPosition` input. By default it's on top of the content, but it can also be placed\nunder it.\n\nStepper header position\n\nlinkcodeopen\\_in\\_new\n\n1\n\nFill out your name\n\n2\n\nFill out your address\n\nOptional\n\n3\n\nDone\n\nNext\n\nBackNext\n\nYou are now done.\n\nBackReset\n\n### [link](https://material.angular.io/components/stepper/overview\\#stepper-buttons)  Stepper buttons\n\nThere are two button directives to support navigation between different steps:\n`matStepperPrevious` and `matStepperNext`.\n\ncontent\\_copy\n\n```\n<button mat-button matStepperPrevious>Back</button>\n<button mat-button matStepperNext>Next</button>\n```\n\n### [link](https://material.angular.io/components/stepper/overview\\#linear-stepper)  Linear stepper\n\nThe `linear` attribute can be set on `mat-stepper` to create a linear stepper that requires the\nuser to complete previous steps before proceeding to following steps. For each `mat-step`, the\n`stepControl` attribute can be set to the top level `AbstractControl` that is used to check the\nvalidity of the step.\n\nThere are two possible approaches. One is using a single form for stepper, and the other is\nusing a different form for each step.\n\nAlternatively, if you don't want to use the Angular forms, you can pass in the `completed` property\nto each of the steps which won't allow the user to continue until it becomes `true`. Note that if\nboth `completed` and `stepControl` are set, the `stepControl` will take precedence.\n\n#### [link](https://material.angular.io/components/stepper/overview\\#using-a-single-form)  Using a single form\n\nWhen using a single form for the stepper, `matStepperPrevious` and `matStepperNext` have to be\nset to `type=\"button\"` in order to prevent submission of the form before all steps\nare completed.\n\n```html\n<form [formGroup]=\"formGroup\">\n  <mat-stepper formArrayName=\"formArray\" linear>\n    <mat-step formGroupName=\"0\" [stepControl]=\"formArray.get([0])\">\n      ...\n      <div>\n        <button mat-button matStepperNext type=\"button\">Next</button>\n      </div>\n    </mat-step>\n    <mat-step formGroupName=\"1\" [stepControl]=\"formArray.get([1])\">\n      ...\n      <div>\n        <button mat-button matStepperPrevious type=\"button\">Back</button>\n        <button mat-button matStepperNext type=\"button\">Next</button>\n      </div>\n    </mat-step>\n    ...\n  </mat-stepper>\n</form>\n\n```\n\n#### [link](https://material.angular.io/components/stepper/overview\\#using-a-different-form-for-each-step)  Using a different form for each step\n\n```html\n<mat-stepper orientation=\"vertical\" linear>\n  <mat-step [stepControl]=\"formGroup1\">\n    <form [formGroup]=\"formGroup1\">\n      ...\n    </form>\n  </mat-step>\n  <mat-step [stepControl]=\"formGroup2\">\n    <form [formGroup]=\"formGroup2\">\n      ...\n    </form>\n  </mat-step>\n</mat-stepper>\n\n```\n\n### [link](https://material.angular.io/components/stepper/overview\\#types-of-steps)  Types of steps\n\n#### [link](https://material.angular.io/components/stepper/overview\\#optional-step)  Optional step\n\nIf completion of a step in linear stepper is not required, then the `optional` attribute can be set\non `mat-step`.\n\ncontent\\_copy\n\n```\n<mat-step [stepControl]=\"secondFormGroup\" [optional]=\"isOptional\">\n```\n\n#### [link](https://material.angular.io/components/stepper/overview\\#editable-step)  Editable step\n\nBy default, steps are editable, which means users can return to previously completed steps and\nedit their responses. `editable=\"false\"` can be set on `mat-step` to change the default.\n\ncontent\\_copy\n\n```\n<mat-step [stepControl]=\"firstFormGroup\" [editable]=\"isEditable\">\n```\n\n#### [link](https://material.angular.io/components/stepper/overview\\#completed-step)  Completed step\n\nBy default, the `completed` attribute of a step returns `true` if the step is valid (in case of\nlinear stepper) and the user has interacted with the step. The user, however, can also override\nthis default `completed` behavior by setting the `completed` attribute as needed.\n\n#### [link](https://material.angular.io/components/stepper/overview\\#overriding-icons)  Overriding icons\n\nBy default, the step headers will use the `create` and `done` icons from the Material design icon\nset via `<mat-icon>` elements. If you want to provide a different set of icons, you can do so\nby placing a `matStepperIcon` for each of the icons that you want to override. The `index`,\n`active`, and `optional` values of the individual steps are available through template variables:\n\ncontent\\_copy\n\n```\n  <ng-template matStepperIcon=\"phone\">\n    <mat-icon>call_end</mat-icon>\n  </ng-template>\n  <ng-template matStepperIcon=\"chat\">\n    <mat-icon>forum</mat-icon>\n  </ng-template>\n</mat-stepper>\n```\n\nNote that you aren't limited to using the `mat-icon` component when providing custom icons.\n\n### [link](https://material.angular.io/components/stepper/overview\\#controlling-the-stepper-animation)  Controlling the stepper animation\n\nYou can control the duration of the stepper's animation using the `animationDuration` input. If you\nwant to disable the animation completely, you can do so by setting the properties to `0ms`.\n\nStepper animations\n\nlinkcodeopen\\_in\\_new\n\nAnimation duration:\n\n1\n\nFill out your name\n\nNext\n\n2\n\nFill out your address\n\nBackNext\n\n3\n\nDone\n\nYou are now done.\n\nBackReset\n\n#### [link](https://material.angular.io/components/stepper/overview\\#step-states)  Step States\n\nYou can set the state of a step to whatever you want. The given state by default maps to an icon.\nHowever, it can be overridden the same way as mentioned above.\n\ncontent\\_copy\n\n```\n<mat-stepper>\n  <mat-step label=\"Step 1\" state=\"phone\">\n    <p>Put down your phones.</p>\n    <div>\n      <button mat-button matStepperNext>Next</button>\n    </div>\n  </mat-step>\n  <mat-step label=\"Step 2\" state=\"chat\">\n    <p>Socialize with each other.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button matStepperNext>Next</button>\n    </div>\n  </mat-step>\n  <mat-step label=\"Step 3\">\n    <p>You're welcome.</p>\n  </mat-step>\n\n  <!-- Icon overrides. -->\n  <ng-template matStepperIcon=\"phone\">\n    <mat-icon>call_end</mat-icon>\n  </ng-template>\n  <ng-template matStepperIcon=\"chat\">\n    <mat-icon>forum</mat-icon>\n  </ng-template>\n</mat-stepper>\n```\n\nIn order to use the custom step states, you must add the `displayDefaultIndicatorType` option to\nthe global default stepper options which can be specified by providing a value for\n`STEPPER_GLOBAL_OPTIONS` in your application's root module.\n\n```ts\n@NgModule({\n  providers: [\\\n    {\\\n      provide: STEPPER_GLOBAL_OPTIONS,\\\n      useValue: { displayDefaultIndicatorType: false }\\\n    }\\\n  ]\n})\n\n```\n\nStepper with customized states\n\nlinkcodeopen\\_in\\_new\n\nEditablecreate\n\nFill out your name\n\n2\n\nFill out your address\n\n3\n\nDone\n\nName\n\nNext\n\nAddress\n\nBackNext\n\nYou are now done.\n\nBackReset\n\nEditablecreate\n\nStep 1\n\nforum\n\nStep 2\n\n3\n\nStep 3\n\nPut down your phones.\n\nNext\n\nSocialize with each other.\n\nBackNext\n\nYou're welcome.\n\n### [link](https://material.angular.io/components/stepper/overview\\#error-state)  Error State\n\nIf you want to show an error when the user moved past a step that hasn't been filled out correctly,\nyou can set the error message through the `errorMessage` input and configure the stepper to show\nerrors via the `showError` option in the `STEPPER_GLOBAL_OPTIONS` injection token. Note that since\n`linear` steppers prevent a user from advancing past an invalid step to begin with, this setting\nwill not affect steppers marked as `linear`.\n\n```ts\n@NgModule({\n  providers: [\\\n    {\\\n      provide: STEPPER_GLOBAL_OPTIONS,\\\n      useValue: { showError: true }\\\n    }\\\n  ]\n})\n\n```\n\nStepper that displays errors in the steps\n\nlinkcodeopen\\_in\\_new\n\n1\n\nFill out your name\n\n2\n\nFill out your address\n\n3\n\nDone\n\nName\n\nGo to a different step to see the error state\n\nNext\n\nAddress\n\nGo to a different step to see the error state\n\nBackNext\n\nYou are now done.\n\nBackReset\n\n### [link](https://material.angular.io/components/stepper/overview\\#lazy-rendering)  Lazy rendering\n\nBy default, the stepper will render all of it's content when it's initialized. If you have some\ncontent that you want to defer until the particular step is opened, you can put it inside\nan `ng-template` with the `matStepContent` attribute.\n\nStepper lazy content rendering\n\nlinkcodeopen\\_in\\_new\n\n1\n\nStep 1\n\nThis content was rendered lazily\n\nNext\n\n2\n\nStep 2\n\n3\n\nStep 3\n\nThis content was rendered eagerly\n\nBack\n\n### [link](https://material.angular.io/components/stepper/overview\\#responsive-stepper)  Responsive stepper\n\nIf your app supports a wide variety of screens and a stepper's layout doesn't fit a particular\nscreen size, you can control its `orientation` dynamically to change the layout based on the\nviewport.\n\nStepper responsive\n\nlinkcodeopen\\_in\\_new\n\nMake your screen smaller to see a vertical stepper\n\n1\n\nFill out your name\n\n2\n\nFill out your address\n\n3\n\nFill out your phone number\n\n4\n\nDone\n\nName\n\nNext\n\nAddress\n\nBackNext\n\nPhone number\n\nBackNext\n\nYou are now done.\n\nBack\n\n### [link](https://material.angular.io/components/stepper/overview\\#keyboard-interaction)  Keyboard interaction\n\n| Keyboard shortcut | Action |\n| --- | --- |\n| `Left Arrow` | Focus the previous step header. |\n| `Right Arrow` | Focus the next step header. |\n| `Enter` | Select the focused step. |\n| `Space` | Select the focused step. |\n\n### [link](https://material.angular.io/components/stepper/overview\\#localizing-labels)  Localizing labels\n\nLabels used by the stepper are provided through `MatStepperIntl`. Localization of these messages\ncan be done by providing a subclass with translated values in your application root module.\n\n```ts\n@NgModule({\n  imports: [MatStepperModule],\n  providers: [\\\n    {provide: MatStepperIntl, useClass: MyIntl},\\\n  ],\n})\nexport class MyApp {}\n\n```\n\nStepper that uses the MatStepperIntl service\n\nlinkcodeopen\\_in\\_new\n\nPick the text for the optional label\n\nOption 1\n\nOption 2\n\nOption 3\n\n1\n\nFill out your name\n\n2\n\nFill out your address\n\nOptional Label\n\n3\n\nDone\n\nName\n\nNext\n\nAddress\n\nBackNext\n\nYou are now done.\n\nBackReset\n\n### [link](https://material.angular.io/components/stepper/overview\\#accessibility)  Accessibility\n\nThe stepper is treated as a tabbed view for accessibility purposes, so it is given\n`role=\"tablist\"` by default. The header of step that can be clicked to select the step\nis given `role=\"tab\"`, and the content that can be expanded upon selection is given\n`role=\"tabpanel\"`. `aria-selected` attribute of step header is automatically set based on\nstep selection change.\n\nThe stepper and each step should be given a meaningful label via `aria-label` or `aria-labelledby`.\n\nPrefer vertical steppers when building for small screen sizes, as horizontal\nsteppers typically take up significantly more horizontal space thus introduce\nhorizontal scrolling. Applications with multiple scrolling dimensions make\ncontent harder to consume for some users. See the [Responsive Stepper section](https://material.angular.io/components/stepper/overview#responsive-stepper)\nabove for an example on building a stepper that adjusts its layout based on\nviewport size.\n\n#### [link](https://material.angular.io/components/stepper/overview\\#forms)  Forms\n\nSteppers often contain forms and form controls. If validation errors inside of a\nstepper's form prevents moving to another step, make sure that your form\ncontrols communicate error messages to assistive technology. This helps the user\nknow why they can't advance to another step. You can accomplish this by using\n`<mat-error>` with `<mat-form-field>`, or by using an ARIA live region.\n\nWhen a step contains a forms validation error, `MatStepper` will display the\nerror in the step's header if specified. See the [Error State section](https://material.angular.io/components/stepper/overview#error-state)\nfor an example of a stepper with an error message. For non-linear steppers, you\nshould use an ARIA live region to announce error messages when users navigate\naway from a step with an error message.\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Stepper overview example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit Stepper vertical example in StackBlitz\n\nCopy snippet\n\nView full example\n\nEdit Stepper header position example in StackBlitz\n\nEdit Stepper animations example in StackBlitz\n\nEdit Stepper with customized states example in StackBlitz\n\nEdit Stepper that displays errors in the steps example in StackBlitz\n\nEdit Stepper lazy content rendering example in StackBlitz\n\nEdit Stepper responsive example in StackBlitz\n\nEdit Stepper that uses the MatStepperIntl service example in StackBlitz",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-d871d5e3-c91d-4fa4-a28a-ff1db3228ece.png"
  },
  "metadata": {
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "twitter:creator": "@Angular",
    "twitter:title": "Angular Material",
    "og:type": "website",
    "og:image:height": "943",
    "viewport": "width=device-width, initial-scale=1",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "ogLocale": "en_US",
    "twitter:site": "@Angular",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogUrl": "https://material.angular.io/",
    "author": "Angular Components Team",
    "apple-mobile-web-app-capable": "yes",
    "title": "Stepper | Angular Material",
    "ogSiteName": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:title": "Angular Material",
    "og:locale": "en_US",
    "favicon": "https://material.angular.io/components/stepper/assets/img/favicon.ico?v=19.1.0",
    "theme-color": "#d7e3ff",
    "og:image:type": "image/png",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "mobile-web-app-capable": "yes",
    "ogTitle": "Angular Material",
    "twitter:card": "summary",
    "language": "en-US",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:site_name": "Angular Material",
    "og:url": "https://material.angular.io/",
    "og:image:width": "1339",
    "scrapeId": "83e16490-ec9f-40ee-a0ef-88119d910613",
    "sourceURL": "https://material.angular.io/components/stepper/overview",
    "url": "https://material.angular.io/components/stepper/overview",
    "statusCode": 200
  }
}