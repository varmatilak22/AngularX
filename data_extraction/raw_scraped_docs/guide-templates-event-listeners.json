{
  "scrapeId": "d82b9c62-8288-4d1f-9eeb-75a7d1521033",
  "sourceURL": "https://angular.dev/guide/templates/event-listeners",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backTemplates\n  - [Overview](https://angular.dev/guide/templates)\n  - [Binding dynamic text, properties and attributes](https://angular.dev/guide/templates/binding)\n  - [Adding event listeners](https://angular.dev/guide/templates/event-listeners)\n  - [Two-way binding](https://angular.dev/guide/templates/two-way-binding)\n  - [Control flow](https://angular.dev/guide/templates/control-flow)\n  - [Pipes](https://angular.dev/guide/templates/pipes)\n  - [Slotting child content with ng-content](https://angular.dev/guide/templates/ng-content)\n  - [Create template fragments with ng-template](https://angular.dev/guide/templates/ng-template)\n  - [Grouping elements with ng-container](https://angular.dev/guide/templates/ng-container)\n  - [Variables in templates](https://angular.dev/guide/templates/variables)\n  - [Deferred loading with @defer](https://angular.dev/guide/templates/defer)\n  - [Expression syntax](https://angular.dev/guide/templates/expression-syntax)\n  - [Whitespace in templates](https://angular.dev/guide/templates/whitespace)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nAngular supports defining event listeners on an element in your template by specifying the event name inside parentheses along with a statement that runs every time the event occurs.\n\n## [Listening to native events](https://angular.dev/guide/templates/event-listeners\\#listening-to-native-events)\n\nWhen you want to add event listeners to an HTML element, you wrap the event with parentheses, `()`, which allows you to specify a listener statement.\n\n```\n      @Component({  template: `    <input type=\"text\" (keyup)=\"updateField()\" />  `,  ...})export class AppComponent{  updateField(): void {    console.log('Field is updated!');  }}\n\n```\n\ncheck\n\nIn this example, Angular calls `updateField` every time the `<input>` element emits a `keyup` event.\n\nYou can add listeners for any native events, such as: `click`, `keydown`, `mouseover`, etc. To learn more, check out the [all available events on elements on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element#events).\n\n## [Accessing the event argument](https://angular.dev/guide/templates/event-listeners\\#accessing-the-event-argument)\n\nIn every template event listener, Angular provides a variable named `$event` that contains a reference to the event object.\n\n```\n      @Component({  template: `    <input type=\"text\" (keyup)=\"updateField($event)\" />  `,  ...})export class AppComponent {  updateField(event: KeyboardEvent): void {    console.log(`The user pressed: ${event.key}`);  }}\n\n```\n\ncheck\n\n## [Using key modifiers](https://angular.dev/guide/templates/event-listeners\\#using-key-modifiers)\n\nWhen you want to capture specific keyboard events for a specific key, you might write some code like the following:\n\n```\n      @Component({  template: `    <input type=\"text\" (keyup)=\"updateField($event)\" />  `,  ...})export class AppComponent {  updateField(event: KeyboardEvent): void {    if (event.key === 'Enter') {      console.log('The user pressed enter in the text field.');    }  }}\n\n```\n\ncheck\n\nHowever, since this is a common scenario, Angular lets you filter the events by specifying a specific key using the period ( `.`) character. By doing so, code can be simplified to:\n\n```\n      @Component({  template: `    <input type=\"text\" (keyup.enter)=\"updateField($event)\" />  `,  ...})export class AppComponent{  updateField(event: KeyboardEvent): void {    console.log('The user pressed enter in the text field.');  }}\n\n```\n\ncheck\n\nYou can also add additional key modifiers:\n\n```\n      <!-- Matches shift and enter --><input type=\"text\" (keyup.shift.enter)=\"updateField($event)\" />\n\n```\n\ncheck\n\nAngular supports the modifiers `alt`, `control`, `meta`, and `shift`.\n\nYou can specify the key or code that you would like to bind to keyboard events. The key and code fields are a native part of the browser keyboard event object. By default, event binding assumes you want to use the [Key values for keyboard events](https://developer.mozilla.org/docs/Web/API/UI_Events/Keyboard_event_key_values).\n\nAngular also allows you to specify [Code values for keyboard events](https://developer.mozilla.org/docs/Web/API/UI_Events/Keyboard_event_code_values) by providing a built-in `code` suffix.\n\n```\n      <!-- Matches alt and left shift --><input type=\"text\" (keydown.code.alt.shiftleft)=\"updateField($event)\" />\n\n```\n\ncheck\n\nThis can be useful for handling keyboard events consistently across different operating systems. For example, when using the Alt key on MacOS devices, the `key` property reports the key based on the character already modified by the Alt key. This means that a combination like Alt + S reports a `key` value of `'ÃŸ'`. The `code` property, however, corresponds to the physical or virtual button pressed rather than the character produced.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-793c169a-a06d-4d41-b2af-7a916c1025d4.png"
  },
  "metadata": {
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "og:type": "website",
    "og:title": "Angular",
    "twitter:card": "summary_large_image",
    "ogDescription": "The web development framework for building modern apps.",
    "application-name": "Angular",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "apple-mobile-web-app-title": "Angular",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:title": "Angular",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "twitter:description": "The web development framework for building modern apps.",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "description": "The web development framework for building modern apps.",
    "title": "Adding event listeners â€¢ Angular",
    "msapplication-TileColor": "#e90464",
    "theme-color": "#ffffff",
    "og:url": "https://angular.dev/",
    "language": "en",
    "og:description": "The web development framework for building modern apps.",
    "twitter:url": "https://angular.dev/",
    "ogUrl": "https://angular.dev/",
    "viewport": "width=device-width, initial-scale=1",
    "scrapeId": "d82b9c62-8288-4d1f-9eeb-75a7d1521033",
    "sourceURL": "https://angular.dev/guide/templates/event-listeners",
    "url": "https://angular.dev/guide/templates/event-listeners",
    "statusCode": 200
  }
}