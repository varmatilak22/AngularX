{
  "scrapeId": "74a2f2b3-c924-4ec8-a2b2-d6e9d3db553c",
  "sourceURL": "https://angular.dev/tools/cli/schematics",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! 🚀](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backAngular CLI\n  - [Overview](https://angular.dev/tools/cli)\n  - [Local set-up](https://angular.dev/tools/cli/setup-local)\n  - [Building Angular apps](https://angular.dev/tools/cli/build)\n  - [Serving Angular apps for development](https://angular.dev/tools/cli/serve)\n  - [Deployment](https://angular.dev/tools/cli/deployment)\n  - [End-to-End Testing](https://angular.dev/tools/cli/end-to-end)\n  - [Migrating to new build system](https://angular.dev/tools/cli/build-system-migration)\n  - [Build environments](https://angular.dev/tools/cli/environments)\n  - [Angular CLI builders](https://angular.dev/tools/cli/cli-builder)\n  - [Generating code using schematics](https://angular.dev/tools/cli/schematics)\n  - [Authoring schematics](https://angular.dev/tools/cli/schematics-authoring)\n  - [Schematics for libraries](https://angular.dev/tools/cli/schematics-for-libraries)\n  - [Template type checking](https://angular.dev/tools/cli/template-typecheck)\n  - [Ahead-of-time (AOT) compilation](https://angular.dev/tools/cli/aot-compiler)\n  - [AOT metadata errors](https://angular.dev/tools/cli/aot-metadata-errors)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nA schematic is a template-based code generator that supports complex logic.\nIt is a set of instructions for transforming a software project by generating or modifying code.\nSchematics are packaged into collections and installed with npm.\n\nThe schematic collection can be a powerful tool for creating, modifying, and maintaining any software project, but is particularly useful for customizing Angular projects to suit the particular needs of your own organization.\nYou might use schematics, for example, to generate commonly-used UI patterns or specific components, using predefined templates or layouts.\nUse schematics to enforce architectural rules and conventions, making your projects consistent and interoperative.\n\n## [Schematics for the Angular CLI](https://angular.dev/tools/cli/schematics\\#schematics-for-the-angular-cli)\n\nSchematics are part of the Angular ecosystem.\nThe Angular CLI uses schematics to apply transforms to a web-app project.\nYou can modify these schematics, and define new ones to do things like update your code to fix breaking changes in a dependency, for example, or to add a new configuration option or framework to an existing project.\n\nSchematics that are included in the `@schematics/angular` collection are run by default by the commands `ng generate` and `ng add`.\nThe package contains named schematics that configure the options that are available to the CLI for `ng generate` sub-commands, such as `ng generate component` and `ng generate service`.\nThe sub-commands for `ng generate` are shorthand for the corresponding schematic.\nTo specify and generate a particular schematic, or a collection of schematics, using the long form:\n\n```\n      ng generate my-schematic-collection:my-schematic-name\n\n```\n\ncheck\n\nor\n\n```\n      ng generate my-schematic-name --collection collection-name\n\n```\n\ncheck\n\n### [Configuring CLI schematics](https://angular.dev/tools/cli/schematics\\#configuring-cli-schematics)\n\nA JSON schema associated with a schematic tells the Angular CLI what options are available to commands and sub-commands, and determines the defaults.\nThese defaults can be overridden by providing a different value for an option on the command line.\nSee [Workspace Configuration](https://angular.dev/tools/cli/reference/configs/workspace-config) for information about how to change the generation option defaults for your workspace.\n\nThe JSON schemas for the default schematics used by the CLI to generate projects and parts of projects are collected in the package [`@schematics/angular`](https://github.com/angular/angular-cli/tree/main/packages/schematics/angular).\nThe schema describes the options available to the CLI for each of the `ng generate` sub-commands, as shown in the `--help` output.\n\n## [Developing schematics for libraries](https://angular.dev/tools/cli/schematics\\#developing-schematics-for-libraries)\n\nAs a library developer, you can create your own collections of custom schematics to integrate your library with the Angular CLI.\n\n- An _add schematic_ lets developers install your library in an Angular workspace using `ng add`\n- _Generation schematics_ can tell the `ng generate` sub-commands how to modify projects, add configurations and scripts, and scaffold artifacts that are defined in your library\n- An _update schematic_ can tell the `ng update` command how to update your library's dependencies and adjust for breaking changes when you release a new version\n\nFor more details of what these look like and how to create them, see:\n\n### [Add schematics](https://angular.dev/tools/cli/schematics\\#add-schematics)\n\nAn _add schematic_ is typically supplied with a library, so that the library can be added to an existing project with `ng add`.\nThe `add` command uses your package manager to download new dependencies, and invokes an installation script that is implemented as a schematic.\n\nFor example, the [`@angular/material`](https://material.angular.io/guide/schematics) schematic tells the `add` command to install and set up Angular Material and theming, and register new starter components that can be created with `ng generate`.\nLook at this one as an example and model for your own add schematic.\n\nPartner and third party libraries also support the Angular CLI with add schematics.\nFor example, `@ng-bootstrap/schematics` adds [ng-bootstrap](https://ng-bootstrap.github.io/) to an app, and `@clr/angular` installs and sets up [Clarity from VMWare](https://clarity.design/documentation/get-started).\n\nAn _add schematic_ can also update a project with configuration changes, add additional dependencies (such as polyfills), or scaffold package-specific initialization code.\nFor example, the `@angular/pwa` schematic turns your application into a PWA by adding an application manifest and service worker.\n\n### [Generation schematics](https://angular.dev/tools/cli/schematics\\#generation-schematics)\n\nGeneration schematics are instructions for the `ng generate` command.\nThe documented sub-commands use the default Angular generation schematics, but you can specify a different schematic (in place of a sub-command) to generate an artifact defined in your library.\n\nAngular Material, for example, supplies generation schematics for the UI components that it defines.\nThe following command uses one of these schematics to render an Angular Material `<mat-table>` that is pre-configured with a datasource for sorting and pagination.\n\n```\n      ng generate @angular/material:table <component-name>\n\n```\n\ncheck\n\n### [Update schematics](https://angular.dev/tools/cli/schematics\\#update-schematics)\n\nThe `ng update` command can be used to update your workspace's library dependencies.\nIf you supply no options or use the help option, the command examines your workspace and suggests libraries to update.\n\n```\n      ng updateWe analyzed your package.json, there are some packages to update:    Name                                      Version                     Command to update    ‐-------------------------------------------------------------------------------    @angular/cdk                       7.2.2 -> 7.3.1           ng update @angular/cdk    @angular/cli                       7.2.3 -> 7.3.0           ng update @angular/cli    @angular/core                      7.2.2 -> 7.2.3           ng update @angular/core    @angular/material                  7.2.2 -> 7.3.1           ng update @angular/material    rxjs                                      6.3.3 -> 6.4.0           ng update rxjs\n\n```\n\ncheck\n\nIf you pass the command a set of libraries to update, it updates those libraries, their peer dependencies, and the peer dependencies that depend on them.\n\n**HELPFUL:** If there are inconsistencies (for example, if peer dependencies cannot be matched by a simple [semver](https://semver.io/) range), the command generates an error and does not change anything in the workspace.\n\nWe recommend that you do not force an update of all dependencies by default.\nTry updating specific dependencies first.\n\nFor more about how the `ng update` command works, see [Update Command](https://github.com/angular/angular-cli/blob/main/docs/specifications/update.md).\n\nIf you create a new version of your library that introduces potential breaking changes, you can provide an _update schematic_ to enable the `ng update` command to automatically resolve any such changes in the project being updated.\n\nFor example, suppose you want to update the Angular Material library.\n\n```\n      ng update @angular/material\n\n```\n\ncheck\n\nThis command updates both `@angular/material` and its dependency `@angular/cdk` in your workspace's `package.json`.\nIf either package contains an update schematic that covers migration from the existing version to a new version, the command runs that schematic on your workspace.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-8799cb27-63ca-4fb4-80af-2753f9d9c66d.png"
  },
  "metadata": {
    "application-name": "Angular",
    "apple-mobile-web-app-title": "Angular",
    "viewport": "width=device-width, initial-scale=1",
    "og:url": "https://angular.dev/",
    "og:title": "Angular",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:title": "Angular",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "description": "The web development framework for building modern apps.",
    "og:type": "website",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "twitter:description": "The web development framework for building modern apps.",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "language": "en",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "ogDescription": "The web development framework for building modern apps.",
    "title": "Generating code using schematics • Angular",
    "og:description": "The web development framework for building modern apps.",
    "twitter:url": "https://angular.dev/",
    "twitter:card": "summary_large_image",
    "theme-color": "#ffffff",
    "msapplication-TileColor": "#e90464",
    "ogUrl": "https://angular.dev/",
    "scrapeId": "74a2f2b3-c924-4ec8-a2b2-d6e9d3db553c",
    "sourceURL": "https://angular.dev/tools/cli/schematics",
    "url": "https://angular.dev/tools/cli/schematics",
    "statusCode": 200
  }
}