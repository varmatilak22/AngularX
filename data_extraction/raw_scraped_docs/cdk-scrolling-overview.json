{
  "scrapeId": "67037031-cf7e-401f-809e-7e2fd37864f8",
  "sourceURL": "https://material.angular.io/cdk/scrolling/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\n## Overview for scrolling\n\nThe `scrolling` package provides helpers for directives that react to scroll events.\n\n### [link](https://material.angular.io/cdk/scrolling/overview\\#cdkscrollable-and-scrolldispatcher)  cdkScrollable and ScrollDispatcher\n\nThe `cdkScrollable` directive and the `ScrollDispatcher` service together allow components to\nreact to scrolling in any of its ancestor scrolling containers.\n\nThe `cdkScrollable` directive should be applied to any element that acts as a scrolling container.\nThis marks the element as a `Scrollable` and registers it with the `ScrollDispatcher`. The\ndispatcher, then, allows components to share both event listeners and knowledge of all of the\nscrollable containers in the application.\n\n### [link](https://material.angular.io/cdk/scrolling/overview\\#viewportruler)  ViewportRuler\n\nThe `ViewportRuler` is a service that can be injected and used to measure the bounds of the browser\nviewport.\n\n### [link](https://material.angular.io/cdk/scrolling/overview\\#virtual-scrolling)  Virtual scrolling\n\nThe `<cdk-virtual-scroll-viewport>` displays large lists of elements performantly by only\nrendering the items that fit on-screen. Loading hundreds of elements can be slow in any browser;\nvirtual scrolling enables a performant way to simulate all items being rendered by making the\nheight of the container element the same as the height of total number of elements to be rendered,\nand then only rendering the items in view. Virtual scrolling is different from strategies like\ninfinite scroll where it renders a set amount of elements and then when you hit the end renders the\nrest.\n\n#### [link](https://material.angular.io/cdk/scrolling/overview\\#creating-items-in-the-viewport)  Creating items in the viewport\n\n`*cdkVirtualFor` replaces `*ngFor` inside of a `<cdk-virtual-scroll-viewport>`, supporting the exact\nsame API as [`*ngFor`](https://angular.dev/api/common/NgForOf). The simplest usage just specifies the\nlist of items (note that the `itemSize` property on the viewport must be set):\n\nBasic virtual scroll\n\nlinkcodeopen\\_in\\_new\n\nItem #0\n\nItem #1\n\nItem #2\n\nItem #3\n\nItem #4\n\nItem #5\n\nItem #6\n\nItem #7\n\n`*cdkVirtualFor` makes the following context variables available to the template:\n\n| Context variable | Description |\n| --- | --- |\n| `index` | The index of the item in the data source. |\n| `count` | The total number of items in the data source. |\n| `first` | Whether this is the first item in the data source. |\n| `last` | Whether this is the last item in the data source. |\n| `even` | Whether the `index` is even. |\n| `odd` | Whether the `index` is odd. |\n\nAll of these apply to the index of the item in the data source, not the index in the rendered\nportion of the data.\n\nVirtual scroll context variables\n\nlinkcodeopen\\_in\\_new\n\nItem: Item #0\n\nIndex: 0\n\nCount: 100000\n\nFirst: Yes\n\nLast: No\n\nEven: Yes\n\nOdd: No\n\nItem: Item #1\n\nIndex: 1\n\nCount: 100000\n\nFirst: No\n\nLast: No\n\nEven: No\n\nOdd: Yes\n\nItem: Item #2\n\nIndex: 2\n\nCount: 100000\n\nFirst: No\n\nLast: No\n\nEven: Yes\n\nOdd: No\n\nItem: Item #3\n\nIndex: 3\n\nCount: 100000\n\nFirst: No\n\nLast: No\n\nEven: No\n\nOdd: Yes\n\nA `trackBy` function can be specified and works the same as the `*ngFor` `trackBy`. The `index`\npassed to the tracking function will be the index in the data source, not the index in the rendered\nportion.\n\n##### [link](https://material.angular.io/cdk/scrolling/overview\\#view-recycling)  View recycling\n\nTo improve rendering performance, `*cdkVirtualFor` caches previously created views after\nthey are no longer needed. When a new view would normally be created, a cached view\nis reused instead. The size of the view cache can be adjusted via the `templateCacheSize`\nproperty; setting this size to `0` disables caching. If your templates are expensive in terms of\nmemory you may wish to reduce this number to avoid spending too much memory on the template cache.\n\nVirtual scroll with no template caching\n\nlinkcodeopen\\_in\\_new\n\nItem #0\n\nItem #1\n\nItem #2\n\nItem #3\n\nItem #4\n\nItem #5\n\nItem #6\n\nItem #7\n\n##### [link](https://material.angular.io/cdk/scrolling/overview\\#specifying-data)  Specifying data\n\n`*cdkVirtualFor` accepts data from an `Array`, `Observable<Array>`, or `DataSource`. The\n`DataSource` for the virtual scroll is the same one used by the table and tree components. A\n`DataSource` is simply an abstract class that has two methods: `connect` and `disconnect`. The\n`connect` method will be called by the virtual scroll viewport to receive a stream that emits the\ndata array that should be rendered. The viewport will call `disconnect` when the viewport is\ndestroyed, which may be the right time to clean up any subscriptions that were registered during the\nconnect process.\n\nVirtual scroll with a custom data source\n\nlinkcodeopen\\_in\\_new\n\nItem #0\n\nItem #1\n\nItem #2\n\nItem #3\n\nItem #4\n\nItem #5\n\nItem #6\n\nItem #7\n\n#### [link](https://material.angular.io/cdk/scrolling/overview\\#scrolling-over-fixed-size-items)  Scrolling over fixed size items\n\nWhen all items are the same fixed size, you can use the `FixedSizeVirtualScrollStrategy`. This can\nbe easily added to your viewport using the `itemSize` directive. The advantage of this constraint is\nthat it allows for better performance, since items do not need to be measured as they are rendered.\n\nThe fixed size strategy also supports setting a couple of buffer parameters that determine how much\nextra content is rendered beyond what is visible in the viewport. The first of these parameters is\n`minBufferPx`. The `minBufferPx` is the minimum amount of content buffer (in pixels) that the\nviewport must render. If the viewport ever detects that there is less buffered content it will\nimmediately render more. The second buffer parameter is `maxBufferPx`. This tells the viewport how\nmuch buffer space to render back up to when it detects that more buffer is required.\n\nThe interaction of these two buffer parameters can be best illustrated with an example. Supposed\nthat we have the following parameters: `itemSize = 50`, `minBufferPx = 100`, `maxBufferPx = 250`. As\nthe user is scrolling through the content the viewport detects that there is only `90px` of buffer\nremaining. Since this is below `minBufferPx` the viewport must render more buffer. It must render at\nleast enough buffer to get back to `maxBufferPx`. In this case, it renders 4 items (an additional\n`200px`) to bring the total buffer size to `290px`, back above `maxBufferPx`.\n\nFixed size virtual scroll with custom buffer parameters\n\nlinkcodeopen\\_in\\_new\n\nItem #0\n\nItem #1\n\nItem #2\n\nItem #3\n\nItem #4\n\nItem #5\n\nItem #6\n\nItem #7\n\nItem #8\n\nItem #9\n\nItem #10\n\nItem #11\n\nOther virtual scrolling strategies can be implemented by extending `VirtualScrollStrategy`. An\nautosize strategy that works on elements of differing sizes is currently being developed in\n`@angular/cdk-experimental`, but it is not ready for production use yet.\n\n### [link](https://material.angular.io/cdk/scrolling/overview\\#viewport-orientation)  Viewport orientation\n\nThe virtual-scroll viewport defaults to a vertical orientation, but can also be set to\n`orientation=\"horizontal\"`. When changing the orientation, ensure that the item are laid\nout horizontally via CSS. To do this you may want to target CSS at\n`.cdk-virtual-scroll-content-wrapper` which is the wrapper element that contains the rendered\ncontent.\n\nHorizontal virtual scroll\n\nlinkcodeopen\\_in\\_new\n\nItem #0\n\nItem #1\n\nItem #2\n\nItem #3\n\nItem #4\n\nItem #5\n\nItem #6\n\nItem #7\n\n### [link](https://material.angular.io/cdk/scrolling/overview\\#elements-with-parent-tag-requirements)  Elements with parent tag requirements\n\nSome HTML elements such as `<tr>` and `<li>` have limitations on the kinds of parent elements they\ncan be placed inside. To enable virtual scrolling over these type of elements, place the elements in\ntheir proper parent, and then wrap the whole thing in a `cdk-virtual-scroll-viewport`. Be careful\nthat the parent does not introduce additional space (e.g. via `margin` or `padding`) as it will\ninterfere with the scrolling.\n\nVirtual scrolling \\`<dl>\\`\n\nlinkcodeopen\\_in\\_new\n\nAlabamaMontgomeryAlaskaJuneauArizonaPhoenixArkansasLittle RockCaliforniaSacramentoColoradoDenverConnecticutHartford\n\n### [link](https://material.angular.io/cdk/scrolling/overview\\#scrolling-strategies)  Scrolling strategies\n\nIn order to determine how large the overall content is and what portion of it actually needs to be\nrendered at any given time the viewport relies on a `VirtualScrollStrategy` being provided. The\nsimplest way to provide it is to use the `itemSize` directive on the viewport\n(e.g. `<cdk-virtual-scroll-viewport itemSize=\"50\">`). However it is also possible to provide a\ncustom strategy by creating a class that implements the `VirtualScrollStrategy` interface and\nproviding it as the `VIRTUAL_SCROLL_STRATEGY` on the component containing your viewport.\n\nVirtual scroll with a custom strategy\n\nlinkcodeopen\\_in\\_new\n\nItem #0\n\nItem #1\n\nItem #2\n\nItem #3\n\nItem #4\n\nItem #5\n\nItem #6\n\nItem #7\n\nItem #8\n\nItem #9\n\nItem #10\n\nItem #11\n\nItem #12\n\nItem #13\n\n### [link](https://material.angular.io/cdk/scrolling/overview\\#append-only-mode)  Append only mode\n\nVirtual scroll viewports that render nontrivial items may find it more performant to simply append\nto the list as the user scrolls without removing rendered views. The `appendOnly` input ensures\nviews that are already rendered persist in the DOM after they scroll out of view.\n\nVirtual scroll with view recycling disabled.\n\nlinkcodeopen\\_in\\_new\n\nItem #0\n\nItem #1\n\nItem #2\n\nItem #3\n\nItem #4\n\nItem #5\n\nItem #6\n\nItem #7\n\n### [link](https://material.angular.io/cdk/scrolling/overview\\#separate-viewport-and-scrolling-element)  Separate viewport and scrolling element\n\nThe virtual scroll viewport itself acts as the scrolling element by default. However, there may be\nsome cases where you want to have the viewport scroll one of its parent elements. For example,\nif you want to have some non-virtualized content that the user can scroll through before or after\nthe virtualized content.\n\nTo configure a `cdk-virtual-scroll-viewport` to use one of its parent elements as the scrolling\nelement, apply `cdkVirtualScrollingElement` to the scrolling parent element.\n\nVirtual scrolling viewport parent element\n\nlinkcodeopen\\_in\\_new\n\nContent before\n\nItem #0\n\nItem #1\n\nItem #2\n\nItem #3\n\nItem #4\n\nItem #5\n\nItem #6\n\nItem #7\n\nContent after\n\nAnother common scenario is using the window itself as the scrolling element. This is often a better\nuser experience on mobile devices, as it allows the browser chrome to scroll away. To use the\nwindow as the scrolling element, add the `scrollWindow` attribute to the\n`cdk-virtual-scroll-viewport`.\n\nVirtual scrolling window\n\nlinkcodeopen\\_in\\_new\n\nPlease open on StackBlitz to see result\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Basic virtual scroll example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit Virtual scroll context variables example in StackBlitz\n\nEdit Virtual scroll with no template caching example in StackBlitz\n\nEdit Virtual scroll with a custom data source example in StackBlitz\n\nEdit Fixed size virtual scroll with custom buffer parameters example in StackBlitz\n\nEdit Horizontal virtual scroll example in StackBlitz\n\nEdit Virtual scrolling \\`<dl>\\` example in StackBlitz\n\nEdit Virtual scroll with a custom strategy example in StackBlitz\n\nEdit Virtual scroll with view recycling disabled. example in StackBlitz\n\nEdit Virtual scrolling viewport parent element example in StackBlitz\n\nEdit Virtual scrolling window example in StackBlitz",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-c75ea867-f9d3-4df8-b4d1-9f708814e49a.png"
  },
  "metadata": {
    "title": "Scrolling | Angular Material",
    "twitter:card": "summary",
    "theme-color": "#d7e3ff",
    "ogTitle": "Angular Material",
    "og:image:width": "1339",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "ogSiteName": "Angular Material",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "author": "Angular Components Team",
    "og:locale": "en_US",
    "mobile-web-app-capable": "yes",
    "og:title": "Angular Material",
    "apple-mobile-web-app-capable": "yes",
    "viewport": "width=device-width, initial-scale=1",
    "favicon": "https://material.angular.io/cdk/scrolling/assets/img/favicon.ico?v=19.1.0",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:site": "@Angular",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "og:type": "website",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "ogLocale": "en_US",
    "language": "en-US",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "ogUrl": "https://material.angular.io/",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:type": "image/png",
    "twitter:title": "Angular Material",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:site_name": "Angular Material",
    "og:image:height": "943",
    "og:url": "https://material.angular.io/",
    "twitter:creator": "@Angular",
    "scrapeId": "67037031-cf7e-401f-809e-7e2fd37864f8",
    "sourceURL": "https://material.angular.io/cdk/scrolling/overview",
    "url": "https://material.angular.io/cdk/scrolling/overview",
    "statusCode": 200
  }
}