{
  "scrapeId": "24b856d8-bf47-40a2-9a5a-71e5cb472447",
  "sourceURL": "https://material.angular.io/cdk/menu/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\n## Overview for menu\n\nThe `@angular/cdk/menu` module provides directives to help create custom menu\ninteractions based on the [WAI ARIA specification](https://www.w3.org/TR/wai-aria-1.1/ \"ARIA Spec\").\n\nBy using `@angular/cdk/menu` you get all of the expected behaviors for an accessible\nexperience, including bidi layout support, keyboard interaction, and focus management. All\ndirectives apply their associated ARIA roles to their host element.\n\n### [link](https://material.angular.io/cdk/menu/overview\\#supported-aria-roles)  Supported ARIA Roles\n\nThe directives in `@angular/cdk/menu` set the appropriate roles on their host element.\n\n| Directive | ARIA Role |\n| --- | --- |\n| CdkMenuBar | menubar |\n| CdkMenu | menu |\n| CdkMenuGroup | group |\n| CdkMenuItem | menuitem |\n| CdkMenuItemRadio | menuitemradio |\n| CdkMenuItemCheckbox | menuitemcheckbox |\n| CdkMenuTrigger | button |\n\n### [link](https://material.angular.io/cdk/menu/overview\\#css-styles-and-classes)  CSS Styles and Classes\n\nThe `@angular/cdk/menu` is designed to be highly customizable to your needs. It therefore does not\nmake any assumptions about how elements should be styled. You are expected to apply any required\nCSS styles, but the directives do apply CSS classes to make it easier for you to add custom styles.\nThe available CSS classes are listed below, by directive.\n\n| Directive | CSS Class | Applied... |\n| :-- | --- | --- |\n| `cdkMenu` | `cdk-menu` | Always |\n| `cdkMenu` | `cdk-menu-inline` | If the menu is an [inline menu](https://material.angular.io/cdk/menu/overview#menu-content) |\n| `cdkMenuBar` | `cdk-menu-bar` | Always |\n| `cdkMenuGroup` | `cdk-menu-group` | Always |\n| `cdkMenuItem` | `cdk-menu-item` | Always |\n| `cdkMenuItemCheckbox` | `cdk-menu-item` | Always |\n| `cdkMenuItemCheckbox` | `cdk-menu-item-checkbox` | Always |\n| `cdkMenuItemRadio` | `cdk-menu-item` | Always |\n| `cdkMenuItemRadio` | `cdk-menu-item-radio` | Always |\n| `cdkMenuTriggerFor` | `cdk-menu-trigger` | Always |\n\n### [link](https://material.angular.io/cdk/menu/overview\\#getting-started)  Getting started\n\nImport the `CdkMenuModule` into the `NgModule` in which you want to create menus. You can then apply\nmenu directives to build your custom menu. A typical menu consists of the following directives:\n\n- `cdkMenuTriggerFor` \\- links a trigger element to an `ng-template` containing the menu to be opened\n- `cdkMenu` \\- creates the menu content opened by the trigger\n- `cdkMenuItem` \\- added to each item in the menu\n\ncontent\\_copy\n\n```\n<button [cdkMenuTriggerFor]=\"menu\" class=\"example-standalone-trigger\">Click me!</button>\n\n<ng-template #menu>\n  <div class=\"example-menu\" cdkMenu>\n    <button class=\"example-menu-item\" cdkMenuItem>Refresh</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Settings</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Help</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Sign out</button>\n  </div>\n</ng-template>\n\n```\n\nMost menu interactions consist of two parts: a trigger and a menu panel.\n\n#### [link](https://material.angular.io/cdk/menu/overview\\#triggers)  Triggers\n\nYou can add `cdkMenuTriggerFor` to any button to make it a trigger for the given menu, or any menu\nitem to make it a trigger for a submenu. When adding this directive, be sure to pass a reference to\nthe template containing the menu it should open. Users can toggle the associated menu using a mouse\nor keyboard.\n\ncontent\\_copy\n\n```\n<button [cdkMenuTriggerFor]=\"menu\" class=\"example-standalone-trigger\">Click me!</button>\n```\n\nWhen creating a submenu trigger, add both `cdkMenuItem` and `cdkMenuTriggerFor` like so,\n\ncontent\\_copy\n\n```\n<button class=\"example-menu-bar-item\" cdkMenuItem [cdkMenuTriggerFor]=\"file\">File</button>\n```\n\n#### [link](https://material.angular.io/cdk/menu/overview\\#menu-content)  Menu content\n\nThere are two types of menus:\n\n- _inline menus_ are always present on the page\n- _pop-up menus_ can be toggled to hide or show by the user\n\nYou can create menus by marking their content element with the `cdkMenu` or `cdkMenuBar`\ndirectives. You can create several types of menu interaction which are discussed below.\n\nAll type of menus should exclusively contain elements with role `menuitem`, `menuitemcheckbox`,\n`menuitemradio`, or `group`. Supporting directives that automatically apply these roles are\ndiscussed below.\n\nNote that Angular CDK provides no styles; you must add styles as part of building your custom menu.\n\n### [link](https://material.angular.io/cdk/menu/overview\\#inline-menus)  Inline Menus\n\nAn _inline menu_ is a menu that lives directly on the page rather than in a pop-up associated with a\ntrigger. You can use an inline menu when you want a persistent menu interaction on a page. Menu\nitems within an inline menus are logically grouped together, and you can navigate through them\nusing your keyboard. You can create an inline menu by adding the `cdkMenu` directive to the element\nyou want to serve as the menu content.\n\ncontent\\_copy\n\n```\n<div class=\"example-menu\" cdkMenu>\n  <button class=\"example-menu-item\" cdkMenuItem>Inbox</button>\n  <button class=\"example-menu-item\" cdkMenuItem>Snoozed</button>\n  <button class=\"example-menu-item\" cdkMenuItem>Important</button>\n  <button class=\"example-menu-item\" cdkMenuItem>Sent</button>\n  <button class=\"example-menu-item\" cdkMenuItem>Drafts</button>\n  <button class=\"example-menu-item\" cdkMenuItem>All Mail</button>\n</div>\n\n```\n\n### [link](https://material.angular.io/cdk/menu/overview\\#pop-up-menus)  Pop-up Menus\n\nYou can create pop-up menus using the `cdkMenu` directive as well. Add this directive to the\nelement you want to serve as the content for your pop-up menu. Then wrap the content element in an\n`ng-template` and reference the template from the `cdkMenuTriggerFor` property of the trigger. This\nwill allow the trigger to show and hide the menu content as needed.\n\ncontent\\_copy\n\n```\n<button [cdkMenuTriggerFor]=\"menu\" class=\"example-standalone-trigger\">Click me!</button>\n\n<ng-template #menu>\n  <div class=\"example-menu\" cdkMenu>\n    <button class=\"example-menu-item\" cdkMenuItem>Refresh</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Settings</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Help</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Sign out</button>\n  </div>\n</ng-template>\n\n```\n\n### [link](https://material.angular.io/cdk/menu/overview\\#menu-bars)  Menu Bars\n\nMenu bars are a type of inline menu that you can create using the `cdkMenuBar` directive. They\nfollow the [ARIA menubar](https://www.w3.org/TR/wai-aria-practices-1.1/#menu \"ARIA Menubar Pattern\") spec and behave similarly to a desktop application menubar. Each\nbar consists of at least one `cdkMenuItem` that triggers a submenu.\n\ncontent\\_copy\n\n```\n<div cdkMenuBar>\n  <button class=\"example-menu-bar-item\" cdkMenuItem [cdkMenuTriggerFor]=\"file\">File</button>\n  <button class=\"example-menu-bar-item\" cdkMenuItem [cdkMenuTriggerFor]=\"edit\">Edit</button>\n  <button class=\"example-menu-bar-item\" cdkMenuItem [cdkMenuTriggerFor]=\"format\">Format</button>\n</div>\n\n<ng-template #file>\n  <div class=\"example-menu\" cdkMenu>\n    <button class=\"example-menu-item\" cdkMenuItem>Share</button>\n    <hr />\n    <button class=\"example-menu-item\" cdkMenuItem [cdkMenuTriggerFor]=\"new_doc\">\n      New <span>&#10148;</span>\n    </button>\n    <button class=\"example-menu-item\" cdkMenuItem>Open</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Make a Copy</button>\n    <hr />\n    <button class=\"example-menu-item\" cdkMenuItem [cdkMenuTriggerFor]=\"download\">\n      Download <span>&#10148;</span>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #edit>\n  <div class=\"example-menu\" cdkMenu>\n    <button class=\"example-menu-item\" cdkMenuItem>Undo</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Redo</button>\n    <hr />\n    <button class=\"example-menu-item\" cdkMenuItem>Cut</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Copy</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Paste</button>\n  </div>\n</ng-template>\n\n<ng-template #format >\n  <div class=\"example-menu\" cdkMenu>\n    <div class=\"example-menu-group\" cdkMenuGroup>\n      <button cdkMenuItemCheckbox class=\"example-menu-item\" cdkMenuItemChecked>Bold</button>\n      <button cdkMenuItemCheckbox class=\"example-menu-item\">Italic</button>\n    </div>\n    <hr />\n    <div class=\"example-menu-group\" cdkMenuGroup>\n      <button cdkMenuItemRadio class=\"example-menu-item\">Small</button>\n      <button cdkMenuItemRadio class=\"example-menu-item\" cdkMenuItemChecked>Normal</button>\n      <button cdkMenuItemRadio class=\"example-menu-item\">Big</button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #new_doc>\n  <div class=\"example-menu\" cdkMenu>\n    <button class=\"example-menu-item\" cdkMenuItem>Document</button>\n    <button class=\"example-menu-item\" cdkMenuItem>From template</button>\n    <hr />\n    <button class=\"example-menu-item\" cdkMenuItem>Spreadsheet</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Presentation</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Form</button>\n  </div>\n</ng-template>\n\n<ng-template #download>\n  <div class=\"example-menu\" cdkMenu>\n    <button class=\"example-menu-item\" cdkMenuItem>Microsoft Word</button>\n    <button class=\"example-menu-item\" cdkMenuItem>PDF</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Plain text</button>\n  </div>\n</ng-template>\n\n```\n\n### [link](https://material.angular.io/cdk/menu/overview\\#context-menus)  Context Menus\n\nA context menus is a type of pop-up menu that doesn't have a traditional trigger element, instead\nit is triggered when a user right-clicks within some container element. You can mark a\ncontainer element with the `cdkContextMenuTriggerFor`, which behaves like `cdkMenuTriggerFor` except\nthat it responds to the browser's native `contextmenu` event. Custom context menus appear next to\nthe cursor, similarly to native context menus.\n\ncontent\\_copy\n\n```\n<div [cdkContextMenuTriggerFor]=\"context_menu\">\n  Did you ever hear the tragedy of Darth Plagueis The Wise? I thought not. It's not a story the Jedi\n  would tell you. It's a Sith legend. Darth Plagueis was a Dark Lord of the Sith, so powerful and so\n  wise he could use the Force to influence the midichlorians to create life… He had such a knowledge\n  of the dark side that he could even keep the ones he cared about from dying. The dark side of the\n  Force is a pathway to many abilities some consider to be unnatural. He became so powerful… the\n  only thing he was afraid of was losing his power, which eventually, of course, he did.\n  Unfortunately, he taught his apprentice everything he knew, then his apprentice killed him in his\n  sleep. Ironic. He could save others from death, but not himself.\n</div>\n\n<ng-template #context_menu>\n  <div class=\"example-menu\" cdkMenu>\n    <button class=\"example-menu-item\" cdkMenuItem>Cut</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Copy</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Link</button>\n  </div>\n</ng-template>\n\n```\n\nYou can nest context menu container elements. Upon right-click, the menu associated with the closest\ncontainer element will open.\n\ncontent\\_copy\n\n```\n<div class=\"example-context-area\" [cdkContextMenuTriggerFor]=\"outer\">\n  Outer context menu\n  <div class=\"example-context-area\" [cdkContextMenuTriggerFor]=\"inner\">Inner context menu</div>\n</div>\n```\n\nIn the example above, right-clicking on \"Inner context menu\" will open up the \"inner\" menu and\nright-clicking inside \"Outer context menu\" will open up the \"outer\" menu.\n\n### [link](https://material.angular.io/cdk/menu/overview\\#menu-items)  Menu Items\n\nThe `cdkMenuItem` directive allows users to navigate menu items via keyboard.\nYou can add a custom action to a menu item with the `cdkMenuItemTriggered` output.\n\ncontent\\_copy\n\n```\n<button cdkMenuItem\n        class=\"example-menu-item\"\n        (cdkMenuItemTriggered)=\"reset()\">Reset</button>\n```\n\nYou can create nested menus by using a menu item as the trigger for another menu.\n\ncontent\\_copy\n\n```\n<button class=\"example-menu-bar-item\" cdkMenuItem [cdkMenuTriggerFor]=\"file\">File</button>\n```\n\n#### [link](https://material.angular.io/cdk/menu/overview\\#menu-item-checkboxes)  Menu Item Checkboxes\n\nA `cdkMenuItemCheckbox` is a special type of menu item that behaves as a checkbox. You can use this\ntype of menu item to toggle items on and off. An element with the `cdkMenuItemCheckbox` directive\ndoes not need the additional `cdkMenuItem` directive.\n\nCheckbox items do not track their own state. You must bind the checked state using the\n`cdkMenuItemChecked` input and listen to `cdkMenuItemTriggered` to know when it is toggled. If you\ndon't bind the state it will reset when the menu is closed and re-opened.\n\ncontent\\_copy\n\n```\n<button\n    cdkMenuItemCheckbox\n    class=\"example-menu-item\"\n    [cdkMenuItemChecked]=\"bold\"\n    (cdkMenuItemTriggered)=\"bold = !bold\">\n  Bold\n</button>\n```\n\n#### [link](https://material.angular.io/cdk/menu/overview\\#menu-item-radios)  Menu Item Radios\n\nA `cdkMenuItemRadio` is a special type of menu item that behaves as a radio button. You can use this\ntype of menu item for menus with exclusively selectable items. An element with the `cdkMenuItemRadio`\ndirective does not need the additional `cdkMenuItem` directive.\n\nAs with checkbox items, radio items do not track their own state, but you can track it by binding\n`cdkMenuItemChecked` and listening for `cdkMenuItemTriggered`. If you do not bind the state the\nselection will reset when the menu is closed and reopened.\n\ncontent\\_copy\n\n```\n@for (size of sizes; track size) {\n  <button\n      cdkMenuItemRadio\n      class=\"example-menu-item\"\n      [cdkMenuItemChecked]=\"size === selectedSize\"\n      (cdkMenuItemTriggered)=\"selectedSize = size\">\n    {{size}}\n  </button>\n}\n```\n\n#### [link](https://material.angular.io/cdk/menu/overview\\#groups)  Groups\n\nBy default `cdkMenu` acts as a group for `cdkMenuItemRadio` elements. Elements with\n`cdkMenuItemRadio` added as children of a `cdkMenu` will be logically grouped and only a single item\ncan have the checked state.\n\nIf you would like to have unrelated groups of radio buttons within a single menu you should use the\n`cdkMenuGroup` directive.\n\ncontent\\_copy\n\n```\n<button [cdkMenuTriggerFor]=\"menu\" class=\"example-standalone-item\">Click me!</button>\n\n<ng-template #menu>\n  <div class=\"example-menu\" cdkMenu>\n    <button\n        cdkMenuItemCheckbox\n        class=\"example-menu-item\"\n        [cdkMenuItemChecked]=\"bold\"\n        (cdkMenuItemTriggered)=\"bold = !bold\">\n      Bold\n    </button>\n    <button\n        cdkMenuItemCheckbox\n        class=\"example-menu-item\"\n        [cdkMenuItemChecked]=\"italic\"\n        (cdkMenuItemTriggered)=\"italic = !italic\">\n      Italic\n    </button>\n    <hr />\n    <div cdkMenuGroup>\n      @for (size of sizes; track size) {\n        <button\n            cdkMenuItemRadio\n            class=\"example-menu-item\"\n            [cdkMenuItemChecked]=\"size === selectedSize\"\n            (cdkMenuItemTriggered)=\"selectedSize = size\">\n          {{size}}\n        </button>\n      }\n    </div>\n    <hr />\n    <button cdkMenuItem\n            class=\"example-menu-item\"\n            (cdkMenuItemTriggered)=\"reset()\">Reset</button>\n  </div>\n</ng-template>\n\n```\n\n### [link](https://material.angular.io/cdk/menu/overview\\#smart-menu-aim)  Smart Menu Aim\n\n`@angular/cdk/menu` is capable of intelligently predicting when a user intends to navigate to an\nopen submenu and preventing premature closeouts. This functionality prevents users from having to\nhunt through the open menus in a maze-like fashion to reach their destination. To enable this\nfeature for a menu and its sub-menus, add the `cdkTargetMenuAim` directive to the `cdkMenu` or\n`cdkMenuBar` element.\n\n![menu aim diagram](https://material.angular.io/assets/img/menuaim.png)\n\nAs demonstrated in the diagram above we first track the user's mouse movements within a menu. Next,\nwhen a user mouses into a sibling menu item (e.g. Share button) the sibling item asks the Menu Aim\nservice if it can perform its close actions. In order to determine if the current submenu can be\nclosed out, the Menu Aim service calculates the slope between a selected target coordinate in the\nsubmenu and the previous mouse point, and the slope between the target and the current mouse point.\nIf the slope of the current mouse point is greater than the slope of the previous that means the\nuser is moving towards the submenu, so we shouldn't close out. Users however may sometimes stop\nshort in a sibling item after moving towards the submenu. The service is intelligent enough to\ndetect this intention and will trigger the next menu.\n\n### [link](https://material.angular.io/cdk/menu/overview\\#accessibility)  Accessibility\n\nThe set of directives defined in `@angular/cdk/menu` follow accessibility best practices as defined\nin the [ARIA spec](https://www.w3.org/TR/wai-aria-practices-1.1/#menu \"ARIA Menubar Pattern\"). Specifically, the menus are aware of left-to-right and right-to-left\nlayouts and opened appropriately. You should however add any necessary CSS styles. Menu items should\nalways have meaningful labels, whether through text content, `aria-label`, or `aria-labelledby`.\nFinally, keyboard interaction is supported as defined in the [ARIA menubar keyboard interaction spec](https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-12 \"ARIA Menubar Keyboard Interaction\").\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy snippet\n\nView full example",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-de9d9e6d-5d89-4509-97e2-ddedab04c84b.png"
  },
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "twitter:card": "summary",
    "og:image:type": "image/png",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:creator": "@Angular",
    "twitter:title": "Angular Material",
    "og:site_name": "Angular Material",
    "theme-color": "#d7e3ff",
    "mobile-web-app-capable": "yes",
    "language": "en-US",
    "og:image:width": "1339",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "apple-mobile-web-app-capable": "yes",
    "og:locale": "en_US",
    "twitter:site": "@Angular",
    "ogLocale": "en_US",
    "og:url": "https://material.angular.io/",
    "og:title": "Angular Material",
    "favicon": "https://material.angular.io/cdk/menu/assets/img/favicon.ico?v=19.1.0",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "title": "Menu | Angular Material",
    "og:image:height": "943",
    "author": "Angular Components Team",
    "ogSiteName": "Angular Material",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "ogTitle": "Angular Material",
    "ogUrl": "https://material.angular.io/",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:type": "website",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "scrapeId": "24b856d8-bf47-40a2-9a5a-71e5cb472447",
    "sourceURL": "https://material.angular.io/cdk/menu/overview",
    "url": "https://material.angular.io/cdk/menu/overview",
    "statusCode": 200
  }
}