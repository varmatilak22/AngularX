{
  "scrapeId": "ec111eaa-0982-47ba-a019-c8e6c6057f41",
  "sourceURL": "https://angular.dev/tutorials/first-app/10-routing",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nunfold\\_more\nYour first Angular appAdd routing\n\n[chevron\\_left](https://angular.dev/tutorials/first-app/09-services) [chevron\\_right](https://angular.dev/tutorials/first-app/11-details-page)\n\nunfold\\_more\nYour first Angular appAdd routing\n\n[chevron\\_left](https://angular.dev/tutorials/first-app/09-services) [chevron\\_right](https://angular.dev/tutorials/first-app/11-details-page)\n\nThis tutorial lesson demonstrates how to add routes to your app.\n\n**IMPORTANT:** We recommend using your local environment to learn routing.\n\n## [What you'll learn](https://angular.dev/tutorials/first-app/10-routing\\#what-youll-learn)\n\nAt the end of this lesson your application will have support for routing.\n\n## [Conceptual preview of routing](https://angular.dev/tutorials/first-app/10-routing\\#conceptual-preview-of-routing)\n\nThis tutorial introduces routing in Angular. Routing is the ability to navigate from one component in the application to another. In [Single Page Applications (SPA)](https://angular.dev/guide/routing), only parts of the page are updated to represent the requested view for the user.\n\nThe [Angular Router](https://angular.dev/guide/routing) enables users to declare routes and specify which component should be displayed on the screen if that route is requested by the application.\n\nIn this lesson, you will enable routing in your application to navigate to the details page.\n\n1. ### [Create a default details component](https://angular.dev/tutorials/first-app/10-routing\\#create-a-default-details-component-)\n\n1. From the terminal, enter the following command to create the `DetailsComponent`:\n\n\n\n      ```\n            ng generate component details\n\n      ```\n\n      check\n\n       This component will represent the details page that provides more information on a given housing location.\n2. ### [Add routing to the application](https://angular.dev/tutorials/first-app/10-routing\\#add-routing-to-the-application)\n\n1. In the `src/app` directory, create a file called `routes.ts`. This file is where we will define the routes in the application.\n\n2. In `main.ts`, make the following updates to enable routing in the application:\n\n      1. Import the routes file and the `provideRouter` function:\n\n\n\n\n         check\n\n         ```\n               /* *  Protractor support is deprecated in Angular. *  Protractor is used in this example for compatibility with Angular documentation tools. */import {bootstrapApplication, provideProtractorTestingSupport} from '@angular/platform-browser';import {AppComponent} from './app/app.component';import {provideRouter} from '@angular/router';import routeConfig from './app/routes';bootstrapApplication(AppComponent, {  providers: [provideProtractorTestingSupport(), provideRouter(routeConfig)],}).catch((err) => console.error(err));\n\n         ```\n\n      2. Update the call to `bootstrapApplication` to include the routing configuration:\n\n\n\n\n         check\n\n         ```\n               /* *  Protractor support is deprecated in Angular. *  Protractor is used in this example for compatibility with Angular documentation tools. */import {bootstrapApplication, provideProtractorTestingSupport} from '@angular/platform-browser';import {AppComponent} from './app/app.component';import {provideRouter} from '@angular/router';import routeConfig from './app/routes';bootstrapApplication(AppComponent, {  providers: [provideProtractorTestingSupport(), provideRouter(routeConfig)],}).catch((err) => console.error(err));\n\n         ```\n3. In `src/app/app.component.ts`, update the component to use routing:\n\n      1. Add a file level import for `RoutingModule`:\n\n\n\n\n         check\n\n         ```\n               import {Component} from '@angular/core';import {HomeComponent} from './home/home.component';import {RouterModule} from '@angular/router';@Component({  selector: 'app-root',  imports: [HomeComponent, RouterModule],  template: `    <main>      <a [routerLink]=\"['/']\">        <header class=\"brand-name\">          <img class=\"brand-logo\" src=\"/assets/logo.svg\" alt=\"logo\" aria-hidden=\"true\" />        </header>      </a>      <section class=\"content\">        <router-outlet></router-outlet>      </section>    </main>  `,  styleUrls: ['./app.component.css'],})export class AppComponent {  title = 'homes';}\n\n         ```\n\n      2. Add `RouterModule` to the `@Component` metadata imports\n\n\n\n\n         check\n\n         ```\n               import {Component} from '@angular/core';import {HomeComponent} from './home/home.component';import {RouterModule} from '@angular/router';@Component({  selector: 'app-root',  imports: [HomeComponent, RouterModule],  template: `    <main>      <a [routerLink]=\"['/']\">        <header class=\"brand-name\">          <img class=\"brand-logo\" src=\"/assets/logo.svg\" alt=\"logo\" aria-hidden=\"true\" />        </header>      </a>      <section class=\"content\">        <router-outlet></router-outlet>      </section>    </main>  `,  styleUrls: ['./app.component.css'],})export class AppComponent {  title = 'homes';}\n\n         ```\n\n      3. In the `template` property, replace the `<app-home></app-home>` tag with the `<router-outlet>` directive and add a link back to the home page. Your code should match this code:\n\n\n\n\n         check\n\n         ```\n               import {Component} from '@angular/core';import {HomeComponent} from './home/home.component';import {RouterModule} from '@angular/router';@Component({  selector: 'app-root',  imports: [HomeComponent, RouterModule],  template: `    <main>      <a [routerLink]=\"['/']\">        <header class=\"brand-name\">          <img class=\"brand-logo\" src=\"/assets/logo.svg\" alt=\"logo\" aria-hidden=\"true\" />        </header>      </a>      <section class=\"content\">        <router-outlet></router-outlet>      </section>    </main>  `,  styleUrls: ['./app.component.css'],})export class AppComponent {  title = 'homes';}\n\n         ```\n3. ### [Add route to new component](https://angular.dev/tutorials/first-app/10-routing\\#add-route-to-new-component)\n\n\nIn the previous step you removed the reference to the `<app-home>` component in the template. In this step, you will add a new route to that component.\n1. In `routes.ts`, perform the following updates to create a route.\n\n      1. Add a file level imports for the `HomeComponent`, `DetailsComponent` and the `Routes` type that you'll use in the route definitions.\n\n\n\n\n         check\n\n         ```\n               import {Routes} from '@angular/router';import {HomeComponent} from './home/home.component';import {DetailsComponent} from './details/details.component';const routeConfig: Routes = [  {    path: '',    component: HomeComponent,    title: 'Home page',  },  {    path: 'details/:id',    component: DetailsComponent,    title: 'Home details',  },];export default routeConfig;\n\n         ```\n\n      2. Define a variable called `routeConfig` of type `Routes` and define two routes for the app:\n\n\n\n\n         check\n\n         ```\n               import {Routes} from '@angular/router';import {HomeComponent} from './home/home.component';import {DetailsComponent} from './details/details.component';const routeConfig: Routes = [  {    path: '',    component: HomeComponent,    title: 'Home page',  },  {    path: 'details/:id',    component: DetailsComponent,    title: 'Home details',  },];export default routeConfig;\n\n         ```\n\n\n\n\n\n\n          The entries in the `routeConfig` array represent the routes in the application. The first entry navigates to the `HomeComponent` whenever the url matches `''`. The second entry uses some special formatting that will be revisited in a future lesson.\n2. Save all changes and confirm that the application works in the browser. The application should still display the list of housing locations.\n\n**SUMMARY:** In this lesson, you enabled routing in your app as well as defined new routes. Now your app can support navigation between views. In the next lesson, you will learn to navigate to the \"details\" page for a given housing location.\n\nYou are making great progress with your app, well done.\n\nFor more information about the topics covered in this lesson, visit:",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-045fc80b-d167-4b73-abc1-fba4dc7ea241.png"
  },
  "metadata": {
    "msapplication-TileColor": "#e90464",
    "description": "The web development framework for building modern apps.",
    "title": "Add routing â€¢ Angular",
    "language": "en",
    "ogTitle": "Angular",
    "og:title": "Angular",
    "apple-mobile-web-app-title": "Angular",
    "viewport": "width=device-width, initial-scale=1",
    "theme-color": "#ffffff",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "og:url": "https://angular.dev/",
    "twitter:description": "The web development framework for building modern apps.",
    "og:description": "The web development framework for building modern apps.",
    "twitter:card": "summary_large_image",
    "ogUrl": "https://angular.dev/",
    "ogDescription": "The web development framework for building modern apps.",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "application-name": "Angular",
    "twitter:title": "Angular",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "og:type": "website",
    "twitter:url": "https://angular.dev/",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "scrapeId": "ec111eaa-0982-47ba-a019-c8e6c6057f41",
    "sourceURL": "https://angular.dev/tutorials/first-app/10-routing",
    "url": "https://angular.dev/tutorials/first-app/10-routing",
    "statusCode": 200
  }
}