{
  "scrapeId": "d4210874-4a97-49ad-836a-04c4829997a6",
  "sourceURL": "https://material.angular.io/components/slider/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for slider\n\n## API reference for Angular Material slider\n\n`\n          import {MatSliderModule} from '@angular/material/slider';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/slider/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/slider/api\\#MatSlider) `MatSlider`\n\nAllows users to select from a range of values by moving the slider thumb. It is similar in\nbehavior to the native `<input type=\"range\">` element.\n\nSelector:mat-slider\n\nExported as:matSlider\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`color: ThemePalette` | Theme color of the slider. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/slider/styling](https://material.angular.io/components/slider/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether ripples are disabled in the slider. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the slider is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`discrete: boolean` | Whether the slider displays a numeric value label upon pressing the thumb. |\n| @Input()<br>`displayWith: (value: number) => string` | Function that will be used to format the value before it is displayed<br>in the thumb label. Can be used to format very large number in order<br>for them to fit into the slider thumb. |\n| @Input({ transform: numberAttribute })<br> <br>`max: number` | The maximum value that the slider can have. |\n| @Input({ transform: numberAttribute })<br> <br>`min: number` | The minimum value that the slider can have. |\n| @Input({ transform: booleanAttribute })<br> <br>`showTickMarks: boolean` | Whether the slider displays tick marks along the slider track. |\n| @Input({ transform: numberAttribute })<br> <br>`step: number` | The values at which the thumb will snap. |\n\n#### [link](https://material.angular.io/components/slider/api\\#MatSliderThumb) `MatSliderThumb`\n\nDirective that adds slider-specific behaviors to an input element inside `<mat-slider>`.\nUp to two may be placed inside of a `<mat-slider>`.\n\nIf one is used, the selector `matSliderThumb` must be used, and the outcome will be a normal\nslider. If two are used, the selectors `matSliderStartThumb` and `matSliderEndThumb` must be\nused, and the outcome will be a range slider with two slider thumbs.\n\nSelector:input\\[matSliderThumb\\]\n\nExported as:matSliderThumb\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: numberAttribute })<br> <br>`value: number` |  |\n| @Output()<br>`dragEnd: EventEmitter<MatSliderDragEvent>` | Event emitted when the slider thumb stops being dragged. |\n| @Output()<br>`dragStart: EventEmitter<MatSliderDragEvent>` | Event emitted when the slider thumb starts being dragged. |\n| @Output()<br>`valueChange: EventEmitter<number>` | Event emitted when the `value` is changed. |\n| `percentage: number` | The percentage of the slider that coincides with the value. |\n| `step: number` |  |\n\n##### Methods\n\n| blur |\n| --- |\n\n| focus |\n| --- |\n\n#### [link](https://material.angular.io/components/slider/api\\#MatSliderRangeThumb) `MatSliderRangeThumb`extends [MatSliderThumb](https://material.angular.io/components/slider/components/slider/api\\#MatSliderThumb)\n\nSelector:input\\[matSliderStartThumb\\]input\\[matSliderEndThumb\\]\n\nExported as:matSliderRangeThumb\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: numberAttribute })<br> <br>`value: number` |  |\n| @Output()<br>`dragEnd: EventEmitter<MatSliderDragEvent>` | Event emitted when the slider thumb stops being dragged. |\n| @Output()<br>`dragStart: EventEmitter<MatSliderDragEvent>` | Event emitted when the slider thumb starts being dragged. |\n| @Output()<br>`valueChange: EventEmitter<number>` | Event emitted when the `value` is changed. |\n| `percentage: number` | The percentage of the slider that coincides with the value. |\n| `step: number` |  |\n\n##### Methods\n\n| blur |\n| --- |\n\n| focus |\n| --- |\n\n### [link](https://material.angular.io/components/slider/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/slider/api\\#MatSliderChange) `MatSliderChange`\n\nA simple change event emitted by the MatSlider component.\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `parent: _MatSlider` | The MatSlider that was interacted with. |\n| `source: _MatSliderThumb` | The MatSliderThumb that was interacted with. |\n| `value: number` | The new value of the source slider. |\n\n### [link](https://material.angular.io/components/slider/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/slider/api\\#MatSliderDragEvent) `MatSliderDragEvent`\n\nRepresents a drag event emitted by the MatSlider component.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `parent: _MatSlider` | The MatSlider that was interacted with. |\n| `source: _MatSliderThumb` | The MatSliderThumb that was interacted with. |\n| `value: number` | The current value of the slider. |\n\n## API reference for Angular Material slider-testing\n\n`\n          import {MatSliderHarness} from '@angular/material/slider/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/slider/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/slider/api\\#MatSliderHarness) `MatSliderHarness`extends [ComponentHarness](https://material.angular.io/components/slider/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a MDC mat-slider in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `staticÂ hostSelector: '.mat-mdc-slider'` |  |\n\n##### Methods\n\n| async<br> <br>getEndThumb |\n| --- |\n| Gets the thumb (for single point sliders), or the end thumb (for range sliders). |\n| Returns |\n| --- |\n| `Promise<MatSliderThumbHarness>` |  |\n\n| async<br> <br>getMaxValue |\n| --- |\n| Gets the maximum value of the slider. |\n| Returns |\n| --- |\n| `Promise<number>` |  |\n\n| async<br> <br>getMinValue |\n| --- |\n| Gets the minimum value of the slider. |\n| Returns |\n| --- |\n| `Promise<number>` |  |\n\n| async<br> <br>getStartThumb |\n| --- |\n| Gets the start thumb of the slider (only applicable for range sliders). |\n| Returns |\n| --- |\n| `Promise<MatSliderThumbHarness>` |  |\n\n| async<br> <br>getStep |\n| --- |\n| Gets the value step increments of the slider. |\n| Returns |\n| --- |\n| `Promise<number>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Gets whether the slider is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRange |\n| --- |\n| Gets whether the slider is a range slider. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a slider with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `SliderHarnessFilters = {}` | Options for filtering which input instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/slider/api\\#MatSliderThumbHarness) `MatSliderThumbHarness`extends [ComponentHarness](https://material.angular.io/components/slider/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a thumb inside of a Material slider in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `staticÂ hostSelector: 'input[matSliderThumb], input[matSliderStartThumb], input[matSliderEndThumb]'` |  |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the thumb and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the thumb and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getDisplayValue |\n| --- |\n| Gets the text representation of the slider's value. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getId |\n| --- |\n| Gets the id of the thumb. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getMaxValue |\n| --- |\n| Gets the maximum value of the thumb. |\n| Returns |\n| --- |\n| `Promise<number>` |  |\n\n| async<br> <br>getMinValue |\n| --- |\n| Gets the minimum value of the thumb. |\n| Returns |\n| --- |\n| `Promise<number>` |  |\n\n| async<br> <br>getName |\n| --- |\n| Gets the name of the thumb. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getPercentage |\n| --- |\n| Gets the current percentage value of the slider. |\n| Returns |\n| --- |\n| `Promise<number>` |  |\n\n| async<br> <br>getPosition |\n| --- |\n| Gets the position of the thumb inside the slider. |\n| Returns |\n| --- |\n| `Promise<ThumbPosition>` |  |\n\n| async<br> <br>getValue |\n| --- |\n| Gets the value of the thumb. |\n| Returns |\n| --- |\n| `Promise<number>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the thumb is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the thumb is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>setValue |\n| --- |\n| Sets the value of the thumb. |\n| Parameters |\n| --- |\n| newValue<br> `number` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a slider thumb with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `SliderThumbHarnessFilters = {}` | Options for filtering which thumb instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/slider/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/slider/api\\#SliderHarnessFilters) `SliderHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatSliderHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disabled: boolean` | Only find instances which match the given disabled state. |\n| `isRange: boolean` | Filters out only range/non-range sliders. |\n\n#### [link](https://material.angular.io/components/slider/api\\#SliderThumbHarnessFilters) `SliderThumbHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatSliderThumbHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `position: ThumbPosition` | Filters out slider thumbs with a particular position. |\n\nSlider\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard\n\nUse event bindings directly on the MatSliderThumbs for \\`change\\` and \\`input\\` events. See https://v17.material.angular.io/guide/mdc-migration for information about migrating. Will be removed in v17.0.0 or later.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-aa1bfaa3-fa8d-4829-a174-5ffd766fa400.png"
  },
  "metadata": {
    "ogUrl": "https://material.angular.io/",
    "og:image:height": "943",
    "title": "Slider | Angular Material",
    "og:image:type": "image/png",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:creator": "@Angular",
    "og:type": "website",
    "twitter:card": "summary",
    "og:site_name": "Angular Material",
    "author": "Angular Components Team",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "favicon": "https://material.angular.io/components/slider/assets/img/favicon.ico?v=19.1.0",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-capable": "yes",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:site": "@Angular",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogTitle": "Angular Material",
    "og:locale": "en_US",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "viewport": "width=device-width, initial-scale=1",
    "theme-color": "#d7e3ff",
    "language": "en-US",
    "ogSiteName": "Angular Material",
    "og:url": "https://material.angular.io/",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:image:width": "1339",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogLocale": "en_US",
    "twitter:title": "Angular Material",
    "mobile-web-app-capable": "yes",
    "og:title": "Angular Material",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "scrapeId": "d4210874-4a97-49ad-836a-04c4829997a6",
    "sourceURL": "https://material.angular.io/components/slider/api",
    "url": "https://material.angular.io/components/slider/api",
    "statusCode": 200
  }
}