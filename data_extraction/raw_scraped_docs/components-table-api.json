{
  "scrapeId": "0b502e07-b98a-47a6-8f3d-020fc4bbed89",
  "sourceURL": "https://material.angular.io/components/table/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for table\n\n## API reference for Angular Material table\n\n`\n          import {MatTableModule} from '@angular/material/table';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/table/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/table/api\\#MatRecycleRows) `MatRecycleRows`\n\nEnables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\ntables that animate rows.\n\nSelector:mat-table\\[recycleRows\\]table\\[mat-table\\]\\[recycleRows\\]\n\n#### [link](https://material.angular.io/components/table/api\\#MatTable) `MatTable`extends [CdkTable](https://material.angular.io/components/table/cdk/table/api\\#CdkTable)\n\nSelector:mat-tabletable\\[mat-table\\]\n\nExported as:matTable\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`dataSource: CdkTableDataSourceInput<T>` | The table's source of data, which can be provided in three ways (in order of complexity):<br>- Simple data array (each object represents one table row)<br>- Stream that emits a data array each time the array changes<br>- `DataSource` object that implements the connect/disconnect interface.<br>If a data array is provided, the table must be notified when the array's objects are<br>added, removed, or moved. This can be done by calling the `renderRows()` function which will<br>render the diff since the last table render. If the data array reference is changed, the table<br>will automatically trigger an update to the rows.<br>When providing an Observable stream, the table will trigger an update automatically when the<br>stream emits a new array of data.<br>Finally, when providing a `DataSource` object, the table will use the Observable stream<br>provided by the connect function and trigger updates when that stream emits new data array<br>values. During the table's ngOnDestroy or when the data source is removed from the table, the<br>table will call the DataSource's `disconnect` function (may be useful for cleaning up any<br>subscriptions registered during the connect process). |\n| @Input({ transform: booleanAttribute })<br> <br>`fixedLayout: boolean` | Whether to use a fixed table layout. Enabling this option will enforce consistent column widths<br>and optimize rendering sticky styles for native tables. No-op for flex tables. |\n| @Input({ transform: booleanAttribute })<br> <br>`multiTemplateDataRows: boolean` | Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'<br>predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each<br>dataobject will render the first row that evaluates its when predicate to true, in the order<br>defined in the table, or otherwise the default row which does not have a when predicate. |\n| @Input()<br>`trackBy: TrackByFunction<T>` | Tracking function that will be used to check the differences in data changes. Used similarly<br>to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data<br>relative to the function to know if a row should be added/removed/moved.<br>Accepts a function that takes two parameters, `index` and `item`. |\n| @Output()<br>`contentChanged: EventEmitter<void>` | Emits when the table completes rendering a set of data rows based on the latest data from the<br>data source, even if the set of rows is empty. |\n| `needsPositionStickyOnElement: false` | Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. |\n| `stickyCssClass: 'mat-mdc-table-sticky'` | Overrides the sticky CSS class set by the `CdkTable`. |\n\n##### Methods\n\n| addColumnDef |\n| --- |\n| Adds a column definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| columnDef<br> `CdkColumnDef` |  |\n\n| addFooterRowDef |\n| --- |\n| Adds a footer row definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| footerRowDef<br> `CdkFooterRowDef` |  |\n\n| addHeaderRowDef |\n| --- |\n| Adds a header row definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| headerRowDef<br> `CdkHeaderRowDef` |  |\n\n| addRowDef |\n| --- |\n| Adds a row definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| rowDef<br> `CdkRowDef<T>` |  |\n\n| removeColumnDef |\n| --- |\n| Removes a column definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| columnDef<br> `CdkColumnDef` |  |\n\n| removeFooterRowDef |\n| --- |\n| Removes a footer row definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| footerRowDef<br> `CdkFooterRowDef` |  |\n\n| removeHeaderRowDef |\n| --- |\n| Removes a header row definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| headerRowDef<br> `CdkHeaderRowDef` |  |\n\n| removeRowDef |\n| --- |\n| Removes a row definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| rowDef<br> `CdkRowDef<T>` |  |\n\n| renderRows |\n| --- |\n| Renders rows based on the table's latest set of data, which was either provided directly as an<br>input or retrieved through an Observable stream (directly or from a DataSource).<br>Checks for differences in the data since the last diff to perform only the necessary<br>changes (add/remove/move rows).<br>If the table's data source is a DataSource or Observable, this will be invoked automatically<br>each time the provided Observable stream emits a new data array. Otherwise if your data is<br>an array, this function will need to be called to render any changes. |\n\n| setNoDataRow |\n| --- |\n| Sets a no data row definition that was not included as a part of the content children. |\n| Parameters |\n| --- |\n| noDataRow<br> `CdkNoDataRow` |  |\n\n| updateStickyColumnStyles |\n| --- |\n| Updates the column sticky styles. First resets all applied styles with respect to the cells<br>sticking to the left and right. Then sticky styles are added for the left and right according<br>to the column definitions for each cell in each row. This is automatically called when<br>the data source provides a new set of data or when a column definition changes its sticky<br>input. May be called manually for cases where the cell content changes outside of these events. |\n\n| updateStickyFooterRowStyles |\n| --- |\n| Updates the footer sticky styles. First resets all applied styles with respect to the cells<br>sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is<br>automatically called when the footer row changes its displayed set of columns, or if its<br>sticky input changes. May be called manually for cases where the cell content changes outside<br>of these events. |\n\n| updateStickyHeaderRowStyles |\n| --- |\n| Updates the header sticky styles. First resets all applied styles with respect to the cells<br>sticking to the top. Then, evaluating which cells need to be stuck to the top. This is<br>automatically called when the header row changes its displayed set of columns, or if its<br>sticky input changes. May be called manually for cases where the cell content changes outside<br>of these events. |\n\n#### [link](https://material.angular.io/components/table/api\\#MatCellDef) `MatCellDef`extends [CdkCellDef](https://material.angular.io/components/table/cdk/table/api\\#CdkCellDef)\n\nCell definition for the mat-table.\nCaptures the template of a column's data row cell as well as cell-specific properties.\n\nSelector:\\[matCellDef\\]\n\n#### [link](https://material.angular.io/components/table/api\\#MatHeaderCellDef) `MatHeaderCellDef`extends [CdkHeaderCellDef](https://material.angular.io/components/table/cdk/table/api\\#CdkHeaderCellDef)\n\nHeader cell definition for the mat-table.\nCaptures the template of a column's header cell and as well as cell-specific properties.\n\nSelector:\\[matHeaderCellDef\\]\n\n#### [link](https://material.angular.io/components/table/api\\#MatFooterCellDef) `MatFooterCellDef`extends [CdkFooterCellDef](https://material.angular.io/components/table/cdk/table/api\\#CdkFooterCellDef)\n\nFooter cell definition for the mat-table.\nCaptures the template of a column's footer cell and as well as cell-specific properties.\n\nSelector:\\[matFooterCellDef\\]\n\n#### [link](https://material.angular.io/components/table/api\\#MatColumnDef) `MatColumnDef`extends [CdkColumnDef](https://material.angular.io/components/table/cdk/table/api\\#CdkColumnDef)\n\nColumn definition for the mat-table.\nDefines a set of cells available for a table column.\n\nSelector:\\[matColumnDef\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('matColumnDef')<br> <br>`name: string` | Unique name for this column. |\n| @Input({ transform: booleanAttribute })<br> <br>`sticky: boolean` | Whether the cell is sticky. |\n| @Input({ transform: booleanAttribute })<br> <br>`stickyEnd: boolean` | Whether this column should be sticky positioned on the end of the row. Should make sure<br>that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value<br>has been changed. |\n| `cssClassFriendlyName: string` | Transformed version of the column name that can be used as part of a CSS classname. Excludes<br>all non-alphanumeric characters and the special characters '-' and '\\_'. Any characters that<br>do not match are replaced by the '-' character. |\n\n##### Methods\n\n| hasStickyChanged |\n| --- |\n| Whether the sticky state has changed. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| resetStickyChanged |\n| --- |\n| Resets the sticky changed state. |\n\n#### [link](https://material.angular.io/components/table/api\\#MatHeaderCell) `MatHeaderCell`extends [CdkHeaderCell](https://material.angular.io/components/table/cdk/table/api\\#CdkHeaderCell)\n\nHeader cell template container that adds the right classes and role.\n\nSelector:mat-header-cellth\\[mat-header-cell\\]\n\n#### [link](https://material.angular.io/components/table/api\\#MatFooterCell) `MatFooterCell`extends [CdkFooterCell](https://material.angular.io/components/table/cdk/table/api\\#CdkFooterCell)\n\nFooter cell template container that adds the right classes and role.\n\nSelector:mat-footer-celltd\\[mat-footer-cell\\]\n\n#### [link](https://material.angular.io/components/table/api\\#MatCell) `MatCell`extends [CdkCell](https://material.angular.io/components/table/cdk/table/api\\#CdkCell)\n\nCell template container that adds the right classes and role.\n\nSelector:mat-celltd\\[mat-cell\\]\n\n#### [link](https://material.angular.io/components/table/api\\#MatHeaderRowDef) `MatHeaderRowDef`extends [CdkHeaderRowDef](https://material.angular.io/components/table/cdk/table/api\\#CdkHeaderRowDef)\n\nHeader row definition for the mat-table.\nCaptures the header row's template and other header properties such as the columns to display.\n\nSelector:\\[matHeaderRowDef\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input(matHeaderRowDef)<br> <br>`columns: Iterable<string>` | The columns to be displayed on this row. |\n| @Input(matHeaderRowDefSticky)<br> <br>`sticky: boolean` | Whether the row is sticky. |\n| `template: inject<TemplateRef<any>>(TemplateRef)` |  |\n\n##### Methods\n\n| extractCellTemplate |\n| --- |\n| Gets this row def's relevant cell template from the provided column def. |\n| Parameters |\n| --- |\n| column<br> `CdkColumnDef` |  |\n| Returns |\n| --- |\n| `TemplateRef<any>` |  |\n\n| getColumnsDiff |\n| --- |\n| Returns the difference between the current columns and the columns from the last diff, or null<br>if there is no difference. |\n| Returns |\n| --- |\n| `IterableChanges<any> | null` |  |\n\n| hasStickyChanged |\n| --- |\n| Whether the sticky state has changed. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| resetStickyChanged |\n| --- |\n| Resets the sticky changed state. |\n\n#### [link](https://material.angular.io/components/table/api\\#MatFooterRowDef) `MatFooterRowDef`extends [CdkFooterRowDef](https://material.angular.io/components/table/cdk/table/api\\#CdkFooterRowDef)\n\nFooter row definition for the mat-table.\nCaptures the footer row's template and other footer properties such as the columns to display.\n\nSelector:\\[matFooterRowDef\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input(matFooterRowDef)<br> <br>`columns: Iterable<string>` | The columns to be displayed on this row. |\n| @Input(matFooterRowDefSticky)<br> <br>`sticky: boolean` | Whether the row is sticky. |\n| `template: inject<TemplateRef<any>>(TemplateRef)` |  |\n\n##### Methods\n\n| extractCellTemplate |\n| --- |\n| Gets this row def's relevant cell template from the provided column def. |\n| Parameters |\n| --- |\n| column<br> `CdkColumnDef` |  |\n| Returns |\n| --- |\n| `TemplateRef<any>` |  |\n\n| getColumnsDiff |\n| --- |\n| Returns the difference between the current columns and the columns from the last diff, or null<br>if there is no difference. |\n| Returns |\n| --- |\n| `IterableChanges<any> | null` |  |\n\n| hasStickyChanged |\n| --- |\n| Whether the sticky state has changed. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| resetStickyChanged |\n| --- |\n| Resets the sticky changed state. |\n\n#### [link](https://material.angular.io/components/table/api\\#MatRowDef) `MatRowDef`extends [CdkRowDef](https://material.angular.io/components/table/cdk/table/api\\#CdkRowDef)\n\nData row definition for the mat-table.\nCaptures the data row's template and other properties such as the columns to display and\na when predicate that describes when this row should be used.\n\nSelector:\\[matRowDef\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input(matRowDefColumns)<br> <br>`columns: Iterable<string>` | The columns to be displayed on this row. |\n| @Input(matRowDefWhen)<br> <br>`when: (index: number, rowData: T) => boolean` | Function that should return true if this row template should be used for the provided index<br>and row data. If left undefined, this row will be considered the default row template to use<br>when no other when functions return true for the data.<br>For every row, there must be at least one when function that passes or an undefined to default. |\n| `template: inject<TemplateRef<any>>(TemplateRef)` |  |\n\n##### Methods\n\n| extractCellTemplate |\n| --- |\n| Gets this row def's relevant cell template from the provided column def. |\n| Parameters |\n| --- |\n| column<br> `CdkColumnDef` |  |\n| Returns |\n| --- |\n| `TemplateRef<any>` |  |\n\n| getColumnsDiff |\n| --- |\n| Returns the difference between the current columns and the columns from the last diff, or null<br>if there is no difference. |\n| Returns |\n| --- |\n| `IterableChanges<any> | null` |  |\n\n#### [link](https://material.angular.io/components/table/api\\#MatHeaderRow) `MatHeaderRow`extends [CdkHeaderRow](https://material.angular.io/components/table/cdk/table/api\\#CdkHeaderRow)\n\nHeader template container that contains the cell outlet. Adds the right class and role.\n\nSelector:mat-header-rowtr\\[mat-header-row\\]\n\nExported as:matHeaderRow\n\n#### [link](https://material.angular.io/components/table/api\\#MatFooterRow) `MatFooterRow`extends [CdkFooterRow](https://material.angular.io/components/table/cdk/table/api\\#CdkFooterRow)\n\nFooter template container that contains the cell outlet. Adds the right class and role.\n\nSelector:mat-footer-rowtr\\[mat-footer-row\\]\n\nExported as:matFooterRow\n\n#### [link](https://material.angular.io/components/table/api\\#MatRow) `MatRow`extends [CdkRow](https://material.angular.io/components/table/cdk/table/api\\#CdkRow)\n\nData row template container that contains the cell outlet. Adds the right class and role.\n\nSelector:mat-rowtr\\[mat-row\\]\n\nExported as:matRow\n\n#### [link](https://material.angular.io/components/table/api\\#MatNoDataRow) `MatNoDataRow`extends [CdkNoDataRow](https://material.angular.io/components/table/cdk/table/api\\#CdkNoDataRow)\n\nRow that can be used to display a message when no data is shown in the table.\n\nSelector:ng-template\\[matNoDataRow\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `templateRef: inject<TemplateRef<any>>(TemplateRef)` |  |\n\n#### [link](https://material.angular.io/components/table/api\\#MatTextColumn) `MatTextColumn`extends [CdkTextColumn](https://material.angular.io/components/table/cdk/table/api\\#CdkTextColumn)\n\nColumn that simply shows text content for the header and row cells. Assumes that the table\nis using the native table implementation ( `<table>`).\n\nBy default, the name of this column will be the header text and data property accessor.\nThe header text can be overridden with the `headerText` input. Cell values can be overridden with\nthe `dataAccessor` input. Change the text justification to the start or end using the `justify`\ninput.\n\nSelector:mat-text-column\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`dataAccessor: (data: T, name: string) => string` | Accessor function to retrieve the data rendered for each cell. If this<br>property is not set, the data cells will render the value found in the data's property matching<br>the column's name. For example, if the column is named `id`, then the rendered value will be<br>value defined by the data's `id` property. |\n| @Input()<br>`headerText: string` | Text label that should be used for the column header. If this property is not<br>set, the header text will default to the column name with its first letter capitalized. |\n| @Input()<br>`justify: 'start' | 'end' | 'center'` | Alignment of the cell values. |\n| @Input()<br>`name: string` | Column name that should be used to reference this column. |\n\n### [link](https://material.angular.io/components/table/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/table/api\\#MatTableDataSource) `MatTableDataSource`extends [DataSource](https://material.angular.io/components/table/api)\n\nData source that accepts a client-side data array and includes native support of filtering,\nsorting (using MatSort), and pagination (using MatPaginator).\n\nAllows for sort customization by overriding sortingDataAccessor, which defines how data\nproperties are accessed. Also allows for filter customization by overriding filterPredicate,\nwhich defines how row data is converted to a string for filter matching.\n\n**Note:** This class is meant to be a simple data source to help you get started. As such\nit isn't equipped to handle some more advanced cases like robust i18n support or server-side\ninteractions. If your app needs to support more advanced use cases, consider implementing your\nown `DataSource`.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `data: T[]` | Array of data that should be rendered by the table, where each object represents one row. |\n| `filter: string` | Filter term that should be used to filter out objects from the data array. To override how<br>data objects match to this filter string, provide a custom function for filterPredicate. |\n| `filterPredicate: (data: T, filter: string) => boolean` | Checks if a data object matches the data source's filter string. By default, each data object<br>is converted to a string of its properties and returns true if the filter has<br>at least one occurrence in that string. By default, the filter string has its whitespace<br>trimmed and the match is case-insensitive. May be overridden for a custom implementation of<br>filter matching. |\n| `filteredData: T[]` | The filtered set of data that has been matched by the filter string, or all the data if there<br>is no filter. Useful for knowing the set of data the table represents.<br>For example, a 'selectAll()' function would likely want to select the set of filtered data<br>shown to the user rather than all the data. |\n| `paginator: P | null` | Instance of the paginator component used by the table to control what page of the data is<br>displayed. Page changes emitted by the paginator will trigger an update to the<br>table's rendered data.<br>Note that the data source uses the paginator's properties to calculate which page of data<br>should be displayed. If the paginator receives its properties as template inputs,<br>e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been<br>initialized before assigning it to this data source. |\n| `sort: MatSort | null` | Instance of the MatSort directive used by the table to control its sorting. Sort changes<br>emitted by the MatSort will trigger an update to the table's rendered data. |\n| `sortData: (data: T[], sort: MatSort) => T[]` | Gets a sorted copy of the data array based on the state of the MatSort. Called<br>after changes are made to the filtered data or when sort changes are emitted from MatSort.<br>By default, the function retrieves the active sort and its direction and compares data<br>by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation<br>of data ordering. |\n| `sortingDataAccessor: (data: T, sortHeaderId: string) => string | number` | Data accessor function that is used for accessing data properties for sorting through<br>the default sortData function.<br>This default function assumes that the sort header IDs (which defaults to the column name)<br>matches the data's properties (e.g. column Xyz represents data\\['Xyz'\\]).<br>May be set to a custom function for different behavior. |\n\n## API reference for Angular Material table-testing\n\n`\n          import {MatTableHarness} from '@angular/material/table/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/table/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/table/api\\#MatTableHarness) `MatTableHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/table/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a mat-table in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-table'` | The selector for the host element of a `MatTableHarness` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getCellTextByColumnName |\n| --- |\n| Gets the text inside the entire table organized by columns. |\n| Returns |\n| --- |\n| `Promise<MatTableHarnessColumnsText>` |  |\n\n| async<br> <br>getCellTextByIndex |\n| --- |\n| Gets the text inside the entire table organized by rows. |\n| Returns |\n| --- |\n| `Promise<string[][]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getFooterRows |\n| --- |\n| Gets all the footer rows in a table. |\n| Parameters |\n| --- |\n| filter<br> `RowHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<MatFooterRowHarness[]>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getHeaderRows |\n| --- |\n| Gets all the header rows in a table. |\n| Parameters |\n| --- |\n| filter<br> `RowHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<MatHeaderRowHarness[]>` |  |\n\n| async<br> <br>getRows |\n| --- |\n| Gets all the regular data rows in a table. |\n| Parameters |\n| --- |\n| filter<br> `RowHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<MatRowHarness[]>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a table with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `TableHarnessFilters = {}` | Options for narrowing the search |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/table/api\\#MatRowHarness) `MatRowHarness`\n\nHarness for interacting with an Angular Material table row.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-row'` | The selector for the host element of a `MatRowHarness` instance. |\n\n##### Methods\n\n| async<br> <br>getCellTextByColumnName |\n| --- |\n| Gets the text inside the row organized by columns. |\n| Returns |\n| --- |\n| `Promise<MatRowHarnessColumnsText>` |  |\n\n| async<br> <br>getCellTextByIndex |\n| --- |\n| Gets the text of the cells in the row. |\n| Parameters |\n| --- |\n| filter<br> `CellHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<string[]>` |  |\n\n| async<br> <br>getCells |\n| --- |\n| Gets a list of `MatCellHarness` for all cells in the row. |\n| Parameters |\n| --- |\n| filter<br> `CellHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<Cell[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a table row with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `RowHarnessFilters = {}` | Options for narrowing the search |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/table/api\\#MatHeaderRowHarness) `MatHeaderRowHarness`\n\nHarness for interacting with an Angular Material table header row.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-header-row'` | The selector for the host element of a `MatHeaderRowHarness` instance. |\n\n##### Methods\n\n| async<br> <br>getCellTextByColumnName |\n| --- |\n| Gets the text inside the row organized by columns. |\n| Returns |\n| --- |\n| `Promise<MatRowHarnessColumnsText>` |  |\n\n| async<br> <br>getCellTextByIndex |\n| --- |\n| Gets the text of the cells in the row. |\n| Parameters |\n| --- |\n| filter<br> `CellHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<string[]>` |  |\n\n| async<br> <br>getCells |\n| --- |\n| Gets a list of `MatCellHarness` for all cells in the row. |\n| Parameters |\n| --- |\n| filter<br> `CellHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<Cell[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a table header row with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `RowHarnessFilters = {}` | Options for narrowing the search |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/table/api\\#MatFooterRowHarness) `MatFooterRowHarness`\n\nHarness for interacting with an Angular Material table footer row.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-footer-row'` | The selector for the host element of a `MatFooterRowHarness` instance. |\n\n##### Methods\n\n| async<br> <br>getCellTextByColumnName |\n| --- |\n| Gets the text inside the row organized by columns. |\n| Returns |\n| --- |\n| `Promise<MatRowHarnessColumnsText>` |  |\n\n| async<br> <br>getCellTextByIndex |\n| --- |\n| Gets the text of the cells in the row. |\n| Parameters |\n| --- |\n| filter<br> `CellHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<string[]>` |  |\n\n| async<br> <br>getCells |\n| --- |\n| Gets a list of `MatCellHarness` for all cells in the row. |\n| Parameters |\n| --- |\n| filter<br> `CellHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<Cell[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a table footer row cell with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `RowHarnessFilters = {}` | Options for narrowing the search |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/table/api\\#MatCellHarness) `MatCellHarness`\n\nHarness for interacting with an Angular Material table cell.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-cell'` | The selector for the host element of a `MatCellHarness` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getColumnName |\n| --- |\n| Gets the name of the column that the cell belongs to. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets the cell's text. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a table cell with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `CellHarnessFilters = {}` | Options for narrowing the search |\n| Returns |\n| --- |\n| `HarnessPredicate<MatCellHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/table/api\\#MatHeaderCellHarness) `MatHeaderCellHarness`\n\nHarness for interacting with an Angular Material table header cell.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-header-cell'` | The selector for the host element of a `MatHeaderCellHarness` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getColumnName |\n| --- |\n| Gets the name of the column that the cell belongs to. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets the cell's text. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a table header cell with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `CellHarnessFilters = {}` | Options for narrowing the search |\n| Returns |\n| --- |\n| `HarnessPredicate<MatHeaderCellHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/table/api\\#MatFooterCellHarness) `MatFooterCellHarness`\n\nHarness for interacting with an Angular Material table footer cell.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-footer-cell'` | The selector for the host element of a `MatFooterCellHarness` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getColumnName |\n| --- |\n| Gets the name of the column that the cell belongs to. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets the cell's text. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a table footer cell with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `CellHarnessFilters = {}` | Options for narrowing the search |\n| Returns |\n| --- |\n| `HarnessPredicate<MatFooterCellHarness>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/table/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/table/api\\#MatTableHarnessColumnsText) `MatTableHarnessColumnsText`\n\nText extracted from a table organized by columns.\n\n#### [link](https://material.angular.io/components/table/api\\#MatRowHarnessColumnsText) `MatRowHarnessColumnsText`\n\nText extracted from a table row organized by columns.\n\n#### [link](https://material.angular.io/components/table/api\\#CellHarnessFilters) `CellHarnessFilters`\n\nA set of criteria that can be used to filter a list of cell harness instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `columnName: string | RegExp` | Only find instances whose column name matches the given value. |\n| `text: string | RegExp` | Only find instances whose text matches the given value. |\n\n#### [link](https://material.angular.io/components/table/api\\#RowHarnessFilters) `RowHarnessFilters`\n\nA set of criteria that can be used to filter a list of row harness instances.\n\n#### [link](https://material.angular.io/components/table/api\\#TableHarnessFilters) `TableHarnessFilters`\n\nA set of criteria that can be used to filter a list of table harness instances.\n\nTable\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-1165120f-5696-44ee-8a4f-3cb66a7a81f7.png"
  },
  "metadata": {
    "author": "Angular Components Team",
    "favicon": "https://material.angular.io/components/table/assets/img/favicon.ico?v=19.1.0",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "og:url": "https://material.angular.io/",
    "theme-color": "#d7e3ff",
    "apple-mobile-web-app-capable": "yes",
    "ogTitle": "Angular Material",
    "ogSiteName": "Angular Material",
    "og:locale": "en_US",
    "viewport": "width=device-width, initial-scale=1",
    "title": "Table | Angular Material",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:image:height": "943",
    "twitter:title": "Angular Material",
    "og:type": "website",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "mobile-web-app-capable": "yes",
    "og:image:type": "image/png",
    "og:image:width": "1339",
    "og:site_name": "Angular Material",
    "twitter:creator": "@Angular",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "language": "en-US",
    "ogUrl": "https://material.angular.io/",
    "ogLocale": "en_US",
    "og:title": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:card": "summary",
    "twitter:site": "@Angular",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "scrapeId": "0b502e07-b98a-47a6-8f3d-020fc4bbed89",
    "sourceURL": "https://material.angular.io/components/table/api",
    "url": "https://material.angular.io/components/table/api",
    "statusCode": 200
  }
}