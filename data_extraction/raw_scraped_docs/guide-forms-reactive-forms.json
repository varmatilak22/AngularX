{
  "scrapeId": "af22bdd6-d7b8-4d67-a413-b6d551d5dc5e",
  "sourceURL": "https://angular.dev/guide/forms/reactive-forms",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backForms\n  - [Overview](https://angular.dev/guide/forms)\n  - [Reactive forms](https://angular.dev/guide/forms/reactive-forms)\n  - [Strictly typed reactive forms](https://angular.dev/guide/forms/typed-forms)\n  - [Template-driven forms](https://angular.dev/guide/forms/template-driven-forms)\n  - [Validate form input](https://angular.dev/guide/forms/form-validation)\n  - [Building dynamic forms](https://angular.dev/guide/forms/dynamic-forms)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nReactive forms provide a model-driven approach to handling form inputs whose values change over time.\nThis guide shows you how to create and update a basic form control, progress to using multiple controls in a group, validate form values, and create dynamic forms where you can add or remove controls at run time.\n\n## [Overview of reactive forms](https://angular.dev/guide/forms/reactive-forms\\#overview-of-reactive-forms)\n\nReactive forms use an explicit and immutable approach to managing the state of a form at a given point in time.\nEach change to the form state returns a new state, which maintains the integrity of the model between changes.\nReactive forms are built around observable streams, where form inputs and values are provided as streams of input values, which can be accessed synchronously.\n\nReactive forms also provide a straightforward path to testing because you are assured that your data is consistent and predictable when requested.\nAny consumers of the streams have access to manipulate that data safely.\n\nReactive forms differ from [template-driven forms](https://angular.dev/guide/forms/guide/forms/template-driven-forms) in distinct ways.\nReactive forms provide synchronous access to the data model, immutability with observable operators, and change tracking through observable streams.\n\nTemplate-driven forms let direct access modify data in your template, but are less explicit than reactive forms because they rely on directives embedded in the template, along with mutable data to track changes asynchronously.\nSee the [Forms Overview](https://angular.dev/guide/forms/guide/forms) for detailed comparisons between the two paradigms.\n\n## [Adding a basic form control](https://angular.dev/guide/forms/reactive-forms\\#adding-a-basic-form-control)\n\nThere are three steps to using form controls.\n\n1. Generate a new component and register the reactive forms module. This module declares the reactive-form directives that you need to use reactive forms.\n2. Instantiate a new `FormControl`.\n3. Register the `FormControl` in the template.\n\nYou can then display the form by adding the component to the template.\n\nThe following examples show how to add a single form control.\nIn the example, the user enters their name into an input field, captures that input value, and displays the current value of the form control element.\n\n1. ### [Generate a new component and import the ReactiveFormsModule](https://angular.dev/guide/forms/reactive-forms\\#generate-a-new-component-and-import-the-reactiveformsmodule)\n\n\nUse the CLI command `ng generate component` to generate a component in your project and import `ReactiveFormsModule` from the `@angular/forms` package and add it to your Component's `imports` array.\n\n\n\n\ncheck\n\n```\n         import {Component} from '@angular/core';import {FormControl, ReactiveFormsModule} from '@angular/forms';@Component({  selector: 'app-name-editor',  templateUrl: './name-editor.component.html',  styleUrls: ['./name-editor.component.css'],  imports: [ReactiveFormsModule],})export class NameEditorComponent {  name = new FormControl('');  updateName() {    this.name.setValue('Nancy');  }}\n\n```\n\n2. ### [Declare a FormControl instance](https://angular.dev/guide/forms/reactive-forms\\#declare-a-formcontrol-instance)\n\n\nUse the constructor of `FormControl` to set its initial value, which in this case is an empty string. By creating these controls in your component class, you get immediate access to listen for, update, and validate the state of the form input.\n\n\n\n\ncheck\n\n```\n         import {Component} from '@angular/core';import {FormControl, ReactiveFormsModule} from '@angular/forms';@Component({  selector: 'app-name-editor',  templateUrl: './name-editor.component.html',  styleUrls: ['./name-editor.component.css'],  imports: [ReactiveFormsModule],})export class NameEditorComponent {  name = new FormControl('');  updateName() {    this.name.setValue('Nancy');  }\n...}\n\n```\n\n3. ### [Register the control in the template](https://angular.dev/guide/forms/reactive-forms\\#register-the-control-in-the-template)\n\n\nAfter you create the control in the component class, you must associate it with a form control element in the template. Update the template with the form control using the `formControl` binding provided by `FormControlDirective`, which is also included in the `ReactiveFormsModule`.\n\n\n\n\ncheck\n\n```\n         <label for=\"name\">Name: </label><input id=\"name\" type=\"text\" [formControl]=\"name\"><p>Value: {{ name.value }}</p><button type=\"button\" (click)=\"updateName()\">Update Name</button>\n\n```\n\n\n\n\n\n\nUsing the template binding syntax, the form control is now registered to the `name` input element in the template. The form control and DOM element communicate with each other: the view reflects changes in the model, and the model reflects changes in the view.\n\n4. ### [Display the component](https://angular.dev/guide/forms/reactive-forms\\#display-the-component)\n\n\nThe `FormControl` assigned to the `name` property is displayed when the `<app-name-editor>` component is added to a template.\n\n\n\n\ncheck\n\n```\n         <h1>Reactive Forms</h1><app-name-editor /><app-profile-editor />\n\n```\n\n\n### [Displaying a form control value](https://angular.dev/guide/forms/reactive-forms\\#displaying-a-form-control-value)\n\nYou can display the value in the following ways.\n\n- Through the `valueChanges` observable where you can listen for changes in the form's value in the template using `AsyncPipe` or in the component class using the `subscribe()` method\n- With the `value` property, which gives you a snapshot of the current value\n\nThe following example shows you how to display the current value using interpolation in the template.\n\ncheck\n\n```\n      <label for=\"name\">Name: </label><input id=\"name\" type=\"text\" [formControl]=\"name\"><p>Value: {{ name.value }}</p><button type=\"button\" (click)=\"updateName()\">Update Name</button>\n\n```\n\nThe displayed value changes as you update the form control element.\n\nReactive forms provide access to information about a given control through properties and methods provided with each instance.\nThese properties and methods of the underlying [AbstractControl](https://angular.dev/guide/forms/api/forms/AbstractControl \"API\") class are used to control form state and determine when to display messages when handling [input validation](https://angular.dev/guide/forms/reactive-forms#validating-form-input \"Learn\").\n\nRead about other `FormControl` properties and methods in the [API Reference](https://angular.dev/guide/forms/api/forms/FormControl \"Detailed\").\n\n### [Replacing a form control value](https://angular.dev/guide/forms/reactive-forms\\#replacing-a-form-control-value)\n\nReactive forms have methods to change a control's value programmatically, which gives you the flexibility to update the value without user interaction.\nA form control instance provides a `setValue()` method that updates the value of the form control and validates the structure of the value provided against the control's structure.\nFor example, when retrieving form data from a backend API or service, use the `setValue()` method to update the control to its new value, replacing the old value entirely.\n\nThe following example adds a method to the component class to update the value of the control to _Nancy_ using the `setValue()` method.\n\ncheck\n\n```\n      import {Component} from '@angular/core';import {FormControl, ReactiveFormsModule} from '@angular/forms';@Component({  selector: 'app-name-editor',  templateUrl: './name-editor.component.html',  styleUrls: ['./name-editor.component.css'],  imports: [ReactiveFormsModule],})export class NameEditorComponent {  name = new FormControl('');  updateName() {    this.name.setValue('Nancy');  }}\n\n```\n\nUpdate the template with a button to simulate a name update.\nWhen you click the **Update Name** button, the value entered in the form control element is reflected as its current value.\n\ncheck\n\n```\n      <label for=\"name\">Name: </label><input id=\"name\" type=\"text\" [formControl]=\"name\"><p>Value: {{ name.value }}</p><button type=\"button\" (click)=\"updateName()\">Update Name</button>\n\n```\n\nThe form model is the source of truth for the control, so when you click the button, the value of the input is changed within the component class, overriding its current value.\n\n**HELPFUL:** In this example, you're using a single control.\nWhen using the `setValue()` method with a [form group](https://angular.dev/guide/forms/reactive-forms#grouping-form-controls) or [form array](https://angular.dev/guide/forms/reactive-forms#creating-dynamic-forms) instance, the value needs to match the structure of the group or array.\n\n## [Grouping form controls](https://angular.dev/guide/forms/reactive-forms\\#grouping-form-controls)\n\nForms typically contain several related controls.\nReactive forms provide two ways of grouping multiple related controls into a single input form.\n\n| Form groups | Details |\n| :-- | :-- |\n| Form group | Defines a form with a fixed set of controls that you can manage together. Form group basics are discussed in this section. You can also [nest form groups](https://angular.dev/guide/forms/reactive-forms#creating-nested-form-groups \"See\") to create more complex forms. |\n| Form array | Defines a dynamic form, where you can add and remove controls at run time. You can also nest form arrays to create more complex forms. For more about this option, see [Creating dynamic forms](https://angular.dev/guide/forms/reactive-forms#creating-dynamic-forms). |\n\nJust as a form control instance gives you control over a single input field, a form group instance tracks the form state of a group of form control instances (for example, a form).\nEach control in a form group instance is tracked by name when creating the form group.\nThe following example shows how to manage multiple form control instances in a single group.\n\nGenerate a `ProfileEditor` component and import the `FormGroup` and `FormControl` classes from the `@angular/forms` package.\n\n```\n      ng generate component ProfileEditor\n\n```\n\ncheck\n\ncheck\n\n```\n      import {Component} from '@angular/core';import {FormGroup, FormControl, ReactiveFormsModule} from '@angular/forms';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule],})export class ProfileEditorComponent {  profileForm = new FormGroup({    firstName: new FormControl(''),    lastName: new FormControl(''),    address: new FormGroup({      street: new FormControl(''),      city: new FormControl(''),      state: new FormControl(''),      zip: new FormControl(''),    }),  });  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }}\n\n```\n\nTo add a form group to this component, take the following steps.\n\n1. Create a `FormGroup` instance.\n2. Associate the `FormGroup` model and view.\n3. Save the form data.\n\n1. ### [Create a FormGroup instance](https://angular.dev/guide/forms/reactive-forms\\#create-a-formgroup-instance)\n\n\nCreate a property in the component class named `profileForm` and set the property to a new form group instance. To initialize the form group, provide the constructor with an object of named keys mapped to their control.\n\nFor the profile form, add two form control instances with the names `firstName` and `lastName`\n\n\n\n\ncheck\n\n```\n         import {Component} from '@angular/core';import {FormGroup, FormControl, ReactiveFormsModule} from '@angular/forms';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule],})export class ProfileEditorComponent {  profileForm = new FormGroup({    firstName: new FormControl(''),    lastName: new FormControl(''),    address: new FormGroup({      street: new FormControl(''),      city: new FormControl(''),      state: new FormControl(''),      zip: new FormControl(''),    }),\n...  });  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }\n...}\n\n```\n\n\n\n\n\n\nThe individual form controls are now collected within a group. A `FormGroup` instance provides its model value as an object reduced from the values of each control in the group. A form group instance has the same properties (such as `value` and `untouched`) and methods (such as `setValue()`) as a form control instance.\n\n2. ### [Associate the FormGroup model and view](https://angular.dev/guide/forms/reactive-forms\\#associate-the-formgroup-model-and-view)\n\n\nA form group tracks the status and changes for each of its controls, so if one of the controls changes, the parent control also emits a new status or value change. The model for the group is maintained from its members. After you define the model, you must update the template to reflect the model in the view.\n\n\n\n\ncheck\n\n```\n         <form [formGroup]=\"profileForm\">  <label for=\"first-name\">First Name: </label>  <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />  <label for=\"last-name\">Last Name: </label>  <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />  <div formGroupName=\"address\">    <h2>Address</h2>    <label for=\"street\">Street: </label>    <input id=\"street\" type=\"text\" formControlName=\"street\" />    <label for=\"city\">City: </label>    <input id=\"city\" type=\"text\" formControlName=\"city\" />    <label for=\"state\">State: </label>    <input id=\"state\" type=\"text\" formControlName=\"state\" />    <label for=\"zip\">Zip Code: </label>    <input id=\"zip\" type=\"text\" formControlName=\"zip\" />  </div>  <div formArrayName=\"aliases\">    <h2>Aliases</h2>    <button type=\"button\" (click)=\"addAlias()\">+ Add another alias</button>    @for(alias of aliases.controls; track $index; let i = $index) {    <div>      <!-- The repeated alias template -->      <label for=\"alias-{{ i }}\">Alias: </label>      <input id=\"alias-{{ i }}\" type=\"text\" [formControlName]=\"i\" />    </div>    }  </div>\n...</form><p>Form Value: {{ profileForm.value | json }}</p><button type=\"button\" (click)=\"updateProfile()\">Update Profile</button>\n\n```\n\n\n\n\n\n\nJust as a form group contains a group of controls, the _profileForm_ `FormGroup` is bound to the `form` element with the `FormGroup` directive, creating a communication layer between the model and the form containing the inputs. The `formControlName` input provided by the `FormControlName` directive binds each individual input to the form control defined in `FormGroup`. The form controls communicate with their respective elements. They also communicate changes to the form group instance, which provides the source of truth for the model value.\n\n3. ### [Save form data](https://angular.dev/guide/forms/reactive-forms\\#save-form-data)\n\n\nThe `ProfileEditor` component accepts input from the user, but in a real scenario you want to capture the form value and make it available for further processing outside the component. The `FormGroup` directive listens for the `submit` event emitted by the `form` element and emits an `ngSubmit` event that you can bind to a callback function. Add an `ngSubmit` event listener to the `form` tag with the `onSubmit()` callback method.\n\n\n\n\ncheck\n\n```\n         <form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\">  <label for=\"first-name\">First Name: </label>  <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" required />  <label for=\"last-name\">Last Name: </label>  <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />  <div formGroupName=\"address\">    <h2>Address</h2>    <label for=\"street\">Street: </label>    <input id=\"street\" type=\"text\" formControlName=\"street\" />    <label for=\"city\">City: </label>    <input id=\"city\" type=\"text\" formControlName=\"city\" />    <label for=\"state\">State: </label>    <input id=\"state\" type=\"text\" formControlName=\"state\" />    <label for=\"zip\">Zip Code: </label>    <input id=\"zip\" type=\"text\" formControlName=\"zip\" />  </div>  <div formArrayName=\"aliases\">    <h2>Aliases</h2>    <button type=\"button\" (click)=\"addAlias()\">+ Add another alias</button>    @for (alias of aliases.controls; track $index; let i = $index) {      <div>        <!-- The repeated alias template -->        <label for=\"alias-{{ i }}\">Alias:</label>        <input id=\"alias-{{ i }}\" type=\"text\" [formControlName]=\"i\" />      </div>    }  </div>  <p>Complete the form to enable button.</p>  <button type=\"submit\" [disabled]=\"!profileForm.valid\">Submit</button></form><hr><p>Form Value: {{ profileForm.value | json }}</p><p>Form Status: {{ profileForm.status }}</p><button type=\"button\" (click)=\"updateProfile()\">Update Profile</button>\n\n```\n\n\n\n\n\n\nThe `onSubmit()` method in the `ProfileEditor` component captures the current value of `profileForm`. Use `EventEmitter` to keep the form encapsulated and to provide the form value outside the component. The following example uses `console.warn` to log a message to the browser console.\n\n\n\n\ncheck\n\n```\n         import {Component, inject} from '@angular/core';import {FormBuilder, ReactiveFormsModule} from '@angular/forms';import {Validators} from '@angular/forms';import {FormArray} from '@angular/forms';import {JsonPipe} from '@angular/common';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule, JsonPipe],})export class ProfileEditorComponent {  private formBuilder = inject(FormBuilder);  profileForm = this.formBuilder.group({    firstName: ['', Validators.required],    lastName: [''],    address: this.formBuilder.group({      street: [''],      city: [''],      state: [''],      zip: [''],    }),    aliases: this.formBuilder.array([this.formBuilder.control('')]),  });  get aliases() {    return this.profileForm.get('aliases') as FormArray;  }  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }  addAlias() {    this.aliases.push(this.formBuilder.control(''));  }  onSubmit() {    // TODO: Use EventEmitter with form value    console.warn(this.profileForm.value);  }}\n\n```\n\n\n\n\n\n\nThe `submit` event is emitted by the `form` tag using the built-in DOM event. You trigger the event by clicking a button with `submit` type. This lets the user press the **Enter** key to submit the completed form.\n\nUse a `button` element to add a button to the bottom of the form to trigger the form submission.\n\n\n\n\ncheck\n\n```\n         <form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\">  <label for=\"first-name\">First Name: </label>  <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" required />  <label for=\"last-name\">Last Name: </label>  <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />  <div formGroupName=\"address\">    <h2>Address</h2>    <label for=\"street\">Street: </label>    <input id=\"street\" type=\"text\" formControlName=\"street\" />    <label for=\"city\">City: </label>    <input id=\"city\" type=\"text\" formControlName=\"city\" />    <label for=\"state\">State: </label>    <input id=\"state\" type=\"text\" formControlName=\"state\" />    <label for=\"zip\">Zip Code: </label>    <input id=\"zip\" type=\"text\" formControlName=\"zip\" />  </div>  <div formArrayName=\"aliases\">    <h2>Aliases</h2>    <button type=\"button\" (click)=\"addAlias()\">+ Add another alias</button>    @for (alias of aliases.controls; track $index; let i = $index) {      <div>        <!-- The repeated alias template -->        <label for=\"alias-{{ i }}\">Alias:</label>        <input id=\"alias-{{ i }}\" type=\"text\" [formControlName]=\"i\" />      </div>    }  </div>  <p>Complete the form to enable button.</p>  <button type=\"submit\" [disabled]=\"!profileForm.valid\">Submit</button></form><hr><p>Form Value: {{ profileForm.value | json }}</p><p>Form Status: {{ profileForm.status }}</p><button type=\"button\" (click)=\"updateProfile()\">Update Profile</button>\n\n```\n\n\n\n\n\n\nThe button in the preceding snippet also has a `disabled` binding attached to it to disable the button when `profileForm` is invalid. You aren't performing any validation yet, so the button is always enabled. Basic form validation is covered in the [Validating form input](https://angular.dev/guide/forms/reactive-forms#validating-form-input) section.\n\n4. ### [Display the component](https://angular.dev/guide/forms/reactive-forms\\#display-the-component-1)\n\n\nTo display the `ProfileEditor` component that contains the form, add it to a component template.\n\n\n\n\ncheck\n\n```\n         <h1>Reactive Forms</h1><app-name-editor /><app-profile-editor />\n\n```\n\n\n\n\n\n\n`ProfileEditor` lets you manage the form control instances for the `firstName` and `lastName` controls within the form group instance.\n\n\n### [Creating nested form groups](https://angular.dev/guide/forms/reactive-forms\\#creating-nested-form-groups)\n\n\nForm groups can accept both individual form control instances and other form group instances as children.\nThis makes composing complex form models easier to maintain and logically group together.\n\nWhen building complex forms, managing the different areas of information is easier in smaller sections.\nUsing a nested form group instance lets you break large forms groups into smaller, more manageable ones.\n\nTo make more complex forms, use the following steps.\n\n\n1. Create a nested group.\n2. Group the nested form in the template.\n\nSome types of information naturally fall into the same group.\nA name and address are typical examples of such nested groups, and are used in the following examples.\n\nTo create a nested group in \\`profileForm\\`, add a nested \\`address\\` element to the form group instance.\n\ncheck\n\n```\n      import {Component} from '@angular/core';import {FormGroup, FormControl, ReactiveFormsModule} from '@angular/forms';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule],})export class ProfileEditorComponent {  profileForm = new FormGroup({    firstName: new FormControl(''),    lastName: new FormControl(''),    address: new FormGroup({      street: new FormControl(''),      city: new FormControl(''),      state: new FormControl(''),      zip: new FormControl(''),    }),  });  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }\n...}\n\n```\n\nIn this example, `address group` combines the current `firstName` and `lastName` controls with the new `street`, `city`, `state`, and `zip` controls. Even though the `address` element in the form group is a child of the overall `profileForm` element in the form group, the same rules apply with value and status changes. Changes in status and value from the nested form group propagate to the parent form group, maintaining consistency with the overall model.\n\n5. ### [Group the nested form in the template](https://angular.dev/guide/forms/reactive-forms\\#group-the-nested-form-in-the-template)\n\n\nAfter you update the model in the component class, update the template to connect the form group instance and its input elements. Add the `address` form group containing the `street`, `city`, `state`, and `zip` fields to the `ProfileEditor` template.\n\n\n\n\ncheck\n\n```\n         <form [formGroup]=\"profileForm\">  <label for=\"first-name\">First Name: </label>  <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />  <label for=\"last-name\">Last Name: </label>  <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />  <div formGroupName=\"address\">    <h2>Address</h2>    <label for=\"street\">Street: </label>    <input id=\"street\" type=\"text\" formControlName=\"street\" />    <label for=\"city\">City: </label>    <input id=\"city\" type=\"text\" formControlName=\"city\" />    <label for=\"state\">State: </label>    <input id=\"state\" type=\"text\" formControlName=\"state\" />    <label for=\"zip\">Zip Code: </label>    <input id=\"zip\" type=\"text\" formControlName=\"zip\" />  </div>  <div formArrayName=\"aliases\">    <h2>Aliases</h2>    <button type=\"button\" (click)=\"addAlias()\">+ Add another alias</button>    @for(alias of aliases.controls; track $index; let i = $index) {    <div>      <!-- The repeated alias template -->      <label for=\"alias-{{ i }}\">Alias: </label>      <input id=\"alias-{{ i }}\" type=\"text\" [formControlName]=\"i\" />    </div>    }  </div></form><p>Form Value: {{ profileForm.value | json }}</p><button type=\"button\" (click)=\"updateProfile()\">Update Profile</button>\n\n```\n\n\n\n\n\n\nThe `ProfileEditor` form is displayed as one group, but the model is broken down further to represent the logical grouping areas.\n\nDisplay the value for the form group instance in the component template using the `value` property and `JsonPipe`.\n\n\n### [Updating parts of the data model](https://angular.dev/guide/forms/reactive-forms\\#updating-parts-of-the-data-model)\n\nWhen updating the value for a form group instance that contains multiple controls, you might only want to update parts of the model.\nThis section covers how to update specific parts of a form control data model.\n\nThere are two ways to update the model value:\n\n| Methods | Details |\n| :-- | :-- |\n| `setValue()` | Set a new value for an individual control. The `setValue()` method strictly adheres to the structure of the form group and replaces the entire value for the control. |\n| `patchValue()` | Replace any properties defined in the object that have changed in the form model. |\n\nThe strict checks of the `setValue()` method help catch nesting errors in complex forms, while `patchValue()` fails silently on those errors.\n\nIn `ProfileEditorComponent`, use the `updateProfile` method with the following example to update the first name and street address for the user.\n\ncheck\n\n```\n      import {Component} from '@angular/core';import {FormGroup, FormControl, ReactiveFormsModule} from '@angular/forms';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule],})export class ProfileEditorComponent {  profileForm = new FormGroup({    firstName: new FormControl(''),    lastName: new FormControl(''),    address: new FormGroup({      street: new FormControl(''),      city: new FormControl(''),      state: new FormControl(''),      zip: new FormControl(''),    }),  });  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }}\n\n```\n\nSimulate an update by adding a button to the template to update the user profile on demand.\n\ncheck\n\n```\n      <form [formGroup]=\"profileForm\">  <label for=\"first-name\">First Name: </label>  <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />  <label for=\"last-name\">Last Name: </label>  <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />  <div formGroupName=\"address\">    <h2>Address</h2>    <label for=\"street\">Street: </label>    <input id=\"street\" type=\"text\" formControlName=\"street\" />    <label for=\"city\">City: </label>    <input id=\"city\" type=\"text\" formControlName=\"city\" />    <label for=\"state\">State: </label>    <input id=\"state\" type=\"text\" formControlName=\"state\" />    <label for=\"zip\">Zip Code: </label>    <input id=\"zip\" type=\"text\" formControlName=\"zip\" />  </div>  <div formArrayName=\"aliases\">    <h2>Aliases</h2>    <button type=\"button\" (click)=\"addAlias()\">+ Add another alias</button>    @for(alias of aliases.controls; track $index; let i = $index) {    <div>      <!-- The repeated alias template -->      <label for=\"alias-{{ i }}\">Alias: </label>      <input id=\"alias-{{ i }}\" type=\"text\" [formControlName]=\"i\" />    </div>    }  </div></form><p>Form Value: {{ profileForm.value | json }}</p><button type=\"button\" (click)=\"updateProfile()\">Update Profile</button>\n\n```\n\nWhen a user clicks the button, the `profileForm` model is updated with new values for `firstName` and `street`. Notice that `street` is provided in an object inside the `address` property.\nThis is necessary because the `patchValue()` method applies the update against the model structure.\n`PatchValue()` only updates properties that the form model defines.\n\n## [Using the FormBuilder service to generate controls](https://angular.dev/guide/forms/reactive-forms\\#using-the-formbuilder-service-to-generate-controls)\n\nCreating form control instances manually can become repetitive when dealing with multiple forms.\nThe `FormBuilder` service provides convenient methods for generating controls.\n\nUse the following steps to take advantage of this service.\n\n1. Import the `FormBuilder` class.\n2. Inject the `FormBuilder` service.\n3. Generate the form contents.\n\nThe following examples show how to refactor the `ProfileEditor` component to use the form builder service to create form control and form group instances.\n\n1. ### [Import the FormBuilder class](https://angular.dev/guide/forms/reactive-forms\\#import-the-formbuilder-class)\n\n\nImport the `FormBuilder` class from the `@angular/forms` package.\n\n\n\n\ncheck\n\n```\n         import {Component, inject} from '@angular/core';import {FormBuilder, ReactiveFormsModule} from '@angular/forms';import {FormArray} from '@angular/forms';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule],})export class ProfileEditorComponent {  private formBuilder = inject(FormBuilder);  profileForm = this.formBuilder.group({    firstName: [''],    lastName: [''],    address: this.formBuilder.group({      street: [''],      city: [''],      state: [''],      zip: [''],    }),    aliases: this.formBuilder.array([this.formBuilder.control('')]),  });  get aliases() {    return this.profileForm.get('aliases') as FormArray;  }  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }  addAlias() {    this.aliases.push(this.formBuilder.control(''));  }}\n\n```\n\n2. ### [Inject the FormBuilder service](https://angular.dev/guide/forms/reactive-forms\\#inject-the-formbuilder-service)\n\n\nThe `FormBuilder` service is an injectable provider from the reactive forms module. Use the `inject()` function to inject this dependency in your component.\n\n\n\n\ncheck\n\n```\n         import {Component, inject} from '@angular/core';import {FormBuilder, ReactiveFormsModule} from '@angular/forms';import {FormArray} from '@angular/forms';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule],})export class ProfileEditorComponent {  private formBuilder = inject(FormBuilder);  profileForm = this.formBuilder.group({    firstName: [''],    lastName: [''],    address: this.formBuilder.group({      street: [''],      city: [''],      state: [''],      zip: [''],    }),    aliases: this.formBuilder.array([this.formBuilder.control('')]),  });  get aliases() {    return this.profileForm.get('aliases') as FormArray;  }  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }  addAlias() {    this.aliases.push(this.formBuilder.control(''));  }}\n\n```\n\n3. ### [Generate form controls](https://angular.dev/guide/forms/reactive-forms\\#generate-form-controls)\n\n\nThe `FormBuilder` service has three methods: `control()`, `group()`, and `array()`. These are factory methods for generating instances in your component classes including form controls, form groups, and form arrays. Use the `group` method to create the `profileForm` controls.\n\n\n\n\ncheck\n\n```\n         import {Component, inject} from '@angular/core';import {FormBuilder, ReactiveFormsModule} from '@angular/forms';import {FormArray} from '@angular/forms';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule],})export class ProfileEditorComponent {  private formBuilder = inject(FormBuilder);  profileForm = this.formBuilder.group({    firstName: [''],    lastName: [''],    address: this.formBuilder.group({      street: [''],      city: [''],      state: [''],      zip: [''],    }),    aliases: this.formBuilder.array([this.formBuilder.control('')]),\n...  });  get aliases() {    return this.profileForm.get('aliases') as FormArray;  }  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }  addAlias() {    this.aliases.push(this.formBuilder.control(''));  }}\n\n```\n\n\n\n\n\n\nIn the preceding example, you use the `group()` method with the same object to define the properties in the model. The value for each control name is an array containing the initial value as the first item in the array.\n\n\n\n**TIP:** You can define the control with just the initial value, but if your controls need sync or async validation, add sync and async validators as the second and third items in the array. Compare using the form builder to creating the instances manually.\n\n\n\n\n\n\ncheck\n\n\n\n### src/app/profile-editor/profile-editor.component.ts (instances)\n\n\n\n\n\n```\n         import {Component} from '@angular/core';import {FormGroup, FormControl, ReactiveFormsModule} from '@angular/forms';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule],})export class ProfileEditorComponent {  profileForm = new FormGroup({    firstName: new FormControl(''),    lastName: new FormControl(''),    address: new FormGroup({      street: new FormControl(''),      city: new FormControl(''),      state: new FormControl(''),      zip: new FormControl(''),    }),  });  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }}\n\n```\n\n\n## [Validating form input](https://angular.dev/guide/forms/reactive-forms\\#validating-form-input)\n\n_Form validation_ is used to ensure that user input is complete and correct.\nThis section covers adding a single validator to a form control and displaying the overall form status.\nForm validation is covered more extensively in the [Form Validation](https://angular.dev/guide/forms/guide/forms/form-validation) guide.\n\nUse the following steps to add form validation.\n\n1. Import a validator function in your form component.\n2. Add the validator to the field in the form.\n3. Add logic to handle the validation status.\n\nThe most common validation is making a field required.\nThe following example shows how to add a required validation to the `firstName` control and display the result of validation.\n\n1. ### [Import a validator function](https://angular.dev/guide/forms/reactive-forms\\#import-a-validator-function)\n\n\nReactive forms include a set of validator functions for common use cases. These functions receive a control to validate against and return an error object or a null value based on the validation check.\n\nImport the `Validators` class from the `@angular/forms` package.\n\n\n\n\ncheck\n\n```\n         import {Component, inject} from '@angular/core';import {FormBuilder, ReactiveFormsModule} from '@angular/forms';import {Validators} from '@angular/forms';import {FormArray} from '@angular/forms';import {JsonPipe} from '@angular/common';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule, JsonPipe],})export class ProfileEditorComponent {  private formBuilder = inject(FormBuilder);  profileForm = this.formBuilder.group({    firstName: ['', Validators.required],    lastName: [''],    address: this.formBuilder.group({      street: [''],      city: [''],      state: [''],      zip: [''],    }),    aliases: this.formBuilder.array([this.formBuilder.control('')]),  });  get aliases() {    return this.profileForm.get('aliases') as FormArray;  }  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }  addAlias() {    this.aliases.push(this.formBuilder.control(''));  }  onSubmit() {    // TODO: Use EventEmitter with form value    console.warn(this.profileForm.value);  }}\n\n```\n\n2. ### [Make a field required](https://angular.dev/guide/forms/reactive-forms\\#make-a-field-required)\n\n\nIn the `ProfileEditor` component, add the `Validators.required` static method as the second item in the array for the `firstName` control.\n\n\n\n\ncheck\n\n```\n         import {Component, inject} from '@angular/core';import {FormBuilder, ReactiveFormsModule} from '@angular/forms';import {Validators} from '@angular/forms';import {FormArray} from '@angular/forms';import {JsonPipe} from '@angular/common';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule, JsonPipe],})export class ProfileEditorComponent {  private formBuilder = inject(FormBuilder);  profileForm = this.formBuilder.group({    firstName: ['', Validators.required],    lastName: [''],    address: this.formBuilder.group({      street: [''],      city: [''],      state: [''],      zip: [''],    }),    aliases: this.formBuilder.array([this.formBuilder.control('')]),\n...  });  get aliases() {    return this.profileForm.get('aliases') as FormArray;  }  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }  addAlias() {    this.aliases.push(this.formBuilder.control(''));  }  onSubmit() {    // TODO: Use EventEmitter with form value    console.warn(this.profileForm.value);  }}\n\n```\n\n3. ### [Display form status](https://angular.dev/guide/forms/reactive-forms\\#display-form-status)\n\n\nWhen you add a required field to the form control, its initial status is invalid. This invalid status propagates to the parent form group element, making its status invalid. Access the current status of the form group instance through its `status` property.\n\nDisplay the current status of `profileForm` using interpolation.\n\n\n\n\ncheck\n\n```\n         <form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\">  <label for=\"first-name\">First Name: </label>  <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" required />  <label for=\"last-name\">Last Name: </label>  <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />  <div formGroupName=\"address\">    <h2>Address</h2>    <label for=\"street\">Street: </label>    <input id=\"street\" type=\"text\" formControlName=\"street\" />    <label for=\"city\">City: </label>    <input id=\"city\" type=\"text\" formControlName=\"city\" />    <label for=\"state\">State: </label>    <input id=\"state\" type=\"text\" formControlName=\"state\" />    <label for=\"zip\">Zip Code: </label>    <input id=\"zip\" type=\"text\" formControlName=\"zip\" />  </div>  <div formArrayName=\"aliases\">    <h2>Aliases</h2>    <button type=\"button\" (click)=\"addAlias()\">+ Add another alias</button>    @for (alias of aliases.controls; track $index; let i = $index) {      <div>        <!-- The repeated alias template -->        <label for=\"alias-{{ i }}\">Alias:</label>        <input id=\"alias-{{ i }}\" type=\"text\" [formControlName]=\"i\" />      </div>    }  </div>  <p>Complete the form to enable button.</p>  <button type=\"submit\" [disabled]=\"!profileForm.valid\">Submit</button></form><hr><p>Form Value: {{ profileForm.value | json }}</p><p>Form Status: {{ profileForm.status }}</p><button type=\"button\" (click)=\"updateProfile()\">Update Profile</button>\n\n```\n\n\n\n\n\n\nThe **Submit** button is disabled because `profileForm` is invalid due to the required `firstName` form control. After you fill out the `firstName` input, the form becomes valid and the **Submit** button is enabled.\n\nFor more on form validation, visit the [Form Validation](https://angular.dev/guide/forms/guide/forms/form-validation) guide.\n\n\n## [Creating dynamic forms](https://angular.dev/guide/forms/reactive-forms\\#creating-dynamic-forms)\n\n`FormArray` is an alternative to `FormGroup` for managing any number of unnamed controls.\nAs with form group instances, you can dynamically insert and remove controls from form array instances, and the form array instance value and validation status is calculated from its child controls.\nHowever, you don't need to define a key for each control by name, so this is a great option if you don't know the number of child values in advance.\n\nTo define a dynamic form, take the following steps.\n\n1. Import the `FormArray` class.\n2. Define a `FormArray` control.\n3. Access the `FormArray` control with a getter method.\n4. Display the form array in a template.\n\nThe following example shows you how to manage an array of _aliases_ in `ProfileEditor`.\n\n1. ### [Import the `FormArray` class](https://angular.dev/guide/forms/reactive-forms\\#import-the-formarray-class)\n\n\nImport the `FormArray` class from `@angular/forms` to use for type information. The `FormBuilder` service is ready to create a `FormArray` instance.\n\n\n\n\ncheck\n\n```\n         import {Component, inject} from '@angular/core';import {FormBuilder, ReactiveFormsModule} from '@angular/forms';import {FormArray} from '@angular/forms';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule],})export class ProfileEditorComponent {  private formBuilder = inject(FormBuilder);  profileForm = this.formBuilder.group({    firstName: [''],    lastName: [''],    address: this.formBuilder.group({      street: [''],      city: [''],      state: [''],      zip: [''],    }),    aliases: this.formBuilder.array([this.formBuilder.control('')]),  });  get aliases() {    return this.profileForm.get('aliases') as FormArray;  }  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }  addAlias() {    this.aliases.push(this.formBuilder.control(''));  }}\n\n```\n\n2. ### [Define a `FormArray` control](https://angular.dev/guide/forms/reactive-forms\\#define-a-formarray-control)\n\n\nYou can initialize a form array with any number of controls, from zero to many, by defining them in an array. Add an `aliases` property to the form group instance for `profileForm` to define the form array.\n\nUse the `FormBuilder.array()` method to define the array, and the `FormBuilder.control()` method to populate the array with an initial control.\n\n\n\n\ncheck\n\n```\n         import {Component, inject} from '@angular/core';import {FormBuilder, ReactiveFormsModule} from '@angular/forms';import {Validators} from '@angular/forms';import {FormArray} from '@angular/forms';import {JsonPipe} from '@angular/common';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule, JsonPipe],})export class ProfileEditorComponent {  private formBuilder = inject(FormBuilder);  profileForm = this.formBuilder.group({    firstName: ['', Validators.required],    lastName: [''],    address: this.formBuilder.group({      street: [''],      city: [''],      state: [''],      zip: [''],    }),    aliases: this.formBuilder.array([this.formBuilder.control('')]),  });  get aliases() {    return this.profileForm.get('aliases') as FormArray;  }  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }  addAlias() {    this.aliases.push(this.formBuilder.control(''));  }  onSubmit() {    // TODO: Use EventEmitter with form value    console.warn(this.profileForm.value);  }}\n\n```\n\n\n\n\n\n\nThe aliases control in the form group instance is now populated with a single control until more controls are added dynamically.\n\n3. ### [Access the `FormArray` control](https://angular.dev/guide/forms/reactive-forms\\#access-the-formarray-control)\n\n\nA getter provides access to the aliases in the form array instance compared to repeating the `profileForm.get()` method to get each instance. The form array instance represents an undefined number of controls in an array. It's convenient to access a control through a getter, and this approach is straightforward to repeat for additional controls.\n\n\n\nUse the getter syntax to create an `aliases` class property to retrieve the alias's form array control from the parent form group.\n\n\n\n\ncheck\n\n```\n         import {Component, inject} from '@angular/core';import {FormBuilder, ReactiveFormsModule} from '@angular/forms';import {Validators} from '@angular/forms';import {FormArray} from '@angular/forms';import {JsonPipe} from '@angular/common';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule, JsonPipe],})export class ProfileEditorComponent {  private formBuilder = inject(FormBuilder);  profileForm = this.formBuilder.group({    firstName: ['', Validators.required],    lastName: [''],    address: this.formBuilder.group({      street: [''],      city: [''],      state: [''],      zip: [''],    }),    aliases: this.formBuilder.array([this.formBuilder.control('')]),  });  get aliases() {    return this.profileForm.get('aliases') as FormArray;  }  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }  addAlias() {    this.aliases.push(this.formBuilder.control(''));  }  onSubmit() {    // TODO: Use EventEmitter with form value    console.warn(this.profileForm.value);  }}\n\n```\n\n\n\n\n\n\nBecause the returned control is of the type `AbstractControl`, you need to provide an explicit type to access the method syntax for the form array instance. Define a method to dynamically insert an alias control into the alias's form array. The `FormArray.push()` method inserts the control as a new item in the array.\n\n\n\n\ncheck\n\n```\n         import {Component, inject} from '@angular/core';import {FormBuilder, ReactiveFormsModule} from '@angular/forms';import {Validators} from '@angular/forms';import {FormArray} from '@angular/forms';import {JsonPipe} from '@angular/common';@Component({  selector: 'app-profile-editor',  templateUrl: './profile-editor.component.html',  styleUrls: ['./profile-editor.component.css'],  imports: [ReactiveFormsModule, JsonPipe],})export class ProfileEditorComponent {  private formBuilder = inject(FormBuilder);  profileForm = this.formBuilder.group({    firstName: ['', Validators.required],    lastName: [''],    address: this.formBuilder.group({      street: [''],      city: [''],      state: [''],      zip: [''],    }),    aliases: this.formBuilder.array([this.formBuilder.control('')]),  });  get aliases() {    return this.profileForm.get('aliases') as FormArray;  }  updateProfile() {    this.profileForm.patchValue({      firstName: 'Nancy',      address: {        street: '123 Drew Street',      },    });  }  addAlias() {    this.aliases.push(this.formBuilder.control(''));  }  onSubmit() {    // TODO: Use EventEmitter with form value    console.warn(this.profileForm.value);  }}\n\n```\n\n\n\n\n\n\nIn the template, each control is displayed as a separate input field.\n\n4. ### [Display the form array in the template](https://angular.dev/guide/forms/reactive-forms\\#display-the-form-array-in-the-template)\n\n\nTo attach the aliases from your form model, you must add it to the template. Similar to the `formGroupName` input provided by `FormGroupNameDirective`, `formArrayName` binds communication from the form array instance to the template with `FormArrayNameDirective`.\n\nAdd the following template HTML after the `<div>` closing the `formGroupName` element.\n\n\n\n\ncheck\n\n```\n         <form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\">  <label for=\"first-name\">First Name: </label>  <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" required />  <label for=\"last-name\">Last Name: </label>  <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />  <div formGroupName=\"address\">    <h2>Address</h2>    <label for=\"street\">Street: </label>    <input id=\"street\" type=\"text\" formControlName=\"street\" />    <label for=\"city\">City: </label>    <input id=\"city\" type=\"text\" formControlName=\"city\" />    <label for=\"state\">State: </label>    <input id=\"state\" type=\"text\" formControlName=\"state\" />    <label for=\"zip\">Zip Code: </label>    <input id=\"zip\" type=\"text\" formControlName=\"zip\" />  </div>  <div formArrayName=\"aliases\">    <h2>Aliases</h2>    <button type=\"button\" (click)=\"addAlias()\">+ Add another alias</button>    @for (alias of aliases.controls; track $index; let i = $index) {      <div>        <!-- The repeated alias template -->        <label for=\"alias-{{ i }}\">Alias:</label>        <input id=\"alias-{{ i }}\" type=\"text\" [formControlName]=\"i\" />      </div>    }  </div>  <p>Complete the form to enable button.</p>  <button type=\"submit\" [disabled]=\"!profileForm.valid\">Submit</button></form><hr><p>Form Value: {{ profileForm.value | json }}</p><p>Form Status: {{ profileForm.status }}</p><button type=\"button\" (click)=\"updateProfile()\">Update Profile</button>\n\n```\n\n\n\n\n\n\nThe `*ngFor` directive iterates over each form control instance provided by the aliases form array instance. Because form array elements are unnamed, you assign the index to the `i` variable and pass it to each control to bind it to the `formControlName` input.\n\nEach time a new alias instance is added, the new form array instance is provided its control based on the index. This lets you track each individual control when calculating the status and value of the root control.\n\n5. ### [Add an alias](https://angular.dev/guide/forms/reactive-forms\\#add-an-alias)\n\n\nInitially, the form contains one `Alias` field. To add another field, click the **Add Alias** button. You can also validate the array of aliases reported by the form model displayed by `Form Value` at the bottom of the template. Instead of a form control instance for each alias, you can compose another form group instance with additional fields. The process of defining a control for each item is the same.\n\n\n## [Reactive forms API summary](https://angular.dev/guide/forms/reactive-forms\\#reactive-forms-api-summary)\n\nThe following table lists the base classes and services used to create and manage reactive form controls.\nFor complete syntax details, see the API reference documentation for the [Forms package](https://angular.dev/guide/forms/api#forms \"API\").\n\n### [Classes](https://angular.dev/guide/forms/reactive-forms\\#classes)\n\n| Class | Details |\n| :-- | :-- |\n| `AbstractControl` | The abstract base class for the concrete form control classes `FormControl`, `FormGroup`, and `FormArray`. It provides their common behaviors and properties. |\n| `FormControl` | Manages the value and validity status of an individual form control. It corresponds to an HTML form control such as `<input>` or `<select>`. |\n| `FormGroup` | Manages the value and validity state of a group of `AbstractControl` instances. The group's properties include its child controls. The top-level form in your component is `FormGroup`. |\n| `FormArray` | Manages the value and validity state of a numerically indexed array of `AbstractControl` instances. |\n| `FormBuilder` | An injectable service that provides factory methods for creating control instances. |\n| `FormRecord` | Tracks the value and validity state of a collection of `FormControl` instances, each of which has the same value type. |\n\n### [Directives](https://angular.dev/guide/forms/reactive-forms\\#directives)\n\n| Directive | Details |\n| :-- | :-- |\n| `FormControlDirective` | Syncs a standalone `FormControl` instance to a form control element. |\n| `FormControlName` | Syncs `FormControl` in an existing `FormGroup` instance to a form control element by name. |\n| `FormGroupDirective` | Syncs an existing `FormGroup` instance to a DOM element. |\n| `FormGroupName` | Syncs a nested `FormGroup` instance to a DOM element. |\n| `FormArrayName` | Syncs a nested `FormArray` instance to a DOM element. |",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-03609b5f-2830-4354-9e21-c56546c7ea81.png"
  },
  "metadata": {
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "ogTitle": "Angular",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "og:url": "https://angular.dev/",
    "apple-mobile-web-app-title": "Angular",
    "og:description": "The web development framework for building modern apps.",
    "twitter:description": "The web development framework for building modern apps.",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "viewport": "width=device-width, initial-scale=1",
    "language": "en",
    "application-name": "Angular",
    "og:title": "Angular",
    "title": "Reactive forms â€¢ Angular",
    "twitter:title": "Angular",
    "og:type": "website",
    "twitter:card": "summary_large_image",
    "msapplication-TileColor": "#e90464",
    "twitter:url": "https://angular.dev/",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogDescription": "The web development framework for building modern apps.",
    "ogUrl": "https://angular.dev/",
    "theme-color": "#ffffff",
    "description": "The web development framework for building modern apps.",
    "scrapeId": "af22bdd6-d7b8-4d67-a413-b6d551d5dc5e",
    "sourceURL": "https://angular.dev/guide/forms/reactive-forms",
    "url": "https://angular.dev/guide/forms/reactive-forms",
    "statusCode": 200
  }
}