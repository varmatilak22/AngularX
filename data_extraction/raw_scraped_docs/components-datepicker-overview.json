{
  "scrapeId": "759ef1ea-850c-4986-aa34-18d043e7bd57",
  "sourceURL": "https://material.angular.io/components/datepicker/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for datepicker\n\nThe datepicker allows users to enter a date either through text input, or by choosing a date from\nthe calendar. It is made up of several components, directives and [the date implementation](https://material.angular.io/components/datepicker/overview#choosing-a-date-implementation-and-date-format-settings) that work together.\n\nBasic datepicker\n\nlinkcodeopen\\_in\\_new\n\nChoose a date\n\nMM/DD/YYYY\n\n### [link](https://material.angular.io/components/datepicker/overview\\#connecting-a-datepicker-to-an-input)  Connecting a datepicker to an input\n\nA datepicker is composed of a text input and a calendar pop-up, connected via the `matDatepicker`\nproperty on the text input.\n\nThere is also an optional datepicker toggle button that gives the user an easy way to open the datepicker pop-up.\n\ncontent\\_copy\n\n```\n<input matInput [matDatepicker]=\"picker\">\n<mat-hint>MM/DD/YYYY</mat-hint>\n<mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\n<mat-datepicker #picker></mat-datepicker>\n```\n\nThis works exactly the same with an input that is part of an `<mat-form-field>` and the toggle\ncan easily be used as a prefix or suffix on the Material input:\n\ncontent\\_copy\n\n```\n<mat-form-field>\n  <mat-label>Choose a date</mat-label>\n  <input matInput [matDatepicker]=\"picker\">\n  <mat-hint>MM/DD/YYYY</mat-hint>\n  <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\n  <mat-datepicker #picker></mat-datepicker>\n</mat-form-field>\n\n```\n\nIf you want to customize the icon that is rendered inside the `mat-datepicker-toggle`, you can do so\nby using the `matDatepickerToggleIcon` directive:\n\nDatepicker with custom icon\n\nlinkcodeopen\\_in\\_new\n\nChoose a date\n\nkeyboard\\_arrow\\_down\n\nMM/DD/YYYY\n\n### [link](https://material.angular.io/components/datepicker/overview\\#date-range-selection)  Date range selection\n\nIf you want your users to select a range of dates, instead of a single date, you can use the\n`mat-date-range-input` and `mat-date-range-picker` components. They work in tandem, similarly to the\n`mat-datepicker` and the basic datepicker input.\n\nThe `mat-date-range-input` component requires two `input` elements for the start and end dates,\nrespectively:\n\n```html\n<mat-date-range-input>\n  <input matStartDate placeholder=\"Start date\">\n  <input matEndDate placeholder=\"End date\">\n</mat-date-range-input>\n\n```\n\nThe `mat-date-range-picker` component acts as the pop-up panel for selecting dates. This works in\nthe same way as `mat-datepicker`, but allows the user to select multiple times:\n\n```html\n<mat-date-range-picker #picker></mat-date-range-picker>\n\n```\n\nConnect the range picker and range input using the `rangePicker` property:\n\n```html\n<mat-date-range-input [rangePicker]=\"picker\">\n  <input matStartDate placeholder=\"Start date\">\n  <input matEndDate placeholder=\"End date\">\n</mat-date-range-input>\n\n<mat-date-range-picker #picker></mat-date-range-picker>\n\n```\n\nBasic date range picker\n\nlinkcodeopen\\_in\\_new\n\nEnter a date range\n\nStart date\n\n–\n\nEnd date\n\nMM/DD/YYYY – MM/DD/YYYY\n\n### [link](https://material.angular.io/components/datepicker/overview\\#date-range-input-forms-integration)  Date range input forms integration\n\nThe `mat-date-range-input` component can be used together with the `FormGroup` directive from\n`@angular/forms` to group the start and end values together and to validate them as a group.\n\nDate range picker forms integration\n\nlinkcodeopen\\_in\\_new\n\nEnter a date range\n\nStart date\n\n–\n\nEnd date\n\nMM/DD/YYYY – MM/DD/YYYY\n\nSelected range: {\n\"start\": null,\n\"end\": null\n}\n\n### [link](https://material.angular.io/components/datepicker/overview\\#setting-the-calendar-starting-view)  Setting the calendar starting view\n\nThe `startView` property of `<mat-datepicker>` can be used to set the view that will show up when\nthe calendar first opens. It can be set to `month`, `year`, or `multi-year`; by default it will open\nto month view.\n\nThe month, year, or range of years that the calendar opens to is determined by first checking if any\ndate is currently selected, if so it will open to the month or year containing that date. Otherwise\nit will open to the month or year containing today's date. This behavior can be overridden by using\nthe `startAt` property of `<mat-datepicker>`. In this case the calendar will open to the month or\nyear containing the `startAt` date.\n\nDatepicker start date\n\nlinkcodeopen\\_in\\_new\n\nChoose a date\n\nMM/DD/YYYY\n\n#### [link](https://material.angular.io/components/datepicker/overview\\#watching-the-views-for-changes-on-selected-years-and-months)  Watching the views for changes on selected years and months\n\nWhen a year or a month is selected in `multi-year` and `year` views respectively, the `yearSelected`\nand `monthSelected` outputs emit a normalized date representing the chosen year or month. By\n\"normalized\" we mean that the dates representing years will have their month set to January and\ntheir day set to the 1st. Dates representing months will have their day set to the 1st of the\nmonth. For example, if `<mat-datepicker>` is configured to work with javascript native Date\nobjects, the `yearSelected` will emit `new Date(2017, 0, 1)` if the user selects 2017 in\n`multi-year` view. Similarly, `monthSelected` will emit `new Date(2017, 1, 1)` if the user\nselects **February** in `year` view and the current date value of the connected `<input>` was\nset to something like `new Date(2017, MM, dd)` when the calendar was opened (the month and day are\nirrelevant in this case).\n\nNotice that the emitted value does not affect the current value in the connected `<input>`, which\nis only bound to the selection made in the `month` view. So if the end user closes the calendar\nafter choosing a year in `multi-view` mode (by pressing the `ESC` key, for example), the selected\nyear, emitted by `yearSelected` output, will not cause any change in the value of the date in the\nassociated `<input>`.\n\nThe following example uses `yearSelected` and `monthSelected` outputs to emulate a month and year\npicker (if you're not familiar with the usage of `MomentDateAdapter` and `MAT_DATE_FORMATS`\nyou can [read more about them](https://material.angular.io/components/datepicker/overview#choosing-a-date-implementation-and-date-format-settings) below in\nthis document to fully understand the example).\n\nDatepicker emulating a Year and month picker\n\nlinkcodeopen\\_in\\_new\n\nMonth and Year\n\nMM/YYYY\n\n### [link](https://material.angular.io/components/datepicker/overview\\#setting-the-selected-date)  Setting the selected date\n\nThe type of values that the datepicker expects depends on the type of `DateAdapter` provided in your\napplication. The `NativeDateAdapter`, for example, works directly with plain JavaScript `Date`\nobjects. When using the `MomentDateAdapter`, however, the values will all be Moment.js instances.\nThis use of the adapter pattern allows the datepicker component to work with any arbitrary date\nrepresentation with a custom `DateAdapter`.\nSee [_Choosing a date implementation_](https://material.angular.io/components/datepicker/overview#choosing-a-date-implementation-and-date-format-settings)\nfor more information.\n\nDepending on the `DateAdapter` being used, the datepicker may automatically deserialize certain date\nformats for you as well. For example, both the `NativeDateAdapter` and `MomentDateAdapter` allow\n[ISO 8601](https://tools.ietf.org/html/rfc3339) strings to be passed to the datepicker and\nautomatically converted to the proper object type. This can be convenient when binding data directly\nfrom your backend to the datepicker. However, the datepicker will not accept date strings formatted\nin user format such as `\"1/2/2017\"` as this is ambiguous and will mean different things depending on\nthe locale of the browser running the code.\n\nAs with other types of `<input>`, the datepicker works with `@angular/forms` directives such as\n`formGroup`, `formControl`, `ngModel`, etc.\n\nDatepicker selected value\n\nlinkcodeopen\\_in\\_new\n\nAngular forms\n\nMM/DD/YYYY\n\nAngular forms (w/ deserialization)\n\nMM/DD/YYYY\n\nValue binding\n\nMM/DD/YYYY\n\n### [link](https://material.angular.io/components/datepicker/overview\\#date-validation)  Date validation\n\nThere are three properties that add date validation to the datepicker input. The first two are the\n`min` and `max` properties. In addition to enforcing validation on the input, these properties will\ndisable all dates on the calendar popup before or after the respective values and prevent the user\nfrom advancing the calendar past the `month` or `year` (depending on current view) containing the\n`min` or `max` date.\n\nDatepicker with min & max validation\n\nlinkcodeopen\\_in\\_new\n\nChoose a date\n\nMM/DD/YYYY\n\nThe second way to add date validation is using the `matDatepickerFilter` property of the datepicker\ninput. This property accepts a function of `<D> => boolean` (where `<D>` is the date type used by\nthe datepicker, see\n[_Choosing a date implementation_](https://material.angular.io/components/datepicker/overview#choosing-a-date-implementation-and-date-format-settings)).\nA result of `true` indicates that the date is valid and a result of `false` indicates that it is\nnot. Again this will also disable the dates on the calendar that are invalid. However, one important\ndifference between using `matDatepickerFilter` vs using `min` or `max` is that filtering out all\ndates before or after a certain point, will not prevent the user from advancing the calendar past\nthat point.\n\nDatepicker with filter validation\n\nlinkcodeopen\\_in\\_new\n\nChoose a date\n\nMM/DD/YYYY\n\nIn this example the user cannot select any date that falls on a Saturday or Sunday, but all of the\ndates which fall on other days of the week are selectable.\n\nEach validation property has a different error that can be checked:\n\n- A value that violates the `min` property will have a `matDatepickerMin` error.\n- A value that violates the `max` property will have a `matDatepickerMax` error.\n- A value that violates the `matDatepickerFilter` property will have a `matDatepickerFilter` error.\n\n### [link](https://material.angular.io/components/datepicker/overview\\#input-and-change-events)  Input and change events\n\nThe input's native `(input)` and `(change)` events will only trigger due to user interaction with\nthe input element; they will not fire when the user selects a date from the calendar popup.\nTherefore, the datepicker input also has support for `(dateInput)` and `(dateChange)` events. These\ntrigger when the user interacts with either the input or the popup.\n\nThe `(dateInput)` event will fire whenever the value changes due to the user typing or selecting a\ndate from the calendar. The `(dateChange)` event will fire whenever the user finishes typing input\n(on `<input>` blur), or when the user chooses a date from the calendar.\n\nDatepicker input and change events\n\nlinkcodeopen\\_in\\_new\n\nInput & change events\n\nMM/DD/YYYY\n\n### [link](https://material.angular.io/components/datepicker/overview\\#disabling-parts-of-the-datepicker)  Disabling parts of the datepicker\n\nAs with any standard `<input>`, it is possible to disable the datepicker input by adding the\n`disabled` property. By default, the `<mat-datepicker>` and `<mat-datepicker-toggle>` will inherit\ntheir disabled state from the `<input>`, but this can be overridden by setting the `disabled`\nproperty on the datepicker or toggle elements. This can be useful if you want to disable text input\nbut allow selection via the calendar or vice-versa.\n\nDisabled datepicker\n\nlinkcodeopen\\_in\\_new\n\nCompletely disabled\n\nMM/DD/YYYY\n\nPopup disabled\n\nMM/DD/YYYY\n\nInput disabled\n\nMM/DD/YYYY\n\n### [link](https://material.angular.io/components/datepicker/overview\\#confirmation-action-buttons)  Confirmation action buttons\n\nBy default, clicking on a date in the calendar will select it and close the calendar popup. In some\ncases this may not be desirable, because the user doesn't have a quick way of going back if they've\nchanged their mind. If you want your users to be able to cancel their selection and to have to\nexplicitly accept the value that they've selected, you can add a `<mat-datepicker-actions>` element\ninside `<mat-datepicker>` with a \"Cancel\" and an \"Apply\" button marked with the\n`matDatepickerCancel` and `matDatepickerApply` attributes respectively. Doing so will cause the\ndatepicker to only assign the value to the data model if the user presses \"Apply\", whereas pressing\n\"Cancel\" will close popup without changing the value.\n\ncontent\\_copy\n\n```\n<mat-datepicker #datepicker>\n  <mat-datepicker-actions>\n    <button mat-button matDatepickerCancel>Cancel</button>\n    <button mat-raised-button matDatepickerApply>Apply</button>\n  </mat-datepicker-actions>\n</mat-datepicker>\n```\n\nThe actions element is also supported for `<mat-date-range-picker>` where that it is called\n`<mat-date-range-picker-actions>` and the buttons are called `matDateRangePickerCancel` and\n`matDateRangePickerApply` respectively.\n\ncontent\\_copy\n\n```\n<mat-date-range-picker #rangePicker>\n  <mat-date-range-picker-actions>\n    <button mat-button matDateRangePickerCancel>Cancel</button>\n    <button mat-raised-button matDateRangePickerApply>Apply</button>\n  </mat-date-range-picker-actions>\n</mat-date-range-picker>\n```\n\nDatepicker action buttons\n\nlinkcodeopen\\_in\\_new\n\nChoose a date\n\nMM/DD/YYYY\n\nEnter a date range\n\nStart date\n\n–\n\nEnd date\n\nMM/DD/YYYY – MM/DD/YYYY\n\n### [link](https://material.angular.io/components/datepicker/overview\\#comparison-ranges)  Comparison ranges\n\nIf your users need to compare the date range that they're currently selecting with another range,\nyou can provide the comparison range start and end dates to the `mat-date-range-input` using the\n`comparisonStart` and `comparisonEnd` bindings. The comparison range will be rendered statically\nwithin the calendar, but it will change colors to indicate which dates overlap with the user's\nselected range. The comparison and overlap colors can be customized using the\n`datepicker-date-range-colors` mixin.\n\nDate range picker comparison ranges\n\nlinkcodeopen\\_in\\_new\n\nFirst campaign\n\n4/13/2025\n\n–\n\n4/16/2025\n\nMM/DD/YYYY – MM/DD/YYYY\n\nSecond campaign\n\n4/15/2025\n\n–\n\n4/19/2025\n\nMM/DD/YYYY – MM/DD/YYYY\n\n```scss\n@use '@angular/material' as mat;\n\n@include mat.datepicker-date-range-colors(hotpink, teal, yellow, purple);\n\n```\n\n### [link](https://material.angular.io/components/datepicker/overview\\#customizing-the-date-selection-logic)  Customizing the date selection logic\n\nThe `mat-date-range-picker` supports custom behaviors for range previews and selection. To customize\nthis, you first create a class that implements `MatDateRangeSelectionStrategy`, and then provide\nthe class via the `MAT_DATE_RANGE_SELECTION_STRATEGY` injection token. The following example\nuses the range selection strategy to create a custom range picker that limits the user to five-day\nranges.\n\nDate range picker with a custom selection strategy\n\nlinkcodeopen\\_in\\_new\n\nEnter a date range\n\nStart date\n\n–\n\nEnd date\n\nMM/DD/YYYY – MM/DD/YYYY\n\n### [link](https://material.angular.io/components/datepicker/overview\\#touch-ui-mode)  Touch UI mode\n\nThe datepicker normally opens as a popup under the input. However this is not ideal for touch\ndevices that don't have as much screen real estate and need bigger click targets. For this reason\n`<mat-datepicker>` has a `touchUi` property that can be set to `true` in order to enable a more\ntouch friendly UI where the calendar opens in a large dialog.\n\nDatepicker touch UI\n\nlinkcodeopen\\_in\\_new\n\nChoose a date\n\nMM/DD/YYYY\n\n### [link](https://material.angular.io/components/datepicker/overview\\#manually-opening-and-closing-the-calendar)  Manually opening and closing the calendar\n\nThe calendar popup can be programmatically controlled using the `open` and `close` methods on the\n`<mat-datepicker>`. It also has an `opened` property that reflects the status of the popup.\n\nDatepicker open method\n\nlinkcodeopen\\_in\\_new\n\nChoose a date\n\nMM/DD/YYYY\n\nOpen\n\n### [link](https://material.angular.io/components/datepicker/overview\\#using-mat-calendar-inline)  Using `mat-calendar` inline\n\nIf you want to allow the user to select a date from a calendar that is inlined on the page rather\nthan contained in a popup, you can use `<mat-calendar>` directly. The calendar's height is\ndetermined automatically based on the width and the number of dates that need to be shown for a\nmonth. If you want to make the calendar larger or smaller, adjust the width rather than the height.\n\nDatepicker inline calendar example\n\nlinkcodeopen\\_in\\_new\n\nAPR 2025APR 2025\n\nComparison range\nComparison range\n\n| SundayS | MondayM | TuesdayT | WednesdayW | ThursdayT | FridayF | SaturdayS |\n| --- | --- | --- | --- | --- | --- | --- |\n|  |\n| --- |\n| APR |\n|  | 1 | 2 | 3 | 4 | 5 |\n| 6 | 7 | 8 | 9 | 10 | 11 | 12 |\n| 13 | 14 | 15 | 16 | 17 | 18 | 19 |\n| 20 | 21 | 22 | 23 | 24 | 25 | 26 |\n| 27 | 28 | 29 | 30 |\n\nSelected date:\n\n### [link](https://material.angular.io/components/datepicker/overview\\#internationalization)  Internationalization\n\nInternationalization of the datepicker is configured via four aspects:\n\n1. The date locale.\n2. The date implementation that the datepicker accepts.\n3. The display and parse formats used by the datepicker.\n4. The message strings used in the datepicker's UI.\n\n#### [link](https://material.angular.io/components/datepicker/overview\\#setting-the-locale-code)  Setting the locale code\n\nBy default, the `MAT_DATE_LOCALE` injection token will use the existing `LOCALE_ID` locale code\nfrom `@angular/core`. If you want to override it, you can provide a new value for the\n`MAT_DATE_LOCALE` token:\n\n```ts\nbootstapApplication(MyApp, {\n  providers: [{provide: MAT_DATE_LOCALE, useValue: 'en-GB'}],\n});\n\n```\n\nIt's also possible to set the locale at runtime using the `setLocale` method of the `DateAdapter`.\n\n**Note:** if you're using the `provideDateFnsAdapter`, you have to provide the data object for your\nlocale to `MAT_DATE_LOCALE` instead of the locale code, in addition to providing a configuration\ncompatible with `date-fns` to `MAT_DATE_FORMATS`. Locale data for `date-fns` can be imported\nfrom `date-fns/locale`.\n\nDatepicker with different locale\n\nlinkcodeopen\\_in\\_new\n\nDifferent locale\n\nYYYY/MM/DD\n\nDynamically switch to French\n\n#### [link](https://material.angular.io/components/datepicker/overview\\#choosing-a-date-implementation-and-date-format-settings)  Choosing a date implementation and date format settings\n\nThe datepicker was built to be date implementation agnostic. This means that it can be made to work\nwith a variety of different date implementations. However it also means that developers need to make\nsure to provide the appropriate pieces for the datepicker to work with their chosen implementation.\n\nThe easiest way to ensure this is to import one of the provided date adapters:\n\n`provideNativeDateAdapter` or `MatNativeDateModule`\n\n| Date type | `Date` |\n| Supported locales | en-US |\n| Dependencies | None |\n| Import from | `@angular/material/core` |\n\n`provideDateFnsAdapter` or `MatDateFnsModule` (installed via `ng add @angular/material-date-fns-adapter`)\n\n| Date type | `Date` |\n| Supported locales | [See project for details](https://github.com/date-fns/date-fns/tree/master/src/locale/) |\n| Dependencies | [date-fns](https://date-fns.org/) |\n| Import from | `@angular/material-date-fns-adapter` |\n\n`provideLuxonDateAdapter` or `MatLuxonDateModule` (installed via `ng add @angular/material-luxon-adapter`)\n\n| Date type | `DateTime` |\n| Supported locales | [See project for details](https://moment.github.io/luxon/) |\n| Dependencies | [Luxon](https://moment.github.io/luxon/) |\n| Import from | `@angular/material-luxon-adapter` |\n\n`provideMomentDateAdapter` or `MatMomentDateModule` (installed via `ng add @angular/material-moment-adapter`)\n\n| Date type | `Moment` |\n| Supported locales | [See project for details](https://github.com/moment/moment/tree/develop/src/locale) |\n| Dependencies | [Moment.js](https://momentjs.com/) |\n| Import from | `@angular/material-moment-adapter` |\n\n_Please note: `provideNativeDateAdapter` is based off the functionality available in JavaScript's_\n_native [`Date` object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date)._\n_Thus it is not suitable for many locales. One of the biggest shortcomings of the native `Date`_\n_object is the inability to set the parse format. We strongly recommend using an adapter based on_\n_a more robust formatting and parsing library. You can use `provideMomentDateAdapter`_\n_or a custom `DateAdapter` that works with the library of your choice._\n\nThese APIs include providers for `DateAdapter` and `MAT_DATE_FORMATS`.\n\n```ts\nbootstrapApplication(MyApp, {\n  providers: [provideNativeDateAdapter()]\n});\n\n```\n\nBecause `DateAdapter` is a generic class, `MatDatepicker` and `MatDatepickerInput` also need to be\nmade generic. When working with these classes (for example as a `ViewChild`) you should include the\nappropriate generic type that corresponds to the `DateAdapter` implementation you are using. For\nexample:\n\n```ts\n@Component({...})\nexport class MyComponent {\n  @ViewChild(MatDatepicker) datepicker: MatDatepicker<Date>;\n}\n\n```\n\nDatepicker that uses Moment.js dates\n\nlinkcodeopen\\_in\\_new\n\nMoment.js datepicker\n\nMM/DD/YYYY\n\nBy default the `MomentDateAdapter` creates dates in your time zone specific locale. You can change\nthe default behaviour to parse dates as UTC by passing `useUtc: true` into `provideMomentDateAdapter`\nor by providing the `MAT_MOMENT_DATE_ADAPTER_OPTIONS` injection token.\n\n```ts\nbootstrapApplication(MyApp, {\n  providers: [provideMomentDateAdapter(undefined, {useUtc: true})]\n});\n\n```\n\nBy default the `MomentDateAdapter` will parse dates in a\n[forgiving way](https://momentjs.com/guides/#/parsing/forgiving-mode/). This may result in dates\nbeing parsed incorrectly. You can change the default behaviour to\n[parse dates strictly](https://momentjs.com/guides/#/parsing/strict-mode/) by `strict: true` to\n`provideMomentDateAdapter` or by providing the `MAT_MOMENT_DATE_ADAPTER_OPTIONS` injection token.\n\n```ts\nbootstrapApplication(MyApp, {\n  providers: [provideMomentDateAdapter(undefined, {strict: true})]\n});\n\n```\n\nIt is also possible to create your own `DateAdapter` that works with any date format your app\nrequires. This is accomplished by subclassing `DateAdapter` and providing your subclass as the\n`DateAdapter` implementation. You will also want to make sure that the `MAT_DATE_FORMATS` provided\nin your app are formats that can be understood by your date implementation. See\n[_Customizing the parse and display formats_](https://material.angular.io/components/datepicker/overview#customizing-the-parse-and-display-formats) for more\ninformation about `MAT_DATE_FORMATS`.\n\n```ts\nbootstrapApplication(MyApp, {\n  providers: [\\\n    {provide: DateAdapter, useClass: MyDateAdapter},\\\n    {provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS},\\\n  ]\n});\n\n```\n\nIf you need to work with native `Date` objects, but need custom behavior (for example custom date\nparsing), you can consider subclassing `NativeDateAdapter`.\n\n#### [link](https://material.angular.io/components/datepicker/overview\\#customizing-the-parse-and-display-formats)  Customizing the parse and display formats\n\nThe `MAT_DATE_FORMATS` object is a collection of formats that the datepicker uses when parsing\nand displaying dates. These formats are passed through to the `DateAdapter` so you will want to make\nsure that the format objects you're using are compatible with the `DateAdapter` used in your app.\n\nIf you want use one of the `DateAdapters` that ships with Angular Material, but use your own\n`MAT_DATE_FORMATS`, you can either pass the formats into the providers function, or provide the\n`MAT_DATE_FORMATS` token yourself. For example:\n\n```ts\nbootstrapApplication(MyApp, {\n  providers: [provideNativeDateAdapter(MY_NATIVE_DATE_FORMATS)],\n});\n\n```\n\nDatepicker with custom formats\n\nlinkcodeopen\\_in\\_new\n\nVerbose datepicker\n\nMMMM DD, YYYY\n\n##### [link](https://material.angular.io/components/datepicker/overview\\#momentjs-formats)  Moment.js formats\n\nTo use custom formats with the `provideMomentDateAdapter` you can pick from the parse formats\ndocumented [here](https://momentjs.com/docs/#/parsing/string-format/) and the display formats\ndocumented [here](https://momentjs.com/docs/#/displaying/format/).\n\nIt is also possible to support multiple parse formats. For example:\n\n```ts\nbootstraApplication(MyApp, {\n  providers: [provideMomentDateAdapter({\\\n    parse: {\\\n      dateInput: ['l', 'LL'],\\\n    },\\\n    display: {\\\n      dateInput: 'L',\\\n      monthYearLabel: 'MMM YYYY',\\\n      dateA11yLabel: 'LL',\\\n      monthYearA11yLabel: 'MMMM YYYY',\\\n    },\\\n  })]\n});\n\n```\n\n#### [link](https://material.angular.io/components/datepicker/overview\\#customizing-the-calendar-header)  Customizing the calendar header\n\nThe header section of the calendar (the part containing the view switcher and previous and next\nbuttons) can be replaced with a custom component if desired. This is accomplished using the\n`calendarHeaderComponent` property of `<mat-datepicker>`. It takes a component class and constructs\nan instance of the component to use as the header.\n\nIn order to interact with the calendar in your custom header component, you can inject the parent\n`MatCalendar` in the constructor. To make sure your header stays in sync with the calendar,\nsubscribe to the `stateChanges` observable of the calendar and mark your header component for change\ndetection.\n\nDatepicker with custom calendar header\n\nlinkcodeopen\\_in\\_new\n\nCustom calendar header\n\nMM/DD/YYYY\n\n#### [link](https://material.angular.io/components/datepicker/overview\\#localizing-labels-and-messages)  Localizing labels and messages\n\nThe various text strings used by the datepicker are provided through `MatDatepickerIntl`.\nLocalization of these messages can be done by providing a subclass with translated values in your\napp config.\n\n```ts\nbootstrapApplication(MyApp, {\n  providers: [\\\n    {provide: MatDatepickerIntl, useClass: MyIntl},\\\n    provideNativeDateAdapter(),\\\n  ],\n});\n\n```\n\n#### [link](https://material.angular.io/components/datepicker/overview\\#highlighting-specific-dates)  Highlighting specific dates\n\nIf you want to apply one or more CSS classes to some dates in the calendar (e.g. to highlight a\nholiday), you can do so with the `dateClass` input. It accepts a function which will be called\nwith each of the dates in the calendar and will apply any classes that are returned. The return\nvalue can be anything that is accepted by `ngClass`.\n\nDatepicker with custom date classes\n\nlinkcodeopen\\_in\\_new\n\nChoose a date\n\nMM/DD/YYYY\n\n### [link](https://material.angular.io/components/datepicker/overview\\#accessibility)  Accessibility\n\nThe `MatDatepicker` pop-up uses the `role=\"dialog\"` interaction pattern. This dialog then contains\nmultiple controls, the most prominent being the calendar itself. This calendar implements the\n`role=\"grid\"` interaction pattern.\n\nAlways enable [_confirmation action buttons_](https://material.angular.io/components/datepicker/overview#confirmation-action-buttons). This allows assistive\ntechnology users to explicitly confirm their selection before committing a value.\n\nThe `MatDatepickerInput` and `MatDatepickerToggle` directives both apply the `aria-haspopup`\nattribute to the native input and button elements, respectively.\n\n`MatDatepickerIntl` includes strings that are used for `aria-label` attributes. Always provide\nthe datepicker text input a meaningful label via `<mat-label>`, `aria-label`, `aria-labelledby` or\n`MatDatepickerIntl`.\n\nAlways communicate the date format (e.g. 'MM/DD/YYYY'). This can be accomplished using `<mat-hint>`\nor by providing an additional label adjacent to the form field.\n\n`MatDatepickerInput` adds `>Alt` \\+ `Down Arrow` as a keyboard short to open the\ndatepicker pop-up. However, ChromeOS intercepts this key combination at the OS level such that the\nbrowser only receives a `PageDown` key event. Because of this behavior, you should always include an\nadditional means of opening the pop-up, such as `MatDatepickerToggle`.\n\n`MatDatepickerToggle` must be included along with `MatDatepicker` for optimal mobile a11y\ncompatibility. Mobile screen reader users currently do not have a way to trigger the datepicker\ndialog without the icon button present.\n\n#### [link](https://material.angular.io/components/datepicker/overview\\#keyboard-interaction)  Keyboard interaction\n\nThe datepicker supports the following keyboard shortcuts:\n\n| Keyboard Shortcut | Action |\n| --- | --- |\n| `Alt` \\+ `Down Arrow` | Open the calendar pop-up |\n| `Escape` | Close the calendar pop-up |\n\nIn month view:\n\n| Shortcut | Action |\n| --- | --- |\n| `Left Arrow` | Go to previous day |\n| `Right Arrow` | Go to next day |\n| `Up Arrow` | Go to same day in the previous week |\n| `Down Arrow` | Go to same day in the next week |\n| `Home` | Go to the first day of the month |\n| `End` | Go to the last day of the month |\n| `Page up` | Go to the same day in the previous month |\n| `Alt` \\+ `Page up` | Go to the same day in the previous year |\n| `Page Down` | Go to the same day in the next month |\n| `Alt` \\+ `Page Down` | Go to the same day in the next year |\n| `Enter` | Select current date |\n\nIn year view:\n\n| Shortcut | Action |\n| --- | --- |\n| `Left Arrow` | Go to previous month |\n| `Right Arrow` | Go to next month |\n| `Up Arrow` | Go up a row (back 4 months) |\n| `Down Arrow` | Go down a row (forward 4 months) |\n| `Home` | Go to the first month of the year |\n| `End` | Go to the last month of the year |\n| `Page Up` | Go to the same month in the previous year |\n| `Alt` \\+ `Page up` | Go to the same month 10 years back |\n| `Page Down` | Go to the same month in the next year |\n| `Alt` \\+ `Page Down` | Go to the same month 10 years forward |\n| `Enter` | Select current month |\n\nIn multi-year view:\n\n| Shortcut | Action |\n| --- | --- |\n| `Left Arrow` | Go to previous year |\n| `Right Arrow` | Go to next year |\n| `Up Arrow` | Go up a row (back 4 years) |\n| `Down Arrow` | Go down a row (forward 4 years) |\n| `Home` | Go to the first year in the current range |\n| `End` | Go to the last year in the current range |\n| `Page up` | Go back 24 years |\n| `Alt` \\+ `Page up` | Go back 240 years |\n| `Page Down` | Go forward 24 years |\n| `Alt` \\+ `Page Down` | Go forward 240 years |\n| `Enter` | Select current year |\n\n### [link](https://material.angular.io/components/datepicker/overview\\#troubleshooting)  Troubleshooting\n\n#### [link](https://material.angular.io/components/datepicker/overview\\#error-matdatepicker-no-provider-found-for-dateadaptermat_date_formats)  Error: MatDatepicker: No provider found for DateAdapter/MAT\\_DATE\\_FORMATS\n\nThis error is thrown if you have not provided all of the injectables the datepicker needs to work.\nThe easiest way to resolve this is to add `provideNativeDateAdapter` or `provideMomentDateAdapter`\nto your app config. See\n[_Choosing a date implementation_](https://material.angular.io/components/datepicker/overview#choosing-a-date-implementation-and-date-format-settings)) for\nmore information.\n\n#### [link](https://material.angular.io/components/datepicker/overview\\#error-a-matdatepicker-can-only-be-associated-with-a-single-input)  Error: A MatDatepicker can only be associated with a single input\n\nThis error is thrown if more than one `<input>` tries to claim ownership over the same\n`<mat-datepicker>` (via the `matDatepicker` attribute on the input). A datepicker can only be\nassociated with a single input.\n\n#### [link](https://material.angular.io/components/datepicker/overview\\#error-attempted-to-open-an-matdatepicker-with-no-associated-input)  Error: Attempted to open an MatDatepicker with no associated input.\n\nThis error occurs if your `<mat-datepicker>` is not associated with any `<input>`. To associate an\ninput with your datepicker, create a template reference for the datepicker and assign it to the\n`matDatepicker` attribute on the input:\n\n```html\n<input [matDatepicker]=\"picker\">\n<mat-datepicker #picker></mat-datepicker>\n\n```\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Basic datepicker example in StackBlitz\n\nCopy link to example\n\nView code\n\nCopy snippet\n\nView full example\n\nEdit Datepicker with custom icon example in StackBlitz\n\nEdit Basic date range picker example in StackBlitz\n\nEdit Date range picker forms integration example in StackBlitz\n\nEdit Datepicker start date example in StackBlitz\n\nEdit Datepicker emulating a Year and month picker example in StackBlitz\n\nEdit Datepicker selected value example in StackBlitz\n\nEdit Datepicker with min & max validation example in StackBlitz\n\nEdit Datepicker with filter validation example in StackBlitz\n\nEdit Datepicker input and change events example in StackBlitz\n\nEdit Disabled datepicker example in StackBlitz\n\nEdit Datepicker action buttons example in StackBlitz\n\nEdit Date range picker comparison ranges example in StackBlitz\n\nEdit Date range picker with a custom selection strategy example in StackBlitz\n\nEdit Datepicker touch UI example in StackBlitz\n\nEdit Datepicker open method example in StackBlitz\n\nEdit Datepicker inline calendar example example in StackBlitz\n\nEdit Datepicker with different locale example in StackBlitz\n\nEdit Datepicker that uses Moment.js dates example in StackBlitz\n\nEdit Datepicker with custom formats example in StackBlitz\n\nEdit Datepicker with custom calendar header example in StackBlitz\n\nEdit Datepicker with custom date classes example in StackBlitz",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-d4cd6d9d-940a-4307-a6f3-e721ce13ff87.png"
  },
  "metadata": {
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "ogUrl": "https://material.angular.io/",
    "twitter:card": "summary",
    "og:title": "Angular Material",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "ogTitle": "Angular Material",
    "og:image:width": "1339",
    "ogLocale": "en_US",
    "language": "en-US",
    "author": "Angular Components Team",
    "og:site_name": "Angular Material",
    "og:type": "website",
    "title": "Datepicker | Angular Material",
    "apple-mobile-web-app-capable": "yes",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "og:locale": "en_US",
    "ogSiteName": "Angular Material",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "theme-color": "#d7e3ff",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "viewport": "width=device-width, initial-scale=1",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image:type": "image/png",
    "twitter:site": "@Angular",
    "favicon": "https://material.angular.io/components/datepicker/assets/img/favicon.ico?v=19.1.0",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:title": "Angular Material",
    "mobile-web-app-capable": "yes",
    "og:url": "https://material.angular.io/",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:creator": "@Angular",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:height": "943",
    "scrapeId": "759ef1ea-850c-4986-aa34-18d043e7bd57",
    "sourceURL": "https://material.angular.io/components/datepicker/overview",
    "url": "https://material.angular.io/components/datepicker/overview",
    "statusCode": 200
  }
}