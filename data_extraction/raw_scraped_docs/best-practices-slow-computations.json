{
  "scrapeId": "d52580b1-adbb-469b-9b3a-c7cb9f1e6892",
  "sourceURL": "https://angular.dev/best-practices/slow-computations",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backPerformance\n  - [Overview](https://angular.dev/best-practices/runtime-performance)\n  - [Zone pollution](https://angular.dev/best-practices/zone-pollution)\n  - [Slow computations](https://angular.dev/best-practices/slow-computations)\n  - [Skipping component subtrees](https://angular.dev/best-practices/skipping-subtrees)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nOn every change detection cycle, Angular synchronously:\n\n- Evaluates all template expressions in all components, unless specified otherwise, based on that each component's detection strategy\n- Executes the `ngDoCheck`, `ngAfterContentChecked`, `ngAfterViewChecked`, and `ngOnChanges` lifecycle hooks.\nA single slow computation within a template or a lifecycle hook can slow down the entire change detection process because Angular runs the computations sequentially.\n\n## [Identifying slow computations](https://angular.dev/best-practices/slow-computations\\#identifying-slow-computations)\n\nYou can identify heavy computations with Angular DevToolsâ€™ profiler. In the performance timeline, click a bar to preview a particular change detection cycle. This displays a bar chart, which shows how long the framework spent in change detection for each component. When you click a component, you can preview how long Angular spent evaluating its template and lifecycle hooks.\n\n![Angular DevTools profiler preview showing slow computation](https://angular.dev/best-practices/assets/images/best-practices/runtime-performance/slow-computations.png)\n\nFor example, in the preceding screenshot, the second recorded change detection cycle is selected. Angular spent over 573 ms on this cycle, with the most time spent in the `EmployeeListComponent`. In the details panel, you can see that Angular spent over 297 ms evaluating the template of the `EmployeeListComponent`.\n\n## [Optimizing slow computations](https://angular.dev/best-practices/slow-computations\\#optimizing-slow-computations)\n\nHere are several techniques to remove slow computations:\n\n- **Optimizing the underlying algorithm**. This is the recommended approach. If you can speed up the algorithm that is causing the problem, you can speed up the entire change detection mechanism.\n- **Caching using pure pipes**. You can move the heavy computation to a pure [pipe](https://angular.dev/best-practices/guide/pipes). Angular reevaluates a pure pipe only if it detects that its inputs have changed, compared to the previous time Angular called it.\n- **Using memoization**. [Memoization](https://en.wikipedia.org/wiki/Memoization) is a similar technique to pure pipes, with the difference that pure pipes preserve only the last result from the computation where memoization could store multiple results.\n- **Avoid repaints/reflows in lifecycle hooks**. Certain [operations](https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/) cause the browser to either synchronously recalculate the layout of the page or re-render it. Since reflows and repaints are generally slow, you want to avoid performing them in every change detection cycle.\n\nPure pipes and memoization have different trade-offs. Pure pipes are an Angular built-in concept compared to memoization, which is a general software engineering practice for caching function results. The memory overhead of memoization could be significant if you invoke the heavy computation frequently with different arguments.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-fce26784-b397-4f88-9652-85e72f4008c4.png"
  },
  "metadata": {
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "twitter:card": "summary_large_image",
    "ogUrl": "https://angular.dev/",
    "twitter:description": "The web development framework for building modern apps.",
    "ogDescription": "The web development framework for building modern apps.",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "language": "en",
    "title": "Slow computations â€¢ Angular",
    "ogTitle": "Angular",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "msapplication-TileColor": "#e90464",
    "apple-mobile-web-app-title": "Angular",
    "og:type": "website",
    "theme-color": "#ffffff",
    "og:url": "https://angular.dev/",
    "twitter:url": "https://angular.dev/",
    "og:title": "Angular",
    "twitter:title": "Angular",
    "viewport": "width=device-width, initial-scale=1",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "application-name": "Angular",
    "description": "The web development framework for building modern apps.",
    "og:description": "The web development framework for building modern apps.",
    "scrapeId": "d52580b1-adbb-469b-9b3a-c7cb9f1e6892",
    "sourceURL": "https://angular.dev/best-practices/slow-computations",
    "url": "https://angular.dev/best-practices/slow-computations",
    "statusCode": 200
  }
}