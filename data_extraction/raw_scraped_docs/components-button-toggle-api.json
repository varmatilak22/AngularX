{
  "scrapeId": "e211f6a3-439c-42bb-8af1-2ed3b427d65f",
  "sourceURL": "https://material.angular.io/components/button-toggle/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for button-toggle\n\n## API reference for Angular Material button-toggle\n\n`\n          import {MatButtonToggleModule} from '@angular/material/button-toggle';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/button-toggle/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/button-toggle/api\\#MatButtonToggleGroup) `MatButtonToggleGroup`\n\nExclusive selection button toggle group that behaves like a radio-button group.\n\nSelector:mat-button-toggle-group\n\nExported as:matButtonToggleGroup\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`appearance: MatButtonToggleAppearance` | The appearance for all the buttons in the group. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether multiple button toggle group is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Whether buttons in the group should be interactive while they're disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`hideMultipleSelectionIndicator: boolean` | Whether checkmark indicator for multiple-selection button toggle groups is hidden. |\n| @Input({ transform: booleanAttribute })<br> <br>`hideSingleSelectionIndicator: boolean` | Whether checkmark indicator for single-selection button toggle groups is hidden. |\n| @Input({ transform: booleanAttribute })<br> <br>`multiple: boolean` | Whether multiple button toggles can be selected. |\n| @Input()<br>`name: string` | `name` attribute for the underlying `input` element. |\n| @Input()<br>`value: any` | Value of the toggle group. |\n| @Input({ transform: booleanAttribute })<br> <br>`vertical: boolean` | Whether the toggle group is vertical. |\n| @Output()<br>`change: EventEmitter<MatButtonToggleChange>` | Event emitted when the group's value changes. |\n| `dir: Direction` | The layout direction of the toggle button group. |\n| `selected: MatButtonToggle | MatButtonToggle[]` | Selected button toggles in the group. |\n\n#### [link](https://material.angular.io/components/button-toggle/api\\#MatButtonToggle) `MatButtonToggle`\n\nSingle button inside of a toggle group.\n\nSelector:mat-button-toggle\n\nExported as:matButtonToggle\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`appearance: MatButtonToggleAppearance` | The appearance style of the button. |\n| @Input('aria-label')<br> <br>`ariaLabel: string` | Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will<br>take precedence so this may be omitted. |\n| @Input('aria-labelledby')<br> <br>`ariaLabelledby: string | null` | Users can specify the `aria-labelledby` attribute which will be forwarded to the input element |\n| @Input({ transform: booleanAttribute })<br> <br>`checked: boolean` | Whether the button is checked. |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether ripples are disabled on the button toggle. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the button is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Whether the button should remain interactive when it is disabled. |\n| @Input()<br>`id: string` | The unique ID for this button toggle. |\n| @Input()<br>`name: string` | HTML's 'name' attribute used to group radios for unique selection. |\n| @Input()<br>`value: any` | MatButtonToggleGroup reads this to assign its own value. |\n| @Output()<br>`change: EventEmitter<MatButtonToggleChange>` | Event emitted when the group value changes. |\n| `buttonId: string` | Unique ID for the underlying `button` element. |\n| `buttonToggleGroup: MatButtonToggleGroup` | The parent button toggle group (exclusive selection). Optional. |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the button. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n\n| isSingleSelector |\n| --- |\n| Whether the toggle is in single selection mode. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n### [link](https://material.angular.io/components/button-toggle/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/button-toggle/api\\#MatButtonToggleChange) `MatButtonToggleChange`\n\nChange event object emitted by button toggle.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `source: MatButtonToggle` | The button toggle that emits the event. |\n| `value: any` | The value assigned to the button toggle. |\n\n### [link](https://material.angular.io/components/button-toggle/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/button-toggle/api\\#MatButtonToggleDefaultOptions) `MatButtonToggleDefaultOptions`\n\nRepresents the default options for the button toggle that can be configured\nusing the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `appearance: MatButtonToggleAppearance` | Default appearance to be used by button toggles. Can be overridden by explicitly<br>setting an appearance on a button toggle or group. |\n| `disabledInteractive: boolean` | Whether disabled toggle buttons should be interactive. |\n| `hideMultipleSelectionIndicator: boolean` | Whether icon indicators should be hidden for multiple-selection button toggle groups. |\n| `hideSingleSelectionIndicator: boolean` | Whether icon indicators should be hidden for single-selection button toggle groups. |\n\n### [link](https://material.angular.io/components/button-toggle/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/button-toggle/api\\#ToggleType) `ToggleType`\n\nDeprecated\n\n```docs-markdown-code\ntype ToggleType = 'checkbox' | 'radio';\n\n```\n\n#### [link](https://material.angular.io/components/button-toggle/api\\#MatButtonToggleAppearance) `MatButtonToggleAppearance`\n\nPossible appearance styles for the button toggle.\n\n```docs-markdown-code\ntype MatButtonToggleAppearance = 'legacy' | 'standard';\n\n```\n\n### [link](https://material.angular.io/components/button-toggle/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/button-toggle/api\\#MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS) `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS`\n\nInjection token that can be used to configure the\ndefault options for all button toggles within an app.\n\n```docs-markdown-code\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS: InjectionToken<MatButtonToggleDefaultOptions>;\n\n```\n\n#### [link](https://material.angular.io/components/button-toggle/api\\#MAT_BUTTON_TOGGLE_GROUP) `MAT_BUTTON_TOGGLE_GROUP`\n\nInjection token that can be used to reference instances of `MatButtonToggleGroup`.\nIt serves as alternative token to the actual `MatButtonToggleGroup` class which\ncould cause unnecessary retention of the class and its component metadata.\n\n```docs-markdown-code\nconst MAT_BUTTON_TOGGLE_GROUP: InjectionToken<MatButtonToggleGroup>;\n\n```\n\n## API reference for Angular Material button-toggle-testing\n\n`\n          import {MatButtonToggleHarness} from '@angular/material/button-toggle/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/button-toggle/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/button-toggle/api\\#MatButtonToggleHarness) `MatButtonToggleHarness`extends [ComponentHarness](https://material.angular.io/components/button-toggle/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard mat-button-toggle in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-button-toggle'` | The selector for the host element of a `MatButton` instance. |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the toggle. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>check |\n| --- |\n| Puts the button toggle in a checked state by toggling it if it's<br>currently unchecked, or doing nothing if it is already checked. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the toggle. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAppearance |\n| --- |\n| Gets the appearance that the button toggle is using. |\n| Returns |\n| --- |\n| `Promise<MatButtonToggleAppearance>` |  |\n\n| async<br> <br>getAriaLabel |\n| --- |\n| Gets a promise for the button toggle's aria-label. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getAriaLabelledby |\n| --- |\n| Gets a promise for the button toggles's aria-labelledby. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getName |\n| --- |\n| Gets a promise for the button toggle's name. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets a promise for the button toggle's text. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isChecked |\n| --- |\n| Gets a boolean promise indicating if the button toggle is checked. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Gets a boolean promise indicating if the button toggle is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the toggle is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>toggle |\n| --- |\n| Toggle the checked state of the buttons toggle. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>uncheck |\n| --- |\n| Puts the button toggle in an unchecked state by toggling it if it's<br>currently checked, or doing nothing if it's already unchecked. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatButtonToggleHarness` that meets<br>certain criteria. |\n| Parameters |\n| --- |\n| options<br> `ButtonToggleHarnessFilters = {}` | Options for filtering which button toggle instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatButtonToggleHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/button-toggle/api\\#MatButtonToggleGroupHarness) `MatButtonToggleGroupHarness`extends [ComponentHarness](https://material.angular.io/components/button-toggle/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard mat-button-toggle in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-button-toggle-group'` | The selector for the host element of a `MatButton` instance. |\n\n##### Methods\n\n| async<br> <br>getAppearance |\n| --- |\n| Gets the appearance that the group is using. |\n| Returns |\n| --- |\n| `Promise<MatButtonToggleAppearance>` |  |\n\n| async<br> <br>getToggles |\n| --- |\n| Gets the button toggles that are inside the group. |\n| Parameters |\n| --- |\n| filter<br> `ButtonToggleHarnessFilters = {}` | Optionally filters which toggles are included. |\n| Returns |\n| --- |\n| `Promise<MatButtonToggleHarness[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Gets whether the button toggle group is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isVertical |\n| --- |\n| Gets whether the button toggle group is laid out vertically. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatButtonToggleGroupHarness`<br>that meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `ButtonToggleGroupHarnessFilters = {}` | Options for filtering which button toggle instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatButtonToggleGroupHarness>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/button-toggle/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/button-toggle/api\\#ButtonToggleHarnessFilters) `ButtonToggleHarnessFilters`\n\nCriteria that can be used to filter a list of `MatButtonToggleHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `checked: boolean` | Only find instances that are checked. |\n| `disabled: boolean` | Only find instances which match the given disabled state. |\n| `name: string | RegExp` | Only find instances whose name matches the given value. |\n| `text: string | RegExp` | Only find instances whose text matches the given value. |\n\n#### [link](https://material.angular.io/components/button-toggle/api\\#ButtonToggleGroupHarnessFilters) `ButtonToggleGroupHarnessFilters`\n\nCriteria that can be used to filter a list of `MatButtonToggleGroupHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disabled: boolean` | Only find instances which match the given disabled state. |\n\nButton toggle\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard\n\nNo longer used. Will be removed in v11.0.0 or later.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-386f7d3a-fb4d-4e72-ba62-ad684c0f2d68.png"
  },
  "metadata": {
    "og:image:width": "1339",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "favicon": "https://material.angular.io/components/button-toggle/assets/img/favicon.ico?v=19.1.0",
    "theme-color": "#d7e3ff",
    "ogLocale": "en_US",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "author": "Angular Components Team",
    "ogSiteName": "Angular Material",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:title": "Angular Material",
    "og:image:height": "943",
    "title": "Button toggle | Angular Material",
    "ogTitle": "Angular Material",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "language": "en-US",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:card": "summary",
    "og:locale": "en_US",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:type": "image/png",
    "og:site_name": "Angular Material",
    "twitter:site": "@Angular",
    "viewport": "width=device-width, initial-scale=1",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:creator": "@Angular",
    "mobile-web-app-capable": "yes",
    "og:type": "website",
    "ogUrl": "https://material.angular.io/",
    "og:url": "https://material.angular.io/",
    "og:title": "Angular Material",
    "apple-mobile-web-app-capable": "yes",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "scrapeId": "e211f6a3-439c-42bb-8af1-2ed3b427d65f",
    "sourceURL": "https://material.angular.io/components/button-toggle/api",
    "url": "https://material.angular.io/components/button-toggle/api",
    "statusCode": 200
  }
}