{
  "scrapeId": "f5b53302-6e81-49d9-99f3-4b428f88570d",
  "sourceURL": "https://angular.dev/guide/templates/two-way-binding",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backTemplates\n  - [Overview](https://angular.dev/guide/templates)\n  - [Binding dynamic text, properties and attributes](https://angular.dev/guide/templates/binding)\n  - [Adding event listeners](https://angular.dev/guide/templates/event-listeners)\n  - [Two-way binding](https://angular.dev/guide/templates/two-way-binding)\n  - [Control flow](https://angular.dev/guide/templates/control-flow)\n  - [Pipes](https://angular.dev/guide/templates/pipes)\n  - [Slotting child content with ng-content](https://angular.dev/guide/templates/ng-content)\n  - [Create template fragments with ng-template](https://angular.dev/guide/templates/ng-template)\n  - [Grouping elements with ng-container](https://angular.dev/guide/templates/ng-container)\n  - [Variables in templates](https://angular.dev/guide/templates/variables)\n  - [Deferred loading with @defer](https://angular.dev/guide/templates/defer)\n  - [Expression syntax](https://angular.dev/guide/templates/expression-syntax)\n  - [Whitespace in templates](https://angular.dev/guide/templates/whitespace)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n**Two way binding** is a shorthand to simultaneously bind a value into an element, while also giving that element the ability to propagate changes back through this binding.\n\n## [Syntax](https://angular.dev/guide/templates/two-way-binding\\#syntax)\n\nThe syntax for two-way binding is a combination of square brackets and parentheses, `[()]`. It combines the syntax from property binding, `[]`, and the syntax from event binding, `()`. The Angular community informally refers to this syntax as \"banana-in-a-box\".\n\n## [Two-way binding with form controls](https://angular.dev/guide/templates/two-way-binding\\#two-way-binding-with-form-controls)\n\nDevelopers commonly use two-way binding to keep component data in sync with a form control as a user interacts with the control. For example, when a user fills out a text input, it should update the state in the component.\n\nThe following example dynamically updates the `firstName` attribute on the page:\n\n```\n      import { Component } from '@angular/core';import { FormsModule } from '@angular/forms';@Component({  imports: [FormsModule],  template: `    <main>      <h2>Hello {{ firstName }}!</h2>      <input type=\"text\" [(ngModel)]=\"firstName\" />    </main>  `})export class AppComponent {  firstName = 'Ada';}\n\n```\n\ncheck\n\nTo use two-way binding with native form controls, you need to:\n\n1. Import the `FormsModule` from `@angular/forms`\n2. Use the `ngModel` directive with the two-way binding syntax (e.g., `[(ngModel)]`)\n3. Assign it the state that you want it to update (e.g., `firstName`)\n\nOnce that is set up, Angular will ensure that any updates in the text input will reflect correctly inside of the component state!\n\nLearn more about [`NgModel`](https://angular.dev/guide/templates/guide/directives#displaying-and-updating-properties-with-ngmodel) in the official docs.\n\n## [Two-way binding between components](https://angular.dev/guide/templates/two-way-binding\\#two-way-binding-between-components)\n\nLeveraging two-way binding between a parent and child component requires more configuration compared to form elements.\n\nHere is an example where the `AppComponent` is responsible for setting the initial count state, but the logic for updating and rendering the UI for the counter primarily resides inside its child `CounterComponent`.\n\n```\n      // ./app.component.tsimport { Component } from '@angular/core';import { CounterComponent } from './counter/counter.component';@Component({  selector: 'app-root',  imports: [CounterComponent],  template: `    <main>      <h1>Counter: {{ initialCount }}</h1>      <app-counter [(count)]=\"initialCount\"></app-counter>    </main>  `,})export class AppComponent {  initialCount = 18;}\n\n```\n\ncheck\n\n```\n      // './counter/counter.component.ts';import { Component, model } from '@angular/core';@Component({  selector: 'app-counter',  template: `    <button (click)=\"updateCount(-1)\">-</button>    <span>{{ count() }}</span>    <button (click)=\"updateCount(+1)\">+</button>  `,})export class CounterComponent {  count = model<number>(0);  updateCount(amount: number): void {    this.count.update(currentCount => currentCount + amount);  }}\n\n```\n\ncheck\n\n### [Enabling two-way binding between components](https://angular.dev/guide/templates/two-way-binding\\#enabling-two-way-binding-between-components)\n\nIf we break down the example above to its core, each two-way binding for components requires the following:\n\nThe child component must contain a `model` property.\n\nHere is a simplified example:\n\n```\n      // './counter/counter.component.ts';import { Component, model } from '@angular/core';@Component({ // Omitted for brevity })export class CounterComponent {  count = model<number>(0);  updateCount(amount: number): void {    this.count.update(currentCount => currentCount + amount);  }}\n\n```\n\ncheck\n\nThe parent component must:\n\n1. Wrap the `model` property name in the two-way binding syntax.\n2. Assign a property or a signal to the `model` property.\n\nHere is a simplified example:\n\n```\n      // ./app.component.tsimport { Component } from '@angular/core';import { CounterComponent } from './counter/counter.component';@Component({  selector: 'app-root',  imports: [CounterComponent],  template: `    <main>      <app-counter [(count)]=\"initialCount\"></app-counter>    </main>  `,})export class AppComponent {  initialCount = 18;}\n\n```\n\ncheck",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-e53a5ddd-a484-4baa-a6cb-7ebb337bf044.png"
  },
  "metadata": {
    "language": "en",
    "title": "Two-way binding â€¢ Angular",
    "viewport": "width=device-width, initial-scale=1",
    "description": "The web development framework for building modern apps.",
    "twitter:description": "The web development framework for building modern apps.",
    "twitter:card": "summary_large_image",
    "og:title": "Angular",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "theme-color": "#ffffff",
    "application-name": "Angular",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "og:url": "https://angular.dev/",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogDescription": "The web development framework for building modern apps.",
    "og:description": "The web development framework for building modern apps.",
    "twitter:title": "Angular",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "apple-mobile-web-app-title": "Angular",
    "ogUrl": "https://angular.dev/",
    "msapplication-TileColor": "#e90464",
    "twitter:url": "https://angular.dev/",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "og:type": "website",
    "scrapeId": "f5b53302-6e81-49d9-99f3-4b428f88570d",
    "sourceURL": "https://angular.dev/guide/templates/two-way-binding",
    "url": "https://angular.dev/guide/templates/two-way-binding",
    "statusCode": 200
  }
}