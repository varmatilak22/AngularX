{
  "scrapeId": "69b2e8ef-16cc-4a94-a6a2-fadc75eaf35a",
  "sourceURL": "https://material.angular.io/components/input/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for input\n\n`matInput` is a directive that allows native `<input>` and `<textarea>` elements to work with\n[`<mat-form-field>`](https://material.angular.io/components/form-field/overview).\n\nBasic Inputs\n\nlinkcodeopen\\_in\\_new\n\nFavorite food\n\nLeave a comment\n\n### [link](https://material.angular.io/components/input/overview\\#input-and-textarea-attributes) `<input>` and `<textarea>` attributes\n\nAll of the attributes that can be used with `<input>` and `<textarea>` elements can be used\non elements inside `<mat-form-field>` as well. This includes Angular directives such as `ngModel`\nand `formControl`.\n\nThe only limitation is that the `type` attribute can only be one of the values supported by\n`matNativeControl`.\n\n### [link](https://material.angular.io/components/input/overview\\#supported-input-types)  Supported `<input>` types\n\nThe following [input types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) can\nbe used with `matNativeControl`:\n\n- color\n- date\n- datetime-local\n- email\n- month\n- number\n- password\n- search\n- tel\n- text\n- time\n- url\n- week\n\n### [link](https://material.angular.io/components/input/overview\\#form-field-features)  Form field features\n\nThere are a number of `<mat-form-field>` features that can be used with any `<input matNativeControl>` or\n`<textarea matNativeControl>`. These include error messages, hint text, prefix & suffix, and theming. For\nadditional information about these features, see the\n[form field documentation](https://material.angular.io/components/form-field/overview).\n\n### [link](https://material.angular.io/components/input/overview\\#placeholder)  Placeholder\n\nThe placeholder is text shown when the `<mat-form-field>` label is floating but the input is empty.\nIt is used to give the user an additional hint about what they should type in the input. The\nplaceholder can be specified by setting the `placeholder` attribute on the `<input>` or `<textarea>`\nelement. In some cases that `<mat-form-field>` may use the placeholder as the label (see the\n[form field label documentation](https://material.angular.io/components/form-field/overview#floating-label)).\n\n### [link](https://material.angular.io/components/input/overview\\#changing-when-error-messages-are-shown)  Changing when error messages are shown\n\nThe `<mat-form-field>` allows you to\n[associate error messages](https://material.angular.io/components/form-field/overview#error-messages)\nwith your `matNativeControl`. By default, these error messages are shown when the control is invalid and\nthe user has interacted with (touched) the element or the parent form has been submitted. If\nyou wish to override this behavior (e.g. to show the error as soon as the invalid control is dirty\nor when a parent form group is invalid), you can use the `errorStateMatcher` property of the\n`matNativeControl`. The property takes an instance of an `ErrorStateMatcher` object. An `ErrorStateMatcher`\nmust implement a single method `isErrorState` which takes the `FormControl` for this `matNativeControl` as\nwell as the parent form and returns a boolean indicating whether errors should be shown. ( `true`\nindicating that they should be shown, and `false` indicating that they should not.)\n\nInput with a custom ErrorStateMatcher\n\nlinkcodeopen\\_in\\_new\n\nEmail\n\nErrors appear instantly!\n\nA global error state matcher can be specified by setting the `ErrorStateMatcher` provider. This\napplies to all inputs. For convenience, `ShowOnDirtyErrorStateMatcher` is available in order to\nglobally cause input errors to show when the input is dirty and invalid.\n\n```ts\n@NgModule({\n  providers: [\\\n    {provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher}\\\n  ]\n})\n\n```\n\n### [link](https://material.angular.io/components/input/overview\\#auto-resizing-textarea-elements)  Auto-resizing `<textarea>` elements\n\n`<textarea>` elements can be made to automatically resize by using the\n[`cdkTextareaAutosize` directive](https://material.angular.io/cdk/text-field/overview#automatically-resizing-a-textarea)\navailable in the CDK.\n\n### [link](https://material.angular.io/components/input/overview\\#responding-to-changes-in-the-autofill-state-of-an-input)  Responding to changes in the autofill state of an `<input>`\n\nThe CDK provides\n[utilities](https://material.angular.io/cdk/text-field/overview#monitoring-the-autofill-state-of-an-input)\nfor detecting when an input becomes autofilled and changing the appearance of the autofilled state.\n\n### [link](https://material.angular.io/components/input/overview\\#accessibility)  Accessibility\n\nThe `matNativeControl` directive works with native `<input>` to provide an accessible experience.\n\n#### [link](https://material.angular.io/components/input/overview\\#aria-attributes)  Aria attributes\n\nIf the containing `<mat-form-field>` has a label it will automatically be used as the `aria-label`\nfor the `<input>`. However, if there's no label specified in the form field, `aria-label`,\n`aria-labelledby` or `<label for=...>` should be added.\n\n#### [link](https://material.angular.io/components/input/overview\\#errors-and-hints)  Errors and hints\n\nAny `mat-error` and `mat-hint` are automatically added to the input's `aria-describedby` list, and\n`aria-invalid` is automatically updated based on the input's validity state.\n\nWhen conveying an error, be sure to not rely solely on color. In the message itself, you can use an\nicon or text such as \"Error:\" to indicate the message is an error message.\n\n### [link](https://material.angular.io/components/input/overview\\#troubleshooting)  Troubleshooting\n\n#### [link](https://material.angular.io/components/input/overview\\#error-input-type--isnt-supported-by-matinput)  Error: Input type \"...\" isn't supported by matInput\n\nThis error is thrown when you attempt to set an input's `type` property to a value that isn't\nsupported by the `matInput` directive. If you need to use an unsupported input type with\n`<mat-form-field>` consider writing a\n[custom form field control](https://material.angular.io/guide/creating-a-custom-form-field-control)\nfor it.\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Basic Inputs example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit Input with a custom ErrorStateMatcher example in StackBlitz",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-22b00b5f-0e9f-4901-b4e5-fd6cbd65b87a.png"
  },
  "metadata": {
    "og:image:width": "1339",
    "ogUrl": "https://material.angular.io/",
    "mobile-web-app-capable": "yes",
    "apple-mobile-web-app-capable": "yes",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "twitter:title": "Angular Material",
    "ogSiteName": "Angular Material",
    "twitter:site": "@Angular",
    "og:image:height": "943",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "twitter:creator": "@Angular",
    "favicon": "https://material.angular.io/components/input/assets/img/favicon.ico?v=19.1.0",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:type": "image/png",
    "og:locale": "en_US",
    "og:url": "https://material.angular.io/",
    "og:type": "website",
    "viewport": "width=device-width, initial-scale=1",
    "og:title": "Angular Material",
    "ogTitle": "Angular Material",
    "title": "Input | Angular Material",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:site_name": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "ogLocale": "en_US",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:card": "summary",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "theme-color": "#d7e3ff",
    "language": "en-US",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "author": "Angular Components Team",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "scrapeId": "69b2e8ef-16cc-4a94-a6a2-fadc75eaf35a",
    "sourceURL": "https://material.angular.io/components/input/overview",
    "url": "https://material.angular.io/components/input/overview",
    "statusCode": 200
  }
}