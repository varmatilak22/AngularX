{
  "scrapeId": "b421d316-aacc-4333-822d-2454f922df5a",
  "sourceURL": "https://angular.dev/guide/components/dom-apis",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backComponents\n  - [Anatomy of components](https://angular.dev/guide/components)\n  - [Selectors](https://angular.dev/guide/components/selectors)\n  - [Styling](https://angular.dev/guide/components/styling)\n  - [Accepting data with input properties](https://angular.dev/guide/components/inputs)\n  - [Custom events with outputs](https://angular.dev/guide/components/outputs)\n  - [Content projection with ng-content](https://angular.dev/guide/components/content-projection)\n  - [Host elements](https://angular.dev/guide/components/host-elements)\n  - [Lifecycle](https://angular.dev/guide/components/lifecycle)\n  - [Referencing component children with queries](https://angular.dev/guide/components/queries)\n  - [Using DOM APIs](https://angular.dev/guide/components/dom-apis)\n  - [Inheritance](https://angular.dev/guide/components/inheritance)\n  - [Programmatically rendering components](https://angular.dev/guide/components/programmatic-rendering)\n  - [Advanced configuration](https://angular.dev/guide/components/advanced-configuration)\n  - [Custom Elements](https://angular.dev/guide/elements)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n**TIP:** This guide assumes you've already read the [Essentials Guide](https://angular.dev/guide/components/essentials). Read that first if you're new to Angular.\n\nAngular handles most DOM creation, updates, and removals for you. However, you might rarely need to\ndirectly interact with a component's DOM. Components can inject ElementRef to get a reference to the\ncomponent's host element:\n\n```\n      @Component({...})export class ProfilePhoto {  constructor() {    const elementRef = inject(ElementRef);    console.log(elementRef.nativeElement);  }}\n\n```\n\ncheck\n\nThe `nativeElement` property references the\nhost [Element](https://developer.mozilla.org/docs/Web/API/Element) instance.\n\nYou can use Angular's `afterRender` and `afterNextRender` functions to register a **render**\n**callback** that runs when Angular has finished rendering the page.\n\n```\n      @Component({...})export class ProfilePhoto {  constructor() {    const elementRef = inject(ElementRef);    afterRender(() => {      // Focus the first input element in this component.      elementRef.nativeElement.querySelector('input')?.focus();    });  }}\n\n```\n\ncheck\n\n`afterRender` and `afterNextRender` must be called in an _injection context_, typically a\ncomponent's constructor.\n\n**Avoid direct DOM manipulation whenever possible.** Always prefer expressing your DOM's structure\nin component templates and updating that DOM with bindings.\n\n**Render callbacks never run during server-side rendering or build-time pre-rendering.**\n\n**Never directly manipulate the DOM inside of other Angular lifecycle hooks**. Angular does not\nguarantee that a component's DOM is fully rendered at any point other than in render callbacks.\nFurther, reading or modifying the DOM during other lifecycle hooks can negatively impact page\nperformance by\ncausing [layout thrashing](https://web.dev/avoid-large-complex-layouts-and-layout-thrashing).\n\n## [Using a component's renderer](https://angular.dev/guide/components/dom-apis\\#using-a-components-renderer)\n\nComponents can inject an instance of `Renderer2` to perform certain DOM manipulations that are tied\nto other Angular features.\n\nAny DOM elements created by a component's `Renderer2` participate in that\ncomponent's [style encapsulation](https://angular.dev/guide/components/guide/components/styling#style-scoping).\n\nCertain `Renderer2` APIs also tie into Angular's animation system. You can use the `setProperty`\nmethod to update synthetic animation properties and the `listen` method to add event listeners for\nsynthetic animation events. See the [Animations](https://angular.dev/guide/components/guide/animations) guide for details.\n\nAside from these two narrow use-cases, there is no difference between using `Renderer2` and native\nDOM APIs. `Renderer2` APIs do not support DOM manipulation in server-side rendering or build-time\npre-rendering contexts.\n\n## [When to use DOM APIs](https://angular.dev/guide/components/dom-apis\\#when-to-use-dom-apis)\n\nWhile Angular handles most rendering concerns, some behaviors may still require using DOM APIs. Some\ncommon use cases include:\n\n- Managing element focus\n- Measuring element geometry, such as with `getBoundingClientRect`\n- Reading an element's text content\n- Setting up native observers such\nas [`MutationObserver`](https://developer.mozilla.org/docs/Web/API/MutationObserver),\n[`ResizeObserver`](https://developer.mozilla.org/docs/Web/API/ResizeObserver), or\n[`IntersectionObserver`](https://developer.mozilla.org/docs/Web/API/Intersection_Observer_API).\n\nAvoid inserting, removing, and modifying DOM elements. In particular, **never directly set an**\n**element's `innerHTML` property**, which can make your application vulnerable\nto [cross-site scripting (XSS) exploits](https://developer.mozilla.org/docs/Glossary/Cross-site_scripting).\nAngular's template bindings, including bindings for `innerHTML`, include safeguards that help\nprotect against XSS attacks. See the [Security guide](https://angular.dev/guide/components/best-practices/security) for details.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-4a97424e-b2f3-4fe7-b6b2-579fcd5da0b6.png"
  },
  "metadata": {
    "og:url": "https://angular.dev/",
    "ogDescription": "The web development framework for building modern apps.",
    "og:description": "The web development framework for building modern apps.",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:url": "https://angular.dev/",
    "twitter:title": "Angular",
    "viewport": "width=device-width, initial-scale=1",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "ogUrl": "https://angular.dev/",
    "ogTitle": "Angular",
    "description": "The web development framework for building modern apps.",
    "og:type": "website",
    "twitter:description": "The web development framework for building modern apps.",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "theme-color": "#ffffff",
    "application-name": "Angular",
    "twitter:card": "summary_large_image",
    "apple-mobile-web-app-title": "Angular",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "title": "Using DOM APIs â€¢ Angular",
    "og:title": "Angular",
    "language": "en",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "msapplication-TileColor": "#e90464",
    "scrapeId": "b421d316-aacc-4333-822d-2454f922df5a",
    "sourceURL": "https://angular.dev/guide/components/dom-apis",
    "url": "https://angular.dev/guide/components/dom-apis",
    "statusCode": 200
  }
}