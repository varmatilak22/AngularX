{
  "scrapeId": "e16938d3-0480-4db0-906d-5c323d71b572",
  "sourceURL": "https://material.angular.io/cdk/portal/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\n## Overview for portal\n\nThe `portals` package provides a flexible system for rendering dynamic content into an application.\n\n### [link](https://material.angular.io/cdk/portal/overview\\#portals)  Portals\n\nA `Portal` is a piece of UI that can be dynamically rendered to an open slot on the page.\n\nThe \"piece of UI\" can be either a `Component`, a `TemplateRef` or a DOM element and the \"open slot\" is\na `PortalOutlet`.\n\nPortals and PortalOutlets are low-level building blocks that other concepts, such as overlays, are\nbuilt upon.\n\nPortal overview\n\nlinkcodeopen\\_in\\_new\n\n## The portal outlet is below:\n\nRender component portalRender template portalRender DOM portal\n\nHello, this is a DOM portal\n\n##### [link](https://material.angular.io/cdk/portal/overview\\#portalt) `Portal<T>`\n\n| Method | Description |\n| --- | --- |\n| `attach(PortalOutlet): T` | Attaches the portal to a host. |\n| `detach(): void` | Detaches the portal from its host. |\n| `isAttached: boolean` | Whether the portal is attached. |\n\n##### [link](https://material.angular.io/cdk/portal/overview\\#portaloutlet) `PortalOutlet`\n\n| Method | Description |\n| --- | --- |\n| `attach(Portal): any` | Attaches a portal to the host. |\n| `detach(): any` | Detaches the portal from the host. |\n| `dispose(): void` | Permanently dispose the host. |\n| `hasAttached: boolean` | Whether a portal is attached to the host. |\n\n#### [link](https://material.angular.io/cdk/portal/overview\\#portals-in-practice)  Portals in practice\n\n##### [link](https://material.angular.io/cdk/portal/overview\\#cdkportal) `CdkPortal`\n\nUsed to get a portal from an `<ng-template>`. `CdkPortal` _is_ a `Portal`.\n\nUsage:\n\n```html\n<ng-template cdkPortal>\n  <p>The content of this template is captured by the portal.</p>\n</ng-template>\n\n<!-- OR -->\n\n<!-- This result here is identical to the syntax above -->\n<p *cdkPortal>\n  The content of this template is captured by the portal.\n</p>\n\n```\n\nA component can use `@ViewChild` or `@ViewChildren` to get a reference to a\n`CdkPortal`.\n\n##### [link](https://material.angular.io/cdk/portal/overview\\#componentportal) `ComponentPortal`\n\nUsed to create a portal from a component type.\n\nUsage:\n\n```ts\nngAfterViewInit() {\n  this.userSettingsPortal = new ComponentPortal(UserSettingsComponent);\n}\n\n```\n\n##### [link](https://material.angular.io/cdk/portal/overview\\#templateportal) `TemplatePortal`\n\nYou can create a `TemplatePortal` from an `<ng-template>`. `TemplatePortal` allows you to take Angular content within one template and render it somewhere else.\n\nUsage:\n\n```html\n<ng-template #templatePortalContent>Some content here</ng-template>\n\n```\n\n```ts\n@ViewChild('templatePortalContent') templatePortalContent: TemplateRef<unknown>;\n\nngAfterViewInit() {\n  this.templatePortal = new TemplatePortal(\n    this.templatePortalContent,\n    this._viewContainerRef\n  );\n}\n\n```\n\n##### [link](https://material.angular.io/cdk/portal/overview\\#domportal) `DomPortal`\n\nYou can create a `DomPortal` from any native DOM element. `DomPortal` allows you to take any arbitrary DOM content and render it somewhere else. `DomPortal` moves content _as is_, so elements with Angular features like bindings or directives may no longer update if moved via `DomPortal`.\n\nUsage:\n\n```html\n<div #domPortalContent>Some content here</div>\n\n```\n\n```ts\n@ViewChild('domPortalContent') domPortalContent: ElementRef<HTMLElement>;\nngAfterViewInit() {\n  this.domPortal = new DomPortal(this.domPortalContent);\n}\n\n```\n\n##### [link](https://material.angular.io/cdk/portal/overview\\#cdkportaloutlet) `CdkPortalOutlet`\n\nUsed to add a portal outlet to a template. `CdkPortalOutlet` _is_ a `PortalOutlet`.\n\nUsage:\n\n```html\n<!-- Attaches the `userSettingsPortal` from the previous example. -->\n<ng-template [cdkPortalOutlet]=\"userSettingsPortal\"></ng-template>\n\n```\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Portal overview example in StackBlitz\n\nCopy link to example\n\nView code",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-056511a3-8965-470d-9775-0632d8ccfde2.png"
  },
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "twitter:creator": "@Angular",
    "og:image:width": "1339",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "favicon": "https://material.angular.io/cdk/portal/assets/img/favicon.ico?v=19.1.0",
    "title": "Portal | Angular Material",
    "twitter:card": "summary",
    "mobile-web-app-capable": "yes",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "apple-mobile-web-app-capable": "yes",
    "ogSiteName": "Angular Material",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:title": "Angular Material",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:site": "@Angular",
    "og:type": "website",
    "og:image:type": "image/png",
    "og:image:height": "943",
    "twitter:title": "Angular Material",
    "theme-color": "#d7e3ff",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "ogTitle": "Angular Material",
    "language": "en-US",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "ogUrl": "https://material.angular.io/",
    "author": "Angular Components Team",
    "og:site_name": "Angular Material",
    "og:locale": "en_US",
    "ogLocale": "en_US",
    "og:url": "https://material.angular.io/",
    "scrapeId": "e16938d3-0480-4db0-906d-5c323d71b572",
    "sourceURL": "https://material.angular.io/cdk/portal/overview",
    "url": "https://material.angular.io/cdk/portal/overview",
    "statusCode": 200
  }
}