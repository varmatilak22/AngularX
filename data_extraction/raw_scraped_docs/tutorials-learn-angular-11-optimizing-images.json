{
  "scrapeId": "7cdd8958-1068-41a7-80cf-129166f811b2",
  "sourceURL": "https://angular.dev/tutorials/learn-angular/11-optimizing-images",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nunfold\\_more\nLearn AngularOptimizing images\nReveal Answer\n\n[chevron\\_left](https://angular.dev/tutorials/learn-angular/10-deferrable-views) [chevron\\_right](https://angular.dev/tutorials/learn-angular/12-enable-routing)\n\nReveal Answer\n\nunfold\\_more\nLearn AngularOptimizing images\nReveal Answer\n\n[chevron\\_left](https://angular.dev/tutorials/learn-angular/10-deferrable-views) [chevron\\_right](https://angular.dev/tutorials/learn-angular/12-enable-routing)\n\nReveal Answer\n\nImages are a big part of many applications, and can be a major contributor to application performance problems, including low [Core Web Vitals](https://web.dev/explore/learn-core-web-vitals) scores.\n\nImage optimization can be a complex topic, but Angular handles most of it for you, with the `NgOptimizedImage` directive.\n\nNote: Learn more about [image optimization with NgOptimizedImage in the in-depth guide](https://angular.dev/guide/image-optimization).\n\nIn this activity, you'll learn how to use `NgOptimizedImage` to ensure your images are loaded efficiently.\n\n* * *\n\n1. ### [Import the NgOptimizedImage directive](https://angular.dev/tutorials/learn-angular/11-optimizing-images\\#import-the-ngoptimizedimage-directive)\n\n\nIn order to leverage the `NgOptimizedImage` directive, first import it from the `@angular/common` library and add it to the component `imports` array.\n\n\n\n```\n         import { NgOptimizedImage } from '@angular/common';@Component({  imports: [NgOptimizedImage],  ...})\n\n```\n\ncheck\n\n2. ### [Update the src attribute to be ngSrc](https://angular.dev/tutorials/learn-angular/11-optimizing-images\\#update-the-src-attribute-to-be-ngsrc)\n\n\nTo enable the `NgOptimizedImage` directive, swap out the `src` attribute for `ngSrc`. This applies for both static image sources (i.e., `src`) and dynamic image sources (i.e., `[src]`).\n\n\n\n```\n         import { NgOptimizedImage } from '@angular/common';@Component({template: `     ...    <li>      Static Image:      <img ngSrc=\"/assets/logo.svg\" alt=\"Angular logo\" width=\"32\" height=\"32\" />    </li>    <li>      Dynamic Image:      <img [ngSrc]=\"logoUrl\" [alt]=\"logoAlt\" width=\"32\" height=\"32\" />    </li>    ...  `,imports: [NgOptimizedImage],})\n\n```\n\ncheck\n\n3. ### [Add width and height attributes](https://angular.dev/tutorials/learn-angular/11-optimizing-images\\#add-width-and-height-attributes)\n\n\nNote that in the above code example, each image has both `width` and `height` attributes. In order to prevent [layout shift](https://web.dev/articles/cls), the `NgOptimizedImage` directive requires both size attributes on each image.\n\nIn situations where you can't or don't want to specify a static `height` and `width` for images, you can use [the `fill` attribute](https://web.dev/articles/cls) to tell the image to act like a \"background image\", filling its containing element:\n\n\n\n```\n         <div class=\"image-container\"> //Container div has 'position: \"relative\"'  <img ngSrc=\"www.example.com/image.png\" fill /></div>\n\n```\n\ncheck\n\nNOTE: For the `fill` image to render properly, its parent element must be styled with `position: \"relative\"`, `position: \"fixed\"`, or `position: \"absolute\"`.\n\n4. ### [Prioritize important images](https://angular.dev/tutorials/learn-angular/11-optimizing-images\\#prioritize-important-images)\n\n\nOne of the most important optimizations for loading performance is to prioritize any image which might be the [\"LCP element\"](https://web.dev/articles/optimize-lcp), which is the largest on-screen graphical element when the page loads. To optimize your loading times, make sure to add the `priority` attribute to your \"hero image\" or any other images that you think could be an LCP element.\n\n\n\n```\n         <img ngSrc=\"www.example.com/image.png\" height=\"600\" width=\"800\" priority />\n\n```\n\ncheck\n\n5. ### [Optional: Use an image loader](https://angular.dev/tutorials/learn-angular/11-optimizing-images\\#optional-use-an-image-loader)\n\n\n`NgOptimizedImage` allows you to specify an [image loader](https://angular.dev/guide/image-optimization#configuring-an-image-loader-for-ngoptimizedimage), which tells the directive how to format URLs for your images. Using a loader allows you to define your images with short, relative URLs:\n\n\n\n```\n         providers: [  provideImgixLoader('https://my.base.url/'),]\n\n```\n\ncheck\n\nFinal URL will be ' [https://my.base.url/image.png](https://my.base.url/image.png)'\n\n\n\n```\n         <img ngSrc=\"image.png\" height=\"600\" width=\"800\" />\n\n```\n\ncheck\n\nImage loaders are for more than just convenience--they allow you to use the full capabilities of `NgOptimizedImage`. Learn more about these optimizations and the built-in loaders for popular CDNs [here](https://angular.dev/guide/image-optimization#configuring-an-image-loader-for-ngoptimizedimage).\n\n\nBy adding this directive to your workflow, your images are now loading using best practices with the help of Angular ðŸŽ‰\n\nIf you would like to learn more, check out the [documentation for `NgOptimizedImage`](https://angular.dev/guide/image-optimization). Keep up the great work and let's learn about routing next.\n\napp/user.component.ts editdelete\n\nadd\n\nlaunchdownload\n\n99\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\nâ€º\n\nâŒ„\n\nâŒ„\n\nâŒ„\n\nimport{Component}from'@angular/core';\n\n@Component({\n\nselector:'app-user',\n\ntemplate:\\`\n\n<p>Username: {{username}}</p>\n\n<p>Preferred Framework:</p>\n\n<ul>\n\n<li>\n\nStatic Image:\n\n<imgsrc=\"/assets/logo.svg\"alt=\"Angular logo\"/>\n\n</li>\n\n<li>\n\nDynamic Image:\n\n<img\\[src\\]=\"logoUrl\"\\[alt\\]=\"logoAlt\"/>\n\n</li>\n\n</ul>\n\n\\`,\n\nimports:\\[\\],\n\n})\n\nexportclassUserComponent{\n\nlogoUrl='/assets/logo.svg';\n\nlogoAlt='Angular logo';\n\nusername='youngTech';\n\n}\n\nPreview\n\nBooting\n\nConsole\n\nTerminal\n\nrefresh\n\nStackBlitz",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-b0f02dd1-ec52-4af1-9250-d7878f1b1e2b.png"
  },
  "metadata": {
    "twitter:title": "Angular",
    "apple-mobile-web-app-title": "Angular",
    "ogTitle": "Angular",
    "viewport": "width=device-width, initial-scale=1",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:card": "summary_large_image",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "og:url": "https://angular.dev/",
    "ogUrl": "https://angular.dev/",
    "language": "en",
    "msapplication-TileColor": "#e90464",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "description": "The web development framework for building modern apps.",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "og:title": "Angular",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "og:description": "The web development framework for building modern apps.",
    "twitter:description": "The web development framework for building modern apps.",
    "og:type": "website",
    "theme-color": "#ffffff",
    "ogDescription": "The web development framework for building modern apps.",
    "application-name": "Angular",
    "title": "Optimizing images â€¢ Angular",
    "twitter:url": "https://angular.dev/",
    "scrapeId": "7cdd8958-1068-41a7-80cf-129166f811b2",
    "sourceURL": "https://angular.dev/tutorials/learn-angular/11-optimizing-images",
    "url": "https://angular.dev/tutorials/learn-angular/11-optimizing-images",
    "statusCode": 200
  }
}