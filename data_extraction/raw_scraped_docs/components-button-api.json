{
  "scrapeId": "e0e57aba-0288-4df8-8b80-dc399710274b",
  "sourceURL": "https://material.angular.io/components/button/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for button\n\n## API reference for Angular Material button\n\n`\n          import {MatButtonModule} from '@angular/material/button';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/button/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/button/api\\#MatButton) `MatButton`\n\nMaterial Design button component. Users interact with a button to perform an action.\nSee [https://material.io/components/buttons](https://material.io/components/buttons)\n\nThe `MatButton` class applies to native button elements and captures the appearances for\n\"text button\", \"outlined button\", and \"contained button\" per the Material Design\nspecification. `MatButton` additionally captures an additional \"flat\" appearance, which matches\n\"contained\" but without elevation.\n\nSelector: button\\[mat-button\\]button\\[mat-raised-button\\]button\\[mat-flat-button\\]button\\[mat-stroked-button\\]\n\nExported as:matButton\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute, alias: 'aria-disabled' })<br> <br>`ariaDisabled: boolean | undefined` | `aria-disabled` value of the button. |\n| @Input()<br>`color: string | null` | Theme color of the button. This API is supported in M2 themes only, it has<br>no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/button/styling](https://material.angular.io/components/button/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the ripple effect is disabled or not. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the button is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Natively disabled buttons prevent focus and any pointer events from reaching the button.<br>In some scenarios this might not be desirable, because it can prevent users from finding out<br>why the button is disabled (e.g. via tooltip). This is also useful for buttons that may<br>become disabled when activated, which would cause focus to be transferred to the document<br>body instead of remaining on the button.<br>Enabling this input will change the button so that it is styled to be disabled and will be<br>marked as `aria-disabled`, but it will allow the button to receive events and focus.<br>Note that by enabling this, you need to set the `tabindex` yourself if the button isn't<br>meant to be tabbable and you have to prevent the button action (e.g. form submissions). |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the button. |\n| Parameters |\n| --- |\n| origin<br> `FocusOrigin = 'program'` |  |\n| options?<br> `FocusOptions` |  |\n\n#### [link](https://material.angular.io/components/button/api\\#MatAnchor) `MatAnchor`\n\nMaterial Design button component for anchor elements. Anchor elements are used to provide\nlinks for the user to navigate across different routes or pages.\nSee [https://material.io/components/buttons](https://material.io/components/buttons)\n\nThe `MatAnchor` class applies to native anchor elements and captures the appearances for\n\"text button\", \"outlined button\", and \"contained button\" per the Material Design\nspecification. `MatAnchor` additionally captures an additional \"flat\" appearance, which matches\n\"contained\" but without elevation.\n\nSelector:a\\[mat-button\\]a\\[mat-raised-button\\]a\\[mat-flat-button\\]a\\[mat-stroked-button\\]\n\nExported as:matButton, matAnchor\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute, alias: 'aria-disabled' })<br> <br>`ariaDisabled: boolean | undefined` | `aria-disabled` value of the button. |\n| @Input()<br>`color: string | null` | Theme color of the button. This API is supported in M2 themes only, it has<br>no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/button/styling](https://material.angular.io/components/button/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the ripple effect is disabled or not. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the button is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Natively disabled buttons prevent focus and any pointer events from reaching the button.<br>In some scenarios this might not be desirable, because it can prevent users from finding out<br>why the button is disabled (e.g. via tooltip). This is also useful for buttons that may<br>become disabled when activated, which would cause focus to be transferred to the document<br>body instead of remaining on the button.<br>Enabling this input will change the button so that it is styled to be disabled and will be<br>marked as `aria-disabled`, but it will allow the button to receive events and focus.<br>Note that by enabling this, you need to set the `tabindex` yourself if the button isn't<br>meant to be tabbable and you have to prevent the button action (e.g. form submissions). |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the button. |\n| Parameters |\n| --- |\n| origin<br> `FocusOrigin = 'program'` |  |\n| options?<br> `FocusOptions` |  |\n\n#### [link](https://material.angular.io/components/button/api\\#MatFabButton) `MatFabButton`\n\nMaterial Design floating action button (FAB) component. These buttons represent the primary\nor most common action for users to interact with.\nSee [https://material.io/components/buttons-floating-action-button/](https://material.io/components/buttons-floating-action-button/)\n\nThe `MatFabButton` class has two appearances: normal and extended.\n\nSelector:button\\[mat-fab\\]\n\nExported as:matButton\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute, alias: 'aria-disabled' })<br> <br>`ariaDisabled: boolean | undefined` | `aria-disabled` value of the button. |\n| @Input()<br>`color: string | null` | Theme color of the button. This API is supported in M2 themes only, it has<br>no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/button/styling](https://material.angular.io/components/button/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the ripple effect is disabled or not. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the button is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Natively disabled buttons prevent focus and any pointer events from reaching the button.<br>In some scenarios this might not be desirable, because it can prevent users from finding out<br>why the button is disabled (e.g. via tooltip). This is also useful for buttons that may<br>become disabled when activated, which would cause focus to be transferred to the document<br>body instead of remaining on the button.<br>Enabling this input will change the button so that it is styled to be disabled and will be<br>marked as `aria-disabled`, but it will allow the button to receive events and focus.<br>Note that by enabling this, you need to set the `tabindex` yourself if the button isn't<br>meant to be tabbable and you have to prevent the button action (e.g. form submissions). |\n| @Input({ transform: booleanAttribute })<br> <br>`extended: boolean` |  |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the button. |\n| Parameters |\n| --- |\n| origin<br> `FocusOrigin = 'program'` |  |\n| options?<br> `FocusOptions` |  |\n\n#### [link](https://material.angular.io/components/button/api\\#MatMiniFabButton) `MatMiniFabButton`\n\nMaterial Design mini floating action button (FAB) component. These buttons represent the primary\nor most common action for users to interact with.\nSee [https://material.io/components/buttons-floating-action-button/](https://material.io/components/buttons-floating-action-button/)\n\nSelector:button\\[mat-mini-fab\\]\n\nExported as:matButton\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute, alias: 'aria-disabled' })<br> <br>`ariaDisabled: boolean | undefined` | `aria-disabled` value of the button. |\n| @Input()<br>`color: string | null` | Theme color of the button. This API is supported in M2 themes only, it has<br>no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/button/styling](https://material.angular.io/components/button/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the ripple effect is disabled or not. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the button is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Natively disabled buttons prevent focus and any pointer events from reaching the button.<br>In some scenarios this might not be desirable, because it can prevent users from finding out<br>why the button is disabled (e.g. via tooltip). This is also useful for buttons that may<br>become disabled when activated, which would cause focus to be transferred to the document<br>body instead of remaining on the button.<br>Enabling this input will change the button so that it is styled to be disabled and will be<br>marked as `aria-disabled`, but it will allow the button to receive events and focus.<br>Note that by enabling this, you need to set the `tabindex` yourself if the button isn't<br>meant to be tabbable and you have to prevent the button action (e.g. form submissions). |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the button. |\n| Parameters |\n| --- |\n| origin<br> `FocusOrigin = 'program'` |  |\n| options?<br> `FocusOptions` |  |\n\n#### [link](https://material.angular.io/components/button/api\\#MatFabAnchor) `MatFabAnchor`extends [MatAnchor](https://material.angular.io/components/button/components/button/api\\#MatAnchor)\n\nMaterial Design floating action button (FAB) component for anchor elements. Anchor elements\nare used to provide links for the user to navigate across different routes or pages.\nSee [https://material.io/components/buttons-floating-action-button/](https://material.io/components/buttons-floating-action-button/)\n\nThe `MatFabAnchor` class has two appearances: normal and extended.\n\nSelector:a\\[mat-fab\\]\n\nExported as:matButton, matAnchor\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute, alias: 'aria-disabled' })<br> <br>`ariaDisabled: boolean | undefined` | `aria-disabled` value of the button. |\n| @Input()<br>`color: string | null` | Theme color of the button. This API is supported in M2 themes only, it has<br>no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/button/styling](https://material.angular.io/components/button/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the ripple effect is disabled or not. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the button is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Natively disabled buttons prevent focus and any pointer events from reaching the button.<br>In some scenarios this might not be desirable, because it can prevent users from finding out<br>why the button is disabled (e.g. via tooltip). This is also useful for buttons that may<br>become disabled when activated, which would cause focus to be transferred to the document<br>body instead of remaining on the button.<br>Enabling this input will change the button so that it is styled to be disabled and will be<br>marked as `aria-disabled`, but it will allow the button to receive events and focus.<br>Note that by enabling this, you need to set the `tabindex` yourself if the button isn't<br>meant to be tabbable and you have to prevent the button action (e.g. form submissions). |\n| @Input({ transform: booleanAttribute })<br> <br>`extended: boolean` |  |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the button. |\n| Parameters |\n| --- |\n| origin<br> `FocusOrigin = 'program'` |  |\n| options?<br> `FocusOptions` |  |\n\n#### [link](https://material.angular.io/components/button/api\\#MatMiniFabAnchor) `MatMiniFabAnchor`extends [MatAnchor](https://material.angular.io/components/button/components/button/api\\#MatAnchor)\n\nMaterial Design mini floating action button (FAB) component for anchor elements. Anchor elements\nare used to provide links for the user to navigate across different routes or pages.\nSee [https://material.io/components/buttons-floating-action-button/](https://material.io/components/buttons-floating-action-button/)\n\nSelector:a\\[mat-mini-fab\\]\n\nExported as:matButton, matAnchor\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute, alias: 'aria-disabled' })<br> <br>`ariaDisabled: boolean | undefined` | `aria-disabled` value of the button. |\n| @Input()<br>`color: string | null` | Theme color of the button. This API is supported in M2 themes only, it has<br>no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/button/styling](https://material.angular.io/components/button/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the ripple effect is disabled or not. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the button is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Natively disabled buttons prevent focus and any pointer events from reaching the button.<br>In some scenarios this might not be desirable, because it can prevent users from finding out<br>why the button is disabled (e.g. via tooltip). This is also useful for buttons that may<br>become disabled when activated, which would cause focus to be transferred to the document<br>body instead of remaining on the button.<br>Enabling this input will change the button so that it is styled to be disabled and will be<br>marked as `aria-disabled`, but it will allow the button to receive events and focus.<br>Note that by enabling this, you need to set the `tabindex` yourself if the button isn't<br>meant to be tabbable and you have to prevent the button action (e.g. form submissions). |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the button. |\n| Parameters |\n| --- |\n| origin<br> `FocusOrigin = 'program'` |  |\n| options?<br> `FocusOptions` |  |\n\n#### [link](https://material.angular.io/components/button/api\\#MatIconButton) `MatIconButton`\n\nMaterial Design icon button component. This type of button displays a single interactive icon for\nusers to perform an action.\nSee [https://material.io/develop/web/components/buttons/icon-buttons/](https://material.io/develop/web/components/buttons/icon-buttons/)\n\nSelector:button\\[mat-icon-button\\]\n\nExported as:matButton\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute, alias: 'aria-disabled' })<br> <br>`ariaDisabled: boolean | undefined` | `aria-disabled` value of the button. |\n| @Input()<br>`color: string | null` | Theme color of the button. This API is supported in M2 themes only, it has<br>no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/button/styling](https://material.angular.io/components/button/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the ripple effect is disabled or not. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the button is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Natively disabled buttons prevent focus and any pointer events from reaching the button.<br>In some scenarios this might not be desirable, because it can prevent users from finding out<br>why the button is disabled (e.g. via tooltip). This is also useful for buttons that may<br>become disabled when activated, which would cause focus to be transferred to the document<br>body instead of remaining on the button.<br>Enabling this input will change the button so that it is styled to be disabled and will be<br>marked as `aria-disabled`, but it will allow the button to receive events and focus.<br>Note that by enabling this, you need to set the `tabindex` yourself if the button isn't<br>meant to be tabbable and you have to prevent the button action (e.g. form submissions). |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the button. |\n| Parameters |\n| --- |\n| origin<br> `FocusOrigin = 'program'` |  |\n| options?<br> `FocusOptions` |  |\n\n#### [link](https://material.angular.io/components/button/api\\#MatIconAnchor) `MatIconAnchor`\n\nMaterial Design icon button component for anchor elements. This button displays a single\ninteraction icon that allows users to navigate across different routes or pages.\nSee [https://material.io/develop/web/components/buttons/icon-buttons/](https://material.io/develop/web/components/buttons/icon-buttons/)\n\nSelector:a\\[mat-icon-button\\]\n\nExported as:matButton, matAnchor\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute, alias: 'aria-disabled' })<br> <br>`ariaDisabled: boolean | undefined` | `aria-disabled` value of the button. |\n| @Input()<br>`color: string | null` | Theme color of the button. This API is supported in M2 themes only, it has<br>no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/button/styling](https://material.angular.io/components/button/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether the ripple effect is disabled or not. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the button is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Natively disabled buttons prevent focus and any pointer events from reaching the button.<br>In some scenarios this might not be desirable, because it can prevent users from finding out<br>why the button is disabled (e.g. via tooltip). This is also useful for buttons that may<br>become disabled when activated, which would cause focus to be transferred to the document<br>body instead of remaining on the button.<br>Enabling this input will change the button so that it is styled to be disabled and will be<br>marked as `aria-disabled`, but it will allow the button to receive events and focus.<br>Note that by enabling this, you need to set the `tabindex` yourself if the button isn't<br>meant to be tabbable and you have to prevent the button action (e.g. form submissions). |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the button. |\n| Parameters |\n| --- |\n| origin<br> `FocusOrigin = 'program'` |  |\n| options?<br> `FocusOptions` |  |\n\n### [link](https://material.angular.io/components/button/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/button/api\\#MatButtonConfig) `MatButtonConfig`\n\nObject that can be used to configure the default options for the button component.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `color: ThemePalette` | Default palette color to apply to buttons. |\n| `disabledInteractive: boolean` | Whether disabled buttons should be interactive. |\n\n#### [link](https://material.angular.io/components/button/api\\#MatFabDefaultOptions) `MatFabDefaultOptions`\n\nDefault FAB options that can be overridden.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `color: ThemePalette` | Default theme color of the button. This API is supported in M2 themes<br>only, it has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/button/styling](https://material.angular.io/components/button/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants). |\n\n### [link](https://material.angular.io/components/button/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/button/api\\#MAT_BUTTON_CONFIG) `MAT_BUTTON_CONFIG`\n\nInjection token that can be used to provide the default options the button component.\n\n```docs-markdown-code\nconst MAT_BUTTON_CONFIG: InjectionToken<MatButtonConfig>;\n\n```\n\n#### [link](https://material.angular.io/components/button/api\\#MAT_FAB_DEFAULT_OPTIONS) `MAT_FAB_DEFAULT_OPTIONS`\n\nInjection token to be used to override the default options for FAB.\n\n```docs-markdown-code\nconst MAT_FAB_DEFAULT_OPTIONS: InjectionToken<MatFabDefaultOptions>;\n\n```\n\n## API reference for Angular Material button-testing\n\n`\n          import {MatButtonHarness} from '@angular/material/button/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/button/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/button/api\\#MatButtonHarness) `MatButtonHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/button/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a mat-button in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| ``static hostSelector: `[mat-button], [mat-raised-button], [mat-flat-button],<br>                         [mat-icon-button], [mat-stroked-button], [mat-fab], [mat-mini-fab]` `` |  |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the button and returns a void promise that indicates when the action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>click |\n| --- |\n| Clicks the button at the given position relative to its top-left. |\n| Parameters |\n| --- |\n| relativeX<br> `number` | The relative x position of the click. |\n| relativeY<br> `number` | The relative y position of the click. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>click |\n| --- |\n| Clicks the button at its center. |\n| Parameters |\n| --- |\n| location<br> `\"center\"` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>click |\n| --- |\n| Clicks the button. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the button and returns a void promise that indicates when the action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets a promise for the button's label text. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getVariant |\n| --- |\n| Gets the variant of the button. |\n| Returns |\n| --- |\n| `Promise<ButtonVariant>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Gets a boolean promise indicating if the button is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the button is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a button with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `ButtonHarnessFilters = {}` | Options for narrowing the search:<br>- `selector` finds a button whose host element matches the given selector.<br>- `text` finds a button with specific text content.<br>- `variant` finds buttons matching a specific variant. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/button/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/button/api\\#ButtonHarnessFilters) `ButtonHarnessFilters`\n\nA set of criteria that can be used to filter a list of button harness instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disabled: boolean` | Only find instances which match the given disabled state. |\n| `text: string | RegExp` | Only find instances whose text matches the given value. |\n| `variant: ButtonVariant` | Only find instances with a variant. |\n\n### [link](https://material.angular.io/components/button/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/button/api\\#ButtonVariant) `ButtonVariant`\n\nPossible button appearances.\n\n```docs-markdown-code\ntype ButtonVariant = 'basic' | 'raised' | 'flat' | 'icon' | 'stroked' | 'fab' | 'mini-fab';\n\n```\n\nButton\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-de6d50df-cb3c-4122-8b26-eda947ff9006.png"
  },
  "metadata": {
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "favicon": "https://material.angular.io/components/button/assets/img/favicon.ico?v=19.1.0",
    "twitter:card": "summary",
    "author": "Angular Components Team",
    "theme-color": "#d7e3ff",
    "ogTitle": "Angular Material",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "language": "en-US",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:url": "https://material.angular.io/",
    "og:locale": "en_US",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:site": "@Angular",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image:height": "943",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "title": "Button | Angular Material",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:creator": "@Angular",
    "apple-mobile-web-app-capable": "yes",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "viewport": "width=device-width, initial-scale=1",
    "og:image:type": "image/png",
    "ogLocale": "en_US",
    "og:image:width": "1339",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "mobile-web-app-capable": "yes",
    "ogUrl": "https://material.angular.io/",
    "og:type": "website",
    "twitter:title": "Angular Material",
    "og:title": "Angular Material",
    "og:site_name": "Angular Material",
    "ogSiteName": "Angular Material",
    "scrapeId": "e0e57aba-0288-4df8-8b80-dc399710274b",
    "sourceURL": "https://material.angular.io/components/button/api",
    "url": "https://material.angular.io/components/button/api",
    "statusCode": 200
  }
}