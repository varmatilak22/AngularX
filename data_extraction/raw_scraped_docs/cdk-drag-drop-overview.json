{
  "scrapeId": "f8c0ec3b-e9de-413f-9cf7-e4a9a84e5619",
  "sourceURL": "https://material.angular.io/cdk/drag-drop/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\n## Overview for drag-drop\n\nThe `@angular/cdk/drag-drop` module provides you with a way to easily and declaratively create\ndrag-and-drop interfaces, with support for free dragging, sorting within a list, transferring items\nbetween lists, animations, touch devices, custom drag handles, previews, and placeholders,\nin addition to horizontal lists and locking along an axis.\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#getting-started)  Getting started\n\nStart by importing `DragDropModule` into the `NgModule` where you want to use drag-and-drop\nfeatures. You can now add the `cdkDrag` directive to elements to make them draggable. When\noutside of a `cdkDropList` element, draggable elements can be freely moved around the page.\nYou can add `cdkDropList` elements to constrain where elements may be dropped.\n\nBasic Drag&Drop\n\nlinkcodeopen\\_in\\_new\n\nDrag me around\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#reordering-lists)  Reordering lists\n\nAdding `cdkDropList` around a set of `cdkDrag` elements groups the draggables into a\nreorderable collection. Items will automatically rearrange as an element moves. Note\nthat this will _not_ update your data model; you can listen to the `cdkDropListDropped` event to\nupdate the data model once the user finishes dragging.\n\nDrag&Drop sorting\n\nlinkcodeopen\\_in\\_new\n\nEpisode I - The Phantom Menace\n\nEpisode II - Attack of the Clones\n\nEpisode III - Revenge of the Sith\n\nEpisode IV - A New Hope\n\nEpisode V - The Empire Strikes Back\n\nEpisode VI - Return of the Jedi\n\nEpisode VII - The Force Awakens\n\nEpisode VIII - The Last Jedi\n\nEpisode IX – The Rise of Skywalker\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#transferring-items-between-lists)  Transferring items between lists\n\nThe `cdkDropList` directive supports transferring dragged items between connected drop zones.\nYou can connect one or more `cdkDropList` instances together by setting the `cdkDropListConnectedTo`\nproperty or by wrapping the elements in an element with the `cdkDropListGroup` attribute.\n\nDrag&Drop connected sorting\n\nlinkcodeopen\\_in\\_new\n\n## To do\n\nGet to work\n\nPick up groceries\n\nGo home\n\nFall asleep\n\n## Done\n\nGet up\n\nBrush teeth\n\nTake a shower\n\nCheck e-mail\n\nWalk dog\n\nNote that `cdkDropListConnectedTo` works both with a direct reference to another `cdkDropList`, or\nby referencing the `id` of another drop container:\n\n```html\n<!-- This is valid -->\n<div cdkDropList #listOne=\"cdkDropList\" [cdkDropListConnectedTo]=\"[listTwo]\"></div>\n<div cdkDropList #listTwo=\"cdkDropList\" [cdkDropListConnectedTo]=\"[listOne]\"></div>\n\n<!-- This is valid as well -->\n<div cdkDropList id=\"list-one\" [cdkDropListConnectedTo]=\"['list-two']\"></div>\n<div cdkDropList id=\"list-two\" [cdkDropListConnectedTo]=\"['list-one']\"></div>\n\n```\n\nIf you have an unknown number of connected drop lists, you can use the `cdkDropListGroup` directive\nto set up the connection automatically. Note that any new `cdkDropList` that is added under a group\nwill be connected to all other lists automatically.\n\n```html\n<div cdkDropListGroup>\n  <!-- All lists in here will be connected. -->\n  @for (list of lists; track list) {\n    <div cdkDropList></div>\n  }\n</div>\n\n```\n\nDrag&Drop connected sorting group\n\nlinkcodeopen\\_in\\_new\n\n## To do\n\nGet to work\n\nPick up groceries\n\nGo home\n\nFall asleep\n\n## Done\n\nGet up\n\nBrush teeth\n\nTake a shower\n\nCheck e-mail\n\nWalk dog\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#attaching-data)  Attaching data\n\nYou can associate some arbitrary data with both `cdkDrag` and `cdkDropList` by setting `cdkDragData`\nor `cdkDropListData`, respectively. Events fired from both directives include this data, allowing\nyou to easily identify the origin of the drag or drop interaction.\n\n```html\n@for (list of lists; track list) {\n  <div cdkDropList [cdkDropListData]=\"list\" (cdkDropListDropped)=\"drop($event)\">\n    @for (item of list; track item) {\n      <div cdkDrag [cdkDragData]=\"item\"></div>\n    }\n  </div>\n}\n\n```\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#styling)  Styling\n\nThe `cdkDrag` and `cdkDropList` directive include only those styles strictly necessary for\nfunctionality. The application can then customize the elements by styling CSS classes added\nby the directives:\n\n| Selector | Description |\n| --- | --- |\n| `.cdk-drop-list` | Corresponds to the `cdkDropList` container. |\n| `.cdk-drag` | Corresponds to a `cdkDrag` instance. |\n| `.cdk-drag-disabled` | Class that is added to a disabled `cdkDrag`. |\n| `.cdk-drag-handle` | Class that is added to the host element of the cdkDragHandle directive. |\n| `.cdk-drag-preview` | This is the element that will be rendered next to the user's cursor as they're dragging an item in a sortable list. By default the element looks exactly like the element that is being dragged. |\n| `.cdk-drag-placeholder` | This is element that will be shown instead of the real element as it's being dragged inside a `cdkDropList`. By default this will look exactly like the element that is being sorted. |\n| `.cdk-drop-list-dragging` | A class that is added to `cdkDropList` while the user is dragging an item. |\n| `.cdk-drop-list-disabled` | A class that is added to `cdkDropList` when it is disabled. |\n| `.cdk-drop-list-receiving` | A class that is added to `cdkDropList` when it can receive an item that is being dragged inside a connected drop list. |\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#animations)  Animations\n\nThe drag-and-drop module supports animations both while sorting an element inside a list, as well as\nanimating it from the position that the user dropped it to its final place in the list. To set up\nyour animations, you have to define a `transition` that targets the `transform` property. The\nfollowing classes can be used for animations:\n\n- `.cdk-drag` \\- If you add a `transition` to this class, it'll animate as the user is sorting\nthrough a list.\n- `.cdk-drag-animating` \\- This class is added to a `cdkDrag` when the user has stopped dragging.\nIf you add a `transition` to it, the CDK will animate the element from its drop position to\nthe final position inside the `cdkDropList` container.\n\nExample animations:\n\n```css\n/* Animate items as they're being sorted. */\n.cdk-drop-list-dragging .cdk-drag {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n/* Animate an item that has been dropped. */\n.cdk-drag-animating {\n  transition: transform 300ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n```\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#customizing-the-drag-area-using-a-handle)  Customizing the drag area using a handle\n\nBy default, the user can drag the entire `cdkDrag` element to move it around. If you want to\nrestrict the user to only be able to do so using a handle element, you can do it by adding the\n`cdkDragHandle` directive to an element inside of `cdkDrag`. Note that you can have as many\n`cdkDragHandle` elements as you want:\n\nDrag&Drop with a handle\n\nlinkcodeopen\\_in\\_new\n\nI can only be dragged using the handle\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#customizing-the-drag-preview)  Customizing the drag preview\n\nWhen a `cdkDrag` element is picked up, it will create a preview element visible while dragging.\nBy default, this will be a clone of the original element positioned next to the user's cursor.\nThis preview can be customized, though, by providing a custom template via `*cdkDragPreview`.\nUsing the default configuration the custom preview won't match the size of the original dragged\nelement, because the CDK doesn't make assumptions about the element's content. If you want the\nsize to be matched, you can pass `true` to the `matchSize` input.\n\nNote that the cloned element will remove its `id` attribute in order to avoid having multiple\nelements with the same `id` on the page. This will cause any CSS that targets that `id` not\nto be applied.\n\nDrag&Drop custom preview\n\nlinkcodeopen\\_in\\_new\n\nEpisode I - The Phantom Menace\n\nEpisode II - Attack of the Clones\n\nEpisode III - Revenge of the Sith\n\nEpisode IV - A New Hope\n\nEpisode V - The Empire Strikes Back\n\nEpisode VI - Return of the Jedi\n\nEpisode VII - The Force Awakens\n\nEpisode VIII - The Last Jedi\n\nEpisode IX – The Rise of Skywalker\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#drag-preview-insertion-point)  Drag preview insertion point\n\nBy default, the preview of a `cdkDrag` will be inserted into the `<body>` of the page in order to\navoid issues with `z-index` and `overflow: hidden`. This may not be desireable in some cases,\nbecause the preview won't retain its inherited styles. You can control where the preview is inserted\nusing the `cdkDragPreviewContainer` input on `cdkDrag`. The possible values are:\n\n| Value | Description | Advantages | Disadvantages |\n| --- | --- | --- | --- |\n| `global` | Default value. Preview is inserted into the `<body>` or the closest shadow root. | Preview won't be affected by `z-index` or `overflow: hidden`. It also won't affect `:nth-child` selectors and flex layouts. | Doesn't retain inherited styles. |\n| `parent` | Preview is inserted inside the parent of the item that is being dragged. | Preview inherits the same styles as the dragged item. | Preview may be clipped by `overflow: hidden` or be placed under other elements due to `z-index`. Furthermore, it can affect `:nth-child` selectors and some flex layouts. |\n| `ElementRef` or `HTMLElement` | Preview will be inserted into the specified element. | Preview inherits styles from the specified container element. | Preview may be clipped by `overflow: hidden` or be placed under other elements due to `z-index`. Furthermore, it can affect `:nth-child` selectors and some flex layouts. |\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#customizing-the-drag-placeholder)  Customizing the drag placeholder\n\nWhile a `cdkDrag` element is being dragged, the CDK will create a placeholder element that will\nshow where it will be placed when it's dropped. By default the placeholder is a clone of the element\nthat is being dragged, however you can replace it with a custom one using the `*cdkDragPlaceholder`\ndirective:\n\nDrag&Drop custom placeholder\n\nlinkcodeopen\\_in\\_new\n\nEpisode I - The Phantom Menace\n\nEpisode II - Attack of the Clones\n\nEpisode III - Revenge of the Sith\n\nEpisode IV - A New Hope\n\nEpisode V - The Empire Strikes Back\n\nEpisode VI - Return of the Jedi\n\nEpisode VII - The Force Awakens\n\nEpisode VIII - The Last Jedi\n\nEpisode IX - The Rise of Skywalker\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#list-orientation)  List orientation\n\nThe `cdkDropList` directive assumes that lists are vertical by default. This can be\nchanged by setting the `cdkDropListOrientation` property to `horizontal`.\n\nDrag&Drop horizontal sorting\n\nlinkcodeopen\\_in\\_new\n\nBronze age\n\nIron age\n\nMiddle ages\n\nEarly modern period\n\nLong nineteenth century\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#list-wrapping)  List wrapping\n\nBy default the `cdkDropList` sorts the items by moving them around using a CSS `transform`. This\nallows for the sorting to be animated which provides a better user experience, but comes with the\ndrawback that it works only one direction: vertically or horizontally.\n\nIf you have a sortable list that needs to wrap, you can set `cdkDropListOrientation=\"mixed\"` which\nwill use a different strategy of sorting the elements that works by moving them in the DOM. It has\nthe advantage of allowing the items to wrap to the next line, but it **cannot** animate the\nsorting action.\n\nDrag&Drop horizontal wrapping list\n\nlinkcodeopen\\_in\\_new\n\nZero\n\nOne\n\nTwo\n\nThree\n\nFour\n\nFive\n\nSix\n\nSeven\n\nEight\n\nNine\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#restricting-movement-within-an-element)  Restricting movement within an element\n\nIf you want to stop the user from being able to drag a `cdkDrag` element outside of another element,\nyou can pass a CSS selector to the `cdkDragBoundary` attribute. The attribute works by accepting a\nselector and looking up the DOM until it finds an element that matches it. If a match is found,\nit'll be used as the boundary outside of which the element can't be dragged. `cdkDragBoundary` can\nalso be used when `cdkDrag` is placed inside a `cdkDropList`.\n\nDrag&Drop boundary\n\nlinkcodeopen\\_in\\_new\n\nI can only be dragged within the dotted container\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#restricting-movement-along-an-axis)  Restricting movement along an axis\n\nBy default, `cdkDrag` allows free movement in all directions. To restrict dragging to a\nspecific axis, you can set `cdkDragLockAxis` on `cdkDrag` or `cdkDropListLockAxis` on `cdkDropList`\nto either `\"x\"` or `\"y\"`.\n\nDrag&Drop position locking\n\nlinkcodeopen\\_in\\_new\n\nI can only be dragged up/down\n\nI can only be dragged left/right\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#alternate-drag-root-element)  Alternate drag root element\n\nIf there's an element that you want to make draggable, but you don't have direct access to it, you\ncan use the `cdkDragRootElement` attribute. The attribute works by accepting a selector and looking\nup the DOM until it finds an element that matches the selector. If an element is found, it'll become\nthe element that is moved as the user is dragging. This is useful for cases like making a dialog\ndraggable.\n\nDrag&Drop with alternate root element\n\nlinkcodeopen\\_in\\_new\n\nOpen a draggable dialog\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#controlling-which-items-can-be-moved-into-a-container)  Controlling which items can be moved into a container\n\nBy default, all `cdkDrag` items from one container can be moved into another connected container.\nIf you want more fine-grained control over which items can be dropped, you can use the\n`cdkDropListEnterPredicate` which will be called whenever an item is about to enter a\nnew container. Depending on whether the predicate returns `true` or `false`, the item may or may not\nbe allowed into the new container.\n\nDrag&Drop enter predicate\n\nlinkcodeopen\\_in\\_new\n\n## Available numbers\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n## Even numbers\n\n10\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#disabled-dragging)  Disabled dragging\n\nIf you want to disable dragging for a particular drag item, you can do so by setting the\n`cdkDragDisabled` input on a `cdkDrag` item. Furthermore, you can disable an entire list\nusing the `cdkDropListDisabled` input on a `cdkDropList` or a particular handle via\n`cdkDragHandleDisabled` on `cdkDragHandle`.\n\nDrag&Drop disabled\n\nlinkcodeopen\\_in\\_new\n\nI can be dragged\n\nI cannot be dragged\n\nI can also be dragged\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#disabled-sorting)  Disabled sorting\n\nThere are cases where draggable items can be dragged out of one list into another, however\nthe user shouldn't be able to sort them within the source list. For these cases you can set the\n`cdkDropListSortingDisabled` input which will prevent the items in a `cdkDropList` from sorting,\nin addition to preserving the dragged item's initial position in the source list, if the user\ndecides to return the item.\n\nDrag&Drop disabled sorting\n\nlinkcodeopen\\_in\\_new\n\n## Available items\n\nCarrots\n\nTomatoes\n\nOnions\n\nApples\n\nAvocados\n\n## Shopping basket\n\nOranges\n\nBananas\n\nCucumbers\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#delayed-dragging)  Delayed dragging\n\nBy default as soon as the user puts their pointer down on a `cdkDrag`, the dragging sequence will\nbe started. This might not be desirable in cases like fullscreen draggable elements on touch\ndevices where the user might accidentally trigger a drag as they're scrolling the page. For\ncases like these you can delay the dragging sequence using the `cdkDragStartDelay` input which\nwill wait for the user to hold down their pointer for the specified number of milliseconds before\nmoving the element.\n\nDelayed dragging\n\nlinkcodeopen\\_in\\_new\n\nDragging starts after one second\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#changing-the-standalone-drag-position)  Changing the standalone drag position\n\nBy default, standalone `cdkDrag` elements move from their normal DOM position only when manually\nmoved by a user. The element's position can be explicitly set, however, via the\n`cdkDragFreeDragPosition` input. Applications commonly use this, for example, to restore a\ndraggable's position after a user has navigated away and then returned.\n\nProgrammatically setting the free drag position\n\nlinkcodeopen\\_in\\_new\n\nChange element position\n\nDrag me around\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#controlling-whether-an-item-can-be-sorted-into-a-particular-index)  Controlling whether an item can be sorted into a particular index\n\n`cdkDrag` items can be sorted into any position inside of a `cdkDropList` by default. You can change\nthis behavior by setting a `cdkDropListSortPredicate`. The predicate function will be called\nwhenever an item is about to be moved into a new index. If the predicate returns `true`, the\nitem will be moved into the new index, otherwise it will keep its current position.\n\nDrag&Drop sort predicate\n\nlinkcodeopen\\_in\\_new\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n### [link](https://material.angular.io/cdk/drag-drop/overview\\#integrations-with-angular-material)  Integrations with Angular Material\n\nThe CDK's drag&drop functionality can be integrated with different parts of Angular Material.\n\n#### [link](https://material.angular.io/cdk/drag-drop/overview\\#sortable-table)  Sortable table\n\nThis example shows how you can set up a table which supports re-ordering of tabs.\n\nDrag&Drop table\n\nlinkcodeopen\\_in\\_new\n\nNo.  Name  Weight  Symbol  Quantity of Element reorder1 Hydrogen  1.0079  H 100reorder2 Helium  4.0026  He 100reorder3 Lithium  6.941  Li 100reorder4 Beryllium  9.0122  Be 100reorder5 Boron  10.811  B 100reorder6 Carbon  12.0107  C 100reorder7 Nitrogen  14.0067  N 100reorder8 Oxygen  15.9994  O 100reorder9 Fluorine  18.9984  F 100reorder10 Neon  20.1797  Ne 100\n\n#### [link](https://material.angular.io/cdk/drag-drop/overview\\#sortable-tabs)  Sortable tabs\n\nExample of how to add sorting support to a `mat-tab-group`.\n\nDrag&Drop tabs\n\nlinkcodeopen\\_in\\_new\n\nOne\n\nTwo\n\nThree\n\nFour\n\nFive\n\n### Content for One\n\nLorem ipsum dolor, sit amet consectetur adipisicing elit. Quidem perspiciatis in delectus reprehenderit, molestias ullam nostrum odit, modi consequatur harum beatae? Sapiente voluptatibus illo natus assumenda hic quasi dolor et laborum veniam! Molestiae architecto nesciunt est quo nisi? Nostrum repellendus quibusdam laudantium? Optio architecto explicabo labore sapiente cum alias nobis!\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Basic Drag&Drop example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit Drag&Drop sorting example in StackBlitz\n\nEdit Drag&Drop connected sorting example in StackBlitz\n\nEdit Drag&Drop connected sorting group example in StackBlitz\n\nEdit Drag&Drop with a handle example in StackBlitz\n\nEdit Drag&Drop custom preview example in StackBlitz\n\nEdit Drag&Drop custom placeholder example in StackBlitz\n\nEdit Drag&Drop horizontal sorting example in StackBlitz\n\nEdit Drag&Drop horizontal wrapping list example in StackBlitz\n\nEdit Drag&Drop boundary example in StackBlitz\n\nEdit Drag&Drop position locking example in StackBlitz\n\nEdit Drag&Drop with alternate root element example in StackBlitz\n\nEdit Drag&Drop enter predicate example in StackBlitz\n\nEdit Drag&Drop disabled example in StackBlitz\n\nEdit Drag&Drop disabled sorting example in StackBlitz\n\nEdit Delayed dragging example in StackBlitz\n\nEdit Programmatically setting the free drag position example in StackBlitz\n\nEdit Drag&Drop sort predicate example in StackBlitz\n\nEdit Drag&Drop table example in StackBlitz\n\nEdit Drag&Drop tabs example in StackBlitz",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-202db156-d74b-4c4b-ad5d-be01ba2bc763.png"
  },
  "metadata": {
    "og:image:height": "943",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "ogSiteName": "Angular Material",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "twitter:creator": "@Angular",
    "theme-color": "#d7e3ff",
    "og:image:width": "1339",
    "ogLocale": "en_US",
    "apple-mobile-web-app-capable": "yes",
    "og:title": "Angular Material",
    "og:url": "https://material.angular.io/",
    "viewport": "width=device-width, initial-scale=1",
    "mobile-web-app-capable": "yes",
    "twitter:card": "summary",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "author": "Angular Components Team",
    "twitter:site": "@Angular",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "ogTitle": "Angular Material",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:locale": "en_US",
    "language": "en-US",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:type": "image/png",
    "og:type": "website",
    "title": "Drag and Drop | Angular Material",
    "ogUrl": "https://material.angular.io/",
    "favicon": "https://material.angular.io/cdk/drag-drop/assets/img/favicon.ico?v=19.1.0",
    "og:site_name": "Angular Material",
    "twitter:title": "Angular Material",
    "scrapeId": "f8c0ec3b-e9de-413f-9cf7-e4a9a84e5619",
    "sourceURL": "https://material.angular.io/cdk/drag-drop/overview",
    "url": "https://material.angular.io/cdk/drag-drop/overview",
    "statusCode": 200
  }
}