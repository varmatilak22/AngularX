{
  "scrapeId": "0c2b8349-221b-48e0-bc5c-a7931b899cc3",
  "sourceURL": "https://material.angular.io/components/snack-bar/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for snack-bar\n\n## API reference for Angular Material snack-bar\n\n`\n          import {MatSnackBarModule} from '@angular/material/snack-bar';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/snack-bar/api\\#services)  Services\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#MatSnackBar) `MatSnackBar`\n\nService to dispatch Material Design snack bar messages.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `handsetCssClass: 'mat-mdc-snack-bar-handset'` | The CSS class to apply for handset mode. |\n| `simpleSnackBarComponent: SimpleSnackBar` | The component that should be rendered as the snack bar's simple component. |\n| `snackBarContainerComponent: MatSnackBarContainer` | The container component that attaches the provided template or component. |\n\n##### Methods\n\n| dismiss |\n| --- |\n| Dismisses the currently-visible snack bar. |\n\n| open |\n| --- |\n| Opens a snackbar with a message and an optional action. |\n| Parameters |\n| --- |\n| message<br> `string` | The message to show in the snackbar. |\n| action<br> `string = ''` | The label for the snackbar action. |\n| config?<br> `MatSnackBarConfig<any>` | Additional configuration options for the snackbar. |\n| Returns |\n| --- |\n| `MatSnackBarRef<TextOnlySnackBar>` |  |\n\n| openFromComponent |\n| --- |\n| Creates and dispatches a snack bar with a custom component for the content, removing any<br>currently opened snack bars. |\n| Parameters |\n| --- |\n| component<br> `ComponentType<T>` | Component to be instantiated. |\n| config?<br> `MatSnackBarConfig<D>` | Extra configuration for the snack bar. |\n| Returns |\n| --- |\n| `MatSnackBarRef<T>` |  |\n\n| openFromTemplate |\n| --- |\n| Creates and dispatches a snack bar with a custom template for the content, removing any<br>currently opened snack bars. |\n| Parameters |\n| --- |\n| template<br> `TemplateRef<any>` | Template to be instantiated. |\n| config?<br> `MatSnackBarConfig<any>` | Extra configuration for the snack bar. |\n| Returns |\n| --- |\n| `MatSnackBarRef<EmbeddedViewRef<any>>` |  |\n\n### [link](https://material.angular.io/components/snack-bar/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#SimpleSnackBar) `SimpleSnackBar`\n\nSelector:simple-snack-bar\n\nExported as:matSnackBar\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `data: inject(MAT_SNACK_BAR_DATA)` |  |\n| `hasAction: boolean` | If the action button should be shown. |\n| `snackBarRef: inject<MatSnackBarRef<SimpleSnackBar>>(MatSnackBarRef)` |  |\n\n##### Methods\n\n| action |\n| --- |\n| Performs the action on the snack bar. |\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#MatSnackBarLabel) `MatSnackBarLabel`\n\nDirective that should be applied to the text element to be rendered in the snack bar.\n\nSelector:\\[matSnackBarLabel\\]\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#MatSnackBarActions) `MatSnackBarActions`\n\nDirective that should be applied to the element containing the snack bar's action buttons.\n\nSelector:\\[matSnackBarActions\\]\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#MatSnackBarAction) `MatSnackBarAction`\n\nDirective that should be applied to each of the snack bar's action buttons.\n\nSelector:\\[matSnackBarAction\\]\n\n### [link](https://material.angular.io/components/snack-bar/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#MatSnackBarConfig) `MatSnackBarConfig`\n\nConfiguration used when opening a snack-bar.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `announcementMessage: string` | Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom<br>component or template, the announcement message will default to the specified message. |\n| `data: D | null` | Data being injected into the child component. |\n| `direction: Direction` | Text layout direction for the snack bar. |\n| `duration: number` | The length of time in milliseconds to wait before automatically dismissing the snack bar. |\n| `horizontalPosition: MatSnackBarHorizontalPosition` | The horizontal position to place the snack bar. |\n| `panelClass: string | string[]` | Extra CSS classes to be added to the snack bar container. |\n| `politeness: AriaLivePoliteness` | The politeness level for the MatAriaLiveAnnouncer announcement. |\n| `verticalPosition: MatSnackBarVerticalPosition` | The vertical position to place the snack bar. |\n| `viewContainerRef: ViewContainerRef` | The view container that serves as the parent for the snackbar for the purposes of dependency<br>injection. Note: this does not affect where the snackbar is inserted in the DOM. |\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#MatSnackBarRef) `MatSnackBarRef`\n\nReference to a snack bar dispatched from the snack bar service.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `instance: T` | The instance of the component making up the content of the snack bar. |\n\n##### Methods\n\n| afterDismissed |\n| --- |\n| Gets an observable that is notified when the snack bar is finished closing. |\n| Returns |\n| --- |\n| `Observable<MatSnackBarDismiss>` |  |\n\n| afterOpened |\n| --- |\n| Gets an observable that is notified when the snack bar has opened and appeared. |\n| Returns |\n| --- |\n| `Observable<void>` |  |\n\n| dismiss |\n| --- |\n| Dismisses the snack bar. |\n\n| dismissWithAction |\n| --- |\n| Marks the snackbar action clicked. |\n\n| onAction |\n| --- |\n| Gets an observable that is notified when the snack bar action is called. |\n| Returns |\n| --- |\n| `Observable<void>` |  |\n\n| Deprecated<br> <br>closeWithAction |\n| --- |\n| Marks the snackbar action clicked. |\n\n### [link](https://material.angular.io/components/snack-bar/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#TextOnlySnackBar) `TextOnlySnackBar`\n\nInterface for a simple snack bar component that has a message and a single action.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `action: () => void` |  |\n| `data: {<br>    message: string;<br>    action: string;<br>}` |  |\n| `hasAction: boolean` |  |\n| `snackBarRef: MatSnackBarRef<TextOnlySnackBar>` |  |\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#MatSnackBarDismiss) `MatSnackBarDismiss`\n\nEvent that is emitted when a snack bar is dismissed.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `dismissedByAction: boolean` | Whether the snack bar was dismissed using the action button. |\n\n### [link](https://material.angular.io/components/snack-bar/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#MatSnackBarHorizontalPosition) `MatSnackBarHorizontalPosition`\n\nPossible values for horizontalPosition on MatSnackBarConfig.\n\n```docs-markdown-code\ntype MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n```\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#MatSnackBarVerticalPosition) `MatSnackBarVerticalPosition`\n\nPossible values for verticalPosition on MatSnackBarConfig.\n\n```docs-markdown-code\ntype MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n```\n\n### [link](https://material.angular.io/components/snack-bar/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#MAT_SNACK_BAR_DEFAULT_OPTIONS) `MAT_SNACK_BAR_DEFAULT_OPTIONS`\n\nInjection token that can be used to specify default snack bar.\n\n```docs-markdown-code\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS: InjectionToken<MatSnackBarConfig<any>>;\n\n```\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#MAT_SNACK_BAR_DATA) `MAT_SNACK_BAR_DATA`\n\nInjection token that can be used to access the data that was passed in to a snack bar.\n\n```docs-markdown-code\nconst MAT_SNACK_BAR_DATA: InjectionToken<any>;\n\n```\n\n## API reference for Angular Material snack-bar-testing\n\n`\n          import {MatSnackBarHarness} from '@angular/material/snack-bar/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/snack-bar/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#MatSnackBarHarness) `MatSnackBarHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/snack-bar/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a mat-snack-bar in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-snack-bar-container:not([mat-exit])'` | The selector for the host element of a `MatSnackBar` instance. |\n\n##### Methods\n\n| async<br> <br>dismissWithAction |\n| --- |\n| Dismisses the snack-bar by clicking the action button. Method cannot be used for snack-bar's<br>without action or with custom content. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getActionDescription |\n| --- |\n| Gets the description of the snack-bar. Method cannot be used for snack-bar's without action or<br>with custom content. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getAriaLive |\n| --- |\n| Gets the aria-live of the snack-bar's live region. The aria-live of a snack-bar is<br>determined based on the ARIA politeness specified in the snack-bar config. |\n| Returns |\n| --- |\n| `Promise<AriaLivePoliteness>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getMessage |\n| --- |\n| Gets the message of the snack-bar. Method cannot be used for snack-bar's with custom content. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>hasAction |\n| --- |\n| Whether the snack-bar has an action. Method cannot be used for snack-bar's with custom content. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDismissed |\n| --- |\n| Gets whether the snack-bar has been dismissed. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatSnackBarHarness` that meets<br>certain criteria. |\n| Parameters |\n| --- |\n| options<br> `SnackBarHarnessFilters = {}` | Options for filtering which snack bar instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatSnackBarHarness>` | a `HarnessPredicate` configured with the given options. |\n\n| Deprecated<br> <br>async<br> <br>getRole |\n| --- |\n| Gets the role of the snack-bar. The role of a snack-bar is determined based<br>on the ARIA politeness specified in the snack-bar config. |\n| Returns |\n| --- |\n| `Promise<'alert' | 'status' | null>` |  |\n\n### [link](https://material.angular.io/components/snack-bar/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/snack-bar/api\\#SnackBarHarnessFilters) `SnackBarHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatSnackBarHarness` instances.\n\nSnackbar\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nUse \\`getAriaLive\\` instead. Will be removed in v13.0.0 or later.\n\nCopy import to the clipboard\n\nUse \\`dismissWithAction\\` instead. Will be removed in v8.0.0 or later.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-ec33259f-3ca5-42ec-a8f1-b378eb85b12e.png"
  },
  "metadata": {
    "favicon": "https://material.angular.io/components/snack-bar/assets/img/favicon.ico?v=19.1.0",
    "twitter:card": "summary",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "og:type": "website",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:height": "943",
    "ogTitle": "Angular Material",
    "twitter:creator": "@Angular",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image:type": "image/png",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "theme-color": "#d7e3ff",
    "twitter:site": "@Angular",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "og:locale": "en_US",
    "language": "en-US",
    "og:site_name": "Angular Material",
    "ogUrl": "https://material.angular.io/",
    "ogLocale": "en_US",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "viewport": "width=device-width, initial-scale=1",
    "mobile-web-app-capable": "yes",
    "apple-mobile-web-app-capable": "yes",
    "og:image:width": "1339",
    "ogSiteName": "Angular Material",
    "author": "Angular Components Team",
    "twitter:title": "Angular Material",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "og:title": "Angular Material",
    "title": "Snackbar | Angular Material",
    "og:url": "https://material.angular.io/",
    "scrapeId": "0c2b8349-221b-48e0-bc5c-a7931b899cc3",
    "sourceURL": "https://material.angular.io/components/snack-bar/api",
    "url": "https://material.angular.io/components/snack-bar/api",
    "statusCode": 200
  }
}