{
  "scrapeId": "a87d4294-2fe5-4a3c-9ba2-b81de1d3d8bd",
  "sourceURL": "https://material.angular.io/cdk/portal/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\nAPI for portal\n\n## API reference for Angular CDK portal\n\n`\n          import {PortalModule} from '@angular/cdk/portal';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/cdk/portal/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/cdk/portal/api\\#CdkPortal) `CdkPortal`extends [TemplatePortal](https://material.angular.io/cdk/portal/cdk/portal/api\\#TemplatePortal)\n\nDirective version of a `TemplatePortal`. Because the directive _is_ a TemplatePortal,\nthe directive instance itself can be attached to a host, enabling declarative use of portals.\n\nSelector:\\[cdkPortal\\]\n\nExported as:cdkPortal\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `context: C` | Contextual data to be passed in to the embedded view. |\n| `injector: Injector` | The injector to use for the embedded view. |\n| `isAttached: boolean` | Whether this portal is attached to a host. |\n| `origin: ElementRef` |  |\n| `templateRef: TemplateRef<C>` | The embedded template that will be used to instantiate an embedded View in the host. |\n| `viewContainerRef: ViewContainerRef` | Reference to the ViewContainer into which the template will be stamped out. |\n\n##### Methods\n\n| attach |\n| --- |\n| Attach the portal to the provided `PortalOutlet`.<br>When a context is provided it will override the `context` property of the `TemplatePortal`<br>instance. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n| context<br> `C = this.context` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<C>` |  |\n\n| detach |\n| --- |\n\n| setAttachedHost |\n| --- |\n| Sets the PortalOutlet reference without performing `attach()`. This is used directly by<br>the PortalOutlet when it is performing an `attach()` or `detach()`. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n\n#### [link](https://material.angular.io/cdk/portal/api\\#TemplatePortalDirective) `TemplatePortalDirective`extends [CdkPortal](https://material.angular.io/cdk/portal/cdk/portal/api\\#CdkPortal)\n\nSelector:\\[cdk-portal\\]\\[portal\\]\n\nExported as:cdkPortal\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `context: C` | Contextual data to be passed in to the embedded view. |\n| `injector: Injector` | The injector to use for the embedded view. |\n| `isAttached: boolean` | Whether this portal is attached to a host. |\n| `origin: ElementRef` |  |\n| `templateRef: TemplateRef<C>` | The embedded template that will be used to instantiate an embedded View in the host. |\n| `viewContainerRef: ViewContainerRef` | Reference to the ViewContainer into which the template will be stamped out. |\n\n##### Methods\n\n| attach |\n| --- |\n| Attach the portal to the provided `PortalOutlet`.<br>When a context is provided it will override the `context` property of the `TemplatePortal`<br>instance. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n| context<br> `C = this.context` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<C>` |  |\n\n| detach |\n| --- |\n\n| setAttachedHost |\n| --- |\n| Sets the PortalOutlet reference without performing `attach()`. This is used directly by<br>the PortalOutlet when it is performing an `attach()` or `detach()`. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n\n#### [link](https://material.angular.io/cdk/portal/api\\#CdkPortalOutlet) `CdkPortalOutlet`extends [BasePortalOutlet](https://material.angular.io/cdk/portal/cdk/portal/api\\#BasePortalOutlet)\n\nDirective version of a PortalOutlet. Because the directive _is_ a PortalOutlet, portals can be\ndirectly attached to it, enabling declarative use.\n\nUsage:\n`<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n\nSelector:\\[cdkPortalOutlet\\]\n\nExported as:cdkPortalOutlet\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('cdkPortalOutlet')<br> <br>`portal: Portal<any> | null` | Portal associated with the Portal outlet. |\n| @Output()<br>`attached: EventEmitter<CdkPortalOutletAttachedRef>` | Emits when a portal is attached to the outlet. |\n| `attachedRef: CdkPortalOutletAttachedRef` | Component or view reference that is attached to the portal. |\n| Deprecated<br> <br>`attachDomPortal: (portal: DomPortal) => {<br>    const element = portal.element;<br>    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {<br>        throw Error('DOM portal content must be attached to a parent node.');<br>    }<br>    const anchorNode = this._document.createComment('dom-portal');<br>    portal.setAttachedHost(this);<br>    element.parentNode!.insertBefore(anchorNode, element);<br>    this._getRootNode().appendChild(element);<br>    this._attachedPortal = portal;<br>    super.setDisposeFn(() => {<br>        if (anchorNode.parentNode) {<br>            anchorNode.parentNode!.replaceChild(element, anchorNode);<br>        }<br>    });<br>}` | Attaches the given DomPortal to this PortalHost by moving all of the portal content into it. |\n\n##### Methods\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` |  |\n| Returns |\n| --- |\n| `ComponentRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<T>` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `any` |  |\n| Returns |\n| --- |\n| `any` |  |\n\n| attachComponentPortal |\n| --- |\n| Attach the given ComponentPortal to this PortalOutlet. |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` | Portal to be attached to the portal outlet. |\n| Returns |\n| --- |\n| `ComponentRef<T>` | Reference to the created component. |\n\n| attachTemplatePortal |\n| --- |\n| Attach the given TemplatePortal to this PortalHost as an embedded View. |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<C>` | Portal to be attached. |\n| Returns |\n| --- |\n| `EmbeddedViewRef<C>` | Reference to the created embedded view. |\n\n| detach |\n| --- |\n| Detaches a previously attached portal. |\n\n| dispose |\n| --- |\n| Permanently dispose of this portal host. |\n\n| hasAttached |\n| --- |\n| Whether this host has an attached portal. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n#### [link](https://material.angular.io/cdk/portal/api\\#PortalHostDirective) `PortalHostDirective`extends [CdkPortalOutlet](https://material.angular.io/cdk/portal/cdk/portal/api\\#CdkPortalOutlet)\n\nSelector:\\[cdkPortalHost\\]\\[portalHost\\]\n\nExported as:cdkPortalHost\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input(cdkPortalHost)<br> <br>`portal: Portal<any> | null` | Portal associated with the Portal outlet. |\n| @Output()<br>`attached: EventEmitter<CdkPortalOutletAttachedRef>` | Emits when a portal is attached to the outlet. |\n| `attachedRef: CdkPortalOutletAttachedRef` | Component or view reference that is attached to the portal. |\n| Deprecated<br> <br>`attachDomPortal: (portal: DomPortal) => {<br>    const element = portal.element;<br>    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {<br>        throw Error('DOM portal content must be attached to a parent node.');<br>    }<br>    const anchorNode = this._document.createComment('dom-portal');<br>    portal.setAttachedHost(this);<br>    element.parentNode!.insertBefore(anchorNode, element);<br>    this._getRootNode().appendChild(element);<br>    this._attachedPortal = portal;<br>    super.setDisposeFn(() => {<br>        if (anchorNode.parentNode) {<br>            anchorNode.parentNode!.replaceChild(element, anchorNode);<br>        }<br>    });<br>}` | Attaches the given DomPortal to this PortalHost by moving all of the portal content into it. |\n\n##### Methods\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` |  |\n| Returns |\n| --- |\n| `ComponentRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<T>` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `any` |  |\n| Returns |\n| --- |\n| `any` |  |\n\n| attachComponentPortal |\n| --- |\n| Attach the given ComponentPortal to this PortalOutlet. |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` | Portal to be attached to the portal outlet. |\n| Returns |\n| --- |\n| `ComponentRef<T>` | Reference to the created component. |\n\n| attachTemplatePortal |\n| --- |\n| Attach the given TemplatePortal to this PortalHost as an embedded View. |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<C>` | Portal to be attached. |\n| Returns |\n| --- |\n| `EmbeddedViewRef<C>` | Reference to the created embedded view. |\n\n| detach |\n| --- |\n| Detaches a previously attached portal. |\n\n| dispose |\n| --- |\n| Permanently dispose of this portal host. |\n\n| hasAttached |\n| --- |\n| Whether this host has an attached portal. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n### [link](https://material.angular.io/cdk/portal/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/cdk/portal/api\\#Portal) `Portal`\n\nA `Portal` is something that you want to render somewhere else.\nIt can be attach to / detached from a `PortalOutlet`.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `isAttached: boolean` | Whether this portal is attached to a host. |\n\n##### Methods\n\n| attach |\n| --- |\n| Attach this portal to a host. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n| Returns |\n| --- |\n| `T` |  |\n\n| detach |\n| --- |\n| Detach this portal from its host |\n\n| setAttachedHost |\n| --- |\n| Sets the PortalOutlet reference without performing `attach()`. This is used directly by<br>the PortalOutlet when it is performing an `attach()` or `detach()`. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n\n#### [link](https://material.angular.io/cdk/portal/api\\#ComponentPortal) `ComponentPortal`extends [Portal](https://material.angular.io/cdk/portal/cdk/portal/api\\#Portal)\n\nA `ComponentPortal` is a portal that instantiates some Component upon attachment.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `component: ComponentType<T>` | The type of the component that will be instantiated for attachment. |\n| `injector: Injector | null` | Injector used for the instantiation of the component. |\n| `isAttached: boolean` | Whether this portal is attached to a host. |\n| `projectableNodes: Node[][] | null` | List of DOM nodes that should be projected through `<ng-content>` of the attached component. |\n| `viewContainerRef: ViewContainerRef | null` | Where the attached component should live in Angular's _logical_ component tree.<br>This is different from where the component _renders_, which is determined by the PortalOutlet.<br>The origin is necessary when the host is outside of the Angular application context. |\n| Deprecated<br> <br>`componentFactoryResolver: any` |  |\n\n##### Methods\n\n| attach |\n| --- |\n| Attach this portal to a host. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n| Returns |\n| --- |\n| `T` |  |\n\n| detach |\n| --- |\n| Detach this portal from its host |\n\n| setAttachedHost |\n| --- |\n| Sets the PortalOutlet reference without performing `attach()`. This is used directly by<br>the PortalOutlet when it is performing an `attach()` or `detach()`. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n\n#### [link](https://material.angular.io/cdk/portal/api\\#TemplatePortal) `TemplatePortal`extends [Portal](https://material.angular.io/cdk/portal/cdk/portal/api\\#Portal)\n\nA `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `context: C` | Contextual data to be passed in to the embedded view. |\n| `injector: Injector` | The injector to use for the embedded view. |\n| `isAttached: boolean` | Whether this portal is attached to a host. |\n| `origin: ElementRef` |  |\n| `templateRef: TemplateRef<C>` | The embedded template that will be used to instantiate an embedded View in the host. |\n| `viewContainerRef: ViewContainerRef` | Reference to the ViewContainer into which the template will be stamped out. |\n\n##### Methods\n\n| attach |\n| --- |\n| Attach the portal to the provided `PortalOutlet`.<br>When a context is provided it will override the `context` property of the `TemplatePortal`<br>instance. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n| context<br> `C = this.context` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<C>` |  |\n\n| detach |\n| --- |\n\n| setAttachedHost |\n| --- |\n| Sets the PortalOutlet reference without performing `attach()`. This is used directly by<br>the PortalOutlet when it is performing an `attach()` or `detach()`. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n\n#### [link](https://material.angular.io/cdk/portal/api\\#DomPortal) `DomPortal`extends [Portal](https://material.angular.io/cdk/portal/cdk/portal/api\\#Portal)\n\nA `DomPortal` is a portal whose DOM element will be taken from its current position\nin the DOM and moved into a portal outlet, when it is attached. On detach, the content\nwill be restored to its original position.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `element: T` | DOM node hosting the portal's content. |\n| `isAttached: boolean` | Whether this portal is attached to a host. |\n\n##### Methods\n\n| attach |\n| --- |\n| Attach this portal to a host. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n| Returns |\n| --- |\n| `T` |  |\n\n| detach |\n| --- |\n| Detach this portal from its host |\n\n| setAttachedHost |\n| --- |\n| Sets the PortalOutlet reference without performing `attach()`. This is used directly by<br>the PortalOutlet when it is performing an `attach()` or `detach()`. |\n| Parameters |\n| --- |\n| host<br> `PortalOutlet` |  |\n\n#### [link](https://material.angular.io/cdk/portal/api\\#BasePortalOutlet) `BasePortalOutlet`\n\nPartial implementation of PortalOutlet that handles attaching\nComponentPortal and TemplatePortal.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `attachDomPortal: null | ((portal: DomPortal) => any)` |  |\n\n##### Methods\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` |  |\n| Returns |\n| --- |\n| `ComponentRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<T>` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `any` |  |\n| Returns |\n| --- |\n| `any` |  |\n\n| attachComponentPortal |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` |  |\n| Returns |\n| --- |\n| `ComponentRef<T>` |  |\n\n| attachTemplatePortal |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<C>` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<C>` |  |\n\n| detach |\n| --- |\n| Detaches a previously attached portal. |\n\n| dispose |\n| --- |\n| Permanently dispose of this portal host. |\n\n| hasAttached |\n| --- |\n| Whether this host has an attached portal. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n#### [link](https://material.angular.io/cdk/portal/api\\#BasePortalHost) `BasePortalHost`extends [BasePortalOutlet](https://material.angular.io/cdk/portal/cdk/portal/api\\#BasePortalOutlet)\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `attachDomPortal: null | ((portal: DomPortal) => any)` |  |\n\n##### Methods\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` |  |\n| Returns |\n| --- |\n| `ComponentRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<T>` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `any` |  |\n| Returns |\n| --- |\n| `any` |  |\n\n| attachComponentPortal |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` |  |\n| Returns |\n| --- |\n| `ComponentRef<T>` |  |\n\n| attachTemplatePortal |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<C>` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<C>` |  |\n\n| detach |\n| --- |\n| Detaches a previously attached portal. |\n\n| dispose |\n| --- |\n| Permanently dispose of this portal host. |\n\n| hasAttached |\n| --- |\n| Whether this host has an attached portal. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n#### [link](https://material.angular.io/cdk/portal/api\\#DomPortalOutlet) `DomPortalOutlet`extends [BasePortalOutlet](https://material.angular.io/cdk/portal/cdk/portal/api\\#BasePortalOutlet)\n\nA PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\napplication context.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `outletElement: Element` | Element into which the content is projected. |\n| Deprecated<br> <br>`attachDomPortal: (portal: DomPortal) => {<br>    const element = portal.element;<br>    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {<br>        throw Error('DOM portal content must be attached to a parent node.');<br>    }<br>    const anchorNode = this._document.createComment('dom-portal');<br>    element.parentNode!.insertBefore(anchorNode, element);<br>    this.outletElement.appendChild(element);<br>    this._attachedPortal = portal;<br>    super.setDisposeFn(() => {<br>        if (anchorNode.parentNode) {<br>            anchorNode.parentNode.replaceChild(element, anchorNode);<br>        }<br>    });<br>}` | Attaches a DOM portal by transferring its content into the outlet. |\n\n##### Methods\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` |  |\n| Returns |\n| --- |\n| `ComponentRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<T>` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `any` |  |\n| Returns |\n| --- |\n| `any` |  |\n\n| attachComponentPortal |\n| --- |\n| Attach the given ComponentPortal to DOM element. |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` | Portal to be attached |\n| Returns |\n| --- |\n| `ComponentRef<T>` | Reference to the created component. |\n\n| attachTemplatePortal |\n| --- |\n| Attaches a template portal to the DOM as an embedded view. |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<C>` | Portal to be attached. |\n| Returns |\n| --- |\n| `EmbeddedViewRef<C>` | Reference to the created embedded view. |\n\n| detach |\n| --- |\n| Detaches a previously attached portal. |\n\n| dispose |\n| --- |\n| Clears out a portal from the DOM. |\n\n| hasAttached |\n| --- |\n| Whether this host has an attached portal. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n#### [link](https://material.angular.io/cdk/portal/api\\#DomPortalHost) `DomPortalHost`extends [DomPortalOutlet](https://material.angular.io/cdk/portal/cdk/portal/api\\#DomPortalOutlet)\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `outletElement: Element` | Element into which the content is projected. |\n| Deprecated<br> <br>`attachDomPortal: (portal: DomPortal) => {<br>    const element = portal.element;<br>    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {<br>        throw Error('DOM portal content must be attached to a parent node.');<br>    }<br>    const anchorNode = this._document.createComment('dom-portal');<br>    element.parentNode!.insertBefore(anchorNode, element);<br>    this.outletElement.appendChild(element);<br>    this._attachedPortal = portal;<br>    super.setDisposeFn(() => {<br>        if (anchorNode.parentNode) {<br>            anchorNode.parentNode.replaceChild(element, anchorNode);<br>        }<br>    });<br>}` | Attaches a DOM portal by transferring its content into the outlet. |\n\n##### Methods\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` |  |\n| Returns |\n| --- |\n| `ComponentRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<T>` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `any` |  |\n| Returns |\n| --- |\n| `any` |  |\n\n| attachComponentPortal |\n| --- |\n| Attach the given ComponentPortal to DOM element. |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` | Portal to be attached |\n| Returns |\n| --- |\n| `ComponentRef<T>` | Reference to the created component. |\n\n| attachTemplatePortal |\n| --- |\n| Attaches a template portal to the DOM as an embedded view. |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<C>` | Portal to be attached. |\n| Returns |\n| --- |\n| `EmbeddedViewRef<C>` | Reference to the created embedded view. |\n\n| detach |\n| --- |\n| Detaches a previously attached portal. |\n\n| dispose |\n| --- |\n| Clears out a portal from the DOM. |\n\n| hasAttached |\n| --- |\n| Whether this host has an attached portal. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n### [link](https://material.angular.io/cdk/portal/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/cdk/portal/api\\#ComponentType) `ComponentType`\n\nInterface that can be used to generically type a class.\n\n##### Methods\n\n| new |\n| --- |\n| Parameters |\n| --- |\n| ...args<br> `any[]` |  |\n| Returns |\n| --- |\n| `T` |  |\n\n#### [link](https://material.angular.io/cdk/portal/api\\#PortalOutlet) `PortalOutlet`\n\nA `PortalOutlet` is a space that can contain a single `Portal`.\n\n##### Methods\n\n| attach |\n| --- |\n| Attaches a portal to this outlet. |\n| Parameters |\n| --- |\n| portal<br> `Portal<any>` |  |\n| Returns |\n| --- |\n| `any` |  |\n\n| detach |\n| --- |\n| Detaches the currently attached portal from this outlet. |\n| Returns |\n| --- |\n| `any` |  |\n\n| dispose |\n| --- |\n| Performs cleanup before the outlet is destroyed. |\n\n| hasAttached |\n| --- |\n| Whether there is currently a portal attached to this outlet. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n### [link](https://material.angular.io/cdk/portal/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/cdk/portal/api\\#PortalHost) `PortalHost`\n\nDeprecated\n\n```docs-markdown-code\ntype PortalHost = PortalOutlet;\n\n```\n\n#### [link](https://material.angular.io/cdk/portal/api\\#CdkPortalOutletAttachedRef) `CdkPortalOutletAttachedRef`\n\nPossible attached references to the CdkPortalOutlet.\n\n```docs-markdown-code\ntype CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\n```\n\nPortal\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nUse \\`CdkPortal\\` instead. Will be removed in v9.0.0 or later.\n\nTo be turned into a method. Will be removed in v10.0.0 or later.\n\nUse \\`CdkPortalOutlet\\` instead. Will be removed in v9.0.0 or later.\n\nNo longer in use. To be removed. Will be removed in v18.0.0 or later.\n\nUse \\`BasePortalOutlet\\` instead. Will be removed in v9.0.0 or later.\n\nUse \\`DomPortalOutlet\\` instead. Will be removed in v9.0.0 or later.\n\nUse \\`PortalOutlet\\` instead. Will be removed in v9.0.0 or later.\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-dede1e8c-09b5-47e9-8039-1bfaa7c295f5.png"
  },
  "metadata": {
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-capable": "yes",
    "twitter:card": "summary",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "title": "Portal | Angular Material",
    "ogTitle": "Angular Material",
    "twitter:title": "Angular Material",
    "ogUrl": "https://material.angular.io/",
    "og:type": "website",
    "og:locale": "en_US",
    "og:url": "https://material.angular.io/",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "og:title": "Angular Material",
    "og:image:height": "943",
    "ogLocale": "en_US",
    "language": "en-US",
    "twitter:site": "@Angular",
    "og:image:width": "1339",
    "mobile-web-app-capable": "yes",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "author": "Angular Components Team",
    "twitter:creator": "@Angular",
    "viewport": "width=device-width, initial-scale=1",
    "og:site_name": "Angular Material",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "ogSiteName": "Angular Material",
    "favicon": "https://material.angular.io/cdk/portal/assets/img/favicon.ico?v=19.1.0",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "theme-color": "#d7e3ff",
    "og:image:type": "image/png",
    "scrapeId": "a87d4294-2fe5-4a3c-9ba2-b81de1d3d8bd",
    "sourceURL": "https://material.angular.io/cdk/portal/api",
    "url": "https://material.angular.io/cdk/portal/api",
    "statusCode": 200
  }
}