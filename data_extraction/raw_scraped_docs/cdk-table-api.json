{
  "scrapeId": "f18c19ad-51a7-48d4-a413-15bb45306032",
  "sourceURL": "https://material.angular.io/cdk/table/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\nAPI for table\n\n## API reference for Angular CDK table\n\n`\n          import {CdkTableModule} from '@angular/cdk/table';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/cdk/table/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkRecycleRows) `CdkRecycleRows`\n\nEnables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\ntables that animate rows.\n\nSelector:cdk-table\\[recycleRows\\]table\\[cdk-table\\]\\[recycleRows\\]\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkTable) `CdkTable`\n\nA data table that can render a header row, data rows, and a footer row.\nUses the dataSource input to determine the data to be rendered. The data can be provided either\nas a data array, an Observable stream that emits the data array to render, or a DataSource with a\nconnect function that will return an Observable stream that emits the data array to render.\n\nSelector:cdk-tabletable\\[cdk-table\\]\n\nExported as:cdkTable\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`dataSource: CdkTableDataSourceInput<T>` | The table's source of data, which can be provided in three ways (in order of complexity):<br>- Simple data array (each object represents one table row)<br>- Stream that emits a data array each time the array changes<br>- `DataSource` object that implements the connect/disconnect interface.<br>If a data array is provided, the table must be notified when the array's objects are<br>added, removed, or moved. This can be done by calling the `renderRows()` function which will<br>render the diff since the last table render. If the data array reference is changed, the table<br>will automatically trigger an update to the rows.<br>When providing an Observable stream, the table will trigger an update automatically when the<br>stream emits a new array of data.<br>Finally, when providing a `DataSource` object, the table will use the Observable stream<br>provided by the connect function and trigger updates when that stream emits new data array<br>values. During the table's ngOnDestroy or when the data source is removed from the table, the<br>table will call the DataSource's `disconnect` function (may be useful for cleaning up any<br>subscriptions registered during the connect process). |\n| @Input({ transform: booleanAttribute })<br> <br>`fixedLayout: boolean` | Whether to use a fixed table layout. Enabling this option will enforce consistent column widths<br>and optimize rendering sticky styles for native tables. No-op for flex tables. |\n| @Input({ transform: booleanAttribute })<br> <br>`multiTemplateDataRows: boolean` | Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'<br>predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each<br>dataobject will render the first row that evaluates its when predicate to true, in the order<br>defined in the table, or otherwise the default row which does not have a when predicate. |\n| @Input()<br>`trackBy: TrackByFunction<T>` | Tracking function that will be used to check the differences in data changes. Used similarly<br>to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data<br>relative to the function to know if a row should be added/removed/moved.<br>Accepts a function that takes two parameters, `index` and `item`. |\n| @Output()<br>`contentChanged: EventEmitter<void>` | Emits when the table completes rendering a set of data rows based on the latest data from the<br>data source, even if the set of rows is empty. |\n| `needsPositionStickyOnElement: true` | Whether to manually add position: sticky to all sticky cell elements. Not needed if<br>the position is set in a selector associated with the value of stickyCssClass. May be<br>overridden by table subclasses |\n| `stickyCssClass: string` | CSS class added to any row or cell that has sticky positioning applied. May be overridden by<br>table subclasses. |\n\n##### Methods\n\n| addColumnDef |\n| --- |\n| Adds a column definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| columnDef<br> `CdkColumnDef` |  |\n\n| addFooterRowDef |\n| --- |\n| Adds a footer row definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| footerRowDef<br> `CdkFooterRowDef` |  |\n\n| addHeaderRowDef |\n| --- |\n| Adds a header row definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| headerRowDef<br> `CdkHeaderRowDef` |  |\n\n| addRowDef |\n| --- |\n| Adds a row definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| rowDef<br> `CdkRowDef<T>` |  |\n\n| removeColumnDef |\n| --- |\n| Removes a column definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| columnDef<br> `CdkColumnDef` |  |\n\n| removeFooterRowDef |\n| --- |\n| Removes a footer row definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| footerRowDef<br> `CdkFooterRowDef` |  |\n\n| removeHeaderRowDef |\n| --- |\n| Removes a header row definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| headerRowDef<br> `CdkHeaderRowDef` |  |\n\n| removeRowDef |\n| --- |\n| Removes a row definition that was not included as part of the content children. |\n| Parameters |\n| --- |\n| rowDef<br> `CdkRowDef<T>` |  |\n\n| renderRows |\n| --- |\n| Renders rows based on the table's latest set of data, which was either provided directly as an<br>input or retrieved through an Observable stream (directly or from a DataSource).<br>Checks for differences in the data since the last diff to perform only the necessary<br>changes (add/remove/move rows).<br>If the table's data source is a DataSource or Observable, this will be invoked automatically<br>each time the provided Observable stream emits a new data array. Otherwise if your data is<br>an array, this function will need to be called to render any changes. |\n\n| setNoDataRow |\n| --- |\n| Sets a no data row definition that was not included as a part of the content children. |\n| Parameters |\n| --- |\n| noDataRow<br> `CdkNoDataRow` |  |\n\n| updateStickyColumnStyles |\n| --- |\n| Updates the column sticky styles. First resets all applied styles with respect to the cells<br>sticking to the left and right. Then sticky styles are added for the left and right according<br>to the column definitions for each cell in each row. This is automatically called when<br>the data source provides a new set of data or when a column definition changes its sticky<br>input. May be called manually for cases where the cell content changes outside of these events. |\n\n| updateStickyFooterRowStyles |\n| --- |\n| Updates the footer sticky styles. First resets all applied styles with respect to the cells<br>sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is<br>automatically called when the footer row changes its displayed set of columns, or if its<br>sticky input changes. May be called manually for cases where the cell content changes outside<br>of these events. |\n\n| updateStickyHeaderRowStyles |\n| --- |\n| Updates the header sticky styles. First resets all applied styles with respect to the cells<br>sticking to the top. Then, evaluating which cells need to be stuck to the top. This is<br>automatically called when the header row changes its displayed set of columns, or if its<br>sticky input changes. May be called manually for cases where the cell content changes outside<br>of these events. |\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkCellDef) `CdkCellDef`\n\nCell definition for a CDK table.\nCaptures the template of a column's data row cell as well as cell-specific properties.\n\nSelector:\\[cdkCellDef\\]\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkHeaderCellDef) `CdkHeaderCellDef`\n\nHeader cell definition for a CDK table.\nCaptures the template of a column's header cell and as well as cell-specific properties.\n\nSelector:\\[cdkHeaderCellDef\\]\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkFooterCellDef) `CdkFooterCellDef`\n\nFooter cell definition for a CDK table.\nCaptures the template of a column's footer cell and as well as cell-specific properties.\n\nSelector:\\[cdkFooterCellDef\\]\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkColumnDef) `CdkColumnDef`\n\nColumn definition for the CDK table.\nDefines a set of cells available for a table column.\n\nSelector:\\[cdkColumnDef\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('cdkColumnDef')<br> <br>`name: string` | Unique name for this column. |\n| @Input({ transform: booleanAttribute })<br> <br>`sticky: boolean` | Whether the cell is sticky. |\n| @Input({ transform: booleanAttribute })<br> <br>`stickyEnd: boolean` | Whether this column should be sticky positioned on the end of the row. Should make sure<br>that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value<br>has been changed. |\n| `cssClassFriendlyName: string` | Transformed version of the column name that can be used as part of a CSS classname. Excludes<br>all non-alphanumeric characters and the special characters '-' and '\\_'. Any characters that<br>do not match are replaced by the '-' character. |\n\n##### Methods\n\n| hasStickyChanged |\n| --- |\n| Whether the sticky state has changed. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| resetStickyChanged |\n| --- |\n| Resets the sticky changed state. |\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkHeaderCell) `CdkHeaderCell`extends [BaseCdkCell](https://material.angular.io/cdk/table/cdk/table/api\\#BaseCdkCell)\n\nHeader cell template container that adds the right classes and role.\n\nSelector:cdk-header-cellth\\[cdk-header-cell\\]\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkFooterCell) `CdkFooterCell`extends [BaseCdkCell](https://material.angular.io/cdk/table/cdk/table/api\\#BaseCdkCell)\n\nFooter cell template container that adds the right classes and role.\n\nSelector:cdk-footer-celltd\\[cdk-footer-cell\\]\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkCell) `CdkCell`extends [BaseCdkCell](https://material.angular.io/cdk/table/cdk/table/api\\#BaseCdkCell)\n\nCell template container that adds the right classes and role.\n\nSelector:cdk-celltd\\[cdk-cell\\]\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkHeaderRowDef) `CdkHeaderRowDef`extends [BaseRowDef](https://material.angular.io/cdk/table/cdk/table/api\\#BaseRowDef)\n\nHeader row definition for the CDK table.\nCaptures the header row's template and other header properties such as the columns to display.\n\nSelector:\\[cdkHeaderRowDef\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input(cdkHeaderRowDef)<br> <br>`columns: Iterable<string>` | The columns to be displayed on this row. |\n| @Input({ alias: 'cdkHeaderRowDefSticky', transform: booleanAttribute })<br> <br>`sticky: boolean` | Whether the row is sticky. |\n| `template: inject<TemplateRef<any>>(TemplateRef)` |  |\n\n##### Methods\n\n| extractCellTemplate |\n| --- |\n| Gets this row def's relevant cell template from the provided column def. |\n| Parameters |\n| --- |\n| column<br> `CdkColumnDef` |  |\n| Returns |\n| --- |\n| `TemplateRef<any>` |  |\n\n| getColumnsDiff |\n| --- |\n| Returns the difference between the current columns and the columns from the last diff, or null<br>if there is no difference. |\n| Returns |\n| --- |\n| `IterableChanges<any> | null` |  |\n\n| hasStickyChanged |\n| --- |\n| Whether the sticky state has changed. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| resetStickyChanged |\n| --- |\n| Resets the sticky changed state. |\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkFooterRowDef) `CdkFooterRowDef`extends [BaseRowDef](https://material.angular.io/cdk/table/cdk/table/api\\#BaseRowDef)\n\nFooter row definition for the CDK table.\nCaptures the footer row's template and other footer properties such as the columns to display.\n\nSelector:\\[cdkFooterRowDef\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input(cdkFooterRowDef)<br> <br>`columns: Iterable<string>` | The columns to be displayed on this row. |\n| @Input({ alias: 'cdkFooterRowDefSticky', transform: booleanAttribute })<br> <br>`sticky: boolean` | Whether the row is sticky. |\n| `template: inject<TemplateRef<any>>(TemplateRef)` |  |\n\n##### Methods\n\n| extractCellTemplate |\n| --- |\n| Gets this row def's relevant cell template from the provided column def. |\n| Parameters |\n| --- |\n| column<br> `CdkColumnDef` |  |\n| Returns |\n| --- |\n| `TemplateRef<any>` |  |\n\n| getColumnsDiff |\n| --- |\n| Returns the difference between the current columns and the columns from the last diff, or null<br>if there is no difference. |\n| Returns |\n| --- |\n| `IterableChanges<any> | null` |  |\n\n| hasStickyChanged |\n| --- |\n| Whether the sticky state has changed. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| resetStickyChanged |\n| --- |\n| Resets the sticky changed state. |\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkRowDef) `CdkRowDef`extends [BaseRowDef](https://material.angular.io/cdk/table/cdk/table/api\\#BaseRowDef)\n\nData row definition for the CDK table.\nCaptures the header row's template and other row properties such as the columns to display and\na when predicate that describes when this row should be used.\n\nSelector:\\[cdkRowDef\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input(cdkRowDefColumns)<br> <br>`columns: Iterable<string>` | The columns to be displayed on this row. |\n| @Input(cdkRowDefWhen)<br> <br>`when: (index: number, rowData: T) => boolean` | Function that should return true if this row template should be used for the provided index<br>and row data. If left undefined, this row will be considered the default row template to use<br>when no other when functions return true for the data.<br>For every row, there must be at least one when function that passes or an undefined to default. |\n| `template: inject<TemplateRef<any>>(TemplateRef)` |  |\n\n##### Methods\n\n| extractCellTemplate |\n| --- |\n| Gets this row def's relevant cell template from the provided column def. |\n| Parameters |\n| --- |\n| column<br> `CdkColumnDef` |  |\n| Returns |\n| --- |\n| `TemplateRef<any>` |  |\n\n| getColumnsDiff |\n| --- |\n| Returns the difference between the current columns and the columns from the last diff, or null<br>if there is no difference. |\n| Returns |\n| --- |\n| `IterableChanges<any> | null` |  |\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkHeaderRow) `CdkHeaderRow`\n\nHeader template container that contains the cell outlet. Adds the right class and role.\n\nSelector:cdk-header-rowtr\\[cdk-header-row\\]\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkFooterRow) `CdkFooterRow`\n\nFooter template container that contains the cell outlet. Adds the right class and role.\n\nSelector:cdk-footer-rowtr\\[cdk-footer-row\\]\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkRow) `CdkRow`\n\nData row template container that contains the cell outlet. Adds the right class and role.\n\nSelector:cdk-rowtr\\[cdk-row\\]\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkNoDataRow) `CdkNoDataRow`\n\nRow that can be used to display a message when no data is shown in the table.\n\nSelector:ng-template\\[cdkNoDataRow\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `templateRef: inject<TemplateRef<any>>(TemplateRef)` |  |\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkTextColumn) `CdkTextColumn`\n\nColumn that simply shows text content for the header and row cells. Assumes that the table\nis using the native table implementation ( `<table>`).\n\nBy default, the name of this column will be the header text and data property accessor.\nThe header text can be overridden with the `headerText` input. Cell values can be overridden with\nthe `dataAccessor` input. Change the text justification to the start or end using the `justify`\ninput.\n\nSelector:cdk-text-column\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`dataAccessor: (data: T, name: string) => string` | Accessor function to retrieve the data rendered for each cell. If this<br>property is not set, the data cells will render the value found in the data's property matching<br>the column's name. For example, if the column is named `id`, then the rendered value will be<br>value defined by the data's `id` property. |\n| @Input()<br>`headerText: string` | Text label that should be used for the column header. If this property is not<br>set, the header text will default to the column name with its first letter capitalized. |\n| @Input()<br>`justify: 'start' | 'end' | 'center'` | Alignment of the cell values. |\n| @Input()<br>`name: string` | Column name that should be used to reference this column. |\n\n### [link](https://material.angular.io/cdk/table/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/cdk/table/api\\#BaseCdkCell) `BaseCdkCell`\n\nBase class for the cells. Adds a CSS classname that identifies the column it renders in.\n\n#### [link](https://material.angular.io/cdk/table/api\\#BaseRowDef) `BaseRowDef`\n\nBase class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\nfor changes and notifying the table.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `columns: Iterable<string>` | The columns to be displayed on this row. |\n| `template: inject<TemplateRef<any>>(TemplateRef)` |  |\n\n##### Methods\n\n| extractCellTemplate |\n| --- |\n| Gets this row def's relevant cell template from the provided column def. |\n| Parameters |\n| --- |\n| column<br> `CdkColumnDef` |  |\n| Returns |\n| --- |\n| `TemplateRef<any>` |  |\n\n| getColumnsDiff |\n| --- |\n| Returns the difference between the current columns and the columns from the last diff, or null<br>if there is no difference. |\n| Returns |\n| --- |\n| `IterableChanges<any> | null` |  |\n\n### [link](https://material.angular.io/cdk/table/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/cdk/table/api\\#RowOutlet) `RowOutlet`\n\nInterface used to provide an outlet for rows to be inserted into.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `viewContainer: ViewContainerRef` |  |\n\n#### [link](https://material.angular.io/cdk/table/api\\#CellDef) `CellDef`\n\nBase interface for a cell definition. Captures a column's cell template definition.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `template: TemplateRef<any>` |  |\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkCellOutletRowContext) `CdkCellOutletRowContext`\n\nContext provided to the row cells when `multiTemplateDataRows` is false\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `$implicit: T` | Data for the row that this cell is located within. |\n| `count: number` | Length of the number of total rows. |\n| `even: boolean` | True if this cell is contained in a row with an even-numbered index. |\n| `first: boolean` | True if this cell is contained in the first row. |\n| `index: number` | Index of the data object in the provided data array. |\n| `last: boolean` | True if this cell is contained in the last row. |\n| `odd: boolean` | True if this cell is contained in a row with an odd-numbered index. |\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkCellOutletMultiRowContext) `CdkCellOutletMultiRowContext`\n\nContext provided to the row cells when `multiTemplateDataRows` is true. This context is the same\nas CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\n`renderIndex`.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `$implicit: T` | Data for the row that this cell is located within. |\n| `count: number` | Length of the number of total rows. |\n| `dataIndex: number` | Index of the data object in the provided data array. |\n| `even: boolean` | True if this cell is contained in a row with an even-numbered index. |\n| `first: boolean` | True if this cell is contained in the first row. |\n| `last: boolean` | True if this cell is contained in the last row. |\n| `odd: boolean` | True if this cell is contained in a row with an odd-numbered index. |\n| `renderIndex: number` | Index location of the rendered row that this cell is located within. |\n\n#### [link](https://material.angular.io/cdk/table/api\\#StickyUpdate) `StickyUpdate`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `elements: readonly (HTMLElement[] | undefined)[]` |  |\n| `offsets: StickyOffset[]` |  |\n| `sizes: StickySize[]` |  |\n\n#### [link](https://material.angular.io/cdk/table/api\\#StickyPositioningListener) `StickyPositioningListener`\n\nIf provided, CdkTable will call the methods below when it updates the size/\nposition/etc of its sticky rows and columns.\n\n##### Methods\n\n| stickyColumnsUpdated |\n| --- |\n| Called when CdkTable updates its sticky start columns. |\n| Parameters |\n| --- |\n| update<br> `StickyUpdate` |  |\n\n| stickyEndColumnsUpdated |\n| --- |\n| Called when CdkTable updates its sticky end columns. |\n| Parameters |\n| --- |\n| update<br> `StickyUpdate` |  |\n\n| stickyFooterRowsUpdated |\n| --- |\n| Called when CdkTable updates its sticky footer rows. |\n| Parameters |\n| --- |\n| update<br> `StickyUpdate` |  |\n\n| stickyHeaderRowsUpdated |\n| --- |\n| Called when CdkTable updates its sticky header rows. |\n| Parameters |\n| --- |\n| update<br> `StickyUpdate` |  |\n\n#### [link](https://material.angular.io/cdk/table/api\\#TextColumnOptions) `TextColumnOptions`\n\nConfigurable options for `CdkTextColumn`.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `defaultDataAccessor: (data: T, name: string) => string` | Default data accessor to use if one is not provided. |\n| `defaultHeaderTextTransform: (name: string) => string` | Default function that provides the header text based on the column name if a header<br>text is not provided. |\n\n### [link](https://material.angular.io/cdk/table/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/cdk/table/api\\#CdkTableDataSourceInput) `CdkTableDataSourceInput`\n\nPossible types that can be set as the data source for a `CdkTable`.\n\n```docs-markdown-code\ntype CdkTableDataSourceInput = readonly T[] | DataSource<T> | Observable<readonly T[]>;\n\n```\n\n#### [link](https://material.angular.io/cdk/table/api\\#StickyDirection) `StickyDirection`\n\n```docs-markdown-code\ntype StickyDirection = 'top' | 'bottom' | 'left' | 'right';\n\n```\n\n#### [link](https://material.angular.io/cdk/table/api\\#StickySize) `StickySize`\n\n```docs-markdown-code\ntype StickySize = number | null | undefined;\n\n```\n\n#### [link](https://material.angular.io/cdk/table/api\\#StickyOffset) `StickyOffset`\n\n```docs-markdown-code\ntype StickyOffset = number | null | undefined;\n\n```\n\n### [link](https://material.angular.io/cdk/table/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/cdk/table/api\\#CDK_ROW_TEMPLATE) `CDK_ROW_TEMPLATE`\n\nThe row template that can be used by the mat-table. Should not be used outside of the\nmaterial library.\n\n```docs-markdown-code\nconst CDK_ROW_TEMPLATE: \"<ng-container cdkCellOutlet></ng-container>\";\n\n```\n\n#### [link](https://material.angular.io/cdk/table/api\\#STICKY_POSITIONING_LISTENER) `STICKY_POSITIONING_LISTENER`\n\nThe injection token used to specify the StickyPositioningListener.\n\n```docs-markdown-code\nconst STICKY_POSITIONING_LISTENER: InjectionToken<StickyPositioningListener>;\n\n```\n\n#### [link](https://material.angular.io/cdk/table/api\\#TEXT_COLUMN_OPTIONS) `TEXT_COLUMN_OPTIONS`\n\nInjection token that can be used to specify the text column options.\n\n```docs-markdown-code\nconst TEXT_COLUMN_OPTIONS: InjectionToken<TextColumnOptions<any>>;\n\n```\n\nTable\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-a3499b70-e50d-456c-816a-6d803571553c.png"
  },
  "metadata": {
    "favicon": "https://material.angular.io/cdk/table/assets/img/favicon.ico?v=19.1.0",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "author": "Angular Components Team",
    "og:title": "Angular Material",
    "apple-mobile-web-app-capable": "yes",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "language": "en-US",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:type": "image/png",
    "ogSiteName": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "viewport": "width=device-width, initial-scale=1",
    "title": "Table | Angular Material",
    "ogUrl": "https://material.angular.io/",
    "og:site_name": "Angular Material",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogLocale": "en_US",
    "og:type": "website",
    "og:image:width": "1339",
    "og:url": "https://material.angular.io/",
    "mobile-web-app-capable": "yes",
    "twitter:creator": "@Angular",
    "twitter:card": "summary",
    "twitter:title": "Angular Material",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image:height": "943",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "twitter:site": "@Angular",
    "og:locale": "en_US",
    "theme-color": "#d7e3ff",
    "ogTitle": "Angular Material",
    "scrapeId": "f18c19ad-51a7-48d4-a413-15bb45306032",
    "sourceURL": "https://material.angular.io/cdk/table/api",
    "url": "https://material.angular.io/cdk/table/api",
    "statusCode": 200
  }
}