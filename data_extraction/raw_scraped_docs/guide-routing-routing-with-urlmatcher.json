{
  "scrapeId": "b7b9841d-13a9-4e83-ae40-f7ac435907ab",
  "sourceURL": "https://angular.dev/guide/routing/routing-with-urlmatcher",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backRouting\n  - [Overview](https://angular.dev/guide/routing)\n  - [Common routing tasks](https://angular.dev/guide/routing/common-router-tasks)\n  - [Routing in single-page applications](https://angular.dev/guide/routing/router-tutorial)\n  - [Creating custom route matches](https://angular.dev/guide/routing/routing-with-urlmatcher)\n  - [Router reference](https://angular.dev/guide/routing/router-reference)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nThe Angular Router supports a powerful matching strategy that you can use to help users navigate your application.\nThis matching strategy supports static routes, variable routes with parameters, wildcard routes, and so on.\nAlso, build your own custom pattern matching for situations in which the URLs are more complicated.\n\nIn this tutorial, you'll build a custom route matcher using Angular's `UrlMatcher`.\nThis matcher looks for a Twitter handle in the URL.\n\n## [Objectives](https://angular.dev/guide/routing/routing-with-urlmatcher\\#objectives)\n\nImplement Angular's `UrlMatcher` to create a custom route matcher.\n\n## [Create a sample application](https://angular.dev/guide/routing/routing-with-urlmatcher\\#create-a-sample-application)\n\nUsing the Angular CLI, create a new application, _angular-custom-route-match_.\nIn addition to the default Angular application framework, you will also create a _profile_ component.\n\n1. Create a new Angular project, _angular-custom-route-match_.\n\n\n```shell\nng new angular-custom-route-match\n\n```\n\n\n    When prompted with `Would you like to add Angular routing?`, select `Y`.\n\n    When prompted with `Which stylesheet format would you like to use?`, select `CSS`.\n\n    After a few moments, a new project, `angular-custom-route-match`, is ready.\n\n2. From your terminal, navigate to the `angular-custom-route-match` directory.\n\n3. Create a component, _profile_.\n\n\n```shell\nng generate component profile\n\n```\n\n4. In your code editor, locate the file, `profile.component.html` and replace the placeholder content with the following HTML.\n\n\n\n\n\n### src/app/profile/profile.component.html\n\n\n\n\n\n```\n         <p>    Hello {{ username }}!</p>\n\n```\n\ncheck\n\n5. In your code editor, locate the file, `app.component.html` and replace the placeholder content with the following HTML.\n\n\n\n\n\n### src/app/app.component.html\n\n\n\n\n\n```\n         <h2>Routing with Custom Matching</h2>Navigate to <a routerLink=\"/@Angular\">my profile</a><router-outlet></router-outlet>\n\n```\n\ncheck\n\n\n## [Configure your routes for your application](https://angular.dev/guide/routing/routing-with-urlmatcher\\#configure-your-routes-for-your-application)\n\nWith your application framework in place, you next need to add routing capabilities to the `app.config.ts` file.\nAs a part of this process, you will create a custom URL matcher that looks for a Twitter handle in the URL.\nThis handle is identified by a preceding `@` symbol.\n\n1. In your code editor, open your `app.config.ts` file.\n\n2. Add an `import` statement for Angular's `provideRouter` and `withComponentInputBinding` as well as the application routes.\n\n\n```ts\nimport {provideRouter, withComponentInputBinding} from '@angular/router';\n\nimport {routes} from './app.routes';\n\n```\n\n3. In the providers array, add a `provideRouter(routes, withComponentInputBinding())` statement.\n\n4. Define the custom route matcher by adding the following code to the application routes.\n\n\n\n\ncheck\n\n```\n         import {Routes, UrlSegment} from '@angular/router';import {ProfileComponent} from './profile/profile.component';export const routes: Routes = [  {    matcher: (url) => {      if (url.length === 1 && url[0].path.match(/^@[\\w]+$/gm)) {        return {consumed: url, posParams: {username: new UrlSegment(url[0].path.slice(1), {})}};      }      return null;    },    component: ProfileComponent,  },];\n\n```\n\n\nThis custom matcher is a function that performs the following tasks:\n\n- The matcher verifies that the array contains only one segment\n- The matcher employs a regular expression to ensure that the format of the username is a match\n- If there is a match, the function returns the entire URL, defining a `username` route parameter as a substring of the path\n- If there isn't a match, the function returns null and the router continues to look for other routes that match the URL\n\n**HELPFUL:** A custom URL matcher behaves like any other route definition. Define child routes or lazy loaded routes as you would with any other route.\n\n## [Reading the route parameters](https://angular.dev/guide/routing/routing-with-urlmatcher\\#reading-the-route-parameters)\n\nWith the custom matcher in place, you can now bind the route parameter in the `profile` component.\n\nIn your code editor, open your `profile.component.ts` file and create an `Input` matching the `username` parameter.\nWe added the `withComponentInputBinding` feature earlier\nin `provideRouter`. This allows the `Router` to bind information directly to the route components.\n\n```\n      @Input() username!: string;\n\n```\n\ncheck\n\n## [Test your custom URL matcher](https://angular.dev/guide/routing/routing-with-urlmatcher\\#test-your-custom-url-matcher)\n\nWith your code in place, you can now test your custom URL matcher.\n\n1. From a terminal window, run the `ng serve` command.\n\n\n\n```\n         ng serve\n\n```\n\ncheck\n\n2. Open a browser to `http://localhost:4200`.\n\n    You should see a single web page, consisting of a sentence that reads `Navigate to my profile`.\n\n3. Click the **my profile** hyperlink.\n\n    A new sentence, reading `Hello, Angular!` appears on the page.\n\n\n## [Next steps](https://angular.dev/guide/routing/routing-with-urlmatcher\\#next-steps)\n\nPattern matching with the Angular Router provides you with a lot of flexibility when you have dynamic URLs in your application.\nTo learn more about the Angular Router, see the following topics:\n\n**HELPFUL:** This content is based on [Custom Route Matching with the Angular Router](https://medium.com/@brandontroberts/custom-route-matching-with-the-angular-router-fbdd48665483), by [Brandon Roberts](https://twitter.com/brandontroberts).",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-c0352d3b-3e5c-427b-81f6-7a3876e277e8.png"
  },
  "metadata": {
    "application-name": "Angular",
    "msapplication-TileColor": "#e90464",
    "og:title": "Angular",
    "viewport": "width=device-width, initial-scale=1",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "og:type": "website",
    "og:description": "The web development framework for building modern apps.",
    "twitter:url": "https://angular.dev/",
    "twitter:title": "Angular",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "description": "The web development framework for building modern apps.",
    "ogUrl": "https://angular.dev/",
    "ogDescription": "The web development framework for building modern apps.",
    "language": "en",
    "og:url": "https://angular.dev/",
    "twitter:card": "summary_large_image",
    "theme-color": "#ffffff",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:description": "The web development framework for building modern apps.",
    "ogTitle": "Angular",
    "apple-mobile-web-app-title": "Angular",
    "title": "Creating custom route matches â€¢ Angular",
    "scrapeId": "b7b9841d-13a9-4e83-ae40-f7ac435907ab",
    "sourceURL": "https://angular.dev/guide/routing/routing-with-urlmatcher",
    "url": "https://angular.dev/guide/routing/routing-with-urlmatcher",
    "statusCode": 200
  }
}