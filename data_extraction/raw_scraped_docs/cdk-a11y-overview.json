{
  "scrapeId": "acbf9f15-529a-4804-825a-53df10c90a04",
  "sourceURL": "https://material.angular.io/cdk/a11y/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\n## Overview for a11y\n\nThe `a11y` package provides a number of tools to improve accessibility, described below.\n\n### [link](https://material.angular.io/cdk/a11y/overview\\#listkeymanager)  ListKeyManager\n\n`ListKeyManager` manages the active option in a list of items based on keyboard interaction.\nIntended to be used with components that correspond to a `role=\"menu\"` or `role=\"listbox\"` pattern.\n\n#### [link](https://material.angular.io/cdk/a11y/overview\\#basic-usage)  Basic usage\n\nAny component that uses a `ListKeyManager` will generally do three things:\n\n- Create a `@ViewChildren` query for the options being managed.\n- Initialize the `ListKeyManager`, passing in the options.\n- Forward keyboard events from the managed component to the `ListKeyManager`.\n\nEach option should implement the `ListKeyManagerOption` interface:\n\n```ts\ninterface ListKeyManagerOption {\n  disabled?: boolean;\n  getLabel?(): string;\n}\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/overview\\#wrapping)  Wrapping\n\nNavigation through options can be made to wrap via the `withWrap` method\n\n```ts\nthis.keyManager = new FocusKeyManager(...).withWrap();\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/overview\\#types-of-list-key-managers)  Types of list key managers\n\nThere are two varieties of `ListKeyManager`, `FocusKeyManager` and `ActiveDescendantKeyManager`.\n\n##### [link](https://material.angular.io/cdk/a11y/overview\\#focuskeymanager)  FocusKeyManager\n\nUsed when options will directly receive browser focus. Each item managed must implement the\n`FocusableOption` interface:\n\n```ts\ninterface FocusableOption extends ListKeyManagerOption {\n  focus(): void;\n}\n\n```\n\n##### [link](https://material.angular.io/cdk/a11y/overview\\#activedescendantkeymanager)  ActiveDescendantKeyManager\n\nUsed when options will be marked as active via `aria-activedescendant`.\nEach item managed must implement the\n`Highlightable` interface:\n\n```ts\ninterface Highlightable extends ListKeyManagerOption {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\n\n```\n\nEach item must also have an ID bound to the listbox's or menu's `aria-activedescendant`.\n\n### [link](https://material.angular.io/cdk/a11y/overview\\#treekeymanager)  TreeKeyManager\n\n`TreeKeyManager` manages the active option in a tree view. Use this key manager for\ncomponents that implement a `role=\"tree\"` pattern.\n\n#### [link](https://material.angular.io/cdk/a11y/overview\\#basic-usage-1)  Basic usage\n\nAny component that uses a `TreeKeyManager` should do three things:\n\n- Create a `@ViewChildren` query for the tree items being managed.\n- Initialize the `TreeKeyManager`, passing in the options.\n- Forward keyboard events from the managed component to the `TreeKeyManager` via `onKeydown`.\n\nEach tree item should implement the [`TreeKeyManagerItem`](https://material.angular.io/cdk/a11y/guide/api#TreeKeyManagerItem) interface.\n\n#### [link](https://material.angular.io/cdk/a11y/overview\\#focus-management)  Focus management\n\nThe `TreeKeyManager` will handle focusing the appropriate item on keyboard interactions.\n\n`tabindex` should also be set by the component when the active item changes. This can be listened to\nvia the `change` property on the `TreeKeyManager`. In particular, the tree should only have a\n`tabindex` set if there is no active item, and should not have a `tabindex` set if there is an\nactive item. Only the HTML node corresponding to the active item should have a `tabindex` set to\n`0`, with all other items set to `-1`.\n\n### [link](https://material.angular.io/cdk/a11y/overview\\#focustrap)  FocusTrap\n\nThe `cdkTrapFocus` directive traps `Tab` key focus within an element. This is intended to\nbe used to create accessible experience for components like\n[modal dialogs](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/), where focus must be\nconstrained.\n\nThis directive is declared in `A11yModule`.\n\n#### [link](https://material.angular.io/cdk/a11y/overview\\#example)  Example\n\n```html\n<div class=\"my-inner-dialog-content\" cdkTrapFocus>\n  <!-- Tab and Shift + Tab will not leave this element. -->\n</div>\n\n```\n\nThis directive will not prevent focus from moving out of the trapped region due to mouse\ninteraction.\n\n#### [link](https://material.angular.io/cdk/a11y/overview\\#regions)  Regions\n\nRegions can be declared explicitly with an initial focus element by using\nthe `cdkFocusRegionStart`, `cdkFocusRegionEnd` and `cdkFocusInitial` DOM attributes.\n`cdkFocusInitial` specifies the element that will receive focus upon initialization of the region.\n`cdkFocusRegionStart` and `cdkFocusRegionEnd` define the region within which focus will be\ntrapped. When using the tab key, focus will move through this region and wrap around on either end.\n\nFor example:\n\n```html\n<a mat-list-item routerLink cdkFocusRegionStart>Focus region start</a>\n<a mat-list-item routerLink>Link</a>\n<a mat-list-item routerLink cdkFocusInitial>Initially focused</a>\n<a mat-list-item routerLink cdkFocusRegionEnd>Focus region end</a>\n\n```\n\n**Note:** If you're using `cdkFocusInitial` together with the `CdkTrapFocus` directive, nothing\nwill happen unless you've enabled the `cdkTrapFocusAutoCapture` option as well. This is due to\n`CdkTrapFocus` not capturing focus on initialization by default.\n\n### [link](https://material.angular.io/cdk/a11y/overview\\#interactivitychecker)  InteractivityChecker\n\n`InteractivityChecker` is used to check the interactivity of an element, capturing disabled,\nvisible, tabbable, and focusable states for accessibility purposes. See the API docs for more\ndetails.\n\n### [link](https://material.angular.io/cdk/a11y/overview\\#liveannouncer)  LiveAnnouncer\n\n`LiveAnnouncer` is used to announce messages for screen-reader users using an `aria-live` region.\nSee [the W3C's WAI-ARIA](https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-live)\nfor more information on aria-live regions.\n\n#### [link](https://material.angular.io/cdk/a11y/overview\\#example-1)  Example\n\n```ts\n@Component({...})\nexport class MyComponent {\n\n constructor(liveAnnouncer: LiveAnnouncer) {\n   liveAnnouncer.announce(\"Hey Google\");\n }\n}\n\n```\n\n### [link](https://material.angular.io/cdk/a11y/overview\\#focusmonitor)  FocusMonitor\n\nThe `FocusMonitor` is an injectable service that can be used to listen for changes in the focus\nstate of an element. It's more powerful than just listening for `focus` or `blur` events because it\ntells you how the element was focused (via the mouse, keyboard, touch, or programmatically). It also\nallows listening for focus on descendant elements if desired.\n\nTo listen for focus changes on an element, use the `monitor` method which takes an element to\nmonitor and an optional boolean flag `checkChildren`. Passing true for `checkChildren` will tell the\n`FocusMonitor` to consider the element focused if any of its descendants are focused. This option\ndefaults to `false` if not specified. The `monitor` method will return an Observable that emits the\n`FocusOrigin` whenever the focus state changes. The `FocusOrigin` will be one of the following:\n\n- `'mouse'` indicates the element was focused with the mouse\n- `'keyboard'` indicates the element was focused with the keyboard\n- `'touch'` indicates the element was focused by touching on a touchscreen\n- `'program'` indicates the element was focused programmatically\n- `null` indicates the element was blurred\n\nIn addition to emitting on the observable, the `FocusMonitor` will automatically apply CSS classes\nto the element when focused. It will add `.cdk-focused` if the element is focused and will further\nadd `.cdk-${origin}-focused` (with `${origin}` being `mouse`, `keyboard`, `touch`, or `program`) to\nindicate how the element was focused.\n\nNote: currently the `FocusMonitor` emits on the observable _outside_ of the Angular zone. Therefore,\nif you `markForCheck` in the subscription you must put yourself back in the Angular zone.\n\n```ts\nfocusMonitor.monitor(el).subscribe(origin => this.ngZone.run(() => /* ... */ ));\n\n```\n\nAny element that is monitored by calling `monitor` should eventually be unmonitored by calling\n`stopMonitoring` with the same element.\n\nMonitoring focus with FocusMonitor\n\nlinkcodeopen\\_in\\_new\n\nFocus Monitored Element (blurred)\n\nFocus Monitored Subtree (blurred)\n\nChild Button 1Child Button 2\n\nIt is possible to falsify the `FocusOrigin` when setting the focus programmatically by using the\n`focusVia` method of `FocusMonitor`. This method accepts an element to focus and the `FocusOrigin`\nto use. If the element being focused is currently being monitored by the `FocusMonitor` it will\nreport the `FocusOrigin` that was passed in. If the element is not currently being monitored, it\nwill just be focused like normal.\n\nFocusing with a specific FocusOrigin\n\nlinkcodeopen\\_in\\_new\n\n1\\. Focus Monitored Element (blurred)2\\. Not Monitored\n\nSimulated focus origin\n\nMouse\n\nFocus button #1\nFocus button #2\n\n#### [link](https://material.angular.io/cdk/a11y/overview\\#cdkmonitorelementfocus-and-cdkmonitorsubtreefocus)  cdkMonitorElementFocus and cdkMonitorSubtreeFocus\n\nFor convenience, the CDK also provides two directives that allow for easily monitoring an element.\n`cdkMonitorElementFocus` is the equivalent of calling `monitor` on the host element with\n`checkChildren` set to `false`. `cdkMonitorSubtreeFocus` is the equivalent of calling `monitor` on\nthe host element with `checkChildren` set to `true`. Each of these directives has an `@Output()` `cdkFocusChange` that will emit the new `FocusOrigin` whenever it changes.\n\nMonitoring focus with FocusMonitor\n\nlinkcodeopen\\_in\\_new\n\nFocus Monitored Element (blurred)\n\nFocus Monitored Subtree (blurred)\n\nChild Button 1Child Button 2\n\n### [link](https://material.angular.io/cdk/a11y/overview\\#styling-utilities)  Styling utilities\n\nThe `cdk/a11y` package comes with Sass mixins that produce styles useful for building\naccessible experiences.\n\n#### [link](https://material.angular.io/cdk/a11y/overview\\#hiding-elements-in-an-accessible-way)  Hiding elements in an accessible way\n\nScreen readers and other assistive technology skip elements that have `display: none`,\n`visibility: hidden`, `opacity: 0`, `height: 0`, or `width: 0`. In some cases you may need to\nvisually hide an element while keeping it available to assistive technology. You can do so using\nthe `a11y-visually-hidden` Sass mixin, which emits the `.cdk-visually-hidden` CSS class.\n\nIf you're using Angular Material, this class is included automatically by Angular Material's theming\nsystem. Otherwise, you can include this mixin in a global stylesheet.\n\n```scss\n@use '@angular/cdk';\n\n@include cdk.a11y-visually-hidden();\n\n```\n\n```html\n<div class=\"custom-checkbox\">\n  <input type=\"checkbox\" class=\"cdk-visually-hidden\">\n</div>\n\n```\n\n#### [link](https://material.angular.io/cdk/a11y/overview\\#targeting-high-contrast-users)  Targeting high contrast users\n\nSome operating systems include an accessibility feature called High Contrast Mode. The\n`cdk/a11y` package provides a Sass mixin that lets you define styles that only apply in high\ncontrast mode. To create a high contrast style, define your style inside the `high-contrast` mixin.\n\nThe mixin works by targeting the `forced-colors` media query.\n\n```scss\n@use '@angular/cdk';\n\nbutton {\n  @include cdk.high-contrast {\n    outline: solid 1px;\n  }\n}\n\n```\n\nThe `high-contrast` mixin accepts the optional `$target` parameter which allows you to specify\nthe value of the `forced-color` media query. Its value can be either `active` or `none`.\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Monitoring focus with FocusMonitor example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit Focusing with a specific FocusOrigin example in StackBlitz",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-97ef9a3d-21a9-432d-8869-712abe35e2db.png"
  },
  "metadata": {
    "og:locale": "en_US",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:url": "https://material.angular.io/",
    "og:image:width": "1339",
    "twitter:title": "Angular Material",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "title": "Accessibility | Angular Material",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "ogUrl": "https://material.angular.io/",
    "viewport": "width=device-width, initial-scale=1",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:type": "website",
    "og:title": "Angular Material",
    "ogSiteName": "Angular Material",
    "language": "en-US",
    "apple-mobile-web-app-capable": "yes",
    "author": "Angular Components Team",
    "og:image:type": "image/png",
    "favicon": "https://material.angular.io/cdk/a11y/assets/img/favicon.ico?v=19.1.0",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:card": "summary",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "twitter:creator": "@Angular",
    "twitter:site": "@Angular",
    "theme-color": "#d7e3ff",
    "ogLocale": "en_US",
    "og:image:height": "943",
    "ogTitle": "Angular Material",
    "mobile-web-app-capable": "yes",
    "og:site_name": "Angular Material",
    "scrapeId": "acbf9f15-529a-4804-825a-53df10c90a04",
    "sourceURL": "https://material.angular.io/cdk/a11y/overview",
    "url": "https://material.angular.io/cdk/a11y/overview",
    "statusCode": 200
  }
}