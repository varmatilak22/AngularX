{
  "scrapeId": "fbafead5-d2d3-480b-99ff-1303245d38de",
  "sourceURL": "https://material.angular.io/components/tree/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for tree\n\n## API reference for Angular Material tree\n\n`\n          import {MatTreeModule} from '@angular/material/tree';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/tree/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/tree/api\\#MatTreeNode) `MatTreeNode`extends [CdkTreeNode](https://material.angular.io/components/tree/cdk/tree/api\\#CdkTreeNode)\n\nWrapper for the CdkTree node with Material design styles.\n\nSelector:mat-tree-node\n\nExported as:matTreeNode\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`isDisabled: boolean` | Whether or not this node is disabled. If it's disabled, then the user won't be able to focus<br>or activate this node. |\n| @Input({ transform: booleanAttribute })<br> <br>`isExpandable: boolean` | Whether or not this node is expandable.<br>If not using `FlatTreeControl`, or if `isExpandable` is not provided to<br>`NestedTreeControl`, this should be provided for correct node a11y. |\n| @Input()<br>`isExpanded: boolean` |  |\n| @Input('cdkTreeNodeTypeaheadLabel')<br> <br>`typeaheadLabel: string | null` | The text used to locate this item during typeahead. If not specified, the `textContent` will<br>will be used. |\n| @Output()<br>`activation: EventEmitter<T>` | This emits when the node has been programatically activated or activated by keyboard. |\n| @Output()<br>`expandedChange: EventEmitter<boolean>` | This emits when the node's expansion status has been changed. |\n| `data: T` | The tree node's data. |\n| `isLeafNode: boolean` |  |\n| `level: number` |  |\n| @Input({ transform: booleanAttribute })<br> <br>Deprecated<br> <br>`disabled: boolean` | Whether the component is disabled. |\n| @Input()<br>Deprecated<br> <br>`role: 'treeitem' | 'group'` | The role of the tree node. |\n| @Input({<br>transform: (value: unknown) => (value == null ? 0 : numberAttribute(value)),<br>alias: 'tabIndex',<br>})<br> <br>Deprecated<br> <br>`tabIndexInputBinding: number` | The tabindex of the tree node. |\n| Deprecated<br> <br>`defaultTabIndex: 0` | The default tabindex of the tree node. |\n\n##### Methods\n\n| activate |\n| --- |\n| Emits an activation event. Implemented for TreeKeyManagerItem. |\n\n| collapse |\n| --- |\n| Collapses this data node. Implemented for TreeKeyManagerItem. |\n\n| expand |\n| --- |\n| Expands this data node. Implemented for TreeKeyManagerItem. |\n\n| focus |\n| --- |\n| Focuses this data node. Implemented for TreeKeyManagerItem. |\n\n| getChildren |\n| --- |\n| Returns |\n| --- |\n| `CdkTreeNode<T, K>[] | Observable<CdkTreeNode<T, K>[]>` |  |\n\n| getLabel |\n| --- |\n| Returns |\n| --- |\n| `string` |  |\n\n| getParent |\n| --- |\n| Returns |\n| --- |\n| `CdkTreeNode<T, K> | null` |  |\n\n| makeFocusable |\n| --- |\n| Makes the node focusable. Implemented for TreeKeyManagerItem. |\n\n| unfocus |\n| --- |\n| Defocus this data node. |\n\n#### [link](https://material.angular.io/components/tree/api\\#MatTreeNodeDef) `MatTreeNodeDef`extends [CdkTreeNodeDef](https://material.angular.io/components/tree/cdk/tree/api\\#CdkTreeNodeDef)\n\nWrapper for the CdkTree node definition with Material design styles.\nCaptures the node's template and a when predicate that describes when this node should be used.\n\nSelector:\\[matTreeNodeDef\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('matTreeNode')<br> <br>`data: T` |  |\n| @Input(matTreeNodeDefWhen)<br> <br>`when: (index: number, nodeData: T) => boolean` | Function that should return true if this node template should be used for the provided node<br>data and index. If left undefined, this node will be considered the default node template to<br>use when no other when functions return true for the data.<br>For every node, there must be at least one when function that passes or an undefined to<br>default. |\n\n#### [link](https://material.angular.io/components/tree/api\\#MatNestedTreeNode) `MatNestedTreeNode`extends [CdkNestedTreeNode](https://material.angular.io/components/tree/cdk/tree/api\\#CdkNestedTreeNode)\n\nWrapper for the CdkTree nested node with Material design styles.\n\nSelector:mat-nested-tree-node\n\nExported as:matNestedTreeNode\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`isDisabled: boolean` | Whether or not this node is disabled. If it's disabled, then the user won't be able to focus<br>or activate this node. |\n| @Input({ transform: booleanAttribute })<br> <br>`isExpandable: boolean` | Whether or not this node is expandable.<br>If not using `FlatTreeControl`, or if `isExpandable` is not provided to<br>`NestedTreeControl`, this should be provided for correct node a11y. |\n| @Input()<br>`isExpanded: boolean` |  |\n| @Input('matNestedTreeNode')<br> <br>`node: T` |  |\n| @Input('cdkTreeNodeTypeaheadLabel')<br> <br>`typeaheadLabel: string | null` | The text used to locate this item during typeahead. If not specified, the `textContent` will<br>will be used. |\n| @Output()<br>`activation: EventEmitter<T>` | This emits when the node has been programatically activated or activated by keyboard. |\n| @Output()<br>`expandedChange: EventEmitter<boolean>` | This emits when the node's expansion status has been changed. |\n| `data: T` | The tree node's data. |\n| `isLeafNode: boolean` |  |\n| `level: number` |  |\n| `nodeOutlet: QueryList<CdkTreeNodeOutlet>` | The children node placeholder. |\n| @Input({ transform: booleanAttribute })<br> <br>Deprecated<br> <br>`disabled: boolean` | Whether the node is disabled. |\n| @Input()<br>Deprecated<br> <br>`role: 'treeitem' | 'group'` | The role of the tree node. |\n\n##### Methods\n\n| activate |\n| --- |\n| Emits an activation event. Implemented for TreeKeyManagerItem. |\n\n| collapse |\n| --- |\n| Collapses this data node. Implemented for TreeKeyManagerItem. |\n\n| expand |\n| --- |\n| Expands this data node. Implemented for TreeKeyManagerItem. |\n\n| focus |\n| --- |\n| Focuses this data node. Implemented for TreeKeyManagerItem. |\n\n| getChildren |\n| --- |\n| Returns |\n| --- |\n| `CdkTreeNode<T, K>[] | Observable<CdkTreeNode<T, K>[]>` |  |\n\n| getLabel |\n| --- |\n| Returns |\n| --- |\n| `string` |  |\n\n| getParent |\n| --- |\n| Returns |\n| --- |\n| `CdkTreeNode<T, K> | null` |  |\n\n| makeFocusable |\n| --- |\n| Makes the node focusable. Implemented for TreeKeyManagerItem. |\n\n| unfocus |\n| --- |\n| Defocus this data node. |\n\n#### [link](https://material.angular.io/components/tree/api\\#MatTreeNodePadding) `MatTreeNodePadding`extends [CdkTreeNodePadding](https://material.angular.io/components/tree/cdk/tree/api\\#CdkTreeNodePadding)\n\nWrapper for the CdkTree padding with Material design styles.\n\nSelector:\\[matTreeNodePadding\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('matTreeNodePaddingIndent')<br> <br>`indent: number | string` | The indent for each level. Default number 40px from material design menu sub-menu spec. |\n| @Input({ alias: 'matTreeNodePadding', transform: numberAttribute })<br> <br>`level: number` | The level of depth of the tree node. The padding will be `level * indent` pixels. |\n| `indentUnits: 'px'` | CSS units used for the indentation value. |\n\n#### [link](https://material.angular.io/components/tree/api\\#MatTree) `MatTree`extends [CdkTree](https://material.angular.io/components/tree/cdk/tree/api\\#CdkTree)\n\nWrapper for the CdkTable with Material design styles.\n\nSelector:mat-tree\n\nExported as:matTree\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`childrenAccessor: (dataNode: T) => T[] | Observable<T[]>` | Given a data node, determines what the children of that node are.<br>One of levelAccessor or childrenAccessor must be specified, not both.<br>This is enforced at run-time. |\n| @Input()<br>`dataSource: DataSource<T> | Observable<T[]> | T[]` | Provides a stream containing the latest data array to render. Influenced by the tree's<br>stream of view window (what dataNodes are currently on screen).<br>Data source can be an observable of data array, or a data array to render. |\n| @Input()<br>`expansionKey: (dataNode: T) => K` | Given a data node, determines the key by which we determine whether or not this node is expanded. |\n| @Input()<br>`levelAccessor: (dataNode: T) => number` | Given a data node, determines what tree level the node is at.<br>One of levelAccessor or childrenAccessor must be specified, not both.<br>This is enforced at run-time. |\n| @Input()<br>`trackBy: TrackByFunction<T>` | Tracking function that will be used to check the differences in data changes. Used similarly<br>to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data<br>relative to the function to know if a node should be added/removed/moved.<br>Accepts a function that takes two parameters, `index` and `item`. |\n| `viewChange: BehaviorSubject<{<br>    start: number;<br>    end: number;<br>}>` | Stream containing the latest information on what rows are being displayed on screen.<br>Can be used by the data source to as a heuristic of what data should be provided. |\n| @Input()<br>Deprecated<br> <br>`treeControl: TreeControl<T, K>` | The tree controller |\n\n##### Methods\n\n| collapse |\n| --- |\n| Collapse the data node. If it is already collapsed, does nothing. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| collapseAll |\n| --- |\n| Collapse all data nodes in the tree. |\n\n| collapseDescendants |\n| --- |\n| Collapse the data node and all its descendants. If it is already collapsed, does nothing. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| expand |\n| --- |\n| Expand the data node. If it is already expanded, does nothing. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| expandAll |\n| --- |\n| Expands all data nodes in the tree. |\n\n| expandDescendants |\n| --- |\n| Expand the data node and all its descendants. If they are already expanded, does nothing. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| insertNode |\n| --- |\n| Create the embedded view for the data node template and place it in the correct index location<br>within the data node view container. |\n| Parameters |\n| --- |\n| nodeData<br> `T` |  |\n| index<br> `number` |  |\n| viewContainer?<br> `ViewContainerRef` |  |\n| parentData?<br> `T` |  |\n\n| isExpanded |\n| --- |\n| Whether the data node is expanded or collapsed. Returns true if it's expanded. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| renderNodeChanges |\n| --- |\n| Check for changes made in the data and render each change (node added/removed/moved). |\n| Parameters |\n| --- |\n| data<br> `readonly T[]` |  |\n| dataDiffer<br> `IterableDiffer<T> = this._dataDiffer` |  |\n| viewContainer<br> `ViewContainerRef = this._nodeOutlet.viewContainer` |  |\n| parentData?<br> `T` |  |\n\n| toggle |\n| --- |\n| If the data node is currently expanded, collapse it. Otherwise, expand it. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n| toggleDescendants |\n| --- |\n| If the data node is currently expanded, collapse it and all its descendants.<br>Otherwise, expand it and all its descendants. |\n| Parameters |\n| --- |\n| dataNode<br> `T` |  |\n\n#### [link](https://material.angular.io/components/tree/api\\#MatTreeNodeToggle) `MatTreeNodeToggle`extends [CdkTreeNodeToggle](https://material.angular.io/components/tree/cdk/tree/api\\#CdkTreeNodeToggle)\n\nWrapper for the CdkTree's toggle with Material design styles.\n\nSelector:\\[matTreeNodeToggle\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input(matTreeNodeToggleRecursive)<br> <br>`recursive: boolean` | Whether expand/collapse the node recursively. |\n\n#### [link](https://material.angular.io/components/tree/api\\#MatTreeNodeOutlet) `MatTreeNodeOutlet`\n\nOutlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\ninside the outlet.\n\nSelector:\\[matTreeNodeOutlet\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `viewContainer: inject(ViewContainerRef)` |  |\n\n### [link](https://material.angular.io/components/tree/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/tree/api\\#MatTreeFlattener) `MatTreeFlattener`\n\nTree flattener to convert a normal type of node to node with children & level information.\nTransform nested nodes of type `T` to flattened nodes of type `F`.\n\nFor example, the input data of type `T` is nested, and contains its children data:\nSomeNode: {\nkey: 'Fruits',\nchildren: \\[\\\nNodeOne: {\\\nkey: 'Apple',\\\n},\\\nNodeTwo: {\\\nkey: 'Pear',\\\n}\\\n\\]\n}\nAfter flattener flatten the tree, the structure will become\nSomeNode: {\nkey: 'Fruits',\nexpandable: true,\nlevel: 1\n},\nNodeOne: {\nkey: 'Apple',\nexpandable: false,\nlevel: 2\n},\nNodeTwo: {\nkey: 'Pear',\nexpandable: false,\nlevel: 2\n}\nand the output flattened type is `F` with additional information.\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `getChildren: (node: T) => Observable<T[]> | T[] | undefined | null` |  |\n| `getLevel: (node: F) => number` |  |\n| `isExpandable: (node: F) => boolean` |  |\n| `transformFunction: (node: T, level: number) => F` |  |\n\n##### Methods\n\n| expandFlattenedNodes |\n| --- |\n| Expand flattened node with current expansion status.<br>The returned list may have different length. |\n| Parameters |\n| --- |\n| nodes<br> `F[]` |  |\n| treeControl<br> `TreeControl<F, K>` |  |\n| Returns |\n| --- |\n| `F[]` |  |\n\n| flattenNodes |\n| --- |\n| Flatten a list of node type T to flattened version of node F.<br>Please note that type T may be nested, and the length of `structuredData` may be different<br>from that of returned list `F[]`. |\n| Parameters |\n| --- |\n| structuredData<br> `T[]` |  |\n| Returns |\n| --- |\n| `F[]` |  |\n\n#### [link](https://material.angular.io/components/tree/api\\#MatTreeFlatDataSource) `MatTreeFlatDataSource`extends [DataSource](https://material.angular.io/components/tree/api)\n\nData source for flat tree.\nThe data source need to handle expansion/collapsion of the tree node and change the data feed\nto `MatTree`.\nThe nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\nto type `F` for `MatTree` to consume.\n\nDeprecated\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `data: T[]` |  |\n\n##### Methods\n\n| connect |\n| --- |\n| Parameters |\n| --- |\n| collectionViewer<br> `CollectionViewer` |  |\n| Returns |\n| --- |\n| `Observable<F[]>` |  |\n\n| disconnect |\n| --- |\n\n#### [link](https://material.angular.io/components/tree/api\\#MatTreeNestedDataSource) `MatTreeNestedDataSource`extends [DataSource](https://material.angular.io/components/tree/api)\n\nData source for nested tree.\n\nThe data source for nested tree doesn't have to consider node flattener, or the way to expand\nor collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `data: T[]` | Data for the nested tree |\n\n##### Methods\n\n| connect |\n| --- |\n| Parameters |\n| --- |\n| collectionViewer<br> `CollectionViewer` |  |\n| Returns |\n| --- |\n| `Observable<T[]>` |  |\n\n| disconnect |\n| --- |\n\nTree\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nThis is an alias for \\`isDisabled\\`. Will be removed in v21.0.0 Remove this input or later.\n\nThis will be ignored; the tree will automatically determine the appropriate role\nfor tree node. This input will be removed in a future version. Will be removed in v21.0.0 or later.\n\nBy default MatTreeNode manages focus using TreeKeyManager instead of tabIndex.\nRecommend to avoid setting tabIndex directly to prevent TreeKeyManager form getting into\nan unexpected state. Tabindex to be removed in a future version. Will be removed in v21.0.0 Remove this attribute. or later.\n\nUse one of \\`levelAccessor\\` or \\`childrenAccessor\\` instead. To be removed in a\nfuture version. Will be removed in v21.0.0 or later.\n\nUse MatTree#childrenAccessor and MatTreeNode#isExpandable\ninstead. To be removed in a future version. Will be removed in v21.0.0 or later.\n\nUse one of levelAccessor or childrenAccessor instead. To be removed in a future\nversion. Will be removed in v21.0.0 or later.\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-80abd7b2-76a3-4e71-92e4-07433e4b3a34.png"
  },
  "metadata": {
    "og:image:type": "image/png",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "twitter:title": "Angular Material",
    "language": "en-US",
    "ogTitle": "Angular Material",
    "og:locale": "en_US",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:card": "summary",
    "og:image:height": "943",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:width": "1339",
    "twitter:site": "@Angular",
    "og:type": "website",
    "og:site_name": "Angular Material",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "mobile-web-app-capable": "yes",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "viewport": "width=device-width, initial-scale=1",
    "og:title": "Angular Material",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "ogSiteName": "Angular Material",
    "ogUrl": "https://material.angular.io/",
    "title": "Tree | Angular Material",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "theme-color": "#d7e3ff",
    "favicon": "https://material.angular.io/components/tree/assets/img/favicon.ico?v=19.1.0",
    "apple-mobile-web-app-capable": "yes",
    "author": "Angular Components Team",
    "ogLocale": "en_US",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:creator": "@Angular",
    "og:url": "https://material.angular.io/",
    "scrapeId": "fbafead5-d2d3-480b-99ff-1303245d38de",
    "sourceURL": "https://material.angular.io/components/tree/api",
    "url": "https://material.angular.io/components/tree/api",
    "statusCode": 200
  }
}