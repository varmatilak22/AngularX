{
  "scrapeId": "65827e1d-728b-422e-be7c-f0800b31b82c",
  "sourceURL": "https://material.angular.io/components/sidenav/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for sidenav\n\nLoading document...\n\n## API reference for Angular Material sidenav-testing\n\n`\n          import {MatDrawerHarness} from '@angular/material/sidenav/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/sidenav/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/sidenav/api\\#MatDrawerHarness) `MatDrawerHarness`\n\nHarness for interacting with a standard mat-drawer in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-drawer'` | The selector for the host element of a `MatDrawer` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| getMode |\n| --- |\n| Gets the mode that the drawer is in. |\n| Returns |\n| --- |\n| `Promise<'over' | 'push' | 'side'>` |  |\n\n| getPosition |\n| --- |\n| Gets the position of the drawer inside its container. |\n| Returns |\n| --- |\n| `Promise<'start' | 'end'>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| isOpen |\n| --- |\n| Whether the drawer is open. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatDrawerHarness` that meets<br>certain criteria. |\n| Parameters |\n| --- |\n| options<br> `DrawerHarnessFilters = {}` | Options for filtering which drawer instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatDrawerHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/sidenav/api\\#MatDrawerContainerHarness) `MatDrawerContainerHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/sidenav/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a standard mat-drawer-container in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-drawer-container'` | The selector for the host element of a `MatDrawerContainer` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getContent |\n| --- |\n| Gets the element that has the container's content. |\n| Returns |\n| --- |\n| `Promise<MatDrawerContentHarness>` |  |\n\n| async<br> <br>getDrawers |\n| --- |\n| Gets drawers that match particular criteria within the container. |\n| Parameters |\n| --- |\n| filter<br> `DrawerHarnessFilters = {}` | Optionally filters which chips are included. |\n| Returns |\n| --- |\n| `Promise<MatDrawerHarness[]>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatDrawerContainerHarness` that<br>meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `DrawerContainerHarnessFilters = {}` | Options for filtering which container instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatDrawerContainerHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/sidenav/api\\#MatDrawerContentHarness) `MatDrawerContentHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/sidenav/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a standard mat-drawer-content in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-drawer-content'` | The selector for the host element of a `MatDrawerContent` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatDrawerContentHarness` that<br>meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `DrawerContentHarnessFilters = {}` | Options for filtering which drawer content instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatDrawerContentHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/sidenav/api\\#MatSidenavContainerHarness) `MatSidenavContainerHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/sidenav/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a standard mat-sidenav-container in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-sidenav-container'` | The selector for the host element of a `MatSidenavContainer` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getContent |\n| --- |\n| Gets the element that has the container's content. |\n| Returns |\n| --- |\n| `Promise<MatSidenavContentHarness>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getSidenavs |\n| --- |\n| Gets sidenavs that match particular criteria within the container. |\n| Parameters |\n| --- |\n| filter<br> `DrawerHarnessFilters = {}` | Optionally filters which chips are included. |\n| Returns |\n| --- |\n| `Promise<MatSidenavHarness[]>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatSidenavContainerHarness` that<br>meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `DrawerContainerHarnessFilters = {}` | Options for filtering which container instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatSidenavContainerHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/sidenav/api\\#MatSidenavContentHarness) `MatSidenavContentHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/sidenav/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a standard mat-sidenav-content in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-sidenav-content'` | The selector for the host element of a `MatSidenavContent` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatSidenavContentHarness` that<br>meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `DrawerContentHarnessFilters = {}` | Options for filtering which sidenav content instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatSidenavContentHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/sidenav/api\\#MatSidenavHarness) `MatSidenavHarness`\n\nHarness for interacting with a standard mat-sidenav in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-sidenav'` | The selector for the host element of a `MatSidenav` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| getMode |\n| --- |\n| Gets the mode that the drawer is in. |\n| Returns |\n| --- |\n| `Promise<'over' | 'push' | 'side'>` |  |\n\n| getPosition |\n| --- |\n| Gets the position of the drawer inside its container. |\n| Returns |\n| --- |\n| `Promise<'start' | 'end'>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isFixedInViewport |\n| --- |\n| Whether the sidenav is fixed in the viewport. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| isOpen |\n| --- |\n| Whether the drawer is open. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatSidenavHarness` that meets<br>certain criteria. |\n| Parameters |\n| --- |\n| options<br> `DrawerHarnessFilters = {}` | Options for filtering which sidenav instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatSidenavHarness>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/sidenav/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/sidenav/api\\#DrawerHarnessFilters) `DrawerHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatDrawerHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `position: 'start' | 'end'` | Only find instances whose side is the given value. |\n\n#### [link](https://material.angular.io/components/sidenav/api\\#DrawerContainerHarnessFilters) `DrawerContainerHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatDrawerContainerHarness` instances.\n\n#### [link](https://material.angular.io/components/sidenav/api\\#DrawerContentHarnessFilters) `DrawerContentHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatDrawerContentHarness` instances.\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-9087e290-c588-406d-8863-a96e321dff83.png"
  },
  "metadata": {
    "og:type": "website",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "favicon": "https://material.angular.io/components/sidenav/assets/img/favicon.ico?v=19.1.0",
    "ogSiteName": "Angular Material",
    "apple-mobile-web-app-capable": "yes",
    "og:site_name": "Angular Material",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "viewport": "width=device-width, initial-scale=1",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "title": "Sidenav | Angular Material",
    "mobile-web-app-capable": "yes",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "theme-color": "#d7e3ff",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "author": "Angular Components Team",
    "twitter:creator": "@Angular",
    "og:url": "https://material.angular.io/",
    "og:locale": "en_US",
    "twitter:site": "@Angular",
    "og:image:width": "1339",
    "twitter:title": "Angular Material",
    "ogTitle": "Angular Material",
    "language": "en-US",
    "ogLocale": "en_US",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "og:title": "Angular Material",
    "og:image:type": "image/png",
    "twitter:card": "summary",
    "og:image:height": "943",
    "ogUrl": "https://material.angular.io/",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "scrapeId": "65827e1d-728b-422e-be7c-f0800b31b82c",
    "sourceURL": "https://material.angular.io/components/sidenav/api",
    "url": "https://material.angular.io/components/sidenav/api",
    "statusCode": 200
  }
}