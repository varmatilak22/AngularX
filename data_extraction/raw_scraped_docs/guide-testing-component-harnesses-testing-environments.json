{
  "scrapeId": "97433ccd-26c9-4390-a6b3-1ba91427ccd0",
  "sourceURL": "https://angular.dev/guide/testing/component-harnesses-testing-environments",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backTesting\n  - [Overview](https://angular.dev/guide/testing)\n  - [Code coverage](https://angular.dev/guide/testing/code-coverage)\n  - [Testing services](https://angular.dev/guide/testing/services)\n  - [Basics of testing components](https://angular.dev/guide/testing/components-basics)\n  - [Component testing scenarios](https://angular.dev/guide/testing/components-scenarios)\n  - [Testing attribute directives](https://angular.dev/guide/testing/attribute-directives)\n  - [Testing pipes](https://angular.dev/guide/testing/pipes)\n  - [Debugging tests](https://angular.dev/guide/testing/debugging)\n  - [Testing utility APIs](https://angular.dev/guide/testing/utility-apis)\n  - [Component harnesses overview](https://angular.dev/guide/testing/component-harnesses-overview)\n  - [Using component harnesses in tests](https://angular.dev/guide/testing/using-component-harnesses)\n  - [Creating harnesses for your components](https://angular.dev/guide/testing/creating-component-harnesses)\n  - [Adding harness support for additional testing environments](https://angular.dev/guide/testing/component-harnesses-testing-environments)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n## [Before you start](https://angular.dev/guide/testing/component-harnesses-testing-environments\\#before-you-start)\n\n**TIP:** This guide assumes you've already read the [component harnesses overview guide](https://angular.dev/guide/testing/guide/testing/component-harnesses-overview). Read that first if you're new to using component harnesses.\n\n### [When does adding support for a test environment make sense?](https://angular.dev/guide/testing/component-harnesses-testing-environments\\#when-does-adding-support-for-a-test-environment-make-sense)\n\nTo use component harnesses in the following environments, you can use Angular CDK's two built-in environments:\n\n- Unit tests\n- WebDriver end-to-end tests\n\nTo use a supported testing environment, read the [Creating harnesses for your components guide](https://angular.dev/guide/testing/guide/testing/creating-component-harnesses).\n\nOtherwise, to add support for other environments, you need to define how to interact with a DOM element and how DOM interactions work in your environment. Continue reading to learn more.\n\n### [CDK Installation](https://angular.dev/guide/testing/component-harnesses-testing-environments\\#cdk-installation)\n\nThe [Component Dev Kit (CDK)](https://material.angular.io/cdk/categories) is a set of behavior primitives for building components. To use the component harnesses, first install `@angular/cdk` from npm. You can do this from your terminal using the Angular CLI:\n\n```\n      ng add @angular/cdk\n\n```\n\ncheck\n\n## [Creating a `TestElement` implementation](https://angular.dev/guide/testing/component-harnesses-testing-environments\\#creating-a-testelement-implementation)\n\nEvery test environment must define a `TestElement` implementation. The `TestElement` interface serves as an environment-agnostic representation of a DOM element. It enables harnesses to interact with DOM elements regardless of the underlying environment. Because some environments don't support interacting with DOM elements synchronously (e.g. WebDriver), all `TestElement` methods are asynchronous, returning a `Promise` with the result of the operation.\n\n`TestElement` offers a number of methods to interact with the underlying DOM such as `blur()`, `click()`, `getAttribute()`, and more. See the [TestElement API reference page](https://material.angular.io/cdk/testing/api#TestElement) for the full list of methods.\n\nThe `TestElement` interface consists largely of methods that resemble methods available on `HTMLElement`. Similar methods exist in most test environments, which makes implementing the methods fairly straightforward. However, one important difference to note when implementing the `sendKeys` method, is that the key codes in the `TestKey` enum likely differ from the key codes used in the test environment. Environment authors should maintain a mapping from `TestKey` codes to the codes used in the particular testing environment.\n\nThe [UnitTestElement](https://github.com/angular/components/blob/main/src/cdk/testing/testbed/unit-test-element.ts#L33) and [SeleniumWebDriverElement](https://github.com/angular/components/blob/main/src/cdk/testing/selenium-webdriver/selenium-webdriver-keys.ts#L16) implementations in Angular CDK serve as good examples of implementations of this interface.\n\n## [Creating a `HarnessEnvironment` implementation](https://angular.dev/guide/testing/component-harnesses-testing-environments\\#creating-a-harnessenvironment-implementation)\n\nTest authors use `HarnessEnvironment` to create component harness instances for use in tests. `HarnessEnvironment` is an abstract class that must be extended to create a concrete subclass for the new environment. When supporting a new test environment, create a `HarnessEnvironment` subclass that adds concrete implementations for all abstract members.\n\n`HarnessEnvironment` has a generic type parameter: `HarnessEnvironment<E>`. This parameter, `E`, represents the raw element type of the environment. For example, this parameter is Element for unit test environments.\n\nThe following are the abstract methods that must be implemented:\n\n| Method | Description |\n| :-- | :-- |\n| `abstract getDocumentRoot(): E` | Gets the root element for the environment (e.g. `document.body`). |\n| `abstract createTestElement(element: E): TestElement` | Creates a `TestElement` for the given raw element. |\n| `abstract createEnvironment(element: E): HarnessEnvironment` | Creates a `HarnessEnvironment` rooted at the given raw element. |\n| `abstract getAllRawElements(selector: string): Promise<E[]>` | Gets all of the raw elements under the root element of the environment matching the given selector. |\n| `abstract forceStabilize(): Promise<void>` | Gets a `Promise` that resolves when the `NgZone` is stable. Additionally, if applicable, tells `NgZone` to stabilize (e.g. calling `flush()` in a `fakeAsync` test). |\n| `abstract waitForTasksOutsideAngular(): Promise<void>` | Gets a `Promise` that resolves when the parent zone of `NgZone` is stable. |\n\nIn addition to implementing the missing methods, this class should provide a way for test authors to get `ComponentHarness` instances. You should define a protected constructor and provide a static method called `loader` that returns a `HarnessLoader` instance. This allows test authors to write code like: `SomeHarnessEnvironment.loader().getHarness(...)`. Depending on the needs of the particular environment, the class may provide several different static methods or require arguments to be passed. (e.g. the `loader` method on `TestbedHarnessEnvironment` takes a `ComponentFixture`, and the class provides additional static methods called `documentRootLoader` and `harnessForFixture`).\n\nThe [`TestbedHarnessEnvironment`](https://github.com/angular/components/blob/main/src/cdk/testing/testbed/testbed-harness-environment.ts#L89) and [SeleniumWebDriverHarnessEnvironment](https://github.com/angular/components/blob/main/src/cdk/testing/selenium-webdriver/selenium-web-driver-harness-environment.ts#L71) implementations in Angular CDK serve as good examples of implementations of this interface.\n\n## [Handling auto change detection](https://angular.dev/guide/testing/component-harnesses-testing-environments\\#handling-auto-change-detection)\n\nIn order to support the `manualChangeDetection` and parallel APIs, your environment should install a handler for the auto change detection status.\n\nWhen your environment wants to start handling the auto change detection status it can call `handleAutoChangeDetectionStatus(handler)`. The handler function will receive a `AutoChangeDetectionStatus` which has two properties `isDisabled` and `onDetectChangesNow()`. See the [AutoChangeDetectionStatus API reference page](https://material.angular.io/cdk/testing/api#AutoChangeDetectionStatus) for more information.\nIf your environment wants to stop handling auto change detection status it can call `stopHandlingAutoChangeDetectionStatus()`.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-8a5d55dc-53c0-4c02-bca8-a126534d60e6.png"
  },
  "metadata": {
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "og:type": "website",
    "ogDescription": "The web development framework for building modern apps.",
    "ogUrl": "https://angular.dev/",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "application-name": "Angular",
    "viewport": "width=device-width, initial-scale=1",
    "msapplication-TileColor": "#e90464",
    "language": "en",
    "og:description": "The web development framework for building modern apps.",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:url": "https://angular.dev/",
    "apple-mobile-web-app-title": "Angular",
    "title": "Adding harness support for additional testing environments â€¢ Angular",
    "theme-color": "#ffffff",
    "description": "The web development framework for building modern apps.",
    "og:title": "Angular",
    "twitter:card": "summary_large_image",
    "og:url": "https://angular.dev/",
    "twitter:title": "Angular",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "twitter:description": "The web development framework for building modern apps.",
    "scrapeId": "97433ccd-26c9-4390-a6b3-1ba91427ccd0",
    "sourceURL": "https://angular.dev/guide/testing/component-harnesses-testing-environments",
    "url": "https://angular.dev/guide/testing/component-harnesses-testing-environments",
    "statusCode": 200
  }
}