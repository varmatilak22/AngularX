{
  "scrapeId": "8a5c8e2f-1951-495d-aff7-99ec579b8db3",
  "sourceURL": "https://material.angular.io/components/form-field/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for form-field\n\n## API reference for Angular Material form-field\n\n`\n          import {MatFormFieldModule} from '@angular/material/form-field';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/form-field/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/form-field/api\\#MatLabel) `MatLabel`\n\nThe floating label for a `mat-form-field`.\n\nSelector:mat-label\n\n#### [link](https://material.angular.io/components/form-field/api\\#MatError) `MatError`\n\nSingle error message to be shown underneath the form-field.\n\nSelector:mat-error\\[matError\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`id: string` |  |\n\n#### [link](https://material.angular.io/components/form-field/api\\#MatHint) `MatHint`\n\nHint text to be shown underneath the form field control.\n\nSelector:mat-hint\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`align: 'start' | 'end'` | Whether to align the hint label at the start or end of the line. |\n| @Input()<br>`id: string` | Unique ID for the hint. Used for the aria-describedby on the form field control. |\n\n#### [link](https://material.angular.io/components/form-field/api\\#MatPrefix) `MatPrefix`\n\nPrefix to be placed in front of the form field.\n\nSelector:\\[matPrefix\\]\\[matIconPrefix\\]\\[matTextPrefix\\]\n\n#### [link](https://material.angular.io/components/form-field/api\\#MatSuffix) `MatSuffix`\n\nSuffix to be placed at the end of the form field.\n\nSelector:\\[matSuffix\\]\\[matIconSuffix\\]\\[matTextSuffix\\]\n\n#### [link](https://material.angular.io/components/form-field/api\\#MatFormField) `MatFormField`\n\nContainer for form controls that applies Material Design styling and behavior.\n\nSelector:mat-form-field\n\nExported as:matFormField\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`appearance: MatFormFieldAppearance` | The form field appearance style. |\n| @Input()<br>`color: ThemePalette` | Theme color of the form field. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/form-field/styling](https://material.angular.io/components/form-field/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input()<br>`floatLabel: FloatLabelType` | Whether the label should always float or float as the user types. |\n| @Input()<br>`hideRequiredMarker: boolean` | Whether the required marker should be hidden. |\n| @Input()<br>`hintLabel: string` | Text for the form field hint. |\n| @Input()<br>`subscriptSizing: SubscriptSizing` | Whether the form field should reserve space for one line of hint/error text (default)<br>or to have the spacing grow from 0px as needed based on the size of the hint/error content.<br>Note that when using dynamic sizing, layout shifts will occur when hint/error text changes. |\n| `getLabelId: computed(() => (this._hasFloatingLabel() ? this._labelId : null))` | Gets the id of the label element. If no label is present, returns `null`. |\n\n##### Methods\n\n| getConnectedOverlayOrigin |\n| --- |\n| Gets an ElementRef for the element that a overlay attached to the form field<br>should be positioned relative to. |\n| Returns |\n| --- |\n| `ElementRef` |  |\n\n### [link](https://material.angular.io/components/form-field/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/form-field/api\\#MatFormFieldControl) `MatFormFieldControl`\n\nAn interface which allows a control to work inside of a `MatFormField`.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `autofilled: boolean` | Whether the input is currently in an autofilled state. If property is not present on the<br>control it is assumed to be false. |\n| `controlType: string` | An optional name for the control type that can be used to distinguish `mat-form-field` elements<br>based on their control type. The form field will add a class,<br>`mat-form-field-type-{{controlType}}` to its root element. |\n| `disableAutomaticLabeling: boolean` | Whether to automatically assign the ID of the form field as the `for` attribute<br>on the `<label>` inside the form field. Set this to true to prevent the form<br>field from associating the label with non-native elements. |\n| `disabled: boolean` | Whether the control is disabled. |\n| `empty: boolean` | Whether the control is empty. |\n| `errorState: boolean` | Whether the control is in an error state. |\n| `focused: boolean` | Whether the control is focused. |\n| `id: string` | The element ID for this control. |\n| `ngControl: NgControl | AbstractControlDirective | null` | Gets the AbstractControlDirective for this control. |\n| `placeholder: string` | The placeholder for this control. |\n| `required: boolean` | Whether the control is required. |\n| `shouldLabelFloat: boolean` | Whether the `MatFormField` label should try to float. |\n| `stateChanges: Observable<void>` | Stream that emits whenever the state of the control changes such that the parent `MatFormField`<br>needs to run change detection. |\n| `userAriaDescribedBy: string` | Value of `aria-describedby` that should be merged with the described-by ids<br>which are set by the form-field. |\n| `value: T | null` | The value of the control. |\n\n##### Methods\n\n| onContainerClick |\n| --- |\n| Handles a click on the control's container. |\n| Parameters |\n| --- |\n| event<br> `MouseEvent` |  |\n\n| setDescribedByIds |\n| --- |\n| Sets the list of element IDs that currently describe this control. |\n| Parameters |\n| --- |\n| ids<br> `string[]` |  |\n\n### [link](https://material.angular.io/components/form-field/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/form-field/api\\#MatFormFieldDefaultOptions) `MatFormFieldDefaultOptions`\n\nRepresents the default options for the form field that can be configured\nusing the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `appearance: MatFormFieldAppearance` | Default form field appearance style. |\n| `color: ThemePalette` | Default theme color of the form field. This API is supported in M2 themes only, it has no<br>effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/form-field/styling](https://material.angular.io/components/form-field/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| `floatLabel: FloatLabelType` | Whether the label for form fields should by default float `always`,<br>`never`, or `auto` (only when necessary). |\n| `hideRequiredMarker: boolean` | Whether the required marker should be hidden by default. |\n| `subscriptSizing: SubscriptSizing` | Whether the form field should reserve space for one line by default. |\n\n### [link](https://material.angular.io/components/form-field/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/form-field/api\\#FloatLabelType) `FloatLabelType`\n\nType for the available floatLabel values.\n\n```docs-markdown-code\ntype FloatLabelType = 'always' | 'auto';\n\n```\n\n#### [link](https://material.angular.io/components/form-field/api\\#MatFormFieldAppearance) `MatFormFieldAppearance`\n\nPossible appearance styles for the form field.\n\n```docs-markdown-code\ntype MatFormFieldAppearance = 'fill' | 'outline';\n\n```\n\n#### [link](https://material.angular.io/components/form-field/api\\#SubscriptSizing) `SubscriptSizing`\n\nBehaviors for how the subscript height is set.\n\n```docs-markdown-code\ntype SubscriptSizing = 'fixed' | 'dynamic';\n\n```\n\n### [link](https://material.angular.io/components/form-field/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/form-field/api\\#MAT_ERROR) `MAT_ERROR`\n\nInjection token that can be used to reference instances of `MatError`. It serves as\nalternative token to the actual `MatError` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst MAT_ERROR: InjectionToken<MatError>;\n\n```\n\n#### [link](https://material.angular.io/components/form-field/api\\#MAT_PREFIX) `MAT_PREFIX`\n\nInjection token that can be used to reference instances of `MatPrefix`. It serves as\nalternative token to the actual `MatPrefix` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst MAT_PREFIX: InjectionToken<MatPrefix>;\n\n```\n\n#### [link](https://material.angular.io/components/form-field/api\\#MAT_SUFFIX) `MAT_SUFFIX`\n\nInjection token that can be used to reference instances of `MatSuffix`. It serves as\nalternative token to the actual `MatSuffix` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst MAT_SUFFIX: InjectionToken<MatSuffix>;\n\n```\n\n#### [link](https://material.angular.io/components/form-field/api\\#MAT_FORM_FIELD) `MAT_FORM_FIELD`\n\nInjection token that can be used to inject an instances of `MatFormField`. It serves\nas alternative token to the actual `MatFormField` class which would cause unnecessary\nretention of the `MatFormField` class and its component metadata.\n\n```docs-markdown-code\nconst MAT_FORM_FIELD: InjectionToken<MatFormField>;\n\n```\n\n#### [link](https://material.angular.io/components/form-field/api\\#MAT_FORM_FIELD_DEFAULT_OPTIONS) `MAT_FORM_FIELD_DEFAULT_OPTIONS`\n\nInjection token that can be used to configure the\ndefault options for all form field within an app.\n\n```docs-markdown-code\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS: InjectionToken<MatFormFieldDefaultOptions>;\n\n```\n\n## API reference for Angular Material form-field-testing\n\n`\n          import {MatFormFieldHarness} from '@angular/material/form-field/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/form-field/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/form-field/api\\#MatFormFieldHarness) `MatFormFieldHarness`extends [ComponentHarness](https://material.angular.io/components/form-field/cdk/testing/api\\#ComponentHarness)\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-form-field'` |  |\n\n##### Methods\n\n| async<br> <br>getAppearance |\n| --- |\n| Gets the appearance of the form-field. |\n| Returns |\n| --- |\n| `Promise<'fill' | 'outline'>` |  |\n\n| async<br> <br>getControl |\n| --- |\n| Gets the harness of the control that is bound to the form-field. Only<br>default controls such as \"MatInputHarness\" and \"MatSelectHarness\" are<br>supported. |\n| Returns |\n| --- |\n| `Promise<FormFieldControlHarness | null>` |  |\n\n| async<br> <br>getControl |\n| --- |\n| Gets the harness of the control that is bound to the form-field. Searches<br>for a control that matches the specified harness type. |\n| Parameters |\n| --- |\n| type<br> `ComponentHarnessConstructor<X>` |  |\n| Returns |\n| --- |\n| `Promise<X | null>` |  |\n\n| async<br> <br>getControl |\n| --- |\n| Gets the harness of the control that is bound to the form-field. Searches<br>for a control that matches the specified harness predicate. |\n| Parameters |\n| --- |\n| type<br> `HarnessPredicate<X>` |  |\n| Returns |\n| --- |\n| `Promise<X | null>` |  |\n\n| async<br> <br>getErrors |\n| --- |\n| Gets all of the error harnesses in the form field. |\n| Parameters |\n| --- |\n| filter<br> `ErrorHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<MatErrorHarness[]>` |  |\n\n| async<br> <br>getLabel |\n| --- |\n| Gets the label of the form-field. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getPrefixText |\n| --- |\n| Gets the text inside the prefix element. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getSuffixText |\n| --- |\n| Gets the text inside the suffix element. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getTextErrors |\n| --- |\n| Gets error messages which are currently displayed in the form-field. |\n| Returns |\n| --- |\n| `Promise<string[]>` |  |\n\n| async<br> <br>getTextHints |\n| --- |\n| Gets hint messages which are currently displayed in the form-field. |\n| Returns |\n| --- |\n| `Promise<string[]>` |  |\n\n| async<br> <br>getThemeColor |\n| --- |\n| Gets the theme color of the form-field. |\n| Returns |\n| --- |\n| `Promise<'primary' | 'accent' | 'warn'>` |  |\n\n| async<br> <br>hasErrors |\n| --- |\n| Whether the form-field has errors. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hasLabel |\n| --- |\n| Whether the form-field has a label. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isAutofilled |\n| --- |\n| Whether the form-field is currently autofilled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isControlDirty |\n| --- |\n| Whether the form control is dirty. Returns \"null\"<br>if no form control is set up. |\n| Returns |\n| --- |\n| `Promise<boolean | null>` |  |\n\n| async<br> <br>isControlPending |\n| --- |\n| Whether the form control is pending validation. Returns \"null\"<br>if no form control is set up. |\n| Returns |\n| --- |\n| `Promise<boolean | null>` |  |\n\n| async<br> <br>isControlTouched |\n| --- |\n| Whether the form control has been touched. Returns \"null\"<br>if no form control is set up. |\n| Returns |\n| --- |\n| `Promise<boolean | null>` |  |\n\n| async<br> <br>isControlValid |\n| --- |\n| Whether the form control is valid. Returns \"null\"<br>if no form control is set up. |\n| Returns |\n| --- |\n| `Promise<boolean | null>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the form-field is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isLabelFloating |\n| --- |\n| Whether the label is currently floating. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a form field with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `FormFieldHarnessFilters = {}` | Options for filtering which form field instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/form-field/api\\#MatErrorHarness) `MatErrorHarness`extends [ComponentHarness](https://material.angular.io/components/form-field/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a `mat-error` in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-form-field-error'` |  |\n\n##### Methods\n\n| async<br> <br>getText |\n| --- |\n| Gets a promise for the error's label text. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for an error with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `ErrorHarnessFilters = {}` | Options for filtering which error instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/form-field/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/form-field/api\\#FormFieldHarnessFilters) `FormFieldHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatFormFieldHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `floatingLabelText: string | RegExp` | Filters based on the text of the form field's floating label. |\n| `hasErrors: boolean` | Filters based on whether the form field has error messages. |\n| `isValid: boolean` | Filters based on whether the form field value is valid. |\n\n#### [link](https://material.angular.io/components/form-field/api\\#ErrorHarnessFilters) `ErrorHarnessFilters`\n\nA set of criteria that can be used to filter a list of error harness instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `text: string | RegExp` | Only find instances whose text matches the given value. |\n\n### [link](https://material.angular.io/components/form-field/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/form-field/api\\#FormFieldControlHarness) `FormFieldControlHarness`\n\nPossible harnesses of controls which can be bound to a form-field.\n\n```docs-markdown-code\ntype FormFieldControlHarness = MatInputHarness | MatSelectHarness | MatDatepickerInputHarness | MatDateRangeInputHarness;\n\n```\n\nForm field\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-61ac4185-dc11-4a7d-a9be-400ddbcbe9c4.png"
  },
  "metadata": {
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "twitter:creator": "@Angular",
    "og:site_name": "Angular Material",
    "og:locale": "en_US",
    "twitter:title": "Angular Material",
    "twitter:card": "summary",
    "twitter:site": "@Angular",
    "favicon": "https://material.angular.io/components/form-field/assets/img/favicon.ico?v=19.1.0",
    "og:url": "https://material.angular.io/",
    "ogSiteName": "Angular Material",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "ogUrl": "https://material.angular.io/",
    "ogTitle": "Angular Material",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:title": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogLocale": "en_US",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "apple-mobile-web-app-capable": "yes",
    "language": "en-US",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:type": "image/png",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "og:type": "website",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "author": "Angular Components Team",
    "theme-color": "#d7e3ff",
    "mobile-web-app-capable": "yes",
    "og:image:width": "1339",
    "title": "Form field | Angular Material",
    "og:image:height": "943",
    "viewport": "width=device-width, initial-scale=1",
    "scrapeId": "8a5c8e2f-1951-495d-aff7-99ec579b8db3",
    "sourceURL": "https://material.angular.io/components/form-field/api",
    "url": "https://material.angular.io/components/form-field/api",
    "statusCode": 200
  }
}