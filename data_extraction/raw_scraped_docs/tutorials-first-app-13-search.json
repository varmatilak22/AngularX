{
  "scrapeId": "db52ba1c-e0ba-44ea-b69f-f9ac32c85b0f",
  "sourceURL": "https://angular.dev/tutorials/first-app/13-search",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nunfold\\_more\nYour first Angular appAdd search functionality\n\n[chevron\\_left](https://angular.dev/tutorials/first-app/12-forms) [chevron\\_right](https://angular.dev/tutorials/first-app/14-http)\n\nunfold\\_more\nYour first Angular appAdd search functionality\n\n[chevron\\_left](https://angular.dev/tutorials/first-app/12-forms) [chevron\\_right](https://angular.dev/tutorials/first-app/14-http)\n\nThis tutorial lesson demonstrates how to add a search functionality to your Angular app.\n\nThe app will enable users to search through the data provided by your app and display only the results that match the entered term.\n\nHTTP in Angular - Learning Angular (Part 8) - YouTube\n\nAngular\n\n159K subscribers\n\n[HTTP in Angular - Learning Angular (Part 8)](https://www.youtube.com/watch?v=5K10oYJ5Y-E)\n\nAngular\n\nSearch\n\nWatch later\n\nShare\n\nCopy link\n\nInfo\n\nShopping\n\nTap to unmute\n\nIf playback doesn't begin shortly, try restarting your device.\n\nYou're signed out\n\nVideos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.\n\nCancelConfirm\n\nMore videos\n\n## More videos\n\nShare\n\nInclude playlist\n\nAn error occurred while retrieving sharing information. Please try again later.\n\n[Watch on](https://www.youtube.com/watch?t=457&v=5K10oYJ5Y-E&embeds_referring_euri=https%3A%2F%2Fangular.dev%2F)\n\n7:37\n\n7:37 / 12:42\n•Live\n\n•\n\n[Watch on YouTube](https://www.youtube.com/watch?v=5K10oYJ5Y-E \"Watch on YouTube\")\n\n**IMPORTANT:** We recommend using your local environment for this step of the tutorial.\n\n## [What you'll learn](https://angular.dev/tutorials/first-app/13-search\\#what-youll-learn)\n\n- Your app will use data from a form to search for matching housing locations\n- Your app will display only the matching housing locations\n\n1. ### [Update the home component properties](https://angular.dev/tutorials/first-app/13-search\\#update-the-home-component-properties)\n\n\nIn this step, you'll update the `HomeComponent` class to store data in a new array property that you will use for filtering.\n\n\n1. In `src/app/home/home.component.ts`, add new property to the class called `filteredLocationList`.\n\n\n\n\n      check\n\n      ```\n            import {Component, inject} from '@angular/core';import {CommonModule} from '@angular/common';import {HousingLocationComponent} from '../housing-location/housing-location.component';import {HousingLocation} from '../housinglocation';import {HousingService} from '../housing.service';@Component({  selector: 'app-home',  imports: [CommonModule, HousingLocationComponent],  template: `    <section>      <form>        <input type=\"text\" placeholder=\"Filter by city\" #filter />        <button class=\"primary\" type=\"button\" (click)=\"filterResults(filter.value)\">Search</button>      </form>    </section>    <section class=\"results\">      <app-housing-location        *ngFor=\"let housingLocation of filteredLocationList\"        [housingLocation]=\"housingLocation\"      ></app-housing-location>    </section>  `,  styleUrls: ['./home.component.css'],})export class HomeComponent {  housingLocationList: HousingLocation[] = [];  housingService: HousingService = inject(HousingService);  filteredLocationList: HousingLocation[] = [];  constructor() {    this.housingLocationList = this.housingService.getAllHousingLocations();    this.filteredLocationList = this.housingLocationList;  }  filterResults(text: string) {    if (!text) {      this.filteredLocationList = this.housingLocationList;      return;    }    this.filteredLocationList = this.housingLocationList.filter((housingLocation) =>      housingLocation?.city.toLowerCase().includes(text.toLowerCase()),    );  }}\n\n      ```\n\n\n\n\n\n\n      The `filteredLocationList` hold the values that match the search criteria entered by the user.\n\n2. The `filteredLocationList` should contain the total set of housing locations values by default when the page loads. Update the `constructor` for the `HomeComponent` to set the value.\n\n\ncheck\n\n```\n      import {Component, inject} from '@angular/core';import {CommonModule} from '@angular/common';import {HousingLocationComponent} from '../housing-location/housing-location.component';import {HousingLocation} from '../housinglocation';import {HousingService} from '../housing.service';@Component({  selector: 'app-home',  imports: [CommonModule, HousingLocationComponent],  template: `    <section>      <form>        <input type=\"text\" placeholder=\"Filter by city\" #filter />        <button class=\"primary\" type=\"button\" (click)=\"filterResults(filter.value)\">Search</button>      </form>    </section>    <section class=\"results\">      <app-housing-location        *ngFor=\"let housingLocation of filteredLocationList\"        [housingLocation]=\"housingLocation\"      ></app-housing-location>    </section>  `,  styleUrls: ['./home.component.css'],})export class HomeComponent {  housingLocationList: HousingLocation[] = [];  housingService: HousingService = inject(HousingService);  filteredLocationList: HousingLocation[] = [];  constructor() {    this.housingLocationList = this.housingService.getAllHousingLocations();    this.filteredLocationList = this.housingLocationList;  }  filterResults(text: string) {    if (!text) {      this.filteredLocationList = this.housingLocationList;      return;    }    this.filteredLocationList = this.housingLocationList.filter((housingLocation) =>      housingLocation?.city.toLowerCase().includes(text.toLowerCase()),    );  }}\n\n```\n\n2. ### [Update the home component template](https://angular.dev/tutorials/first-app/13-search\\#update-the-home-component-template)\n\n\nThe `HomeComponent` already contains an input field that you will use to capture input from the user. That string text will be used to filter the results.\n\n\n1. Update the `HomeComponent` template to include a template variable in the `input` element called `#filter`.\n\n\n\n\n\n      ### Add a template variable to HomeComponent's template\n\n\n\n\n\n      ```\n            <input type=\"text\" placeholder=\"Filter by city\" #filter>\n\n      ```\n\n      check\n\n      This example uses a [template reference variable](https://angular.dev/guide/templates) to get access to the `input` element as its value.\n\n2. Next, update the component template to attach an event handler to the \"Search\" button.\n\n\n\n\n\n      ### Bind the click event\n\n\n\n\n\n      ```\n            <button class=\"primary\" type=\"button\" (click)=\"filterResults(filter.value)\">Search</button>\n\n      ```\n\n      check\n\n      By binding to the `click` event on the `button` element, you are able to call the `filterResults` function. The argument to the function is the `value` property of the `filter` template variable. Specifically, the `.value` property from the `input` HTML element.\n\n3. The last template update is to the `ngFor` directive. Update the `ngFor` value to iterate over values from the `filteredLocationList` array.\n\n\n### Update the ngFor directive value\n\n```\n      <app-housing-location *ngFor=\"let housingLocation of filteredLocationList\" [housingLocation]=\"housingLocation\"></app-housing-location>\n\n```\n\ncheck\n\n3. ### [Implement the event handler function](https://angular.dev/tutorials/first-app/13-search\\#implement-the-event-handler-function)\n\n\nThe template has been updated to bind the `filterResults` function to the `click` event. Next, your task is to implement the `filterResults` function in the `HomeComponent` class.\n\n\n1. Update the `HomeComponent` class to include the implementation of the `filterResults` function.\n\n\n\n\n      check\n\n      ```\n            import {Component, inject} from '@angular/core';import {CommonModule} from '@angular/common';import {HousingLocationComponent} from '../housing-location/housing-location.component';import {HousingLocation} from '../housinglocation';import {HousingService} from '../housing.service';@Component({  selector: 'app-home',  imports: [CommonModule, HousingLocationComponent],  template: `    <section>      <form>        <input type=\"text\" placeholder=\"Filter by city\" #filter />        <button class=\"primary\" type=\"button\" (click)=\"filterResults(filter.value)\">Search</button>      </form>    </section>    <section class=\"results\">      <app-housing-location        *ngFor=\"let housingLocation of filteredLocationList\"        [housingLocation]=\"housingLocation\"      ></app-housing-location>    </section>  `,  styleUrls: ['./home.component.css'],})export class HomeComponent {  housingLocationList: HousingLocation[] = [];  housingService: HousingService = inject(HousingService);  filteredLocationList: HousingLocation[] = [];  constructor() {    this.housingLocationList = this.housingService.getAllHousingLocations();    this.filteredLocationList = this.housingLocationList;  }  filterResults(text: string) {    if (!text) {      this.filteredLocationList = this.housingLocationList;      return;    }    this.filteredLocationList = this.housingLocationList.filter((housingLocation) =>      housingLocation?.city.toLowerCase().includes(text.toLowerCase()),    );  }}\n\n      ```\n\n\n\n\n\n\n      This function uses the `String` `filter` function to compare the value of the `text` parameter against the `housingLocation.city` property. You can update this function to match against any property or multiple properties for a fun exercise.\n\n2. Save your code.\n\n3. Refresh the browser and confirm that you can search the housing location data by city when you click the \"Search\" button after entering text.\n\n\n![filtered search results based on user input](https://angular.dev/assets/images/tutorials/first-app/homes-app-lesson-13-step-3.png)\n\n**SUMMARY:** In this lesson, you updated your app to use template variables to interact with template values, and add search functionality using event binding and array functions.\n\nFor more information about the topics covered in this lesson, visit:",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-93e2716e-8e31-4d13-ba33-de130d2a676e.png"
  },
  "metadata": {
    "language": "en",
    "og:description": "The web development framework for building modern apps.",
    "apple-mobile-web-app-title": "Angular",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "description": "The web development framework for building modern apps.",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "twitter:card": "summary_large_image",
    "og:url": "https://angular.dev/",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "application-name": "Angular",
    "og:title": "Angular",
    "ogTitle": "Angular",
    "title": "Add search functionality • Angular",
    "ogDescription": "The web development framework for building modern apps.",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "theme-color": "#ffffff",
    "og:type": "website",
    "twitter:url": "https://angular.dev/",
    "viewport": [
      "width=device-width, initial-scale=1",
      "width=device-width, initial-scale=1"
    ],
    "msapplication-TileColor": "#e90464",
    "twitter:title": "Angular",
    "twitter:description": "The web development framework for building modern apps.",
    "ogUrl": "https://angular.dev/",
    "scrapeId": "db52ba1c-e0ba-44ea-b69f-f9ac32c85b0f",
    "sourceURL": "https://angular.dev/tutorials/first-app/13-search",
    "url": "https://angular.dev/tutorials/first-app/13-search",
    "statusCode": 200
  }
}