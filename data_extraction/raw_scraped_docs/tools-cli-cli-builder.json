{
  "scrapeId": "2ea04391-1c96-4128-9450-39a537adb832",
  "sourceURL": "https://angular.dev/tools/cli/cli-builder",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backAngular CLI\n  - [Overview](https://angular.dev/tools/cli)\n  - [Local set-up](https://angular.dev/tools/cli/setup-local)\n  - [Building Angular apps](https://angular.dev/tools/cli/build)\n  - [Serving Angular apps for development](https://angular.dev/tools/cli/serve)\n  - [Deployment](https://angular.dev/tools/cli/deployment)\n  - [End-to-End Testing](https://angular.dev/tools/cli/end-to-end)\n  - [Migrating to new build system](https://angular.dev/tools/cli/build-system-migration)\n  - [Build environments](https://angular.dev/tools/cli/environments)\n  - [Angular CLI builders](https://angular.dev/tools/cli/cli-builder)\n  - [Generating code using schematics](https://angular.dev/tools/cli/schematics)\n  - [Authoring schematics](https://angular.dev/tools/cli/schematics-authoring)\n  - [Schematics for libraries](https://angular.dev/tools/cli/schematics-for-libraries)\n  - [Template type checking](https://angular.dev/tools/cli/template-typecheck)\n  - [Ahead-of-time (AOT) compilation](https://angular.dev/tools/cli/aot-compiler)\n  - [AOT metadata errors](https://angular.dev/tools/cli/aot-metadata-errors)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nA number of Angular CLI commands run a complex process on your code, such as building, testing, or serving your application.\nThe commands use an internal tool called Architect to run _CLI builders_, which invoke another tool (bundler, test runner, server) to accomplish the desired task.\nCustom builders can perform an entirely new task, or to change which third-party tool is used by an existing command.\n\nThis document explains how CLI builders integrate with the workspace configuration file, and shows how you can create your own builder.\n\n**HELPFUL:** Find the code from the examples used here in this [GitHub repository](https://github.com/mgechev/cli-builders-demo).\n\n## [CLI builders](https://angular.dev/tools/cli/cli-builder\\#cli-builders)\n\nThe internal Architect tool delegates work to handler functions called _builders_.\nA builder handler function receives two arguments:\n\n| Argument | Type |\n| :-- | :-- |\n| `options` | `JSONObject` |\n| `context` | `BuilderContext` |\n\nThe separation of concerns here is the same as with [schematics](https://angular.dev/tools/cli/tools/cli/schematics-authoring), which are used for other CLI commands that touch your code (such as `ng generate`).\n\n- The `options` object is provided by the CLI user's options and configuration, while the `context` object is provided by the CLI Builder API automatically.\n- In addition to the contextual information, the `context` object also provides access to a scheduling method, `context.scheduleTarget()`.\nThe scheduler executes the builder handler function with a given target configuration.\n\nThe builder handler function can be synchronous (return a value), asynchronous (return a `Promise`), or watch and return multiple values (return an `Observable`).\nThe return values must always be of type `BuilderOutput`.\nThis object contains a Boolean `success` field and an optional `error` field that can contain an error message.\n\nAngular provides some builders that are used by the CLI for commands such as `ng build` and `ng test`.\nDefault target configurations for these and other built-in CLI builders can be found and configured in the \"architect\" section of the [workspace configuration file](https://angular.dev/tools/cli/reference/configs/workspace-config), `angular.json`.\nAlso, extend and customize Angular by creating your own builders, which you can run directly using the [`ng run` CLI command](https://angular.dev/tools/cli/cli/run).\n\n### [Builder project structure](https://angular.dev/tools/cli/cli-builder\\#builder-project-structure)\n\nA builder resides in a \"project\" folder that is similar in structure to an Angular workspace, with global configuration files at the top level, and more specific configuration in a source folder with the code files that define the behavior.\nFor example, your `myBuilder` folder could contain the following files.\n\n| Files | Purpose |\n| :-- | :-- |\n| `src/my-builder.ts` | Main source file for the builder definition. |\n| `src/my-builder.spec.ts` | Source file for tests. |\n| `src/schema.json` | Definition of builder input options. |\n| `builders.json` | Builders definition. |\n| `package.json` | Dependencies. See [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json). |\n| `tsconfig.json` | [TypeScript configuration](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html). |\n\nBuilders can be published to `npm`, see [Publishing your Library](https://angular.dev/tools/cli/tools/libraries/creating-libraries).\n\n## [Creating a builder](https://angular.dev/tools/cli/cli-builder\\#creating-a-builder)\n\nAs an example, create a builder that copies a file to a new location.\nTo create a builder, use the `createBuilder()` CLI Builder function, and return a `Promise<BuilderOutput>` object.\n\ncheck\n\n```\n      import {BuilderContext, BuilderOutput, createBuilder} from '@angular-devkit/architect';import {JsonObject} from '@angular-devkit/core';import {promises as fs} from 'fs';\n...interface Options extends JsonObject {  source: string;  destination: string;}export default createBuilder(copyFileBuilder);async function copyFileBuilder(options: Options, context: BuilderContext): Promise<BuilderOutput> {  context.reportStatus(`Copying ${options.source} to ${options.destination}.`);  try {    await fs.copyFile(options.source, options.destination);  } catch (err) {    context.logger.error('Failed to copy file.');    return {      success: false,      error: (err as Error).message,    };  }  context.reportStatus('Done.');  return {success: true};\n...}\n\n```\n\nNow let's add some logic to it.\nThe following code retrieves the source and destination file paths from user options and copies the file from the source to the destination (using the [Promise version of the built-in NodeJS `copyFile()` function](https://nodejs.org/api/fs.html#fs_fspromises_copyfile_src_dest_mode)).\nIf the copy operation fails, it returns an error with a message about the underlying problem.\n\ncheck\n\n```\n      import {BuilderContext, BuilderOutput, createBuilder} from '@angular-devkit/architect';import {JsonObject} from '@angular-devkit/core';import {promises as fs} from 'fs';interface Options extends JsonObject {  source: string;  destination: string;}export default createBuilder(copyFileBuilder);async function copyFileBuilder(options: Options, context: BuilderContext): Promise<BuilderOutput> {  context.reportStatus(`Copying ${options.source} to ${options.destination}.`);\n...  try {    await fs.copyFile(options.source, options.destination);  } catch (err) {    context.logger.error('Failed to copy file.');\n...    return {      success: false,      error: (err as Error).message,    };  }  context.reportStatus('Done.');\n...  return {success: true};}\n\n```\n\n### [Handling output](https://angular.dev/tools/cli/cli-builder\\#handling-output)\n\nBy default, `copyFile()` does not print anything to the process standard output or error.\nIf an error occurs, it might be difficult to understand exactly what the builder was trying to do when the problem occurred.\nAdd some additional context by logging additional information using the `Logger` API.\nThis also lets the builder itself be executed in a separate process, even if the standard output and error are deactivated.\n\nYou can retrieve a `Logger` instance from the context.\n\ncheck\n\n```\n      import {BuilderContext, BuilderOutput, createBuilder} from '@angular-devkit/architect';import {JsonObject} from '@angular-devkit/core';import {promises as fs} from 'fs';interface Options extends JsonObject {  source: string;  destination: string;}export default createBuilder(copyFileBuilder);async function copyFileBuilder(options: Options, context: BuilderContext): Promise<BuilderOutput> {  context.reportStatus(`Copying ${options.source} to ${options.destination}.`);  try {    await fs.copyFile(options.source, options.destination);  } catch (err) {    context.logger.error('Failed to copy file.');    return {      success: false,      error: (err as Error).message,    };  }  context.reportStatus('Done.');  return {success: true};}\n\n```\n\n### [Progress and status reporting](https://angular.dev/tools/cli/cli-builder\\#progress-and-status-reporting)\n\nThe CLI Builder API includes progress and status reporting tools, which can provide hints for certain functions and interfaces.\n\nTo report progress, use the `context.reportProgress()` method, which takes a current value, optional total, and status string as arguments.\nThe total can be any number. For example, if you know how many files you have to process, the total could be the number of files, and current should be the number processed so far.\nThe status string is unmodified unless you pass in a new string value.\n\nIn our example, the copy operation either finishes or is still executing, so there's no need for a progress report, but you can report status so that a parent builder that called our builder would know what's going on.\nUse the `context.reportStatus()` method to generate a status string of any length.\n\n**HELPFUL:** There's no guarantee that a long string will be shown entirely; it could be cut to fit the UI that displays it.\n\nPass an empty string to remove the status.\n\ncheck\n\n```\n      import {BuilderContext, BuilderOutput, createBuilder} from '@angular-devkit/architect';import {JsonObject} from '@angular-devkit/core';import {promises as fs} from 'fs';interface Options extends JsonObject {  source: string;  destination: string;}export default createBuilder(copyFileBuilder);async function copyFileBuilder(options: Options, context: BuilderContext): Promise<BuilderOutput> {  context.reportStatus(`Copying ${options.source} to ${options.destination}.`);  try {    await fs.copyFile(options.source, options.destination);  } catch (err) {    context.logger.error('Failed to copy file.');    return {      success: false,      error: (err as Error).message,    };  }  context.reportStatus('Done.');  return {success: true};}\n\n```\n\n## [Builder input](https://angular.dev/tools/cli/cli-builder\\#builder-input)\n\nYou can invoke a builder indirectly through a CLI command such as `ng build`, or directly with the Angular CLI `ng run` command.\nIn either case, you must provide required inputs, but can let other inputs default to values that are pre-configured for a specific _target_, specified by a [configuration](https://angular.dev/tools/cli/tools/cli/environments), or set on the command line.\n\n### [Input validation](https://angular.dev/tools/cli/cli-builder\\#input-validation)\n\nYou define builder inputs in a JSON schema associated with that builder.\nSimilar to schematics, the Architect tool collects the resolved input values into an `options` object, and validates their types against the schema before passing them to the builder function.\n\nFor our example builder, `options` should be a `JsonObject` with two keys:\na `source` and a `destination`, each of which are a string.\n\nYou can provide the following schema for type validation of these values.\n\n### src/schema.json\n\n```\n      {  \"$schema\": \"http://json-schema.org/schema\",  \"type\": \"object\",  \"properties\": {    \"source\": {      \"type\": \"string\"    },    \"destination\": {      \"type\": \"string\"    }  }}\n\n```\n\ncheck\n\n**HELPFUL:** This is a minimal example, but the use of a schema for validation can be very powerful.\nFor more information, see the [JSON schemas website](http://json-schema.org/).\n\nTo link our builder implementation with its schema and name, you need to create a _builder definition_ file, which you can point to in `package.json`.\n\nCreate a file named `builders.json` that looks like this:\n\n### builders.json\n\n```\n      {  \"builders\": {    \"copy\": {      \"implementation\": \"./dist/my-builder.js\",      \"schema\": \"./src/schema.json\",      \"description\": \"Copies a file.\"    }  }}\n\n```\n\ncheck\n\nIn the `package.json` file, add a `builders` key that tells the Architect tool where to find our builder definition file.\n\n### package.json\n\n```\n      {  \"name\": \"@example/copy-file\",  \"version\": \"1.0.0\",  \"description\": \"Builder for copying files\",  \"builders\": \"builders.json\",  \"dependencies\": {    \"@angular-devkit/architect\": \"~0.1200.0\",    \"@angular-devkit/core\": \"^12.0.0\"  }}\n\n```\n\ncheck\n\nThe official name of our builder is now `@example/copy-file:copy`.\nThe first part of this is the package name and the second part is the builder name as specified in the `builders.json` file.\n\nThese values are accessed on `options.source` and `options.destination`.\n\ncheck\n\n```\n      import {BuilderContext, BuilderOutput, createBuilder} from '@angular-devkit/architect';import {JsonObject} from '@angular-devkit/core';import {promises as fs} from 'fs';interface Options extends JsonObject {  source: string;  destination: string;}export default createBuilder(copyFileBuilder);async function copyFileBuilder(options: Options, context: BuilderContext): Promise<BuilderOutput> {  context.reportStatus(`Copying ${options.source} to ${options.destination}.`);  try {    await fs.copyFile(options.source, options.destination);  } catch (err) {    context.logger.error('Failed to copy file.');    return {      success: false,      error: (err as Error).message,    };  }  context.reportStatus('Done.');  return {success: true};}\n\n```\n\n### [Target configuration](https://angular.dev/tools/cli/cli-builder\\#target-configuration)\n\nA builder must have a defined target that associates it with a specific input configuration and project.\n\nTargets are defined in the `angular.json` [CLI configuration file](https://angular.dev/tools/cli/reference/configs/workspace-config).\nA target specifies the builder to use, its default options configuration, and named alternative configurations.\nArchitect in the Angular CLI uses the target definition to resolve input options for a given run.\n\nThe `angular.json` file has a section for each project, and the \"architect\" section of each project configures targets for builders used by CLI commands such as 'build', 'test', and 'serve'.\nBy default, for example, the `ng build` command runs the builder `@angular-devkit/build-angular:browser` to perform the build task, and passes in default option values as specified for the `build` target in `angular.json`.\n\n### angular.json\n\n```\n      â€¦\"myApp\": {  â€¦  \"architect\": {    \"build\": {      \"builder\": \"@angular-devkit/build-angular:browser\",      \"options\": {        \"outputPath\": \"dist/myApp\",        \"index\": \"src/index.html\",        â€¦      },      \"configurations\": {        \"production\": {          \"fileReplacements\": [            {              \"replace\": \"src/environments/environment.ts\",              \"with\": \"src/environments/environment.prod.ts\"            }          ],          \"optimization\": true,          \"outputHashing\": \"all\",          â€¦        }      }    },    â€¦  }}â€¦\n\n```\n\ncheck\n\nThe command passes the builder the set of default options specified in the \"options\" section.\nIf you pass the `--configuration=production` flag, it uses the override values specified in the `production` configuration.\nSpecify further option overrides individually on the command line.\n\n#### [Target strings](https://angular.dev/tools/cli/cli-builder\\#target-strings)\n\nThe generic `ng run` CLI command takes as its first argument a target string of the following form.\n\n```\n      project:target[:configuration]\n\n```\n\ncheck\n\n|  | Details |\n| :-- | :-- |\n| project | The name of the Angular CLI project that the target is associated with. |\n| target | A named builder configuration from the `architect` section of the `angular.json` file. |\n| configuration | (optional) The name of a specific configuration override for the given target, as defined in the `angular.json` file. |\n\nIf your builder calls another builder, it might need to read a passed target string.\nParse this string into an object by using the `targetFromTargetString()` utility function from `@angular-devkit/architect`.\n\n## [Schedule and run](https://angular.dev/tools/cli/cli-builder\\#schedule-and-run)\n\nArchitect runs builders asynchronously.\nTo invoke a builder, you schedule a task to be run when all configuration resolution is complete.\n\nThe builder function is not executed until the scheduler returns a `BuilderRun` control object.\nThe CLI typically schedules tasks by calling the `context.scheduleTarget()` function, and then resolves input options using the target definition in the `angular.json` file.\n\nArchitect resolves input options for a given target by taking the default options object, then overwriting values from the configuration, then further overwriting values from the overrides object passed to `context.scheduleTarget()`.\nFor the Angular CLI, the overrides object is built from command line arguments.\n\nArchitect validates the resulting options values against the schema of the builder.\nIf inputs are valid, Architect creates the context and executes the builder.\n\nFor more information see [Workspace Configuration](https://angular.dev/tools/cli/reference/configs/workspace-config).\n\n**HELPFUL:** You can also invoke a builder directly from another builder or test by calling `context.scheduleBuilder()`.\nYou pass an `options` object directly to the method, and those option values are validated against the schema of the builder without further adjustment.\n\nOnly the `context.scheduleTarget()` method resolves the configuration and overrides through the `angular.json` file.\n\n### [Default architect configuration](https://angular.dev/tools/cli/cli-builder\\#default-architect-configuration)\n\nLet's create a simple `angular.json` file that puts target configurations into context.\n\nYou can publish the builder to npm (see [Publishing your Library](https://angular.dev/tools/cli/tools/libraries/creating-libraries#publishing-your-library)), and install it using the following command:\n\n```\n      npm install @example/copy-file\n\n```\n\ncheck\n\nIf you create a new project with `ng new builder-test`, the generated `angular.json` file looks something like this, with only default builder configurations.\n\n### angular.json\n\n```\n      {  \"projects\": {    \"builder-test\": {      \"architect\": {        \"build\": {          \"builder\": \"@angular-devkit/build-angular:browser\",          \"options\": {            // more options...            \"outputPath\": \"dist/builder-test\",            \"index\": \"src/index.html\",            \"main\": \"src/main.ts\",            \"polyfills\": \"src/polyfills.ts\",            \"tsConfig\": \"src/tsconfig.app.json\"          },          \"configurations\": {            \"production\": {              // more options...              \"optimization\": true,              \"aot\": true,              \"buildOptimizer\": true            }          }        }      }    }  }}\n\n```\n\ncheck\n\n### [Adding a target](https://angular.dev/tools/cli/cli-builder\\#adding-a-target)\n\nAdd a new target that will run our builder to copy a file.\nThis target tells the builder to copy the `package.json` file.\n\n- We will add a new target section to the `architect` object for our project\n- The target named `copy-package` uses our builder, which you published to `@example/copy-file`.\n- The options object provides default values for the two inputs that you defined.\n  - `source` \\- The existing file you are copying.\n  - `destination` \\- The path you want to copy to.\n\n### angular.json\n\n```\n      {  \"projects\": {    \"builder-test\": {      \"architect\": {        \"copy-package\": {          \"builder\": \"@example/copy-file:copy\",          \"options\": {            \"source\": \"package.json\",            \"destination\": \"package-copy.json\"          }        },        // Existing targets...      }    }  }}\n\n```\n\ncheck\n\n### [Running the builder](https://angular.dev/tools/cli/cli-builder\\#running-the-builder)\n\nTo run our builder with the new target's default configuration, use the following CLI command.\n\n```\n      ng run builder-test:copy-package\n\n```\n\ncheck\n\nThis copies the `package.json` file to `package-copy.json`.\n\nUse command-line arguments to override the configured defaults.\nFor example, to run with a different `destination` value, use the following CLI command.\n\n```\n      ng run builder-test:copy-package --destination=package-other.json\n\n```\n\ncheck\n\nThis copies the file to `package-other.json` instead of `package-copy.json`.\nBecause you did not override the _source_ option, it will still copy from the default `package.json` file.\n\n## [Testing a builder](https://angular.dev/tools/cli/cli-builder\\#testing-a-builder)\n\nUse integration testing for your builder, so that you can use the Architect scheduler to create a context, as in this [example](https://github.com/mgechev/cli-builders-demo).\nIn the builder source directory, create a new test file `my-builder.spec.ts`. The test creates new instances of `JsonSchemaRegistry` (for schema validation), `TestingArchitectHost` (an in-memory implementation of `ArchitectHost`), and `Architect`.\n\nHere's an example of a test that runs the copy file builder.\nThe test uses the builder to copy the `package.json` file and validates that the copied file's contents are the same as the source.\n\n### src/my-builder.spec.ts\n\n```\n      import {Architect} from '@angular-devkit/architect';import {TestingArchitectHost} from '@angular-devkit/architect/testing';import {schema} from '@angular-devkit/core';import {promises as fs} from 'fs';import {join} from 'path';describe('Copy File Builder', () => {  let architect: Architect;  let architectHost: TestingArchitectHost;  beforeEach(async () => {    const registry = new schema.CoreSchemaRegistry();    registry.addPostTransform(schema.transforms.addUndefinedDefaults);    // TestingArchitectHost() takes workspace and current directories.    // Since we don't use those, both are the same in this case.    architectHost = new TestingArchitectHost(__dirname, __dirname);    architect = new Architect(architectHost, registry);    // This will either take a Node package name, or a path to the directory    // for the package.json file.    await architectHost.addBuilderFromPackage(join(__dirname, '..'));  });  it('can copy files', async () => {    // A \"run\" can have multiple outputs, and contains progress information.    const run = await architect.scheduleBuilder('@example/copy-file:copy', {      source: 'package.json',      destination: 'package-copy.json',    });    // The \"result\" member (of type BuilderOutput) is the next output.    const output = await run.result;    // Stop the builder from running. This stops Architect from keeping    // the builder-associated states in memory, since builders keep waiting    // to be scheduled.    await run.stop();    // Expect that the copied file is the same as its source.    const sourceContent = await fs.readFile('package.json', 'utf8');    const destinationContent = await fs.readFile('package-copy.json', 'utf8');    expect(destinationContent).toBe(sourceContent);  });});\n\n```\n\ncheck\n\n**HELPFUL:** When running this test in your repo, you need the [`ts-node`](https://github.com/TypeStrong/ts-node) package.\nYou can avoid this by renaming `my-builder.spec.ts` to `my-builder.spec.js`.\n\n### [Watch mode](https://angular.dev/tools/cli/cli-builder\\#watch-mode)\n\nMost builders to run once and return. However, this behavior is not entirely compatible with a builder that watches for changes (like a devserver, for example).\nArchitect can support watch mode, but there are some things to look out for.\n\n- To be used with watch mode, a builder handler function should return an `Observable`.\nArchitect subscribes to the `Observable` until it completes and might reuse it if the builder is scheduled again with the same arguments.\n\n- The builder should always emit a `BuilderOutput` object after each execution.\nOnce it's been executed, it can enter a watch mode, to be triggered by an external event.\nIf an event triggers it to restart, the builder should execute the `context.reportRunning()` function to tell Architect that it is running again.\nThis prevents Architect from stopping the builder if another run is scheduled.\n\n\nWhen your builder calls `BuilderRun.stop()` to exit watch mode, Architect unsubscribes from the builder's `Observable` and calls the builder's teardown logic to clean up.\nThis behavior also allows for long-running builds to be stopped and cleaned up.\n\nIn general, if your builder is watching an external event, you should separate your run into three phases.\n\n| Phases | Details |\n| :-- | :-- |\n| Running | The task being performed, such as invoking a compiler. This ends when the compiler finishes and your builder emits a `BuilderOutput` object. |\n| Watching | Between two runs, watch an external event stream. For example, watch the file system for any changes. This ends when the compiler restarts, and `context.reportRunning()` is called. |\n| Completion | Either the task is fully completed, such as a compiler which needs to run a number of times, or the builder run was stopped (using `BuilderRun.stop()`). Architect executes teardown logic and unsubscribes from your builder's `Observable`. |\n\n## [Summary](https://angular.dev/tools/cli/cli-builder\\#summary)\n\nThe CLI Builder API provides a means of changing the behavior of the Angular CLI by using builders to execute custom logic.\n\n- Builders can be synchronous or asynchronous, execute once or watch for external events, and can schedule other builders or targets.\n- Builders have option defaults specified in the `angular.json` configuration file, which can be overwritten by an alternate configuration for the target, and further overwritten by command line flags\n- The Angular team recommends that you use integration tests to test Architect builders. Use unit tests to validate the logic that the builder executes.\n- If your builder returns an `Observable`, it should clean up the builder in the teardown logic of that `Observable`.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-be092ad8-4c52-4c3a-a436-34a645240ef1.png"
  },
  "metadata": {
    "language": "en",
    "viewport": "width=device-width, initial-scale=1",
    "apple-mobile-web-app-title": "Angular",
    "og:type": "website",
    "twitter:title": "Angular",
    "theme-color": "#ffffff",
    "twitter:description": "The web development framework for building modern apps.",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "msapplication-TileColor": "#e90464",
    "og:url": "https://angular.dev/",
    "ogUrl": "https://angular.dev/",
    "og:title": "Angular",
    "ogDescription": "The web development framework for building modern apps.",
    "application-name": "Angular",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "twitter:card": "summary_large_image",
    "twitter:url": "https://angular.dev/",
    "og:description": "The web development framework for building modern apps.",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "title": "Angular CLI builders â€¢ Angular",
    "description": "The web development framework for building modern apps.",
    "scrapeId": "2ea04391-1c96-4128-9450-39a537adb832",
    "sourceURL": "https://angular.dev/tools/cli/cli-builder",
    "url": "https://angular.dev/tools/cli/cli-builder",
    "statusCode": 200
  }
}