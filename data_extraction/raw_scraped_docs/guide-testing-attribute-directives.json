{
  "scrapeId": "a986101e-417d-497d-973d-94fcc3ef7b4b",
  "sourceURL": "https://angular.dev/guide/testing/attribute-directives",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backTesting\n  - [Overview](https://angular.dev/guide/testing)\n  - [Code coverage](https://angular.dev/guide/testing/code-coverage)\n  - [Testing services](https://angular.dev/guide/testing/services)\n  - [Basics of testing components](https://angular.dev/guide/testing/components-basics)\n  - [Component testing scenarios](https://angular.dev/guide/testing/components-scenarios)\n  - [Testing attribute directives](https://angular.dev/guide/testing/attribute-directives)\n  - [Testing pipes](https://angular.dev/guide/testing/pipes)\n  - [Debugging tests](https://angular.dev/guide/testing/debugging)\n  - [Testing utility APIs](https://angular.dev/guide/testing/utility-apis)\n  - [Component harnesses overview](https://angular.dev/guide/testing/component-harnesses-overview)\n  - [Using component harnesses in tests](https://angular.dev/guide/testing/using-component-harnesses)\n  - [Creating harnesses for your components](https://angular.dev/guide/testing/creating-component-harnesses)\n  - [Adding harness support for additional testing environments](https://angular.dev/guide/testing/component-harnesses-testing-environments)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nAn _attribute directive_ modifies the behavior of an element, component or another directive.\nIts name reflects the way the directive is applied: as an attribute on a host element.\n\n## [Testing the `HighlightDirective`](https://angular.dev/guide/testing/attribute-directives\\#testing-the-highlightdirective)\n\nThe sample application's `HighlightDirective` sets the background color of an element based on either a data bound color or a default color (lightgray).\nIt also sets a custom property of the element ( `customProperty`) to `true` for no reason other than to show that it can.\n\n### app/shared/highlight.directive.ts\n\n```\n      import {Directive, ElementRef, inject, Input, OnChanges} from '@angular/core';@Directive({selector: '[highlight]'})/** * Set backgroundColor for the attached element to highlight color * and set the element's customProperty to true */export class HighlightDirective implements OnChanges {  defaultColor = 'rgb(211, 211, 211)'; // lightgray  @Input('highlight') bgColor = '';  private el = inject(ElementRef);  constructor() {    this.el.nativeElement.style.customProperty = true;  }  ngOnChanges() {    this.el.nativeElement.style.backgroundColor = this.bgColor || this.defaultColor;  }}\n\n```\n\ncheck\n\nIt's used throughout the application, perhaps most simply in the `AboutComponent`:\n\n### app/about/about.component.ts\n\n```\n      import {Component} from '@angular/core';import {HighlightDirective} from '../shared/highlight.directive';import {TwainComponent} from '../twain/twain.component';@Component({  template: `    <h2 highlight=\"skyblue\">About</h2>    <h3>Quote of the day:</h3>    <twain-quote></twain-quote>  `,  imports: [TwainComponent, HighlightDirective],})export class AboutComponent {}\n\n```\n\ncheck\n\nTesting the specific use of the `HighlightDirective` within the `AboutComponent` requires only the techniques explored in the [\"Nested component tests\"](https://angular.dev/guide/testing/guide/testing/components-scenarios#nested-component-tests) section of [Component testing scenarios](https://angular.dev/guide/testing/guide/testing/components-scenarios).\n\ncheck\n\n```\n      import {provideHttpClient} from '@angular/common/http';import {CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';import {ComponentFixture, TestBed} from '@angular/core/testing';import {UserService} from '../model';import {TwainService} from '../twain/twain.service';import {AboutComponent} from './about.component';let fixture: ComponentFixture<AboutComponent>;describe('AboutComponent (highlightDirective)', () => {  beforeEach(() => {    fixture = TestBed.configureTestingModule({      imports: [AboutComponent],      providers: [provideHttpClient(), TwainService, UserService],      schemas: [CUSTOM_ELEMENTS_SCHEMA],    }).createComponent(AboutComponent);    fixture.detectChanges(); // initial binding  });  it('should have skyblue <h2>', () => {    const h2: HTMLElement = fixture.nativeElement.querySelector('h2');    const bgColor = h2.style.backgroundColor;    expect(bgColor).toBe('skyblue');  });});\n\n```\n\nHowever, testing a single use case is unlikely to explore the full range of a directive's capabilities.\nFinding and testing all components that use the directive is tedious, brittle, and almost as unlikely to afford full coverage.\n\n_Class-only tests_ might be helpful, but attribute directives like this one tend to manipulate the DOM.\nIsolated unit tests don't touch the DOM and, therefore, do not inspire confidence in the directive's efficacy.\n\nA better solution is to create an artificial test component that demonstrates all ways to apply the directive.\n\ncheck\n\n```\n      import {Component, DebugElement} from '@angular/core';import {ComponentFixture, TestBed} from '@angular/core/testing';import {By} from '@angular/platform-browser';import {HighlightDirective} from './highlight.directive';@Component({  template: ` <h2 highlight=\"yellow\">Something Yellow</h2>    <h2 highlight>The Default (Gray)</h2>    <h2>No Highlight</h2>    <input #box [highlight]=\"box.value\" value=\"cyan\" />`,  imports: [HighlightDirective],})class TestComponent {}describe('HighlightDirective', () => {  let fixture: ComponentFixture<TestComponent>;  let des: DebugElement[]; // the three elements w/ the directive  let bareH2: DebugElement; // the <h2> w/o the directive  beforeEach(() => {    fixture = TestBed.configureTestingModule({      imports: [HighlightDirective, TestComponent],    }).createComponent(TestComponent);    fixture.detectChanges(); // initial binding    // all elements with an attached HighlightDirective    des = fixture.debugElement.queryAll(By.directive(HighlightDirective));    // the h2 without the HighlightDirective    bareH2 = fixture.debugElement.query(By.css('h2:not([highlight])'));  });  // color tests  it('should have three highlighted elements', () => {    expect(des.length).toBe(3);  });  it('should color 1st <h2> background \"yellow\"', () => {    const bgColor = des[0].nativeElement.style.backgroundColor;    expect(bgColor).toBe('yellow');  });  it('should color 2nd <h2> background w/ default color', () => {    const dir = des[1].injector.get(HighlightDirective) as HighlightDirective;    const bgColor = des[1].nativeElement.style.backgroundColor;    expect(bgColor).toBe(dir.defaultColor);  });  it('should bind <input> background to value color', () => {    // easier to work with nativeElement    const input = des[2].nativeElement as HTMLInputElement;    expect(input.style.backgroundColor).withContext('initial backgroundColor').toBe('cyan');    input.value = 'green';    // Dispatch a DOM event so that Angular responds to the input value change.    input.dispatchEvent(new Event('input'));    fixture.detectChanges();    expect(input.style.backgroundColor).withContext('changed backgroundColor').toBe('green');  });  it('bare <h2> should not have a customProperty', () => {    expect(bareH2.properties['customProperty']).toBeUndefined();  });  // Removed on 12/02/2016 when ceased public discussion of the `Renderer`. Revive in future?  // // customProperty tests  // it('all highlighted elements should have a true customProperty', () => {  //   const allTrue = des.map(de => !!de.properties['customProperty']).every(v => v === true);  //   expect(allTrue).toBe(true);  // });  // injected directive  // attached HighlightDirective can be injected  it('can inject `HighlightDirective` in 1st <h2>', () => {    const dir = des[0].injector.get(HighlightDirective);    expect(dir).toBeTruthy();  });  it('cannot inject `HighlightDirective` in 3rd <h2>', () => {    const dir = bareH2.injector.get(HighlightDirective, null);    expect(dir).toBe(null);  });  // DebugElement.providerTokens  // attached HighlightDirective should be listed in the providerTokens  it('should have `HighlightDirective` in 1st <h2> providerTokens', () => {    expect(des[0].providerTokens).toContain(HighlightDirective);  });  it('should not have `HighlightDirective` in 3rd <h2> providerTokens', () => {    expect(bareH2.providerTokens).not.toContain(HighlightDirective);  });});\n\n```\n\n![HighlightDirective spec in action](https://angular.dev/guide/testing/assets/images/guide/testing/highlight-directive-spec.png)\n\n**HELPFUL:** The `<input>` case binds the `HighlightDirective` to the name of a color value in the input box.\nThe initial value is the word \"cyan\" which should be the background color of the input box.\n\nHere are some tests of this component:\n\ncheck\n\n```\n      import {Component, DebugElement} from '@angular/core';import {ComponentFixture, TestBed} from '@angular/core/testing';import {By} from '@angular/platform-browser';import {HighlightDirective} from './highlight.directive';@Component({  template: ` <h2 highlight=\"yellow\">Something Yellow</h2>    <h2 highlight>The Default (Gray)</h2>    <h2>No Highlight</h2>    <input #box [highlight]=\"box.value\" value=\"cyan\" />`,  imports: [HighlightDirective],})class TestComponent {}describe('HighlightDirective', () => {  let fixture: ComponentFixture<TestComponent>;  let des: DebugElement[]; // the three elements w/ the directive  let bareH2: DebugElement; // the <h2> w/o the directive  beforeEach(() => {    fixture = TestBed.configureTestingModule({      imports: [HighlightDirective, TestComponent],    }).createComponent(TestComponent);    fixture.detectChanges(); // initial binding    // all elements with an attached HighlightDirective    des = fixture.debugElement.queryAll(By.directive(HighlightDirective));    // the h2 without the HighlightDirective    bareH2 = fixture.debugElement.query(By.css('h2:not([highlight])'));  });  // color tests  it('should have three highlighted elements', () => {    expect(des.length).toBe(3);  });  it('should color 1st <h2> background \"yellow\"', () => {    const bgColor = des[0].nativeElement.style.backgroundColor;    expect(bgColor).toBe('yellow');  });  it('should color 2nd <h2> background w/ default color', () => {    const dir = des[1].injector.get(HighlightDirective) as HighlightDirective;    const bgColor = des[1].nativeElement.style.backgroundColor;    expect(bgColor).toBe(dir.defaultColor);  });  it('should bind <input> background to value color', () => {    // easier to work with nativeElement    const input = des[2].nativeElement as HTMLInputElement;    expect(input.style.backgroundColor).withContext('initial backgroundColor').toBe('cyan');    input.value = 'green';    // Dispatch a DOM event so that Angular responds to the input value change.    input.dispatchEvent(new Event('input'));    fixture.detectChanges();    expect(input.style.backgroundColor).withContext('changed backgroundColor').toBe('green');  });  it('bare <h2> should not have a customProperty', () => {    expect(bareH2.properties['customProperty']).toBeUndefined();  });  // Removed on 12/02/2016 when ceased public discussion of the `Renderer`. Revive in future?  // // customProperty tests  // it('all highlighted elements should have a true customProperty', () => {  //   const allTrue = des.map(de => !!de.properties['customProperty']).every(v => v === true);  //   expect(allTrue).toBe(true);  // });  // injected directive  // attached HighlightDirective can be injected  it('can inject `HighlightDirective` in 1st <h2>', () => {    const dir = des[0].injector.get(HighlightDirective);    expect(dir).toBeTruthy();  });  it('cannot inject `HighlightDirective` in 3rd <h2>', () => {    const dir = bareH2.injector.get(HighlightDirective, null);    expect(dir).toBe(null);  });  // DebugElement.providerTokens  // attached HighlightDirective should be listed in the providerTokens  it('should have `HighlightDirective` in 1st <h2> providerTokens', () => {    expect(des[0].providerTokens).toContain(HighlightDirective);  });  it('should not have `HighlightDirective` in 3rd <h2> providerTokens', () => {    expect(bareH2.providerTokens).not.toContain(HighlightDirective);  });});\n\n```\n\nA few techniques are noteworthy:\n\n- The `By.directive` predicate is a great way to get the elements that have this directive _when their element types are unknown_\n\n- The [`:not` pseudo-class](https://developer.mozilla.org/docs/Web/CSS/:not) in `By.css('h2:not([highlight])')` helps find `<h2>` elements that _do not_ have the directive.\n`By.css('*:not([highlight])')` finds _any_ element that does not have the directive.\n\n- `DebugElement.styles` affords access to element styles even in the absence of a real browser, thanks to the `DebugElement` abstraction.\nBut feel free to exploit the `nativeElement` when that seems easier or more clear than the abstraction.\n\n- Angular adds a directive to the injector of the element to which it is applied.\nThe test for the default color uses the injector of the second `<h2>` to get its `HighlightDirective` instance and its `defaultColor`.\n\n- `DebugElement.properties` affords access to the artificial custom property that is set by the directive",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-f5ae45fa-665f-41ef-88e2-dd7deebc5116.png"
  },
  "metadata": {
    "og:url": "https://angular.dev/",
    "msapplication-TileColor": "#e90464",
    "description": "The web development framework for building modern apps.",
    "application-name": "Angular",
    "og:title": "Angular",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "theme-color": "#ffffff",
    "viewport": "width=device-width, initial-scale=1",
    "language": "en",
    "ogUrl": "https://angular.dev/",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:title": "Angular",
    "apple-mobile-web-app-title": "Angular",
    "ogTitle": "Angular",
    "og:description": "The web development framework for building modern apps.",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:card": "summary_large_image",
    "og:type": "website",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "title": "Testing attribute directives â€¢ Angular",
    "ogDescription": "The web development framework for building modern apps.",
    "twitter:description": "The web development framework for building modern apps.",
    "twitter:url": "https://angular.dev/",
    "scrapeId": "a986101e-417d-497d-973d-94fcc3ef7b4b",
    "sourceURL": "https://angular.dev/guide/testing/attribute-directives",
    "url": "https://angular.dev/guide/testing/attribute-directives",
    "statusCode": 200
  }
}