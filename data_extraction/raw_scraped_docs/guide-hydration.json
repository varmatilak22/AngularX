{
  "scrapeId": "9f2a43fd-2bf4-48f0-9797-44ce3c528d09",
  "sourceURL": "https://angular.dev/guide/hydration",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backServer-side & hybrid-rendering\n  - [Overview](https://angular.dev/guide/performance)\n  - [Server-side rendering](https://angular.dev/guide/ssr)\n  - [Build-time prerendering](https://angular.dev/guide/prerendering)\n  - [Hybrid rendering with server routing](https://angular.dev/guide/hybrid-rendering)\n  - [Hydration](https://angular.dev/guide/hydration)\n  - [Incremental Hydration](https://angular.dev/guide/incremental-hydration)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n## [What is hydration](https://angular.dev/guide/hydration\\#what-is-hydration)\n\nHydration is the process that restores the server-side rendered application on the client. This includes things like reusing the server rendered DOM structures, persisting the application state, transferring application data that was retrieved already by the server, and other processes.\n\n## [Why is hydration important?](https://angular.dev/guide/hydration\\#why-is-hydration-important)\n\nHydration improves application performance by avoiding extra work to re-create DOM nodes. Instead, Angular tries to match existing DOM elements to the applications structure at runtime and reuses DOM nodes when possible. This results in a performance improvement that can be measured using [Core Web Vitals (CWV)](https://web.dev/learn-core-web-vitals/) statistics, such as reducing the First Input Delay ( [FID](https://web.dev/fid/)) and Largest Contentful Paint ( [LCP](https://web.dev/lcp/)), as well as Cumulative Layout Shift ( [CLS](https://web.dev/cls/)). Improving these numbers also affects things like SEO performance.\n\nWithout hydration enabled, server-side rendered Angular applications will destroy and re-render the application's DOM, which may result in a visible UI flicker. This re-rendering can negatively impact [Core Web Vitals](https://web.dev/learn-core-web-vitals/) like [LCP](https://web.dev/lcp/) and cause a layout shift. Enabling hydration allows the existing DOM to be re-used and prevents a flicker.\n\n## [How do you enable hydration in Angular](https://angular.dev/guide/hydration\\#how-do-you-enable-hydration-in-angular)\n\nHydration can be enabled for server-side rendered (SSR) applications only. Follow the [Angular SSR Guide](https://angular.dev/guide/guide/ssr) to enable server-side rendering first.\n\n### [Using Angular CLI](https://angular.dev/guide/hydration\\#using-angular-cli)\n\nIf you've used Angular CLI to enable SSR (either by enabling it during application creation or later via `ng add @angular/ssr`), the code that enables hydration should already be included into your application.\n\n### [Manual setup](https://angular.dev/guide/hydration\\#manual-setup)\n\nIf you have a custom setup and didn't use Angular CLI to enable SSR, you can enable hydration manually by visiting your main application component or module and importing `provideClientHydration` from `@angular/platform-browser`. You'll then add that provider to your app's bootstrapping providers list.\n\n```\n      import {  bootstrapApplication,  provideClientHydration,} from '@angular/platform-browser';...bootstrapApplication(AppComponent, {  providers: [provideClientHydration()]});\n\n```\n\ncheck\n\nAlternatively if you are using NgModules, you would add `provideClientHydration` to your root app module's provider list.\n\n```\n      import {provideClientHydration} from '@angular/platform-browser';import {NgModule} from '@angular/core';@NgModule({  declarations: [AppComponent],  exports: [AppComponent],  bootstrap: [AppComponent],  providers: [provideClientHydration()],})export class AppModule {}\n\n```\n\ncheck\n\n**IMPORTANT:** Make sure that the `provideClientHydration()` call is also included into a set of providers that is used to bootstrap an application on the **server**. In applications with the default project structure (generated by the `ng new` command), adding a call to the root `AppModule` should be sufficient, since this module is imported by the server module. If you use a custom setup, add the `provideClientHydration()` call to the providers list in the server bootstrap configuration.\n\n### [Verify that hydration is enabled](https://angular.dev/guide/hydration\\#verify-that-hydration-is-enabled)\n\nAfter you've configured hydration and have started up your server, load your application in the browser.\n\n**HELPFUL:** You will likely need to fix instances of Direct DOM Manipulation before hydration will fully work either by switching to Angular constructs or by using `ngSkipHydration`. See [Constraints](https://angular.dev/guide/hydration#constraints), [Direct DOM Manipulation](https://angular.dev/guide/hydration#direct-dom-manipulation), and [How to skip hydration for particular components](https://angular.dev/guide/hydration#how-to-skip-hydration-for-particular-components) for more details.\n\nWhile running an application in dev mode, you can confirm hydration is enabled by opening the Developer Tools in your browser and viewing the console. You should see a message that includes hydration-related stats, such as the number of components and nodes hydrated. Angular calculates the stats based on all components rendered on a page, including those that come from third-party libraries.\n\nYou can also use [Angular DevTools browser extension](https://angular.dev/guide/tools/devtools) to see hydration status of components on a page. Angular DevTools also allows to enable an overlay to indicate which parts of the page were hydrated. If there is a hydration mismatch error - DevTools would also highlight a component that caused the error.\n\n## [Capturing and replaying events](https://angular.dev/guide/hydration\\#capturing-and-replaying-events)\n\nWhen an application is rendered on the server, it is visible in a browser as soon as produced HTML loads. Users may assume that they can interact with the page, but event listeners are not attached until hydration completes. Starting from v18, you can enable the Event Replay feature that allows to capture all events that happen before hydration and replay those events once hydration has completed. You can enable it using the `withEventReplay()` function, for example:\n\n```\n      import {provideClientHydration, withEventReplay} from '@angular/platform-browser';bootstrapApplication(App, {  providers: [    provideClientHydration(withEventReplay())  ]});\n\n```\n\ncheck\n\n### [How event replay works](https://angular.dev/guide/hydration\\#how-event-replay-works)\n\nEvent Replay is a feature that improves user experience by capturing user events that were triggered before the hydration process is complete. Then those events are replayed, ensuring none of that interaction was lost.\n\nThe Event Replay is divided into three main phases:\n\n- **Capturing user interactions**\n\n\nPrior to **Hydration**, Event Replay captures and stores all interactions that the user may perform, such as clicks and other browser native events.\n\n- **Storing events**\n\n\nThe **Event Contract** keeps in memory all the interactions recorded in the previous step, ensuring that they are not lost for later replay.\n\n- **Relaunch of events**\n\n\nOnce **Hydration** is complete, Angular re-invokes the captured events.\n\n\nEvent replay supports _native browser events_, for example `click`, `mouseover`, and `focusin`. If you'd like to learn more about JSAction, the library that powers event replay, you can read more [on the readme](https://github.com/angular/angular/tree/main/packages/core/primitives/event-dispatch#readme).\n\n* * *\n\nThis feature ensures a consistent user experience, preventing user actions performed before Hydration from being ignored. NOTE: if you have [incremental hydration](https://angular.dev/guide/guide/incremental-hydration) enabled, event replay is automatically enabled under the hood.\n\n## [Constraints](https://angular.dev/guide/hydration\\#constraints)\n\nHydration imposes a few constraints on your application that are not present without hydration enabled. Your application must have the same generated DOM structure on both the server and the client. The process of hydration expects the DOM tree to have the same structure in both places. This also includes whitespaces and comment nodes that Angular produces during the rendering on the server. Those whitespaces and nodes must be present in the HTML generated by the server-side rendering process.\n\n**IMPORTANT:** The HTML produced by the server side rendering operation **must not** be altered between the server and the client.\n\nIf there is a mismatch between server and client DOM tree structures, the hydration process will encounter problems attempting to match up what was expected to what is actually present in the DOM. Components that do direct DOM manipulation using native DOM APIs are the most common culprit.\n\n### [Direct DOM Manipulation](https://angular.dev/guide/hydration\\#direct-dom-manipulation)\n\nIf you have components that manipulate the DOM using native DOM APIs or use `innerHTML` or `outerHTML`, the hydration process will encounter errors. Specific cases where DOM manipulation is a problem are situations like accessing the `document`, querying for specific elements, and injecting additional nodes using `appendChild`. Detaching DOM nodes and moving them to other locations will also result in errors.\n\nThis is because Angular is unaware of these DOM changes and cannot resolve them during the hydration process. Angular will expect a certain structure, but it will encounter a different structure when attempting to hydrate. This mismatch will result in hydration failure and throw a DOM mismatch error ( [see below](https://angular.dev/guide/hydration#errors)).\n\nIt is best to refactor your component to avoid this sort of DOM manipulation. Try to use Angular APIs to do this work, if you can. If you cannot refactor this behavior, use the `ngSkipHydration` attribute ( [described below](https://angular.dev/guide/hydration#how-to-skip-hydration-for-particular-components)) until you can refactor into a hydration friendly solution.\n\n### [Valid HTML structure](https://angular.dev/guide/hydration\\#valid-html-structure)\n\nThere are a few cases where if you have a component template that does not have valid HTML structure, this could result in a DOM mismatch error during hydration.\n\nAs an example, here are some of the most common cases of this issue.\n\n- `<table>` without a `<tbody>`\n- `<div>` inside a `<p>`\n- `<a>` inside another `<a>`\n\nIf you are uncertain about whether your HTML is valid, you can use a [syntax validator](https://validator.w3.org/) to check it.\n\n**NOTE:** While the HTML standard does not require the `<tbody>` element inside tables, modern browsers automatically create a `<tbody>` element in tables that do not declare one. Because of this inconsistency, always explicitly declare a `<tbody>` element in tables to avoid hydration errors.\n\n### [Preserve Whitespaces Configuration](https://angular.dev/guide/hydration\\#preserve-whitespaces-configuration)\n\nWhen using the hydration feature, we recommend using the default setting of `false` for `preserveWhitespaces`. If this setting is not in your tsconfig, the value will be `false` and no changes are required. If you choose to enable preserving whitespaces by adding `preserveWhitespaces: true` to your tsconfig, it is possible you may encounter issues with hydration. This is not yet a fully supported configuration.\n\n**HELPFUL:** Make sure that this setting is set **consistently** in `tsconfig.server.json` for your server and `tsconfig.app.json` for your browser builds. A mismatched value will cause hydration to break.\n\nIf you choose to set this setting in your tsconfig, we recommend to set it only in `tsconfig.app.json` which by default the `tsconfig.server.json` will inherit it from.\n\n### [Custom or Noop Zone.js are not yet supported](https://angular.dev/guide/hydration\\#custom-or-noop-zonejs-are-not-yet-supported)\n\nHydration relies on a signal from Zone.js when it becomes stable inside an application, so that Angular can start the serialization process on the server or post-hydration cleanup on the client to remove DOM nodes that remained unclaimed.\n\nProviding a custom or a \"noop\" Zone.js implementation may lead to a different timing of the \"stable\" event, thus triggering the serialization or the cleanup too early or too late. This is not yet a fully supported configuration and you may need to adjust the timing of the `onStable` event in the custom Zone.js implementation.\n\n## [Errors](https://angular.dev/guide/hydration\\#errors)\n\nThere are several hydration related errors you may encounter ranging from node mismatches to cases when the `ngSkipHydration` was used on an invalid host node. The most common error case that may occur is due to direct DOM manipulation using native APIs that results in hydration being unable to find or match the expected DOM tree structure on the client that was rendered by the server. The other case you may encounter this type of error was mentioned in the [Valid HTML structure](https://angular.dev/guide/hydration#valid-html-structure) section earlier. So, make sure the HTML in your templates are using valid structure, and you'll avoid that error case.\n\nFor a full reference on hydration related errors, visit the [Errors Reference Guide](https://angular.dev/errors).\n\n## [How to skip hydration for particular components](https://angular.dev/guide/hydration\\#how-to-skip-hydration-for-particular-components)\n\nSome components may not work properly with hydration enabled due to some of the aforementioned issues, like [Direct DOM Manipulation](https://angular.dev/guide/hydration#direct-dom-manipulation). As a workaround, you can add the `ngSkipHydration` attribute to a component's tag in order to skip hydrating the entire component.\n\n```\n      <app-example ngSkipHydration />\n\n```\n\ncheck\n\nAlternatively you can set `ngSkipHydration` as a host binding.\n\n```\n      @Component({  ...  host: {ngSkipHydration: 'true'},})class ExampleComponent {}\n\n```\n\ncheck\n\nThe `ngSkipHydration` attribute will force Angular to skip hydrating the entire component and its children. Using this attribute means that the component will behave as if hydration is not enabled, meaning it will destroy and re-render itself.\n\n**HELPFUL:** This will fix rendering issues, but it means that for this component (and its children), you don't get the benefits of hydration. You will need to adjust your component's implementation to avoid hydration-breaking patterns (i.e. Direct DOM Manipulation) to be able to remove the skip hydration annotation.\n\nThe `ngSkipHydration` attribute can only be used on component host nodes. Angular throws an error if this attribute is added to other nodes.\n\nKeep in mind that adding the `ngSkipHydration` attribute to your root application component would effectively disable hydration for your entire application. Be careful and thoughtful about using this attribute. It is intended as a last resort workaround. Components that break hydration should be considered bugs that need to be fixed.\n\n## [Hydration Timing and Application Stability](https://angular.dev/guide/hydration\\#hydration-timing-and-application-stability)\n\nApplication stability is an important part of the hydration process. Hydration and any post-hydration processes only occur once the application has reported stability. There are a number of ways that stability can be delayed. Examples include setting timeouts and intervals, unresolved promises, and pending microtasks. In those cases, you may encounter the [Application remains unstable](https://angular.dev/guide/errors/NG0506) error, which indicates that your app has not yet reached the stable state after 10 seconds. If you're finding that your application is not hydrating right away, take a look at what is impacting application stability and refactor to avoid causing these delays.\n\n## [I18N](https://angular.dev/guide/hydration\\#i18n)\n\n**HELPFUL:** Support for internationalization with hydration is currently in [developer preview](https://angular.dev/reference/releases#developer-preview). By default, Angular will skip hydration for components that use i18n blocks, effectively re-rendering those components from scratch.\n\nTo enable hydration for i18n blocks, you can add [`withI18nSupport`](https://angular.dev/api/platform-browser/withI18nSupport) to your `provideClientHydration` call.\n\n```\n      import {  bootstrapApplication,  provideClientHydration,  withI18nSupport,} from '@angular/platform-browser';...bootstrapApplication(AppComponent, {  providers: [provideClientHydration(withI18nSupport())]});\n\n```\n\ncheck\n\n## [Consistent rendering across server-side and client-side](https://angular.dev/guide/hydration\\#consistent-rendering-across-server-side-and-client-side)\n\nAvoid introducing `@if` blocks and other conditionals that display different content when server-side rendering than client-side rendering, such as using an `@if` block with Angular's `isPlatformBrowser` function. These rendering differences cause layout shifts, negatively impacting end-user experience and core web vitals.\n\n## [Third Party Libraries with DOM Manipulation](https://angular.dev/guide/hydration\\#third-party-libraries-with-dom-manipulation)\n\nThere are a number of third party libraries that depend on DOM manipulation to be able to render. D3 charts is a prime example. These libraries worked without hydration, but they may cause DOM mismatch errors when hydration is enabled. For now, if you encounter DOM mismatch errors using one of these libraries, you can add the `ngSkipHydration` attribute to the component that renders using that library.\n\n## [Third Party Scripts with DOM Manipulation](https://angular.dev/guide/hydration\\#third-party-scripts-with-dom-manipulation)\n\nMany third party scripts, such as ad trackers and analytics, modify the DOM before hydration can occur. These scripts may cause hydration errors because the page no longer matches the structure expected by Angular. Prefer deferring this type of script until after hydration whenever possible. Consider using [`AfterNextRender`](https://angular.dev/guide/api/core/afterNextRender) to delay the script until post-hydration processes have occured.\n\n## [Incremental Hydration](https://angular.dev/guide/hydration\\#incremental-hydration)\n\nIncremental hydration is an advanced form of hydration that allows for more granular control over when hydration happens. See the [incremental hydration guide](https://angular.dev/guide/guide/incremental-hydration) for more information.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-bfb2616e-798f-467b-b765-12e255d40aea.png"
  },
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "og:url": "https://angular.dev/",
    "twitter:url": "https://angular.dev/",
    "msapplication-TileColor": "#e90464",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "theme-color": "#ffffff",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "language": "en",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "apple-mobile-web-app-title": "Angular",
    "og:type": "website",
    "title": "Hydration â€¢ Angular",
    "twitter:description": "The web development framework for building modern apps.",
    "application-name": "Angular",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "ogTitle": "Angular",
    "twitter:title": "Angular",
    "og:title": "Angular",
    "og:description": "The web development framework for building modern apps.",
    "ogDescription": "The web development framework for building modern apps.",
    "ogUrl": "https://angular.dev/",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:card": "summary_large_image",
    "description": "The web development framework for building modern apps.",
    "scrapeId": "9f2a43fd-2bf4-48f0-9797-44ce3c528d09",
    "sourceURL": "https://angular.dev/guide/hydration",
    "url": "https://angular.dev/guide/hydration",
    "statusCode": 200
  }
}