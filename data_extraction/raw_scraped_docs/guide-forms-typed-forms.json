{
  "scrapeId": "b3c8056a-02b5-47f9-9b9f-496fc666d5d1",
  "sourceURL": "https://angular.dev/guide/forms/typed-forms",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backForms\n  - [Overview](https://angular.dev/guide/forms)\n  - [Reactive forms](https://angular.dev/guide/forms/reactive-forms)\n  - [Strictly typed reactive forms](https://angular.dev/guide/forms/typed-forms)\n  - [Template-driven forms](https://angular.dev/guide/forms/template-driven-forms)\n  - [Validate form input](https://angular.dev/guide/forms/form-validation)\n  - [Building dynamic forms](https://angular.dev/guide/forms/dynamic-forms)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nAs of Angular 14, reactive forms are strictly typed by default.\n\nAs background for this guide, you should already be familiar with [Angular Reactive Forms](https://angular.dev/guide/forms/reactive-forms).\n\n## [Overview of Typed Forms](https://angular.dev/guide/forms/typed-forms\\#overview-of-typed-forms)\n\nTyped Forms in Angular - YouTube\n\nAngular\n\n159K subscribers\n\n[Typed Forms in Angular](https://www.youtube.com/watch?v=L-odCf4MfJc)\n\nAngular\n\nSearch\n\nWatch later\n\nShare\n\nCopy link\n\nInfo\n\nShopping\n\nTap to unmute\n\nIf playback doesn't begin shortly, try restarting your device.\n\nYou're signed out\n\nVideos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.\n\nCancelConfirm\n\nMore videos\n\n## More videos\n\nShare\n\nInclude playlist\n\nAn error occurred while retrieving sharing information. Please try again later.\n\n[Watch on](https://www.youtube.com/watch?v=L-odCf4MfJc&embeds_referring_euri=https%3A%2F%2Fangular.dev%2F)\n\n0:00\n\n0:00 / 10:59â€¢Live\n\nâ€¢\n\n[Watch on YouTube](https://www.youtube.com/watch?v=L-odCf4MfJc \"Watch on YouTube\")\n\nWith Angular reactive forms, you explicitly specify a _form model_. As a simple example, consider this basic user login form:\n\n```\n      const login = new FormGroup({  email: new FormControl(''),  password: new FormControl(''),});\n\n```\n\ncheck\n\nAngular provides many APIs for interacting with this `FormGroup`. For example, you may call `login.value`, `login.controls`, `login.patchValue`, etc. (For a full API reference, see the [API documentation](https://angular.dev/api/forms/FormGroup).)\n\nIn previous Angular versions, most of these APIs included `any` somewhere in their types, and interacting with the structure of the controls, or the values themselves, was not type-safe. For example: you could write the following invalid code:\n\n```\n      const emailDomain = login.value.email.domain;\n\n```\n\ncheck\n\nWith strictly typed reactive forms, the above code does not compile, because there is no `domain` property on `email`.\n\nIn addition to the added safety, the types enable a variety of other improvements, such as better autocomplete in IDEs, and an explicit way to specify form structure.\n\nThese improvements currently apply only to _reactive_ forms (not [_template-driven_ forms](https://angular.dev/guide/forms/template-driven-forms)).\n\n## [Untyped Forms](https://angular.dev/guide/forms/typed-forms\\#untyped-forms)\n\nNon-typed forms are still supported, and will continue to work as before. To use them, you must import the `Untyped` symbols from `@angular/forms`:\n\n```\n      const login = new UntypedFormGroup({  email: new UntypedFormControl(''),  password: new UntypedFormControl(''),});\n\n```\n\ncheck\n\nEach `Untyped` symbol has exactly the same semantics as in previous Angular version. By removing the `Untyped` prefixes, you can incrementally enable the types.\n\n## [`FormControl`: Getting Started](https://angular.dev/guide/forms/typed-forms\\#formcontrol-getting-started)\n\nThe simplest possible form consists of a single control:\n\n```\n      const email = new FormControl('angularrox@gmail.com');\n\n```\n\ncheck\n\nThis control will be automatically inferred to have the type `FormControl<string|null>`. TypeScript will automatically enforce this type throughout the [`FormControl` API](https://angular.dev/api/forms/FormControl), such as `email.value`, `email.valueChanges`, `email.setValue(...)`, etc.\n\n### [Nullability](https://angular.dev/guide/forms/typed-forms\\#nullability)\n\nYou might wonder: why does the type of this control include `null`? This is because the control can become `null` at any time, by calling reset:\n\n```\n      const email = new FormControl('angularrox@gmail.com');email.reset();console.log(email.value); // null\n\n```\n\ncheck\n\nTypeScript will enforce that you always handle the possibility that the control has become `null`. If you want to make this control non-nullable, you may use the `nonNullable` option. This will cause the control to reset to its initial value, instead of `null`:\n\n```\n      const email = new FormControl('angularrox@gmail.com', {nonNullable: true});email.reset();console.log(email.value); // angularrox@gmail.com\n\n```\n\ncheck\n\nTo reiterate, this option affects the runtime behavior of your form when `.reset()` is called, and should be flipped with care.\n\n### [Specifying an Explicit Type](https://angular.dev/guide/forms/typed-forms\\#specifying-an-explicit-type)\n\nIt is possible to specify the type, instead of relying on inference. Consider a control that is initialized to `null`. Because the initial value is `null`, TypeScript will infer `FormControl<null>`, which is narrower than we want.\n\n```\n      const email = new FormControl(null);email.setValue('angularrox@gmail.com'); // Error!\n\n```\n\ncheck\n\nTo prevent this, we explicitly specify the type as `string|null`:\n\n```\n      const email = new FormControl<string|null>(null);email.setValue('angularrox@gmail.com');\n\n```\n\ncheck\n\n## [`FormArray`: Dynamic, Homogenous Collections](https://angular.dev/guide/forms/typed-forms\\#formarray-dynamic-homogenous-collections)\n\nA `FormArray` contains an open-ended list of controls. The type parameter corresponds to the type of each inner control:\n\n```\n      const names = new FormArray([new FormControl('Alex')]);names.push(new FormControl('Jess'));\n\n```\n\ncheck\n\nThis `FormArray` will have the inner controls type `FormControl<string|null>`.\n\nIf you want to have multiple different element types inside the array, you must use `UntypedFormArray`, because TypeScript cannot infer which element type will occur at which position.\n\n## [`FormGroup` and `FormRecord`](https://angular.dev/guide/forms/typed-forms\\#formgroup-and-formrecord)\n\nAngular provides the `FormGroup` type for forms with an enumerated set of keys, and a type called `FormRecord`, for open-ended or dynamic groups.\n\n### [Partial Values](https://angular.dev/guide/forms/typed-forms\\#partial-values)\n\nConsider again a login form:\n\n```\n      const login = new FormGroup({    email: new FormControl('', {nonNullable: true}),    password: new FormControl('', {nonNullable: true}),});\n\n```\n\ncheck\n\nOn any `FormGroup`, it is [possible to disable controls](https://angular.dev/api/forms/FormGroup). Any disabled control will not appear in the group's value.\n\nAs a consequence, the type of `login.value` is `Partial<{email: string, password: string}>`. The `Partial` in this type means that each member might be undefined.\n\nMore specifically, the type of `login.value.email` is `string|undefined`, and TypeScript will enforce that you handle the possibly `undefined` value (if you have `strictNullChecks` enabled).\n\nIf you want to access the value _including_ disabled controls, and thus bypass possible `undefined` fields, you can use `login.getRawValue()`.\n\n### [Optional Controls and Dynamic Groups](https://angular.dev/guide/forms/typed-forms\\#optional-controls-and-dynamic-groups)\n\nSome forms have controls that may or may not be present, which can be added and removed at runtime. You can represent these controls using _optional fields_:\n\n```\n      interface LoginForm {  email: FormControl<string>;  password?: FormControl<string>;}const login = new FormGroup<LoginForm>({  email: new FormControl('', {nonNullable: true}),  password: new FormControl('', {nonNullable: true}),});login.removeControl('password');\n\n```\n\ncheck\n\nIn this form, we explicitly specify the type, which allows us to make the `password` control optional. TypeScript will enforce that only optional controls can be added or removed.\n\n### [`FormRecord`](https://angular.dev/guide/forms/typed-forms\\#formrecord)\n\nSome `FormGroup` usages do not fit the above pattern because the keys are not known ahead of time. The `FormRecord` class is designed for that case:\n\n```\n      const addresses = new FormRecord<FormControl<string|null>>({});addresses.addControl('Andrew', new FormControl('2340 Folsom St'));\n\n```\n\ncheck\n\nAny control of type `string|null` can be added to this `FormRecord`.\n\nIf you need a `FormGroup` that is both dynamic (open-ended) and heterogeneous (the controls are different types), no improved type safety is possible, and you should use `UntypedFormGroup`.\n\nA `FormRecord` can also be built with the `FormBuilder`:\n\n```\n      const addresses = fb.record({'Andrew': '2340 Folsom St'});\n\n```\n\ncheck\n\n## [`FormBuilder` and `NonNullableFormBuilder`](https://angular.dev/guide/forms/typed-forms\\#formbuilder-and-nonnullableformbuilder)\n\nThe `FormBuilder` class has been upgraded to support the new types as well, in the same manner as the above examples.\n\nAdditionally, an additional builder is available: `NonNullableFormBuilder`. This type is shorthand for specifying `{nonNullable: true}` on every control, and can eliminate significant boilerplate from large non-nullable forms. You can access it using the `nonNullable` property on a `FormBuilder`:\n\n```\n      const fb = new FormBuilder();const login = fb.nonNullable.group({  email: '',  password: '',});\n\n```\n\ncheck\n\nOn the above example, both inner controls will be non-nullable (i.e. `nonNullable` will be set).\n\nYou can also inject it using the name `NonNullableFormBuilder`.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-cad4e97e-b4f7-430b-be5b-ab86c46c37da.png"
  },
  "metadata": {
    "application-name": "Angular",
    "og:title": "Angular",
    "title": "Strictly typed reactive forms â€¢ Angular",
    "description": "The web development framework for building modern apps.",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "language": "en",
    "msapplication-TileColor": "#e90464",
    "og:url": "https://angular.dev/",
    "ogUrl": "https://angular.dev/",
    "viewport": [
      "width=device-width, initial-scale=1",
      "width=device-width, initial-scale=1"
    ],
    "og:description": "The web development framework for building modern apps.",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:url": "https://angular.dev/",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "apple-mobile-web-app-title": "Angular",
    "theme-color": "#ffffff",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "og:type": "website",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "twitter:description": "The web development framework for building modern apps.",
    "ogDescription": "The web development framework for building modern apps.",
    "twitter:card": "summary_large_image",
    "twitter:title": "Angular",
    "scrapeId": "b3c8056a-02b5-47f9-9b9f-496fc666d5d1",
    "sourceURL": "https://angular.dev/guide/forms/typed-forms",
    "url": "https://angular.dev/guide/forms/typed-forms",
    "statusCode": 200
  }
}