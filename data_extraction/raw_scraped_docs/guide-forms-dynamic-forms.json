{
  "scrapeId": "fb0fb773-6dbc-4b7f-95c4-4108d459e6e1",
  "sourceURL": "https://angular.dev/guide/forms/dynamic-forms",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backForms\n  - [Overview](https://angular.dev/guide/forms)\n  - [Reactive forms](https://angular.dev/guide/forms/reactive-forms)\n  - [Strictly typed reactive forms](https://angular.dev/guide/forms/typed-forms)\n  - [Template-driven forms](https://angular.dev/guide/forms/template-driven-forms)\n  - [Validate form input](https://angular.dev/guide/forms/form-validation)\n  - [Building dynamic forms](https://angular.dev/guide/forms/dynamic-forms)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nMany forms, such as questionnaires, can be very similar to one another in format and intent.\nTo make it faster and easier to generate different versions of such a form, you can create a _dynamic form template_ based on metadata that describes the business object model.\nThen, use the template to generate new forms automatically, according to changes in the data model.\n\nThe technique is particularly useful when you have a type of form whose content must change frequently to meet rapidly changing business and regulatory requirements.\nA typical use-case is a questionnaire.\nYou might need to get input from users in different contexts.\nThe format and style of the forms a user sees should remain constant, while the actual questions you need to ask vary with the context.\n\nIn this tutorial you will build a dynamic form that presents a basic questionnaire.\nYou build an online application for heroes seeking employment.\nThe agency is constantly tinkering with the application process, but by using the dynamic form\nyou can create the new forms on the fly without changing the application code.\n\nThe tutorial walks you through the following steps.\n\n1. Enable reactive forms for a project.\n2. Establish a data model to represent form controls.\n3. Populate the model with sample data.\n4. Develop a component to create form controls dynamically.\n\nThe form you create uses input validation and styling to improve the user experience.\nIt has a Submit button that is only enabled when all user input is valid, and flags invalid input with color coding and error messages.\n\nThe basic version can evolve to support a richer variety of questions, more graceful rendering, and superior user experience.\n\n## [Enable reactive forms for your project](https://angular.dev/guide/forms/dynamic-forms\\#enable-reactive-forms-for-your-project)\n\nDynamic forms are based on reactive forms.\n\nTo give the application access reactive forms directives, import `ReactiveFormsModule` from the `@angular/forms` library into the necessary components.\n\ncheck\n\n### dynamic-form.component.ts\n\n```\n      import {Component, inject, input} from '@angular/core';import {FormGroup, ReactiveFormsModule} from '@angular/forms';import {DynamicFormQuestionComponent} from './dynamic-form-question.component';import {QuestionBase} from './question-base';import {QuestionControlService} from './question-control.service';@Component({  selector: 'app-dynamic-form',  templateUrl: './dynamic-form.component.html',  providers: [QuestionControlService],  imports: [DynamicFormQuestionComponent, ReactiveFormsModule],})export class DynamicFormComponent {  private readonly qcs = inject(QuestionControlService);  questions = input<QuestionBase<string>[] | null>([]);  form: FormGroup = this.qcs.toFormGroup(this.questions() as QuestionBase<string>[]);  payLoad = '';  onSubmit() {    this.payLoad = JSON.stringify(this.form.getRawValue());  }}\n\n```\n\n## [Create a form object model](https://angular.dev/guide/forms/dynamic-forms\\#create-a-form-object-model)\n\nA dynamic form requires an object model that can describe all scenarios needed by the form functionality.\nThe example hero-application form is a set of questions â€” that is, each control in the form must ask a question and accept an answer.\n\nThe data model for this type of form must represent a question.\nThe example includes the `DynamicFormQuestionComponent`, which defines a question as the fundamental object in the model.\n\nThe following `QuestionBase` is a base class for a set of controls that can represent the question and its answer in the form.\n\n### src/app/question-base.ts\n\n```\n      export class QuestionBase<T> {  value: T | undefined;  key: string;  label: string;  required: boolean;  order: number;  controlType: string;  type: string;  options: {key: string; value: string}[];  constructor(    options: {      value?: T;      key?: string;      label?: string;      required?: boolean;      order?: number;      controlType?: string;      type?: string;      options?: {key: string; value: string}[];    } = {},  ) {    this.value = options.value;    this.key = options.key || '';    this.label = options.label || '';    this.required = !!options.required;    this.order = options.order === undefined ? 1 : options.order;    this.controlType = options.controlType || '';    this.type = options.type || '';    this.options = options.options || [];  }}\n\n```\n\ncheck\n\n### [Define control classes](https://angular.dev/guide/forms/dynamic-forms\\#define-control-classes)\n\nFrom this base, the example derives two new classes, `TextboxQuestion` and `DropdownQuestion`, that represent different control types.\nWhen you create the form template in the next step, you instantiate these specific question types in order to render the appropriate controls dynamically.\n\nThe `TextboxQuestion` control type is represented in a form template using an `<input>` element. It presents a question and lets users enter input. The `type` attribute of the element is defined based on the `type` field specified in the `options` argument (for example `text`, `email`, `url`).\n\n### question-textbox.ts\n\n```\n      import {QuestionBase} from './question-base';export class TextboxQuestion extends QuestionBase<string> {  override controlType = 'textbox';}\n\n```\n\ncheck\n\nThe `DropdownQuestion` control type presents a list of choices in a select box.\n\n### question-dropdown.ts\n\n```\n      import {QuestionBase} from './question-base';export class DropdownQuestion extends QuestionBase<string> {  override controlType = 'dropdown';}\n\n```\n\ncheck\n\n### [Compose form groups](https://angular.dev/guide/forms/dynamic-forms\\#compose-form-groups)\n\nA dynamic form uses a service to create grouped sets of input controls, based on the form model.\nThe following `QuestionControlService` collects a set of `FormGroup` instances that consume the metadata from the question model.\nYou can specify default values and validation rules.\n\n### src/app/question-control.service.ts\n\n```\n      import {Injectable} from '@angular/core';import {FormControl, FormGroup, Validators} from '@angular/forms';import {QuestionBase} from './question-base';@Injectable()export class QuestionControlService {  toFormGroup(questions: QuestionBase<string>[]) {    const group: any = {};    questions.forEach((question) => {      group[question.key] = question.required        ? new FormControl(question.value || '', Validators.required)        : new FormControl(question.value || '');    });    return new FormGroup(group);  }}\n\n```\n\ncheck\n\n## [Compose dynamic form contents](https://angular.dev/guide/forms/dynamic-forms\\#compose-dynamic-form-contents)\n\nThe dynamic form itself is represented by a container component, which you add in a later step.\nEach question is represented in the form component's template by an `<app-question>` tag, which matches an instance of `DynamicFormQuestionComponent`.\n\nThe `DynamicFormQuestionComponent` is responsible for rendering the details of an individual question based on values in the data-bound question object.\nThe form relies on a [`[formGroup]` directive](https://angular.dev/guide/forms/api/forms/FormGroupDirective \"API\") to connect the template HTML to the underlying control objects.\nThe `DynamicFormQuestionComponent` creates form groups and populates them with controls defined in the question model, specifying display and validation rules.\n\ncheck\n\n### dynamic-form-question.component.html\n\n```\n      <div [formGroup]=\"form()\">  <label [attr.for]=\"question().key\">{{ question().label }}</label>  <div>    @switch (question().controlType) {      @case ('textbox') {        <input [formControlName]=\"question().key\" [id]=\"question().key\" [type]=\"question().type\" />      }      @case ('dropdown') {        <select [id]=\"question().key\" [formControlName]=\"question().key\">          @for (opt of question().options; track opt) {            <option [value]=\"opt.key\">{{ opt.value }}</option>          }        </select>      }    }  </div>  @if (!isValid) {    <div class=\"errorMessage\">{{ question().label }} is required</div>  }</div>\n\n```\n\nThe goal of the `DynamicFormQuestionComponent` is to present question types defined in your model.\nYou only have two types of questions at this point but you can imagine many more.\nThe `ngSwitch` statement in the template determines which type of question to display.\nThe switch uses directives with the [`formControlName`](https://angular.dev/guide/forms/api/forms/FormControlName \"FormControlName\") and [`formGroup`](https://angular.dev/guide/forms/api/forms/FormGroupDirective \"FormGroupDirective\") selectors.\nBoth directives are defined in `ReactiveFormsModule`.\n\n### [Supply data](https://angular.dev/guide/forms/dynamic-forms\\#supply-data)\n\nAnother service is needed to supply a specific set of questions from which to build an individual form.\nFor this exercise you create the `QuestionService` to supply this array of questions from the hard-coded sample data.\nIn a real-world app, the service might fetch data from a backend system.\nThe key point, however, is that you control the hero job-application questions entirely through the objects returned from `QuestionService`.\nTo maintain the questionnaire as requirements change, you only need to add, update, and remove objects from the `questions` array.\n\nThe `QuestionService` supplies a set of questions in the form of an array bound to `@Input()` questions.\n\n### src/app/question.service.ts\n\n```\n      import {Injectable} from '@angular/core';import {DropdownQuestion} from './question-dropdown';import {QuestionBase} from './question-base';import {TextboxQuestion} from './question-textbox';import {of} from 'rxjs';@Injectable()export class QuestionService {  // TODO: get from a remote source of question metadata  getQuestions() {    const questions: QuestionBase<string>[] = [      new DropdownQuestion({        key: 'favoriteAnimal',        label: 'Favorite Animal',        options: [          {key: 'cat', value: 'Cat'},          {key: 'dog', value: 'Dog'},          {key: 'horse', value: 'Horse'},          {key: 'capybara', value: 'Capybara'},        ],        order: 3,      }),      new TextboxQuestion({        key: 'firstName',        label: 'First name',        value: 'Alex',        required: true,        order: 1,      }),      new TextboxQuestion({        key: 'emailAddress',        label: 'Email',        type: 'email',        order: 2,      }),    ];    return of(questions.sort((a, b) => a.order - b.order));  }}\n\n```\n\ncheck\n\n## [Create a dynamic form template](https://angular.dev/guide/forms/dynamic-forms\\#create-a-dynamic-form-template)\n\nThe `DynamicFormComponent` component is the entry point and the main container for the form, which is represented using the `<app-dynamic-form>` in a template.\n\nThe `DynamicFormComponent` component presents a list of questions by binding each one to an `<app-question>` element that matches the `DynamicFormQuestionComponent`.\n\ncheck\n\n### dynamic-form.component.html\n\n```\n      <div>  <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">    @for (question of questions(); track question) {      <div class=\"form-row\">        <app-question [question]=\"question\" [form]=\"form\" />      </div>    }    <div class=\"form-row\">      <button type=\"submit\" [disabled]=\"!form.valid\">Save</button>    </div>  </form>  @if (payLoad) {    <div class=\"form-row\"><strong>Saved the following values</strong><br />{{ payLoad }}</div>  }</div>\n\n```\n\n### [Display the form](https://angular.dev/guide/forms/dynamic-forms\\#display-the-form)\n\nTo display an instance of the dynamic form, the `AppComponent` shell template passes the `questions` array returned by the `QuestionService` to the form container component, `<app-dynamic-form>`.\n\n### app.component.ts\n\n```\n      import {Component, inject} from '@angular/core';import {AsyncPipe} from '@angular/common';import {DynamicFormComponent} from './dynamic-form.component';import {QuestionService} from './question.service';import {QuestionBase} from './question-base';import {Observable} from 'rxjs';@Component({  selector: 'app-root',  template: `    <div>      <h2>Job Application for Heroes</h2>      <app-dynamic-form [questions]=\"questions$ | async\" />    </div>  `,  providers: [QuestionService],  imports: [AsyncPipe, DynamicFormComponent],})export class AppComponent {  questions$: Observable<QuestionBase<string>[]> = inject(QuestionService).getQuestions();}\n\n```\n\ncheck\n\nThis separation of model and data lets you repurpose the components for any type of survey, as long as it's compatible with the _question_ object model.\n\n### [Ensuring valid data](https://angular.dev/guide/forms/dynamic-forms\\#ensuring-valid-data)\n\nThe form template uses dynamic data binding of metadata to render the form without making any hardcoded assumptions about specific questions.\nIt adds both control metadata and validation criteria dynamically.\n\nTo ensure valid input, the _Save_ button is disabled until the form is in a valid state.\nWhen the form is valid, click _Save_ and the application renders the current form values as JSON.\n\nThe following figure shows the final form.\n\n![Dynamic-Form](https://angular.dev/guide/forms/assets/images/guide/dynamic-form/dynamic-form.png)\n\n## [Next steps](https://angular.dev/guide/forms/dynamic-forms\\#next-steps)",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-e06e9cea-8b03-4e13-a544-341029d8ca90.png"
  },
  "metadata": {
    "title": "Building dynamic forms â€¢ Angular",
    "ogUrl": "https://angular.dev/",
    "ogDescription": "The web development framework for building modern apps.",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "msapplication-TileColor": "#e90464",
    "og:type": "website",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "og:description": "The web development framework for building modern apps.",
    "language": "en",
    "og:url": "https://angular.dev/",
    "twitter:card": "summary_large_image",
    "og:title": "Angular",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:url": "https://angular.dev/",
    "description": "The web development framework for building modern apps.",
    "theme-color": "#ffffff",
    "twitter:title": "Angular",
    "twitter:description": "The web development framework for building modern apps.",
    "viewport": "width=device-width, initial-scale=1",
    "application-name": "Angular",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "apple-mobile-web-app-title": "Angular",
    "scrapeId": "fb0fb773-6dbc-4b7f-95c4-4108d459e6e1",
    "sourceURL": "https://angular.dev/guide/forms/dynamic-forms",
    "url": "https://angular.dev/guide/forms/dynamic-forms",
    "statusCode": 200
  }
}