{
  "scrapeId": "22e7d6d3-64b1-4a6f-8aa8-36aebe233a26",
  "sourceURL": "https://angular.dev/guide/directives/attribute-directives",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backDirectives\n  - [Overview](https://angular.dev/guide/directives)\n  - [Attribute directives](https://angular.dev/guide/directives/attribute-directives)\n  - [Structural directives](https://angular.dev/guide/directives/structural-directives)\n  - [Directive composition API](https://angular.dev/guide/directives/directive-composition-api)\n  - [Optimizing images with NgOptimizedImage](https://angular.dev/guide/image-optimization)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nChange the appearance or behavior of DOM elements and Angular components with attribute directives.\n\n## [Building an attribute directive](https://angular.dev/guide/directives/attribute-directives\\#building-an-attribute-directive)\n\nThis section walks you through creating a highlight directive that sets the background color of the host element to yellow.\n\n1. To create a directive, use the CLI command [`ng generate directive`](https://angular.dev/guide/directives/tools/cli/schematics).\n\n\n\n```\n         ng generate directive highlight\n\n```\n\ncheck\n\n    The CLI creates `src/app/highlight.directive.ts`, a corresponding test file `src/app/highlight.directive.spec.ts`.\n\n\n\n\n\n### src/app/highlight.directive.ts\n\n\n\n\n\n```\n         import {Directive} from '@angular/core';@Directive({  selector: '[appHighlight]',})export class HighlightDirective {}\n\n```\n\ncheck\n\n    The `@Directive()` decorator's configuration property specifies the directive's CSS attribute selector, `[appHighlight]`.\n\n2. Import `ElementRef` from `@angular/core`.\n    `ElementRef` grants direct access to the host DOM element through its `nativeElement` property.\n\n3. Add `ElementRef` in the directive's `constructor()` to [inject](https://angular.dev/guide/directives/guide/di) a reference to the host DOM element, the element to which you apply `appHighlight`.\n\n4. Add logic to the `HighlightDirective` class that sets the background to yellow.\n\n\n\n\n\n### src/app/highlight.directive.ts\n\n\n\n\n\n```\n         import {Directive, ElementRef, inject} from '@angular/core';@Directive({  selector: '[appHighlight]',})export class HighlightDirective {  private el = inject(ElementRef);  constructor() {    this.el.nativeElement.style.backgroundColor = 'yellow';  }}\n\n```\n\ncheck\n\n\n**HELPFUL:** Directives _do not_ support namespaces.\n\ncheck\n\n```\n      <p app:Highlight>This is invalid</p>\n\n```\n\n## [Applying an attribute directive](https://angular.dev/guide/directives/attribute-directives\\#applying-an-attribute-directive)\n\n1. To use the `HighlightDirective`, add a `<p>` element to the HTML template with the directive as an attribute.\n\n\n\ncheck\n\n```\n         <h1>My First Attribute Directive</h1><p appHighlight>Highlight me!</p><p appHighlight=\"yellow\">Highlighted in yellow</p><p [appHighlight]=\"'orange'\">Highlighted in orange</p><p [appHighlight]=\"color\">Highlighted with parent component's color</p>\n\n```\n\n\nAngular creates an instance of the `HighlightDirective` class and injects a reference to the `<p>` element into the directive's constructor, which sets the `<p>` element's background style to yellow.\n\n## [Handling user events](https://angular.dev/guide/directives/attribute-directives\\#handling-user-events)\n\nThis section shows you how to detect when a user mouses into or out of the element and to respond by setting or clearing the highlight color.\n\n1. Import `HostListener` from '@angular/core'.\n\n\n\n\ncheck\n\n```\n         import {Directive, ElementRef, HostListener, inject} from '@angular/core';@Directive({  selector: '[appHighlight]',})export class HighlightDirective {  private el = inject(ElementRef);  @HostListener('mouseenter') onMouseEnter() {    this.highlight('yellow');  }  @HostListener('mouseleave') onMouseLeave() {    this.highlight('');  }  private highlight(color: string) {    this.el.nativeElement.style.backgroundColor = color;  }}\n\n```\n\n2. Add two event handlers that respond when the mouse enters or leaves, each with the `@HostListener()` decorator.\n\n\n\n\ncheck\n\n```\n         import {Directive, ElementRef, HostListener, inject} from '@angular/core';@Directive({  selector: '[appHighlight]',})export class HighlightDirective {  private el = inject(ElementRef);  @HostListener('mouseenter') onMouseEnter() {    this.highlight('yellow');  }  @HostListener('mouseleave') onMouseLeave() {    this.highlight('');  }  private highlight(color: string) {    this.el.nativeElement.style.backgroundColor = color;  }}\n\n```\n\n\nSubscribe to events of the DOM element that hosts an attribute directive, the `<p>` in this case, with the `@HostListener()` decorator.\n\n**HELPFUL:** The handlers delegate to a helper method, `highlight()`, that sets the color on the host DOM element, `el`.\n\nThe complete directive is as follows:\n\n### src/app/highlight.directive.ts\n\n```\n      import {Directive, ElementRef, HostListener, inject} from '@angular/core';@Directive({  selector: '[appHighlight]',})export class HighlightDirective {  private el = inject(ElementRef);  @HostListener('mouseenter') onMouseEnter() {    this.highlight('yellow');  }  @HostListener('mouseleave') onMouseLeave() {    this.highlight('');  }  private highlight(color: string) {    this.el.nativeElement.style.backgroundColor = color;  }}\n\n```\n\ncheck\n\nThe background color appears when the pointer hovers over the paragraph element and disappears as the pointer moves out.\n\n![Second Highlight](https://angular.dev/guide/directives/assets/images/guide/attribute-directives/highlight-directive-anim.gif)\n\n## [Passing values into an attribute directive](https://angular.dev/guide/directives/attribute-directives\\#passing-values-into-an-attribute-directive)\n\nThis section walks you through setting the highlight color while applying the `HighlightDirective`.\n\n1. In `highlight.directive.ts`, import `Input` from `@angular/core`.\n\n\n\n\ncheck\n\n```\n         import {Directive, ElementRef, HostListener, inject, Input} from '@angular/core';@Directive({  selector: '[appHighlight]',})export class HighlightDirective {  private el = inject(ElementRef);  @Input() appHighlight = '';  @HostListener('mouseenter') onMouseEnter() {    this.highlight(this.appHighlight || 'red');  }  @HostListener('mouseleave') onMouseLeave() {    this.highlight('');  }  private highlight(color: string) {    this.el.nativeElement.style.backgroundColor = color;  }}\n\n```\n\n2. Add an `appHighlight` `@Input()` property.\n\n\n\n\ncheck\n\n```\n         import {Directive, ElementRef, HostListener, inject, Input} from '@angular/core';@Directive({  selector: '[appHighlight]',})export class HighlightDirective {  private el = inject(ElementRef);  @Input() appHighlight = '';  @HostListener('mouseenter') onMouseEnter() {    this.highlight(this.appHighlight || 'red');  }  @HostListener('mouseleave') onMouseLeave() {    this.highlight('');  }  private highlight(color: string) {    this.el.nativeElement.style.backgroundColor = color;  }}\n\n```\n\n\n\n\n\n\n    The `@Input()` decorator adds metadata to the class that makes the directive's `appHighlight` property available for binding.\n\n3. In `app.component.ts`, add a `color` property to the `AppComponent`.\n\n\n\n\ncheck\n\n```\n         import {Component} from '@angular/core';import {HighlightDirective} from './highlight.directive';@Component({  selector: 'app-root',  templateUrl: './app.component.1.html',  imports: [HighlightDirective],})export class AppComponent {  color = 'yellow';}\n\n```\n\n4. To simultaneously apply the directive and the color, use property binding with the `appHighlight` directive selector, setting it equal to `color`.\n\n\n\n\ncheck\n\n```\n         <h1>My First Attribute Directive</h1><h2>Pick a highlight color</h2><div>  <input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green  <input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow  <input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan</div><p [appHighlight]=\"color\">Highlight me!</p><p [appHighlight]=\"color\" defaultColor=\"violet\">  Highlight me too!</p><hr><h2>Mouse over the following lines to see fixed highlights</h2><p [appHighlight]=\"'yellow'\">Highlighted in yellow</p><p appHighlight=\"orange\">Highlighted in orange</p><hr><h2>ngNonBindable</h2><p>Use ngNonBindable to stop evaluation.</p><p ngNonBindable>This should not evaluate: {{ 1 + 1 }}</p><h3>ngNonBindable with a directive</h3><div ngNonBindable [appHighlight]=\"'yellow'\">This should not evaluate: {{ 1 +1 }}, but will highlight yellow.</div>\n\n```\n\n\n\n\n\n\n    The `[appHighlight]` attribute binding performs two tasks:\n\n   - Applies the highlighting directive to the `<p>` element\n   - Sets the directive's highlight color with a property binding\n\n### [Setting the value with user input](https://angular.dev/guide/directives/attribute-directives\\#setting-the-value-with-user-input)\n\nThis section guides you through adding radio buttons to bind your color choice to the `appHighlight` directive.\n\n1. Add markup to `app.component.html` for choosing a color as follows:\n\n\n\n\ncheck\n\n```\n         <h1>My First Attribute Directive</h1><h2>Pick a highlight color</h2><div>  <input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green  <input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow  <input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan</div><p [appHighlight]=\"color\">Highlight me!</p><p [appHighlight]=\"color\" defaultColor=\"violet\">  Highlight me too!</p><hr><h2>Mouse over the following lines to see fixed highlights</h2><p [appHighlight]=\"'yellow'\">Highlighted in yellow</p><p appHighlight=\"orange\">Highlighted in orange</p><hr><h2>ngNonBindable</h2><p>Use ngNonBindable to stop evaluation.</p><p ngNonBindable>This should not evaluate: {{ 1 + 1 }}</p><h3>ngNonBindable with a directive</h3><div ngNonBindable [appHighlight]=\"'yellow'\">This should not evaluate: {{ 1 +1 }}, but will highlight yellow.</div>\n\n```\n\n2. Revise the `AppComponent.color` so that it has no initial value.\n\n\n\n\ncheck\n\n```\n         import {Component} from '@angular/core';import {HighlightDirective} from './highlight.directive';@Component({  selector: 'app-root',  templateUrl: './app.component.html',  imports: [HighlightDirective],})export class AppComponent {  color = '';}\n\n```\n\n3. In `highlight.directive.ts`, revise `onMouseEnter` method so that it first tries to highlight with `appHighlight` and falls back to `red` if `appHighlight` is `undefined`.\n\n\n\n\ncheck\n\n```\n         import {Directive, ElementRef, HostListener, inject, Input} from '@angular/core';@Directive({  selector: '[appHighlight]',})export class HighlightDirective {  private el = inject(ElementRef);  @Input() appHighlight = '';  @HostListener('mouseenter') onMouseEnter() {    this.highlight(this.appHighlight || 'red');  }  @HostListener('mouseleave') onMouseLeave() {    this.highlight('');  }  private highlight(color: string) {    this.el.nativeElement.style.backgroundColor = color;  }}\n\n```\n\n4. Serve your application to verify that the user can choose the color with the radio buttons.\n![Animated gif of the refactored highlight directive changing color according to the radio button the user selects](https://angular.dev/guide/directives/assets/images/guide/attribute-directives/highlight-directive-v2-anim.gif)\n\n## [Binding to a second property](https://angular.dev/guide/directives/attribute-directives\\#binding-to-a-second-property)\n\nThis section guides you through configuring your application so the developer can set the default color.\n\n1. Add a second `Input()` property to `HighlightDirective` called `defaultColor`.\n\n\n\n\ncheck\n\n```\n         import {Directive, ElementRef, HostListener, inject, Input} from '@angular/core';@Directive({  selector: '[appHighlight]',})export class HighlightDirective {  private el = inject(ElementRef);  @Input() defaultColor = '';  @Input() appHighlight = '';  @HostListener('mouseenter') onMouseEnter() {    this.highlight(this.appHighlight || this.defaultColor || 'red');  }  @HostListener('mouseleave') onMouseLeave() {    this.highlight('');  }  private highlight(color: string) {    this.el.nativeElement.style.backgroundColor = color;  }}\n\n```\n\n2. Revise the directive's `onMouseEnter` so that it first tries to highlight with the `appHighlight`, then with the `defaultColor`, and falls back to `red` if both properties are `undefined`.\n\n\n\n\ncheck\n\n```\n         import {Directive, ElementRef, HostListener, inject, Input} from '@angular/core';@Directive({  selector: '[appHighlight]',})export class HighlightDirective {  private el = inject(ElementRef);  @Input() defaultColor = '';  @Input() appHighlight = '';  @HostListener('mouseenter') onMouseEnter() {    this.highlight(this.appHighlight || this.defaultColor || 'red');  }  @HostListener('mouseleave') onMouseLeave() {    this.highlight('');  }  private highlight(color: string) {    this.el.nativeElement.style.backgroundColor = color;  }}\n\n```\n\n3. To bind to the `AppComponent.color` and fall back to \"violet\" as the default color, add the following HTML.\n    In this case, the `defaultColor` binding doesn't use square brackets, `[]`, because it is static.\n\n\n\n\ncheck\n\n```\n         <h1>My First Attribute Directive</h1><h2>Pick a highlight color</h2><div>  <input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green  <input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow  <input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan</div><p [appHighlight]=\"color\">Highlight me!</p><p [appHighlight]=\"color\" defaultColor=\"violet\">  Highlight me too!</p><hr><h2>Mouse over the following lines to see fixed highlights</h2><p [appHighlight]=\"'yellow'\">Highlighted in yellow</p><p appHighlight=\"orange\">Highlighted in orange</p><hr><h2>ngNonBindable</h2><p>Use ngNonBindable to stop evaluation.</p><p ngNonBindable>This should not evaluate: {{ 1 + 1 }}</p><h3>ngNonBindable with a directive</h3><div ngNonBindable [appHighlight]=\"'yellow'\">This should not evaluate: {{ 1 +1 }}, but will highlight yellow.</div>\n\n```\n\n\n\n\n\n\n    As with components, you can add multiple directive property bindings to a host element.\n\n\nThe default color is red if there is no default color binding.\nWhen the user chooses a color the selected color becomes the active highlight color.\n\n![Animated gif of final highlight directive that shows red color with no binding and violet with the default color set. When user selects color, the selection takes precedence.](https://angular.dev/guide/directives/assets/images/guide/attribute-directives/highlight-directive-final-anim.gif)\n\n## [Deactivating Angular processing with `NgNonBindable`](https://angular.dev/guide/directives/attribute-directives\\#deactivating-angular-processing-with-ngnonbindable)\n\nTo prevent expression evaluation in the browser, add `ngNonBindable` to the host element.\n`ngNonBindable` deactivates interpolation, directives, and binding in templates.\n\nIn the following example, the expression `{{ 1 + 1 }}` renders just as it does in your code editor, and does not display `2`.\n\ncheck\n\n```\n      <h1>My First Attribute Directive</h1><h2>Pick a highlight color</h2><div>  <input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green  <input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow  <input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan</div><p [appHighlight]=\"color\">Highlight me!</p><p [appHighlight]=\"color\" defaultColor=\"violet\">  Highlight me too!</p><hr><h2>Mouse over the following lines to see fixed highlights</h2><p [appHighlight]=\"'yellow'\">Highlighted in yellow</p><p appHighlight=\"orange\">Highlighted in orange</p><hr><h2>ngNonBindable</h2><p>Use ngNonBindable to stop evaluation.</p><p ngNonBindable>This should not evaluate: {{ 1 + 1 }}</p><h3>ngNonBindable with a directive</h3><div ngNonBindable [appHighlight]=\"'yellow'\">This should not evaluate: {{ 1 +1 }}, but will highlight yellow.</div>\n\n```\n\nApplying `ngNonBindable` to an element stops binding for that element's child elements.\nHowever, `ngNonBindable` still lets directives work on the element where you apply `ngNonBindable`.\nIn the following example, the `appHighlight` directive is still active but Angular does not evaluate the expression `{{ 1 + 1 }}`.\n\ncheck\n\n```\n      <h1>My First Attribute Directive</h1><h2>Pick a highlight color</h2><div>  <input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green  <input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow  <input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan</div><p [appHighlight]=\"color\">Highlight me!</p><p [appHighlight]=\"color\" defaultColor=\"violet\">  Highlight me too!</p><hr><h2>Mouse over the following lines to see fixed highlights</h2><p [appHighlight]=\"'yellow'\">Highlighted in yellow</p><p appHighlight=\"orange\">Highlighted in orange</p><hr><h2>ngNonBindable</h2><p>Use ngNonBindable to stop evaluation.</p><p ngNonBindable>This should not evaluate: {{ 1 + 1 }}</p><h3>ngNonBindable with a directive</h3><div ngNonBindable [appHighlight]=\"'yellow'\">This should not evaluate: {{ 1 +1 }}, but will highlight yellow.</div>\n\n```\n\nIf you apply `ngNonBindable` to a parent element, Angular disables interpolation and binding of any sort, such as property binding or event binding, for the element's children.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-f5dafe0c-521e-43ef-bffe-122a5966def3.png"
  },
  "metadata": {
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "language": "en",
    "viewport": "width=device-width, initial-scale=1",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:description": "The web development framework for building modern apps.",
    "ogUrl": "https://angular.dev/",
    "theme-color": "#ffffff",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "og:type": "website",
    "twitter:url": "https://angular.dev/",
    "apple-mobile-web-app-title": "Angular",
    "og:title": "Angular",
    "twitter:card": "summary_large_image",
    "og:description": "The web development framework for building modern apps.",
    "title": "Attribute directives â€¢ Angular",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "ogDescription": "The web development framework for building modern apps.",
    "description": "The web development framework for building modern apps.",
    "application-name": "Angular",
    "og:url": "https://angular.dev/",
    "msapplication-TileColor": "#e90464",
    "twitter:title": "Angular",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "scrapeId": "22e7d6d3-64b1-4a6f-8aa8-36aebe233a26",
    "sourceURL": "https://angular.dev/guide/directives/attribute-directives",
    "url": "https://angular.dev/guide/directives/attribute-directives",
    "statusCode": 200
  }
}