{
  "scrapeId": "5618330d-8203-4826-a768-18a36f45843c",
  "sourceURL": "https://angular.dev/tools/cli/environments",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backAngular CLI\n  - [Overview](https://angular.dev/tools/cli)\n  - [Local set-up](https://angular.dev/tools/cli/setup-local)\n  - [Building Angular apps](https://angular.dev/tools/cli/build)\n  - [Serving Angular apps for development](https://angular.dev/tools/cli/serve)\n  - [Deployment](https://angular.dev/tools/cli/deployment)\n  - [End-to-End Testing](https://angular.dev/tools/cli/end-to-end)\n  - [Migrating to new build system](https://angular.dev/tools/cli/build-system-migration)\n  - [Build environments](https://angular.dev/tools/cli/environments)\n  - [Angular CLI builders](https://angular.dev/tools/cli/cli-builder)\n  - [Generating code using schematics](https://angular.dev/tools/cli/schematics)\n  - [Authoring schematics](https://angular.dev/tools/cli/schematics-authoring)\n  - [Schematics for libraries](https://angular.dev/tools/cli/schematics-for-libraries)\n  - [Template type checking](https://angular.dev/tools/cli/template-typecheck)\n  - [Ahead-of-time (AOT) compilation](https://angular.dev/tools/cli/aot-compiler)\n  - [AOT metadata errors](https://angular.dev/tools/cli/aot-metadata-errors)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nYou can define different named build configurations for your project, such as `development` and `staging`, with different defaults.\n\nEach named configuration can have defaults for any of the options that apply to the various builder targets, such as `build`, `serve`, and `test`.\nThe [Angular CLI](https://angular.dev/tools/cli/tools/cli) `build`, `serve`, and `test` commands can then replace files with appropriate versions for your intended target environment.\n\n## [Angular CLI configurations](https://angular.dev/tools/cli/environments\\#angular-cli-configurations)\n\nAngular CLI builders support a `configurations` object, which allows overwriting specific options for a builder based on the configuration provided on the command line.\n\n```\n      {  \"projects\": {    \"my-app\": {      \"architect\": {        \"build\": {          \"builder\": \"@angular-devkit/build-angular:browser\",          \"options\": {            // By default, disable source map generation.            \"sourceMap\": false          },          \"configurations\": {            // For the `debug` configuration, enable source maps.            \"debug\": {              \"sourceMap\": true            }          }        },        â€¦      }    }  }}\n\n```\n\ncheck\n\nYou can choose which configuration to use with the `--configuration` option.\n\n```\n      ng build --configuration debug\n\n```\n\ncheck\n\nConfigurations can be applied to any Angular CLI builder. Multiple configurations can be specified with a comma separator. The configurations are applied in order, with conflicting options using the value from the last configuration.\n\n```\n      ng build --configuration debug,production,customer-facing\n\n```\n\ncheck\n\n## [Configure environment-specific defaults](https://angular.dev/tools/cli/environments\\#configure-environment-specific-defaults)\n\n`@angular-devkit/build-angular:browser` supports file replacements, an option for substituting source files before executing a build.\nUsing this in combination with `--configuration` provides a mechanism for configuring environment-specific data in your application.\n\nStart by [generating environments](https://angular.dev/tools/cli/cli/generate/environments) to create the `src/environments/` directory and configure the project to use file replacements.\n\n```\n      ng generate environments\n\n```\n\ncheck\n\nThe project's `src/environments/` directory contains the base configuration file, `environment.ts`, which provides the default configuration for production.\nYou can override default values for additional environments, such as `development` and `staging`, in target-specific configuration files.\n\nFor example:\n\n```\n      my-app/src/environmentsâ”œâ”€â”€ environment.development.tsâ”œâ”€â”€ environment.staging.tsâ””â”€â”€ environment.ts\n\n```\n\ncheck\n\nThe base file `environment.ts`, contains the default environment settings.\nFor example:\n\n```\n      export const environment = {  production: true};\n\n```\n\ncheck\n\nThe `build` command uses this as the build target when no environment is specified.\nYou can add further variables, either as additional properties on the environment object, or as separate objects.\nFor example, the following adds a default for a variable to the default environment:\n\n```\n      export const environment = {  production: true,  apiUrl: 'http://my-prod-url'};\n\n```\n\ncheck\n\nYou can add target-specific configuration files, such as `environment.development.ts`.\nThe following content sets default values for the development build target:\n\n```\n      export const environment = {  production: false,  apiUrl: 'http://my-dev-url'};\n\n```\n\ncheck\n\n## [Using environment-specific variables in your app](https://angular.dev/tools/cli/environments\\#using-environment-specific-variables-in-your-app)\n\nTo use the environment configurations you have defined, your components must import the original environments file:\n\n```\n      import { environment } from './environments/environment';\n\n```\n\ncheck\n\nThis ensures that the build and serve commands can find the configurations for specific build targets.\n\nThe following code in the component file ( `app.component.ts`) uses an environment variable defined in the configuration files.\n\n```\n      import { environment } from './../environments/environment';// Fetches from `http://my-prod-url` in production, `http://my-dev-url` in development.fetch(environment.apiUrl);\n\n```\n\ncheck\n\nThe main CLI configuration file, `angular.json`, contains a `fileReplacements` section in the configuration for each build target, which lets you replace any file in the TypeScript program with a target-specific version of that file.\nThis is useful for including target-specific code or variables in a build that targets a specific environment, such as production or staging.\n\nBy default no files are replaced, however `ng generate environments` sets up this configuration automatically.\nYou can change or add file replacements for specific build targets by editing the `angular.json` configuration directly.\n\n```\n      \"configurations\": {    \"development\": {      \"fileReplacements\": [          {            \"replace\": \"src/environments/environment.ts\",            \"with\": \"src/environments/environment.development.ts\"          }        ],        â€¦\n\n```\n\ncheck\n\nThis means that when you build your development configuration with `ng build --configuration development`, the `src/environments/environment.ts` file is replaced with the target-specific version of the file, `src/environments/environment.development.ts`.\n\nTo add a staging environment, create a copy of `src/environments/environment.ts` called `src/environments/environment.staging.ts`, then add a `staging` configuration to `angular.json`:\n\n```\n      \"configurations\": {    \"development\": { â€¦ },    \"production\": { â€¦ },    \"staging\": {      \"fileReplacements\": [        {          \"replace\": \"src/environments/environment.ts\",          \"with\": \"src/environments/environment.staging.ts\"        }      ]    }  }\n\n```\n\ncheck\n\nYou can add more configuration options to this target environment as well.\nAny option that your build supports can be overridden in a build target configuration.\n\nTo build using the staging configuration, run the following command:\n\n```\n      ng build --configuration staging\n\n```\n\ncheck\n\nBy default, the `build` target includes `production` and `development` configurations and `ng serve` uses the development build of the application.\nYou can also configure `ng serve` to use the targeted build configuration if you set the `buildTarget` option:\n\n```\n      \"serve\": {    \"builder\": \"@angular-devkit/build-angular:dev-server\",    \"options\": { â€¦ },    \"configurations\": {      \"development\": {        // Use the `development` configuration of the `build` target.        \"buildTarget\": \"my-app:build:development\"      },      \"production\": {        // Use the `production` configuration of the `build` target.        \"buildTarget\": \"my-app:build:production\"      }    },    \"defaultConfiguration\": \"development\"  },\n\n```\n\ncheck\n\nThe `defaultConfiguration` option specifies which configuration is used by default.\nWhen `defaultConfiguration` is not set, `options` are used directly without modification.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-66c116b0-e58a-4f63-93f8-462813f323cb.png"
  },
  "metadata": {
    "og:type": "website",
    "og:url": "https://angular.dev/",
    "twitter:description": "The web development framework for building modern apps.",
    "og:description": "The web development framework for building modern apps.",
    "theme-color": "#ffffff",
    "viewport": "width=device-width, initial-scale=1",
    "description": "The web development framework for building modern apps.",
    "msapplication-TileColor": "#e90464",
    "application-name": "Angular",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "og:title": "Angular",
    "ogDescription": "The web development framework for building modern apps.",
    "twitter:card": "summary_large_image",
    "twitter:url": "https://angular.dev/",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:title": "Angular",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "apple-mobile-web-app-title": "Angular",
    "title": "Build environments â€¢ Angular",
    "language": "en",
    "ogTitle": "Angular",
    "ogUrl": "https://angular.dev/",
    "scrapeId": "5618330d-8203-4826-a768-18a36f45843c",
    "sourceURL": "https://angular.dev/tools/cli/environments",
    "url": "https://angular.dev/tools/cli/environments",
    "statusCode": 200
  }
}