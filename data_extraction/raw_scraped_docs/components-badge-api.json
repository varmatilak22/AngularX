{
  "scrapeId": "e07b6b83-78fd-41be-8d72-68c8ece8d47f",
  "sourceURL": "https://material.angular.io/components/badge/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for badge\n\n## API reference for Angular Material badge\n\n`\n          import {MatBadgeModule} from '@angular/material/badge';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/badge/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/badge/api\\#MatBadge) `MatBadge`\n\nDirective to display a text badge.\n\nSelector:\\[matBadge\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('matBadgeColor')<br> <br>`color: ThemePalette` | Theme color of the badge. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/badge/styling](https://material.angular.io/components/badge/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input('matBadge')<br> <br>`content: string | number | undefined | null` | The content for the badge |\n| @Input('matBadgeDescription')<br> <br>`description: string` | Message used to describe the decorated element via aria-describedby |\n| @Input({ alias: 'matBadgeDisabled', transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the badge is disabled. |\n| @Input({ alias: 'matBadgeHidden', transform: booleanAttribute })<br> <br>`hidden: boolean` | Whether the badge is hidden. |\n| @Input({ alias: 'matBadgeOverlap', transform: booleanAttribute })<br> <br>`overlap: boolean` | Whether the badge should overlap its contents or not |\n| @Input('matBadgePosition')<br> <br>`position: MatBadgePosition` | Position the badge should reside.<br>Accepts any combination of 'above'\\|'below' and 'before'\\|'after' |\n| @Input('matBadgeSize')<br> <br>`size: MatBadgeSize` | Size of the badge. Can be 'small', 'medium', or 'large'. |\n\n##### Methods\n\n| getBadgeElement |\n| --- |\n| Gets the element into which the badge's content is being rendered. Undefined if the element<br>hasn't been created (e.g. if the badge doesn't have content). |\n| Returns |\n| --- |\n| `HTMLElement | undefined` |  |\n\n| isAbove |\n| --- |\n| Whether the badge is above the host or not |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| isAfter |\n| --- |\n| Whether the badge is after the host or not |\n| Returns |\n| --- |\n| `boolean` |  |\n\n### [link](https://material.angular.io/components/badge/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/badge/api\\#MatBadgePosition) `MatBadgePosition`\n\nAllowed position options for matBadgePosition\n\n```docs-markdown-code\ntype MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after' | 'before' | 'after' | 'above' | 'below';\n\n```\n\n#### [link](https://material.angular.io/components/badge/api\\#MatBadgeSize) `MatBadgeSize`\n\nAllowed size options for matBadgeSize\n\n```docs-markdown-code\ntype MatBadgeSize = 'small' | 'medium' | 'large';\n\n```\n\n## API reference for Angular Material badge-testing\n\n`\n          import {MatBadgeHarness} from '@angular/material/badge/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/badge/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/badge/api\\#MatBadgeHarness) `MatBadgeHarness`extends [ComponentHarness](https://material.angular.io/components/badge/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard Material badge in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `staticÂ hostSelector: '.mat-badge'` |  |\n\n##### Methods\n\n| async<br> <br>getPosition |\n| --- |\n| Gets the position of the badge. |\n| Returns |\n| --- |\n| `Promise<MatBadgePosition>` |  |\n\n| async<br> <br>getSize |\n| --- |\n| Gets the size of the badge. |\n| Returns |\n| --- |\n| `Promise<MatBadgeSize>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets a promise for the badge text. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Gets whether the badge is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isHidden |\n| --- |\n| Gets whether the badge is hidden. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isOverlapping |\n| --- |\n| Gets whether the badge is overlapping the content. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a badge with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `BadgeHarnessFilters = {}` | Options for narrowing the search:<br>- `text` finds a badge host with a particular text. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatBadgeHarness>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/badge/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/badge/api\\#BadgeHarnessFilters) `BadgeHarnessFilters`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `text: string | RegExp` |  |\n\nBadge\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-89709bdc-d5f4-4b4e-bbce-bfdf67e9a039.png"
  },
  "metadata": {
    "language": "en-US",
    "og:locale": "en_US",
    "og:image:type": "image/png",
    "og:image:width": "1339",
    "og:site_name": "Angular Material",
    "twitter:site": "@Angular",
    "og:url": "https://material.angular.io/",
    "ogLocale": "en_US",
    "ogSiteName": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "mobile-web-app-capable": "yes",
    "theme-color": "#d7e3ff",
    "favicon": "https://material.angular.io/components/badge/assets/img/favicon.ico?v=19.1.0",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:type": "website",
    "ogTitle": "Angular Material",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "ogUrl": "https://material.angular.io/",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "twitter:title": "Angular Material",
    "viewport": "width=device-width, initial-scale=1",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "author": "Angular Components Team",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:height": "943",
    "og:title": "Angular Material",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "title": "Badge | Angular Material",
    "apple-mobile-web-app-capable": "yes",
    "twitter:card": "summary",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:creator": "@Angular",
    "scrapeId": "e07b6b83-78fd-41be-8d72-68c8ece8d47f",
    "sourceURL": "https://material.angular.io/components/badge/api",
    "url": "https://material.angular.io/components/badge/api",
    "statusCode": 200
  }
}