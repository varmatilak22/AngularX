{
  "scrapeId": "8d5f8e06-4d5f-4fc6-a560-ab38d2408eab",
  "sourceURL": "https://angular.dev/guide/components/content-projection",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backComponents\n  - [Anatomy of components](https://angular.dev/guide/components)\n  - [Selectors](https://angular.dev/guide/components/selectors)\n  - [Styling](https://angular.dev/guide/components/styling)\n  - [Accepting data with input properties](https://angular.dev/guide/components/inputs)\n  - [Custom events with outputs](https://angular.dev/guide/components/outputs)\n  - [Content projection with ng-content](https://angular.dev/guide/components/content-projection)\n  - [Host elements](https://angular.dev/guide/components/host-elements)\n  - [Lifecycle](https://angular.dev/guide/components/lifecycle)\n  - [Referencing component children with queries](https://angular.dev/guide/components/queries)\n  - [Using DOM APIs](https://angular.dev/guide/components/dom-apis)\n  - [Inheritance](https://angular.dev/guide/components/inheritance)\n  - [Programmatically rendering components](https://angular.dev/guide/components/programmatic-rendering)\n  - [Advanced configuration](https://angular.dev/guide/components/advanced-configuration)\n  - [Custom Elements](https://angular.dev/guide/elements)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n**TIP:** This guide assumes you've already read the [Essentials Guide](https://angular.dev/guide/components/essentials). Read that first if you're new to Angular.\n\nYou often need to create components that act as containers for different types of content. For\nexample, you may want to create a custom card component:\n\n```\n      @Component({  selector: 'custom-card',  template: '<div class=\"card-shadow\"> <!-- card content goes here --> </div>',})export class CustomCard {/* ... */}\n\n```\n\ncheck\n\n**You can use the `<ng-content>` element as a placeholder to mark where content should go**:\n\n```\n      @Component({  selector: 'custom-card',  template: '<div class=\"card-shadow\"> <ng-content></ng-content> </div>',})export class CustomCard {/* ... */}\n\n```\n\ncheck\n\n**TIP:** `<ng-content>` works similarly\nto [the native `<slot>` element](https://developer.mozilla.org/docs/Web/HTML/Element/slot),\nbut with some Angular-specific functionality.\n\nWhen you use a component with `<ng-content>`, any children of the component host element are\nrendered, or **projected**, at the location of that `<ng-content>`:\n\n```\n      // Component source@Component({  selector: 'custom-card',  template: `    <div class=\"card-shadow\">      <ng-content />    </div>  `,})export class CustomCard {/* ... */}\n\n```\n\ncheck\n\n```\n      <!-- Using the component --><custom-card>  <p>This is the projected content</p></custom-card>\n\n```\n\ncheck\n\n```\n      <!-- The rendered DOM --><custom-card>  <div class=\"card-shadow\">    <p>This is the projected content</p>  </div></custom-card>\n\n```\n\ncheck\n\nAngular refers to any children of a component passed this way as that component's **content**. This\nis distinct from the component's **view**, which refers to the elements defined in the component's\ntemplate.\n\n**The `<ng-content>` element is neither a component nor DOM element**. Instead, it is a special\nplaceholder that tells Angular where to render content. Angular's compiler processes\nall `<ng-content>` elements at build-time. You cannot insert, remove, or modify `<ng-content>` at\nrun time. You cannot add directives, styles, or arbitrary attributes to `<ng-content>`.\n\nYou should not conditionally include `<ng-content>` with `@if`, `@for`, or `@switch`. Angular always\ninstantiates and creates DOM nodes for content rendered to a `<ng-content>` placeholder, even if\nthat `<ng-content>` placeholder is hidden. For conditional rendering of component content,\nsee [Template fragments](https://angular.dev/guide/components/api/core/ng-template).\n\n## [Multiple content placeholders](https://angular.dev/guide/components/content-projection\\#multiple-content-placeholders)\n\nAngular supports projecting multiple different elements into different `<ng-content>` placeholders\nbased on CSS selector. Expanding the card example from above, you could create two placeholders for\na card title and a card body by using the `select` attribute:\n\n```\n      <!-- Component template --><div class=\"card-shadow\">  <ng-content select=\"card-title\"></ng-content>  <div class=\"card-divider\"></div>  <ng-content select=\"card-body\"></ng-content></div>\n\n```\n\ncheck\n\n```\n      <!-- Using the component --><custom-card>  <card-title>Hello</card-title>  <card-body>Welcome to the example</card-body></custom-card>\n\n```\n\ncheck\n\n```\n      <!-- Rendered DOM --><custom-card>  <div class=\"card-shadow\">    <card-title>Hello</card-title>    <div class=\"card-divider\"></div>    <card-body>Welcome to the example</card-body>  </div></custom-card>\n\n```\n\ncheck\n\nThe `<ng-content>` placeholder supports the same CSS selectors\nas [component selectors](https://angular.dev/guide/components/guide/components/selectors).\n\nIf you include one or more `<ng-content>` placeholders with a `select` attribute and\none `<ng-content>` placeholder without a `select` attribute, the latter captures all elements that\ndid not match a `select` attribute:\n\n```\n      <!-- Component template --><div class=\"card-shadow\">  <ng-content select=\"card-title\"></ng-content>  <div class=\"card-divider\"></div>  <!-- capture anything except \"card-title\" -->  <ng-content></ng-content></div>\n\n```\n\ncheck\n\n```\n      <!-- Using the component --><custom-card>  <card-title>Hello</card-title>  <img src=\"...\" />  <p>Welcome to the example</p></custom-card>\n\n```\n\ncheck\n\n```\n      <!-- Rendered DOM --><custom-card>  <div class=\"card-shadow\">    <card-title>Hello</card-title>    <div class=\"card-divider\"></div>    <img src=\"...\" />    <p>Welcome to the example</p>  </div></custom-card>\n\n```\n\ncheck\n\nIf a component does not include an `<ng-content>` placeholder without a `select` attribute, any\nelements that don't match one of the component's placeholders do not render into the DOM.\n\n## [Fallback content](https://angular.dev/guide/components/content-projection\\#fallback-content)\n\nAngular can show _fallback content_ for a component's `<ng-content>` placeholder if that component doesn't have any matching child content. You can specify fallback content by adding child content to the `<ng-content>` element itself.\n\n```\n      <!-- Component template --><div class=\"card-shadow\">  <ng-content select=\"card-title\">Default Title</ng-content>  <div class=\"card-divider\"></div>  <ng-content select=\"card-body\">Default Body</ng-content></div>\n\n```\n\ncheck\n\n```\n      <!-- Using the component --><custom-card>  <card-title>Hello</card-title>  <!-- No card-body provided --></custom-card>\n\n```\n\ncheck\n\n```\n      <!-- Rendered DOM --><custom-card>  <div class=\"card-shadow\">    <card-title>Hello</card-title>    <div class=\"card-divider\"></div>    Default Body  </div></custom-card>\n\n```\n\ncheck\n\n## [Aliasing content for projection](https://angular.dev/guide/components/content-projection\\#aliasing-content-for-projection)\n\nAngular supports a special attribute, `ngProjectAs`, that allows you to specify a CSS selector on\nany element. Whenever an element with `ngProjectAs` is checked against an `<ng-content>`\nplaceholder, Angular compares against the `ngProjectAs` value instead of the element's identity:\n\n```\n      <!-- Component template --><div class=\"card-shadow\">  <ng-content select=\"card-title\"></ng-content>  <div class=\"card-divider\"></div>  <ng-content></ng-content></div>\n\n```\n\ncheck\n\n```\n      <!-- Using the component --><custom-card>  <h3 ngProjectAs=\"card-title\">Hello</h3>  <p>Welcome to the example</p></custom-card>\n\n```\n\ncheck\n\n```\n      <!-- Rendered DOM --><custom-card>  <div class=\"card-shadow\">    <h3>Hello</h3>    <div class=\"card-divider\"></div>    <p>Welcome to the example</p>  </div></custom-card>\n\n```\n\ncheck\n\n`ngProjectAs` supports only static values and cannot be bound to dynamic expressions.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-dc6fa2bd-6baf-456a-a67c-545da829a4cf.png"
  },
  "metadata": {
    "msapplication-TileColor": "#e90464",
    "og:type": "website",
    "og:title": "Angular",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "og:description": "The web development framework for building modern apps.",
    "language": "en",
    "ogDescription": "The web development framework for building modern apps.",
    "apple-mobile-web-app-title": "Angular",
    "twitter:card": "summary_large_image",
    "description": "The web development framework for building modern apps.",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:description": "The web development framework for building modern apps.",
    "title": "Content projection with ng-content â€¢ Angular",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "theme-color": "#ffffff",
    "og:url": "https://angular.dev/",
    "twitter:url": "https://angular.dev/",
    "application-name": "Angular",
    "viewport": "width=device-width, initial-scale=1",
    "ogUrl": "https://angular.dev/",
    "twitter:title": "Angular",
    "scrapeId": "8d5f8e06-4d5f-4fc6-a560-ab38d2408eab",
    "sourceURL": "https://angular.dev/guide/components/content-projection",
    "url": "https://angular.dev/guide/components/content-projection",
    "statusCode": 200
  }
}