{
  "scrapeId": "504f9889-c73f-4d82-aac0-033997cb1c9b",
  "sourceURL": "https://material.angular.io/components/dialog/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for dialog\n\nThe `MatDialog` service can be used to open modal dialogs with Material Design styling and\nanimations.\n\nDialog Overview\n\nlinkcodeopen\\_in\\_new\n\n1. What's your name?\n\n2. Pick one\n\nA dialog is opened by calling the `open` method with a component to be loaded and an optional\nconfig object. The `open` method will return an instance of `MatDialogRef`:\n\n```ts\nlet dialogRef = dialog.open(UserProfileComponent, {\n  height: '400px',\n  width: '600px',\n});\n\n```\n\nThe `MatDialogRef` provides a handle on the opened dialog. It can be used to close the dialog and to\nreceive notifications when the dialog has been closed. Any notification Observables will complete when the dialog closes.\n\n```ts\ndialogRef.afterClosed().subscribe(result => {\n  console.log(`Dialog result: ${result}`); // Pizza!\n});\n\ndialogRef.close('Pizza!');\n\n```\n\nComponents created via `MatDialog` can _inject_ `MatDialogRef` and use it to close the dialog\nin which they are contained. When closing, an optional result value can be provided. This result\nvalue is forwarded as the result of the `afterClosed` Observable.\n\n```ts\n@Component({/* ... */})\nexport class YourDialog {\n  constructor(public dialogRef: MatDialogRef<YourDialog>) { }\n\n  closeDialog() {\n    this.dialogRef.close('Pizza!');\n  }\n}\n\n```\n\n### [link](https://material.angular.io/components/dialog/overview\\#specifying-global-configuration-defaults)  Specifying global configuration defaults\n\nDefault dialog options can be specified by providing an instance of `MatDialogConfig` for\nMAT\\_DIALOG\\_DEFAULT\\_OPTIONS in your application's root module.\n\n```ts\n@NgModule({\n  providers: [\\\n    {provide: MAT_DIALOG_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}}\\\n  ]\n})\n\n```\n\n### [link](https://material.angular.io/components/dialog/overview\\#sharing-data-with-the-dialog-component)  Sharing data with the Dialog component.\n\nIf you want to share data with your dialog, you can use the `data`\noption to pass information to the dialog component.\n\n```ts\nlet dialogRef = dialog.open(YourDialog, {\n  data: { name: 'austin' },\n});\n\n```\n\nTo access the data in your dialog component, you have to use the MAT\\_DIALOG\\_DATA injection token:\n\n```ts\nimport {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '../dialog';\n\n@Component({\n  selector: 'your-dialog',\n  template: 'passed in {{ data.name }}',\n})\nexport class YourDialog {\n  constructor(@Inject(MAT_DIALOG_DATA) public data: {name: string}) { }\n}\n\n```\n\nNote that if you're using a template dialog (one that was opened with a `TemplateRef`), the data\nwill be available implicitly in the template:\n\n```html\n<ng-template let-data>\n  Hello, {{data.name}}\n</ng-template>\n\n```\n\nInjecting data when opening a dialog\n\nlinkcodeopen\\_in\\_new\n\nOpen dialog\n\n### [link](https://material.angular.io/components/dialog/overview\\#dialog-content)  Dialog content\n\nSeveral directives are available to make it easier to structure your dialog content:\n\n| Name | Description |\n| --- | --- |\n| `mat-dialog-title` | \\[Attr\\] Dialog title, applied to a heading element (e.g., `<h1>`, `<h2>`) |\n| `<mat-dialog-content>` | Primary scrollable content of the dialog. |\n| `<mat-dialog-actions>` | Container for action buttons at the bottom of the dialog. Button alignment can be controlled via the `align` attribute which can be set to `end` and `center`. |\n| `mat-dialog-close` | \\[Attr\\] Added to a `<button>`, makes the button close the dialog with an optional result from the bound value. |\n\nFor example:\n\n```html\n<h2 mat-dialog-title>Delete all elements?</h2>\n<mat-dialog-content>This will delete all elements that are currently on this page and cannot be undone.</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\n  <button mat-button [mat-dialog-close]=\"true\">Delete</button>\n</mat-dialog-actions>\n\n```\n\nOnce a dialog opens, the dialog will automatically focus the first tabbable element.\n\nYou can control which elements are tab stops with the `tabindex` attribute\n\n```html\n<button mat-button tabindex=\"-1\">Not Tabbable</button>\n\n```\n\nDialog with header, scrollable content and actions\n\nlinkcodeopen\\_in\\_new\n\nOpen dialog\n\n### [link](https://material.angular.io/components/dialog/overview\\#controlling-the-dialog-animation)  Controlling the dialog animation\n\nYou can control the duration of the dialog's enter and exit animations using the\n`enterAnimationDuration` and `exitAnimationDuration` options. If you want to disable the dialog's\nanimation completely, you can do so by setting the properties to `0ms`.\n\nDialog Animations\n\nlinkcodeopen\\_in\\_new\n\nOpen dialog without animationOpen dialog slowly\n\n### [link](https://material.angular.io/components/dialog/overview\\#accessibility)  Accessibility\n\n`MatDialog` creates modal dialogs that implements the ARIA `role=\"dialog\"` pattern by default.\nYou can change the dialog's role to `alertdialog` via `MatDialogConfig`.\n\nYou should provide an accessible label to this root dialog element by setting the `ariaLabel` or\n`ariaLabelledBy` properties of `MatDialogConfig`. You can additionally specify a description element\nID via the `ariaDescribedBy` property of `MatDialogConfig`.\n\n#### [link](https://material.angular.io/components/dialog/overview\\#keyboard-interaction)  Keyboard interaction\n\nBy default, the escape key closes `MatDialog`. While you can disable this behavior via\nthe `disableClose` property of `MatDialogConfig`, doing this breaks the expected interaction\npattern for the ARIA `role=\"dialog\"` pattern.\n\n#### [link](https://material.angular.io/components/dialog/overview\\#focus-management)  Focus management\n\nWhen opened, `MatDialog` traps browser focus such that it cannot escape the root\n`role=\"dialog\"` element. By default, the first tabbable element in the dialog receives focus.\nYou can customize which element receives focus with the `autoFocus` property of\n`MatDialogConfig`, which supports the following values.\n\n| Value | Behavior |\n| --- | --- |\n| `first-tabbable` | Focus the first tabbable element. This is the default setting. |\n| `first-header` | Focus the first header element ( `role=\"heading\"`, `h1` through `h6`) |\n| `dialog` | Focus the root `role=\"dialog\"` element. |\n| Any CSS selector | Focus the first element matching the given selector. |\n\nWhile the default setting applies the best behavior for most applications, special cases may benefit\nfrom these alternatives. Always test your application to verify the behavior that works best for\nyour users.\n\n#### [link](https://material.angular.io/components/dialog/overview\\#focus-restoration)  Focus restoration\n\nWhen closed, `MatDialog` restores focus to the element that previously held focus when the\ndialog opened. However, if that previously focused element no longer exists, you must\nadd additional handling to return focus to an element that makes sense for the user's workflow.\nOpening a dialog from a menu is one common pattern that causes this situation. The menu\ncloses upon clicking an item, thus the focused menu item is no longer in the DOM when the bottom\nsheet attempts to restore focus.\n\nYou can add handling for this situation with the `afterClosed()` observable from `MatDialogRef`.\n\ncontent\\_copy\n\n```\nconst dialogRef = this.dialog.open(DialogFromMenuExampleDialog, {restoreFocus: false});\n\n// Manually restore focus to the menu trigger since the element that\n// opens the dialog won't be in the DOM any more when the dialog closes.\ndialogRef.afterClosed().subscribe(() => this.menuTrigger().focus());\n```\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Dialog Overview example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit Injecting data when opening a dialog example in StackBlitz\n\nEdit Dialog with header, scrollable content and actions example in StackBlitz\n\nEdit Dialog Animations example in StackBlitz\n\nCopy snippet\n\nView full example",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-0c2e2da5-0e1f-498e-8608-6b88b4f9271d.png"
  },
  "metadata": {
    "og:image:type": "image/png",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:height": "943",
    "favicon": "https://material.angular.io/components/dialog/assets/img/favicon.ico?v=19.1.0",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "twitter:site": "@Angular",
    "author": "Angular Components Team",
    "twitter:creator": "@Angular",
    "og:url": "https://material.angular.io/",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "language": "en-US",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "apple-mobile-web-app-capable": "yes",
    "ogUrl": "https://material.angular.io/",
    "og:type": "website",
    "mobile-web-app-capable": "yes",
    "og:locale": "en_US",
    "viewport": "width=device-width, initial-scale=1",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "ogLocale": "en_US",
    "twitter:title": "Angular Material",
    "og:image:width": "1339",
    "ogTitle": "Angular Material",
    "ogSiteName": "Angular Material",
    "og:site_name": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "title": "Dialog | Angular Material",
    "theme-color": "#d7e3ff",
    "twitter:card": "summary",
    "og:title": "Angular Material",
    "scrapeId": "504f9889-c73f-4d82-aac0-033997cb1c9b",
    "sourceURL": "https://material.angular.io/components/dialog/overview",
    "url": "https://material.angular.io/components/dialog/overview",
    "statusCode": 200
  }
}