{
  "scrapeId": "40376f53-c49f-4e30-912d-eab12e06002c",
  "sourceURL": "https://angular.dev/guide/ngmodules/overview",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n**IMPORTANT:** The Angular team recommends using [standalone components](https://angular.dev/guide/ngmodules/guide/components/anatomy-of-components#-imports-in-the-component-decorator) instead of `NgModule` for all new code. Use this guide to understand existing code built with `@NgModule`.\n\nAn NgModule is a class marked by the `@NgModule` decorator. This decorator accepts _metadata_ that tells Angular how to compile component templates and configure dependency injection.\n\n```\n      import {NgModule} from '@angular/core';@NgModule({  // Metadata goes here})export class CustomMenuModule { }\n\n```\n\nAn NgModule has two main responsibilities:\n\n- Declaring components, directives, and pipes that belong to the NgModule\n- Add providers to the injector for components, directives, and pipes that import the NgModule\n\n## [Declarations](https://angular.dev/guide/ngmodules/overview\\#declarations)\n\nThe `declarations` property of the `@NgModule` metadata declares the components, directives, and pipes that belong to the NgModule.\n\n```\n      @NgModule({  /* ... */  // CustomMenu and CustomMenuItem are components.  declarations: [CustomMenu, CustomMenuItem],})export class CustomMenuModule { }\n\n```\n\nIn the example above, the components `CustomMenu` and `CustomMenuItem` belong to `CustomMenuModule`.\n\nThe `declarations` property additionally accepts _arrays_ of components, directives, and pipes. These arrays, in turn, may also contain other arrays.\n\n```\n      const MENU_COMPONENTS = [CustomMenu, CustomMenuItem];const WIDGETS = [MENU_COMPONENTS, CustomSlider];@NgModule({  /* ... */  // This NgModule declares all of CustomMenu, CustomMenuItem,  // CustomSlider, and CustomCheckbox.  declarations: [WIDGETS, CustomCheckbox],})export class CustomMenuModule { }\n\n```\n\nIf Angular discovers any components, directives, or pipes declared in more than one NgModule, it reports an error.\n\nAny components, directives, or pipes must be explicitly marked as `standalone: false` in order to be declared in an NgModule.\n\n```\n      @Component({  // Mark this component as `standalone: false` so that it can be declared in an NgModule.  standalone: false,  /* ... */})export class CustomMenu { /* ... */ }\n\n```\n\n### [imports](https://angular.dev/guide/ngmodules/overview\\#imports)\n\nComponents declared in an NgModule may depend on other components, directives, and pipes. Add these dependencies to the `imports` property of the `@NgModule` metadata.\n\n```\n      @NgModule({  /* ... */  // CustomMenu and CustomMenuItem depend on the PopupTrigger and SelectorIndicator components.  imports: [PopupTrigger, SelectionIndicator],  declarations: [CustomMenu, CustomMenuItem],})export class CustomMenuModule { }\n\n```\n\nThe `imports` array accepts other NgModules, as well as standalone components, directives, and pipes.\n\n### [exports](https://angular.dev/guide/ngmodules/overview\\#exports)\n\nAn NgModule can _export_ its declared components, directives, and pipes such that they're available to other components and NgModules.\n\n```\n      @NgModule({  imports: [PopupTrigger, SelectionIndicator],  declarations: [CustomMenu, CustomMenuItem],  // Make CustomMenu and CustomMenuItem available to  // components and NgModules that import CustomMenuModule.  exports: [CustomMenu, CustomMenuItem],})export class CustomMenuModule { }\n\n```\n\nThe `exports` property is not limited to declarations, however. An NgModule can also export any other components, directives, pipes, and NgModules that it imports.\n\n```\n      @NgModule({  imports: [PopupTrigger, SelectionIndicator],  declarations: [CustomMenu, CustomMenuItem],  // Also make PopupTrigger available to any component or NgModule that imports CustomMenuModule.  exports: [CustomMenu, CustomMenuItem, PopupTrigger],})export class CustomMenuModule { }\n\n```\n\n## [`NgModule` providers](https://angular.dev/guide/ngmodules/overview\\#ngmodule-providers)\n\n**TIP:** See the [Dependency Injection guide](https://angular.dev/guide/ngmodules/guide/di) for information on dependency injection and providers.\n\nAn `NgModule` can specify `providers` for injected dependencies. These providers are available to:\n\n- Any standalone component, directive, or pipe that imports the NgModule, and\n- The `declarations` and `providers` of any _other_ NgModule that imports the NgModule.\n\n```\n      @NgModule({  imports: [PopupTrigger, SelectionIndicator],  declarations: [CustomMenu, CustomMenuItem],  // Provide the OverlayManager service  providers: [OverlayManager],  /* ... */})export class CustomMenuModule { }@NgModule({  imports: [CustomMenuModule],  declarations: [UserProfile],  providers: [UserDataClient],})export class UserProfileModule { }\n\n```\n\nIn the example above:\n\n- The `CustomMenuModule` provides `OverlayManager`.\n- The `CustomMenu` and `CustomMenuItem` components can inject `OverlayManager` because they're declared in `CustomMenuModule`.\n- `UserProfile` can inject `OverlayManager` because its NgModule imports `CustomMenuModule`.\n- `UserDataClient` can inject `OverlayManager` because its NgModule imports `CustomMenuModule`.\n\n### [The `forRoot` and `forChild` pattern](https://angular.dev/guide/ngmodules/overview\\#the-forroot-and-forchild-pattern)\n\nSome NgModules define a static `forRoot` method that accepts some configuration and returns an array of providers. The name \" `forRoot`\" is a convention that indicates that these providers are intended to be added exclusively to the _root_ of your application during bootstrap.\n\nAny providers included in this way are eagerly loaded, increasing the JavaScript bundle size of your initial page load.\n\n```\n      boorstrapApplication(MyApplicationRoot, {  providers: [    CustomMenuModule.forRoot(/* some config */),  ],});\n\n```\n\nSimilarly, some NgModules may define a static `forChild` that indicates the providers are intended to be added to components within your application hierarchy.\n\n```\n      @Component({  /* ... */  providers: [    CustomMenuModule.forChild(/* some config */),  ],})export class UserProfile { /* ... */ }\n\n```\n\n## [Bootstrapping an application](https://angular.dev/guide/ngmodules/overview\\#bootstrapping-an-application)\n\n**IMPORTANT:** The Angular team recommends using [bootstrapApplication](https://angular.dev/guide/ngmodules/api/platform-browser/bootstrapApplication) instead of `bootstrapModule` for all new code. Use this guide to understand existing applications bootstrapped with `@NgModule`.\n\nThe `@NgModule` decorator accepts an optional `bootstrap` array that may contain one or more components.\n\nYou can use the [`bootstrapModule`](https://angular.dev/api/core/PlatformRef#bootstrapModule) method from either [`platformBrowser`](https://angular.dev/guide/ngmodules/api/platform-browser/platformBrowser) or [`platformServer`](https://angular.dev/guide/ngmodules/api/platform-server/platformServer) to start an Angular application. When run, this function locates any elements on the page with a CSS selector that matches the listed componet(s) and renders those components on the page.\n\n```\n      import {platformBrowser} from '@angular/platform-browser';@NgModule({  bootstrap: [MyApplication],})export class MyApplicationModule { }platformBrowser().bootstrapModule(MyApplicationModule);\n\n```\n\nComponents listed in `bootstrap` are automatically included in the NgModule's declarations.\n\nWhen you bootstrap an application from an NgModule, the collected `providers` of this module and all of the `providers` of its `imports` are eagerly loaded and available to inject for the entire application.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-393dd65c-1d46-4050-a5c6-81fefb00871c.png"
  },
  "metadata": {
    "og:title": "Angular",
    "twitter:url": "https://angular.dev/",
    "title": "NgModules â€¢ Angular",
    "application-name": "Angular",
    "og:url": "https://angular.dev/",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "description": "The web development framework for building modern apps.",
    "apple-mobile-web-app-title": "Angular",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "language": "en",
    "viewport": "width=device-width, initial-scale=1",
    "twitter:description": "The web development framework for building modern apps.",
    "ogUrl": "https://angular.dev/",
    "og:type": "website",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:title": "Angular",
    "msapplication-TileColor": "#e90464",
    "twitter:card": "summary_large_image",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "theme-color": "#ffffff",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "ogDescription": "The web development framework for building modern apps.",
    "og:description": "The web development framework for building modern apps.",
    "scrapeId": "40376f53-c49f-4e30-912d-eab12e06002c",
    "sourceURL": "https://angular.dev/guide/ngmodules/overview",
    "url": "https://angular.dev/guide/ngmodules/overview",
    "statusCode": 200
  }
}