{
  "scrapeId": "d6deb98d-3cd2-460e-9f70-476d98fa9868",
  "sourceURL": "https://material.angular.io/components/timepicker/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for timepicker\n\n## API reference for Angular Material timepicker\n\n`\n          import {MatTimepickerModule} from '@angular/material/timepicker';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/timepicker/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/timepicker/api\\#MatTimepicker) `MatTimepicker`\n\nRenders out a listbox that can be used to select a time of day.\nIntended to be used together with `MatTimepickerInput`.\n\nSelector:mat-timepicker\n\nExported as:matTimepicker\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `activeDescendant: Signal<string | null>` | ID of the active descendant option. |\n| `ariaLabel: InputSignal<string | null>` | ARIA label for the timepicker panel. |\n| `ariaLabelledby: InputSignal<string | null>` | ID of the label element for the timepicker panel. |\n| `closed: OutputEmitterRef<void>` | Emits when the timepicker is closed. |\n| `disableRipple: InputSignalWithTransform<boolean, unknown>` | Whether ripples within the timepicker should be disabled. |\n| `disabled: Signal<boolean>` | Whether the timepicker is currently disabled. |\n| `interval: InputSignalWithTransform<number | null, number | string | null>` | Interval between each option in the timepicker. The value can either be an amount of<br>seconds (e.g. 90) or a number with a unit (e.g. 45m). Supported units are `s` for seconds,<br>`m` for minutes or `h` for hours. |\n| `isOpen: Signal<boolean>` | Whether the timepicker is open. |\n| `opened: OutputEmitterRef<void>` | Emits when the timepicker is opened. |\n| `options: InputSignal<readonly MatTimepickerOption<D>[] | null>` | Array of pre-defined options that the user can select from, as an alternative to using the<br>`interval` input. An error will be thrown if both `options` and `interval` are specified. |\n| `panelId: string` | Unique ID of the timepicker's panel |\n| `selected: OutputEmitterRef<MatTimepickerSelected<D>>` | Emits when the user selects a time. |\n\n##### Methods\n\n| close |\n| --- |\n| Closes the timepicker. |\n\n| open |\n| --- |\n| Opens the timepicker. |\n\n| registerInput |\n| --- |\n| Registers an input with the timepicker. |\n| Parameters |\n| --- |\n| input<br> `MatTimepickerInput<D>` |  |\n\n#### [link](https://material.angular.io/components/timepicker/api\\#MatTimepickerInput) `MatTimepickerInput`\n\nInput that can be used to enter time and connect to a `mat-timepicker`.\n\nSelector:input\\[matTimepicker\\]\n\nExported as:matTimepickerInput\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disabled: Signal<boolean>` | Whether the input is disabled. |\n| `max: InputSignalWithTransform<D | null, unknown>` | Maximum time that can be selected or typed in. Can be either<br>a date object (only time will be used) or a valid time string. |\n| `min: InputSignalWithTransform<D | null, unknown>` | Minimum time that can be selected or typed in. Can be either<br>a date object (only time will be used) or a valid time string. |\n| `timepicker: InputSignal<MatTimepicker<D>>` | Timepicker that the input is associated with. |\n| `value: ModelSignal<D | null>` | Current value of the input. |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the input. |\n\n| getOverlayOrigin |\n| --- |\n| Gets the element to which the timepicker popup should be attached. |\n| Returns |\n| --- |\n| `ElementRef<HTMLElement>` |  |\n\n#### [link](https://material.angular.io/components/timepicker/api\\#MatTimepickerToggle) `MatTimepickerToggle`\n\nButton that can be used to open a `mat-timepicker`.\n\nSelector:mat-timepicker-toggle\n\nExported as:matTimepickerToggle\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `ariaLabel: input<string | undefined>(undefined, {<br>    alias: 'aria-label',<br>})` | Screen-reader label for the button. |\n| `ariaLabelledby: input<string | undefined>(undefined, {<br>    alias: 'aria-labelledby',<br>})` | Screen-reader labelled by id for the button. |\n| `disableRipple: InputSignalWithTransform<boolean, unknown>` | Whether ripples on the toggle should be disabled. |\n| `disabled: InputSignalWithTransform<boolean, unknown>` | Whether the toggle button is disabled. |\n| `timepicker: InputSignal<MatTimepicker<D>>` | Timepicker instance that the button will toggle. |\n\n##### Methods\n\n| getAriaLabel |\n| --- |\n| Checks for ariaLabelledby and if empty uses custom<br>aria-label or defaultAriaLabel if neither is provided. |\n| Returns |\n| --- |\n| `string | null` |  |\n\n### [link](https://material.angular.io/components/timepicker/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/timepicker/api\\#MatTimepickerOption) `MatTimepickerOption`\n\nTime selection option that can be displayed within a `mat-timepicker`.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `label: string` | Label to show to the user. |\n| `value: D` | Date value of the option. |\n\n#### [link](https://material.angular.io/components/timepicker/api\\#MatTimepickerConfig) `MatTimepickerConfig`\n\nObject that can be used to configure the default options for the timepicker component.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disableRipple: boolean` | Whether ripples inside the timepicker should be disabled by default. |\n| `interval: string | number` | Default interval for all time pickers. |\n\n#### [link](https://material.angular.io/components/timepicker/api\\#MatTimepickerSelected) `MatTimepickerSelected`\n\nEvent emitted when a value is selected in the timepicker.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `source: MatTimepicker<D>` |  |\n| `value: D` |  |\n\n### [link](https://material.angular.io/components/timepicker/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/timepicker/api\\#MAT_TIMEPICKER_CONFIG) `MAT_TIMEPICKER_CONFIG`\n\nInjection token that can be used to configure the default options for the timepicker component.\n\n```docs-markdown-code\nconst MAT_TIMEPICKER_CONFIG: InjectionToken<MatTimepickerConfig>;\n\n```\n\n#### [link](https://material.angular.io/components/timepicker/api\\#MAT_TIMEPICKER_SCROLL_STRATEGY) `MAT_TIMEPICKER_SCROLL_STRATEGY`\n\nInjection token used to configure the behavior of the timepicker dropdown while scrolling.\n\n```docs-markdown-code\nconst MAT_TIMEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\n```\n\n## API reference for Angular Material timepicker-testing\n\n`\n          import {MatTimepickerHarness} from '@angular/material/timepicker/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/timepicker/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/timepicker/api\\#MatTimepickerHarness) `MatTimepickerHarness`extends [ComponentHarness](https://material.angular.io/components/timepicker/cdk/testing/api\\#ComponentHarness)\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `staticÂ hostSelector: 'mat-timepicker'` |  |\n\n##### Methods\n\n| async<br> <br>getOptions |\n| --- |\n| Gets the options inside the timepicker panel. |\n| Parameters |\n| --- |\n| filters?<br> `Omit<OptionHarnessFilters, \"ancestor\">` |  |\n| Returns |\n| --- |\n| `Promise<MatOptionHarness[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isOpen |\n| --- |\n| Whether the timepicker is open. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>selectOption |\n| --- |\n| Selects the first option matching the given filters. |\n| Parameters |\n| --- |\n| filters<br> `OptionHarnessFilters` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a timepicker with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `TimepickerHarnessFilters = {}` | Options for filtering which timepicker instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/timepicker/api\\#MatTimepickerInputHarness) `MatTimepickerInputHarness`extends [ComponentHarness](https://material.angular.io/components/timepicker/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard Material timepicker inputs in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `staticÂ hostSelector: '.mat-timepicker-input'` |  |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the input and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>closeTimepicker |\n| --- |\n| Closes the timepicker associated with the input. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the input and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getPlaceholder |\n| --- |\n| Gets the placeholder of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getTimepicker |\n| --- |\n| Gets the `MatTimepickerHarness` that is associated with the input. |\n| Parameters |\n| --- |\n| filter<br> `TimepickerHarnessFilters = {}` | Optionally filters which timepicker is included. |\n| Returns |\n| --- |\n| `Promise<MatTimepickerHarness>` |  |\n\n| async<br> <br>getValue |\n| --- |\n| Gets the value of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the input is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the input is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRequired |\n| --- |\n| Whether the input is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isTimepickerOpen |\n| --- |\n| Gets whether the timepicker associated with the input is open. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>openTimepicker |\n| --- |\n| Opens the timepicker associated with the input and returns the timepicker instance. |\n| Returns |\n| --- |\n| `Promise<MatTimepickerHarness>` |  |\n\n| async<br> <br>setValue |\n| --- |\n| Sets the value of the input. The value will be set by simulating<br>keypresses that correspond to the given value. |\n| Parameters |\n| --- |\n| newValue<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatTimepickerInputHarness`<br>that meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `TimepickerInputHarnessFilters = {}` | Options for filtering which input instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/timepicker/api\\#MatTimepickerToggleHarness) `MatTimepickerToggleHarness`extends [ComponentHarness](https://material.angular.io/components/timepicker/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard Material timepicker toggle in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `staticÂ hostSelector: '.mat-timepicker-toggle'` |  |\n\n##### Methods\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the toggle is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isTimepickerOpen |\n| --- |\n| Gets whether the timepicker associated with the toggle is open. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>openTimepicker |\n| --- |\n| Opens the timepicker associated with the toggle. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatTimepickerToggleHarness` that<br>meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `TimepickerToggleHarnessFilters = {}` | Options for filtering which timepicker toggle instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatTimepickerToggleHarness>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/timepicker/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/timepicker/api\\#TimepickerHarnessFilters) `TimepickerHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatTimepickerHarness` instances.\n\n#### [link](https://material.angular.io/components/timepicker/api\\#TimepickerInputHarnessFilters) `TimepickerInputHarnessFilters`\n\nA set of criteria that can be used to filter a list of timepicker input instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `placeholder: string | RegExp` | Filters based on the placeholder text of the input. |\n| `value: string | RegExp` | Filters based on the value of the input. |\n\n#### [link](https://material.angular.io/components/timepicker/api\\#TimepickerToggleHarnessFilters) `TimepickerToggleHarnessFilters`\n\nA set of criteria that can be used to filter a list of timepicker toggle instances.\n\nTimepicker\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-357d9e02-c285-4297-9697-b6bfbf72de20.png"
  },
  "metadata": {
    "ogTitle": "Angular Material",
    "viewport": "width=device-width, initial-scale=1",
    "mobile-web-app-capable": "yes",
    "og:image:type": "image/png",
    "twitter:site": "@Angular",
    "og:type": "website",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "ogUrl": "https://material.angular.io/",
    "twitter:title": "Angular Material",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "favicon": "https://material.angular.io/components/timepicker/assets/img/favicon.ico?v=19.1.0",
    "og:site_name": "Angular Material",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:title": "Angular Material",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "title": "Timepicker | Angular Material",
    "twitter:card": "summary",
    "og:url": "https://material.angular.io/",
    "apple-mobile-web-app-capable": "yes",
    "ogSiteName": "Angular Material",
    "twitter:creator": "@Angular",
    "ogLocale": "en_US",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "language": "en-US",
    "og:image:width": "1339",
    "theme-color": "#d7e3ff",
    "author": "Angular Components Team",
    "og:image:height": "943",
    "og:locale": "en_US",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "scrapeId": "d6deb98d-3cd2-460e-9f70-476d98fa9868",
    "sourceURL": "https://material.angular.io/components/timepicker/api",
    "url": "https://material.angular.io/components/timepicker/api",
    "statusCode": 200
  }
}