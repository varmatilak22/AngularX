{
  "scrapeId": "179f8adb-fd24-4c04-acbd-a0eaab23a6dc",
  "sourceURL": "https://material.angular.io/cdk/dialog/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\n## Overview for dialog\n\nThe `Dialog` service can be used to open unstyled modal dialogs and to build your own dialog\nservices.\n\n### [link](https://material.angular.io/cdk/dialog/overview\\#initial-setup)  Initial setup\n\nThe CDK dialogs depend on a small set of structural styles to work correctly. If you're using\nAngular Material, these styles have been included together with the theme, otherwise if you're\nusing the CDK on its own, you'll have to include the styles yourself. You can do so by importing\nthe prebuilt styles in your global stylesheet:\n\n```scss\n@import '@angular/cdk/overlay-prebuilt.css';\n\n```\n\nAlternatively, you can include the styles using the `cdk.overlay` mixin in your Sass file. You can import the mixin as follows:\n\n```scss\n@use '@angular/cdk' as cdk;\n\n@include cdk.overlay();\n\n```\n\nCDK Dialog Overview\n\nlinkcodeopen\\_in\\_new\n\n1. What's your name?\n2. Pick one\n\nYou can open a dialog by calling the `open` method either with a component or with a `TemplateRef`\nrepresenting the dialog content. The method additionally accepts an optional configuration object.\nThe `open` method returns a `DialogRef` instance:\n\n```ts\nconst dialogRef = dialog.open(UserProfileComponent, {\n  height: '400px',\n  width: '600px',\n  panelClass: 'my-dialog',\n});\n\n```\n\nThe `DialogRef` provides a reference to the opened dialog. You can use the `DialogRef` to close the\ndialog, subscribe to dialog events, and modify dialog state. All `Observable` instances on the\n`DialogRef` complete when the dialog closes.\n\n```ts\ndialogRef.closed.subscribe(result => {\n  console.log(`Dialog result: ${result}`); // Pizza!\n});\n\ndialogRef.close('Pizza!');\n\n```\n\nComponents created via `Dialog` can _inject_ `DialogRef` and use it to close the dialog\nin which they are contained. When closing, an optional result value can be provided. This result\nvalue is forwarded as the result of the `closed` Observable.\n\n```ts\n@Component({/* ... */})\nexport class YourDialog {\n  constructor(public dialogRef: DialogRef<string>) {}\n\n  closeDialog() {\n    this.dialogRef.close('Pizza!');\n  }\n}\n\n```\n\n### [link](https://material.angular.io/cdk/dialog/overview\\#dialog-styling)  Dialog styling\n\nThe `Dialog` service includes an intentionally limited set of structural styles. You can customize\nthe dialog's appearance using one of the following approaches.\n\n#### [link](https://material.angular.io/cdk/dialog/overview\\#panelclass-option) `panelClass` option\n\nThe `panelClass` property of `DialogConfig` allows you to apply one or more CSS classes to the\noverlay element that contains the custom dialog content. Any styles targeting these CSS classes\nmust be global styles.\n\n#### [link](https://material.angular.io/cdk/dialog/overview\\#styling-the-dialog-component)  Styling the dialog component\n\nYou can use the `styles` or `styleUrls` of a custom component to style the dialog content:\n\n```ts\n// MyDialog is rendered via `dialog.open(MyDialog)`\n@Component({\n  selector: 'my-dialog',\n  styles: [`\\\n    :host {\\\n      display: block;\\\n      background: #fff;\\\n      border-radius: 8px;\\\n      padding: 16px;\\\n    }\\\n  `]\n})\nclass MyDialog {}\n\n```\n\nCDK Dialog Styling\n\nlinkcodeopen\\_in\\_new\n\nOpen custom dialog\n\n#### [link](https://material.angular.io/cdk/dialog/overview\\#providing-a-custom-dialog-container)  Providing a custom dialog container\n\nIf you want more control over the dialog's behavior and styling, you can provide your own dialog\ncontainer component using the `container` option in `DialogConfig`. This approach requires more\ncode up-front, but it allows you to customize the DOM structure and behavior of the container\naround the dialog content. Custom container components can optionally extend `CdkDialogContainer`\nto inherit standard behaviors, such as accessible focus management.\n\n```ts\nimport {CdkDialogContainer} from '@angular/cdk/dialog';\n\n@Component({\n  selector: 'my-dialog-container',\n  styles: [`\\\n    :host {\\\n      display: block;\\\n      background: #fff;\\\n      border-radius: 8px;\\\n      padding: 16px;\\\n    }\\\n  `]\n})\nclass MyDialogContainer extends CdkDialogContainer {}\n\n```\n\n### [link](https://material.angular.io/cdk/dialog/overview\\#specifying-global-configuration-defaults)  Specifying global configuration defaults\n\nDefault dialog options can be specified by providing an instance of `DialogConfig` for\n`DEFAULT_DIALOG_CONFIG` in your application's root module.\n\n```ts\n@NgModule({\n  providers: [\\\n    {provide: DEFAULT_DIALOG_CONFIG, useValue: {hasBackdrop: false}}\\\n  ]\n})\n\n```\n\n### [link](https://material.angular.io/cdk/dialog/overview\\#sharing-data-with-the-dialog-component)  Sharing data with the Dialog component.\n\nYou can use the `data` option to pass information to the dialog component.\n\n```ts\nconst dialogRef = dialog.open(YourDialog, {\n  data: {name: 'frodo'},\n});\n\n```\n\nAccess the data in your dialog component with the `DIALOG_DATA` injection token:\n\n```ts\nimport {Component, Inject} from '@angular/core';\nimport {DIALOG_DATA} from '@angular/cdk/dialog';\n\n@Component({\n  selector: 'your-dialog',\n  template: 'passed in {{ data.name }}',\n})\nexport class YourDialog {\n  constructor(@Inject(DIALOG_DATA) public data: {name: string}) { }\n}\n\n```\n\nIf you're using a `TemplateRef` for your dialog content, the data is available in the template:\n\n```html\n<ng-template let-data>\n  Hello, {{data.name}}\n</ng-template>\n\n```\n\nIf you're using a `TemplateRef` and need to access the `DialogRef`, you can use the following:\n\n```html\n<ng-template let-data let-dialogRef=\"dialogRef\">\n    Hello, {{data.name}}\n</ng-template>\n\n```\n\nInjecting data when opening a dialog\n\nlinkcodeopen\\_in\\_new\n\nOpen dialog\n\n### [link](https://material.angular.io/cdk/dialog/overview\\#accessibility)  Accessibility\n\n`Dialog` creates modal dialogs that implement the ARIA `role=\"dialog\"` pattern by default.\nYou can change the dialog's role to `alertdialog` via the `DialogConfig`.\n\nYou should provide an accessible label to this root dialog element by setting the `ariaLabel` or\n`ariaLabelledBy` properties of `DialogConfig`. You can additionally specify a description element\nID via the `ariaDescribedBy` property of `DialogConfig`.\n\n#### [link](https://material.angular.io/cdk/dialog/overview\\#keyboard-interaction)  Keyboard interaction\n\nBy default, the escape key closes `Dialog`. While you can disable this behavior via the\n`disableClose` property of `DialogConfig`, doing this breaks the expected interaction pattern\nfor the ARIA `role=\"dialog\"` pattern.\n\n#### [link](https://material.angular.io/cdk/dialog/overview\\#focus-management)  Focus management\n\nWhen opened, `Dialog` traps browser focus such that it cannot escape the root\n`role=\"dialog\"` element. By default, the first tabbable element in the dialog receives focus.\nYou can customize which element receives focus with the `autoFocus` property of\n`DialogConfig`, which supports the following values.\n\n| Value | Behavior |\n| --- | --- |\n| `first-tabbable` | Focus the first tabbable element. This is the default setting. |\n| `first-header` | Focus the first header element ( `role=\"heading\"`, `h1` through `h6`) |\n| `dialog` | Focus the root `role=\"dialog\"` element. |\n| Any CSS selector | Focus the first element matching the given selector. |\n\nWhile the default setting applies the best behavior for most applications, special cases may benefit\nfrom these alternatives. Always test your application to verify the behavior that works best for\nyour users.\n\n#### [link](https://material.angular.io/cdk/dialog/overview\\#focus-restoration)  Focus restoration\n\nWhen closed, `Dialog` restores focus to the element that previously held focus when the\ndialog opened by default. You can customize the focus restoration behavior using the `restoreFocus`\nproperty of `DialogConfig`. It supports the following values.\n\n| Value type | Behavior |\n| --- | --- |\n| `boolean` | When `true`, focus will be restored to the previously-focused element, otherwise focus won't be restored at all. |\n| `string` | Value is treated as a CSS selector. Focus will be restored to the element matching the selector. |\n| `HTMLElement` | Specific element that focus should be restored to. |\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit CDK Dialog Overview example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit CDK Dialog Styling example in StackBlitz\n\nEdit Injecting data when opening a dialog example in StackBlitz",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-3997e2aa-43be-4148-84dd-fdc33aaa3491.png"
  },
  "metadata": {
    "ogSiteName": "Angular Material",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "ogTitle": "Angular Material",
    "apple-mobile-web-app-capable": "yes",
    "author": "Angular Components Team",
    "twitter:creator": "@Angular",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:type": "website",
    "ogUrl": "https://material.angular.io/",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image:height": "943",
    "theme-color": "#d7e3ff",
    "viewport": "width=device-width, initial-scale=1",
    "favicon": "https://material.angular.io/cdk/dialog/assets/img/favicon.ico?v=19.1.0",
    "twitter:card": "summary",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "ogLocale": "en_US",
    "og:url": "https://material.angular.io/",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:type": "image/png",
    "title": "Dialog | Angular Material",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "twitter:title": "Angular Material",
    "mobile-web-app-capable": "yes",
    "og:title": "Angular Material",
    "og:image:width": "1339",
    "og:site_name": "Angular Material",
    "og:locale": "en_US",
    "language": "en-US",
    "twitter:site": "@Angular",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "scrapeId": "179f8adb-fd24-4c04-acbd-a0eaab23a6dc",
    "sourceURL": "https://material.angular.io/cdk/dialog/overview",
    "url": "https://material.angular.io/cdk/dialog/overview",
    "statusCode": 200
  }
}