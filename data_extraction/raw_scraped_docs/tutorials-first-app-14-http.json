{
  "scrapeId": "457d9b8d-f001-4497-9314-c356cbe88541",
  "sourceURL": "https://angular.dev/tutorials/first-app/14-http",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nunfold\\_more\nYour first Angular appAdd HTTP communication\n\n[chevron\\_left](https://angular.dev/tutorials/first-app/13-search) chevron\\_right\n\nunfold\\_more\nYour first Angular appAdd HTTP communication\n\n[chevron\\_left](https://angular.dev/tutorials/first-app/13-search) chevron\\_right\n\nThis tutorial demonstrates how to integrate HTTP and an API into your app.\n\nUp until this point your app has read data from a static array in an Angular service. The next step is to use a JSON server that your app will communicate with over HTTP. The HTTP request will simulate the experience of working with data from a server.\n\nHTTP in Angular - Learning Angular (Part 8) - YouTube\n\nAngular\n\n159K subscribers\n\n[HTTP in Angular - Learning Angular (Part 8)](https://www.youtube.com/watch?v=5K10oYJ5Y-E)\n\nAngular\n\nSearch\n\nWatch later\n\nShare\n\nCopy link\n\nInfo\n\nShopping\n\nTap to unmute\n\nIf playback doesn't begin shortly, try restarting your device.\n\nYou're signed out\n\nVideos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.\n\nCancelConfirm\n\nMore videos\n\n## More videos\n\nShare\n\nInclude playlist\n\nAn error occurred while retrieving sharing information. Please try again later.\n\n[Watch on](https://www.youtube.com/watch?v=5K10oYJ5Y-E&embeds_referring_euri=https%3A%2F%2Fangular.dev%2F)\n\n0:00\n\n0:00 / 12:42\n•Live\n\n•\n\n[Watch on YouTube](https://www.youtube.com/watch?v=5K10oYJ5Y-E \"Watch on YouTube\")\n\n**IMPORTANT:** We recommend using your local environment for this step of the tutorial.\n\n## [What you'll learn](https://angular.dev/tutorials/first-app/14-http\\#what-youll-learn)\n\nYour app will use data from a JSON server\n\n1. ### [Configure the JSON server](https://angular.dev/tutorials/first-app/14-http\\#configure-the-json-server)\n\n\nJSON Server is an open source tool used to create mock REST APIs. You'll use it to serve the housing location data that is currently stored in the housing service.\n\n\n1. Install `json-server` from npm by using the following command.\n\n\n\n      ```\n            npm install -g json-server\n\n      ```\n\n      check\n\n2. In the root directory of your project, create a file called `db.json`. This is where you will store the data for the `json-server`.\n\n3. Open `db.json` and copy the following code into the file\n\n\n\n      ```\n            {         \"locations\": [             {                 \"id\": 0,                 \"name\": \"Acme Fresh Start Housing\",                 \"city\": \"Chicago\",                 \"state\": \"IL\",                 \"photo\": \"https://angular.dev/assets/images/tutorials/common/bernard-hermant-CLKGGwIBTaY-unsplash.jpg\",                 \"availableUnits\": 4,                 \"wifi\": true,                 \"laundry\": true             },             {                 \"id\": 1,                 \"name\": \"A113 Transitional Housing\",                 \"city\": \"Santa Monica\",                 \"state\": \"CA\",                 \"photo\": \"https://angular.dev/assets/images/tutorials/common/brandon-griggs-wR11KBaB86U-unsplash.jpg\",                 \"availableUnits\": 0,                 \"wifi\": false,                 \"laundry\": true             },             {                 \"id\": 2,                 \"name\": \"Warm Beds Housing Support\",                 \"city\": \"Juneau\",                 \"state\": \"AK\",                 \"photo\": \"https://angular.dev/assets/images/tutorials/common/i-do-nothing-but-love-lAyXdl1-Wmc-unsplash.jpg\",                 \"availableUnits\": 1,                 \"wifi\": false,                 \"laundry\": false             },             {                 \"id\": 3,                 \"name\": \"Homesteady Housing\",                 \"city\": \"Chicago\",                 \"state\": \"IL\",                 \"photo\": \"https://angular.dev/assets/images/tutorials/common/ian-macdonald-W8z6aiwfi1E-unsplash.jpg\",                 \"availableUnits\": 1,                 \"wifi\": true,                 \"laundry\": false             },             {                 \"id\": 4,                 \"name\": \"Happy Homes Group\",                 \"city\": \"Gary\",                 \"state\": \"IN\",                 \"photo\": \"https://angular.dev/assets/images/tutorials/common/krzysztof-hepner-978RAXoXnH4-unsplash.jpg\",                 \"availableUnits\": 1,                 \"wifi\": true,                 \"laundry\": false             },             {                 \"id\": 5,                 \"name\": \"Hopeful Apartment Group\",                 \"city\": \"Oakland\",                 \"state\": \"CA\",                 \"photo\": \"https://angular.dev/assets/images/tutorials/common/r-architecture-JvQ0Q5IkeMM-unsplash.jpg\",                 \"availableUnits\": 2,                 \"wifi\": true,                 \"laundry\": true             },             {                 \"id\": 6,                 \"name\": \"Seriously Safe Towns\",                 \"city\": \"Oakland\",                 \"state\": \"CA\",                 \"photo\": \"https://angular.dev/assets/images/tutorials/common/phil-hearing-IYfp2Ixe9nM-unsplash.jpg\",                 \"availableUnits\": 5,                 \"wifi\": true,                 \"laundry\": true             },             {                 \"id\": 7,                 \"name\": \"Hopeful Housing Solutions\",                 \"city\": \"Oakland\",                 \"state\": \"CA\",                 \"photo\": \"https://angular.dev/assets/images/tutorials/common/r-architecture-GGupkreKwxA-unsplash.jpg\",                 \"availableUnits\": 2,                 \"wifi\": true,                 \"laundry\": true             },             {                 \"id\": 8,                 \"name\": \"Seriously Safe Towns\",                 \"city\": \"Oakland\",                 \"state\": \"CA\",                 \"photo\": \"https://angular.dev/assets/images/tutorials/common/saru-robert-9rP3mxf8qWI-unsplash.jpg\",                 \"availableUnits\": 10,                 \"wifi\": false,                 \"laundry\": false             },             {                 \"id\": 9,                 \"name\": \"Capital Safe Towns\",                 \"city\": \"Portland\",                 \"state\": \"OR\",                 \"photo\": \"https://angular.dev/assets/images/tutorials/common/webaliser-_TPTXZd9mOo-unsplash.jpg\",                 \"availableUnits\": 6,                 \"wifi\": true,                 \"laundry\": true             }         ]     }\n\n      ```\n\n      check\n\n4. Save this file.\n\n5. Time to test your configuration. From the command line, at the root of your project run the following commands.\n\n\n\n      ```\n            json-server --watch db.json\n\n      ```\n\n      check\n\n6. In your web browser, navigate to the `http://localhost:3000/locations` and confirm that the response includes the data stored in `db.json`.\n\n\nIf you have any trouble with your configuration, you can find more details in the [official documentation](https://www.npmjs.com/package/json-server).\n\n2. ### [Update service to use web server instead of local array](https://angular.dev/tutorials/first-app/14-http\\#update-service-to-use-web-server-instead-of-local-array)\n\n\nThe data source has been configured, the next step is to update your web app to connect to it use the data.\n1. In `src/app/housing.service.ts`, make the following changes:\n\n      1. Update the code to remove `housingLocationList` property and the array containing the data.\n\n      2. Add a string property called `url` and set its value to `'http://localhost:3000/locations'`\n\n\n\n         ```\n               url = 'http://localhost:3000/locations';\n\n         ```\n\n         check\n\n          This code will result in errors in the rest of the file because it depends on the `housingLocationList` property. We're going to update the service methods next.\n\n      3. Update the `getAllHousingLocations` function to make a call to the web server you configured.\n\n\n\n\n         check\n\n         ```\n               import {Injectable} from '@angular/core';import {HousingLocation} from './housinglocation';@Injectable({  providedIn: 'root',})export class HousingService {  url = 'http://localhost:3000/locations';  async getAllHousingLocations(): Promise<HousingLocation[]> {    const data = await fetch(this.url);    return (await data.json()) ?? [];  }  async getHousingLocationById(id: number): Promise<HousingLocation | undefined> {    const data = await fetch(`${this.url}?id=${id}`);    const locationJson = await data.json();    return locationJson[0] ?? {};  }  submitApplication(firstName: string, lastName: string, email: string) {    // tslint:disable-next-line    console.log(firstName, lastName, email);  }}\n\n         ```\n\n\n\n\n\n\n          The code now uses asynchronous code to make a **GET** request over HTTP.\n\n          HELPFUL: For this example, the code uses `fetch`. For more advanced use cases consider using `HttpClient` provided by Angular.\n\n      4. Update the `getHousingLocationsById` function to make a call to the web server you configured.\n\n\n\n         **HELPFUL:** Notice the `fetch` method has been updated to _query_ the data for location with a matching `id` property value. See [URL Search Parameter](https://developer.mozilla.org/en-US/docs/Web/API/URL/search) for more information.\n\n\n\n\n\n\n         check\n\n         ```\n               import {Injectable} from '@angular/core';import {HousingLocation} from './housinglocation';@Injectable({  providedIn: 'root',})export class HousingService {  url = 'http://localhost:3000/locations';  async getAllHousingLocations(): Promise<HousingLocation[]> {    const data = await fetch(this.url);    return (await data.json()) ?? [];  }  async getHousingLocationById(id: number): Promise<HousingLocation | undefined> {    const data = await fetch(`${this.url}?id=${id}`);    const locationJson = await data.json();    return locationJson[0] ?? {};  }  submitApplication(firstName: string, lastName: string, email: string) {    // tslint:disable-next-line    console.log(firstName, lastName, email);  }}\n\n         ```\n\n      5. Once all the updates are complete, your updated service should match the following code.\n\n\n\n\n         check\n\n         ```\n               import {Injectable} from '@angular/core';import {HousingLocation} from './housinglocation';@Injectable({  providedIn: 'root',})export class HousingService {  url = 'http://localhost:3000/locations';  async getAllHousingLocations(): Promise<HousingLocation[]> {    const data = await fetch(this.url);    return (await data.json()) ?? [];  }  async getHousingLocationById(id: number): Promise<HousingLocation | undefined> {    const data = await fetch(`${this.url}?id=${id}`);    const locationJson = await data.json();    return locationJson[0] ?? {};  }  submitApplication(firstName: string, lastName: string, email: string) {    // tslint:disable-next-line    console.log(firstName, lastName, email);  }}\n\n         ```\n3. ### [Update the components to use asynchronous calls to the housing service](https://angular.dev/tutorials/first-app/14-http\\#update-the-components-to-use-asynchronous-calls-to-the-housing-service)\n\n\nThe server is now reading data from the HTTP request but the components that rely on the service now have errors because they were programmed to use the synchronous version of the service.\n1. In `src/app/home/home.component.ts`, update the `constructor` to use the new asynchronous version of the `getAllHousingLocations` method.\n\n\n\n\n      check\n\n      ```\n            import {Component, inject} from '@angular/core';import {CommonModule} from '@angular/common';import {HousingLocationComponent} from '../housing-location/housing-location.component';import {HousingLocation} from '../housinglocation';import {HousingService} from '../housing.service';@Component({  selector: 'app-home',  imports: [CommonModule, HousingLocationComponent],  template: `    <section>      <form>        <input type=\"text\" placeholder=\"Filter by city\" #filter />        <button class=\"primary\" type=\"button\" (click)=\"filterResults(filter.value)\">Search</button>      </form>    </section>    <section class=\"results\">      <app-housing-location        *ngFor=\"let housingLocation of filteredLocationList\"        [housingLocation]=\"housingLocation\"      ></app-housing-location>    </section>  `,  styleUrls: ['./home.component.css'],})export class HomeComponent {  housingLocationList: HousingLocation[] = [];  housingService: HousingService = inject(HousingService);  filteredLocationList: HousingLocation[] = [];  constructor() {    this.housingService.getAllHousingLocations().then((housingLocationList: HousingLocation[]) => {      this.housingLocationList = housingLocationList;      this.filteredLocationList = housingLocationList;    });  }  filterResults(text: string) {    if (!text) {      this.filteredLocationList = this.housingLocationList;      return;    }    this.filteredLocationList = this.housingLocationList.filter((housingLocation) =>      housingLocation?.city.toLowerCase().includes(text.toLowerCase()),    );  }}\n\n      ```\n\n2. In `src/app/details/details.component.ts`, update the `constructor` to use the new asynchronous version of the `getHousingLocationById` method.\n\n\n\n\n      check\n\n      ```\n            import {Component, inject} from '@angular/core';import {CommonModule} from '@angular/common';import {ActivatedRoute} from '@angular/router';import {HousingService} from '../housing.service';import {HousingLocation} from '../housinglocation';import {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';@Component({  selector: 'app-details',  imports: [CommonModule, ReactiveFormsModule],  template: `    <article>      <img        class=\"listing-photo\"        [src]=\"housingLocation?.photo\"        alt=\"Exterior photo of {{ housingLocation?.name }}\"        crossorigin      />      <section class=\"listing-description\">        <h2 class=\"listing-heading\">{{ housingLocation?.name }}</h2>        <p class=\"listing-location\">{{ housingLocation?.city }}, {{ housingLocation?.state }}</p>      </section>      <section class=\"listing-features\">        <h2 class=\"section-heading\">About this housing location</h2>        <ul>          <li>Units available: {{ housingLocation?.availableUnits }}</li>          <li>Does this location have wifi: {{ housingLocation?.wifi }}</li>          <li>Does this location have laundry: {{ housingLocation?.laundry }}</li>        </ul>      </section>      <section class=\"listing-apply\">        <h2 class=\"section-heading\">Apply now to live here</h2>        <form [formGroup]=\"applyForm\" (submit)=\"submitApplication()\">          <label for=\"first-name\">First Name</label>          <input id=\"first-name\" type=\"text\" formControlName=\"firstName\" />          <label for=\"last-name\">Last Name</label>          <input id=\"last-name\" type=\"text\" formControlName=\"lastName\" />          <label for=\"email\">Email</label>          <input id=\"email\" type=\"email\" formControlName=\"email\" />          <button type=\"submit\" class=\"primary\">Apply now</button>        </form>      </section>    </article>  `,  styleUrls: ['./details.component.css'],})export class DetailsComponent {  route: ActivatedRoute = inject(ActivatedRoute);  housingService = inject(HousingService);  housingLocation: HousingLocation | undefined;  applyForm = new FormGroup({    firstName: new FormControl(''),    lastName: new FormControl(''),    email: new FormControl(''),  });  constructor() {    const housingLocationId = parseInt(this.route.snapshot.params['id'], 10);    this.housingService.getHousingLocationById(housingLocationId).then((housingLocation) => {      this.housingLocation = housingLocation;    });  }  submitApplication() {    this.housingService.submitApplication(      this.applyForm.value.firstName ?? '',      this.applyForm.value.lastName ?? '',      this.applyForm.value.email ?? '',    );  }}\n\n      ```\n\n3. Save your code.\n\n4. Open the application in the browser and confirm that it runs without any errors.\n\n**NOTE:** This lesson relies on the `fetch` browser API. For the support of interceptors, please refer to the [Http Client documentation](https://angular.dev/guide/http)\n\n**SUMMARY:** In this lesson, you updated your app to use a local web server ( `json-server`), and use asynchronous service methods to retrieve data.\n\nCongratulations! You've successfully completed this tutorial and are ready to continue your journey with building even more complex Angular Apps.\n\nIf you would like to learn more, please consider completing some of Angular's other developer [tutorials](https://angular.dev/tutorials) and [guides](https://angular.dev/overview).",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-c0385987-2bf3-40f5-8f96-12a7e2d3092c.png"
  },
  "metadata": {
    "twitter:card": "summary_large_image",
    "ogDescription": "The web development framework for building modern apps.",
    "ogUrl": "https://angular.dev/",
    "application-name": "Angular",
    "og:url": "https://angular.dev/",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "og:type": "website",
    "msapplication-TileColor": "#e90464",
    "language": "en",
    "viewport": [
      "width=device-width, initial-scale=1",
      "width=device-width, initial-scale=1"
    ],
    "twitter:title": "Angular",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "twitter:url": "https://angular.dev/",
    "description": "The web development framework for building modern apps.",
    "ogTitle": "Angular",
    "og:description": "The web development framework for building modern apps.",
    "og:title": "Angular",
    "apple-mobile-web-app-title": "Angular",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "theme-color": "#ffffff",
    "twitter:description": "The web development framework for building modern apps.",
    "title": "Add HTTP communication • Angular",
    "scrapeId": "457d9b8d-f001-4497-9314-c356cbe88541",
    "sourceURL": "https://angular.dev/tutorials/first-app/14-http",
    "url": "https://angular.dev/tutorials/first-app/14-http",
    "statusCode": 200
  }
}