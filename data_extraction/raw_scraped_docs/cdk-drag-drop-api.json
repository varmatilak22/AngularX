{
  "scrapeId": "b93c7e7e-f946-488c-abcd-afd5f7b5a5e6",
  "sourceURL": "https://material.angular.io/cdk/drag-drop/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\nAPI for drag-drop\n\n## API reference for Angular CDK drag-drop\n\n`\n          import {DragDropModule} from '@angular/cdk/drag-drop';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/cdk/drag-drop/api\\#services)  Services\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#DragDrop) `DragDrop`\n\nService that allows for drag-and-drop functionality to be attached to DOM elements.\n\n##### Methods\n\n| createDrag |\n| --- |\n| Turns an element into a draggable item. |\n| Parameters |\n| --- |\n| element<br> `HTMLElement | ElementRef<HTMLElement>` | Element to which to attach the dragging functionality. |\n| config<br> `DragRefConfig = DEFAULT_CONFIG` | Object used to configure the dragging behavior. |\n| Returns |\n| --- |\n| `DragRef<T>` |  |\n\n| createDropList |\n| --- |\n| Turns an element into a drop list. |\n| Parameters |\n| --- |\n| element<br> `HTMLElement | ElementRef<HTMLElement>` | Element to which to attach the drop list functionality. |\n| Returns |\n| --- |\n| `DropListRef<T>` |  |\n\n### [link](https://material.angular.io/cdk/drag-drop/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDropList) `CdkDropList`\n\nContainer that wraps a set of draggable items.\n\nSelector:\\[cdkDropList\\]cdk-drop-list\n\nExported as:cdkDropList\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute })<br> <br>`autoScrollDisabled: boolean` | Whether to auto-scroll the view when the user moves their pointer close to the edges. |\n| @Input('cdkDropListAutoScrollStep')<br> <br>`autoScrollStep: NumberInput` | Number of pixels to scroll for each frame when auto-scrolling an element. |\n| @Input('cdkDropListConnectedTo')<br> <br>`connectedTo: (CdkDropList | string)[] | CdkDropList | string` | Other draggable containers that this container is connected to and into which the<br>container's items can be transferred. Can either be references to other drop containers,<br>or their unique IDs. |\n| @Input('cdkDropListData')<br> <br>`data: T` | Arbitrary data to attach to this container. |\n| @Input({ alias: 'cdkDropListDisabled', transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether starting a dragging sequence from this container is disabled. |\n| @Input('cdkDropListElementContainer')<br> <br>`elementContainerSelector: string | null` | Selector that will be used to resolve an alternate element container for the drop list.<br>Passing an alternate container is useful for the cases where one might not have control<br>over the parent node of the draggable items within the list (e.g. due to content projection).<br>This allows for usages like:<br>```<br><div cdkDropList cdkDropListElementContainer=\".inner\"><br>  <div class=\"inner\"><br>    <div cdkDrag></div><br>  </div><br></div><br>``` |\n| @Input('cdkDropListEnterPredicate')<br> <br>`enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean` | Function that is used to determine whether an item<br>is allowed to be moved into a drop container. |\n| @Input()<br>`id: string` | Unique ID for the drop zone. Can be used as a reference<br>in the `connectedTo` of another `CdkDropList`. |\n| @Input('cdkDropListLockAxis')<br> <br>`lockAxis: DragAxis` | Locks the position of the draggable elements inside the container along the specified axis. |\n| @Input('cdkDropListOrientation')<br> <br>`orientation: DropListOrientation` | Direction in which the list is oriented. |\n| @Input('cdkDropListSortPredicate')<br> <br>`sortPredicate: (index: number, drag: CdkDrag, drop: CdkDropList) => boolean` | Functions that is used to determine whether an item can be sorted into a particular index. |\n| @Input({ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute })<br> <br>`sortingDisabled: boolean` | Whether sorting within this drop list is disabled. |\n| @Output('cdkDropListDropped')<br> <br>`dropped: EventEmitter<CdkDragDrop<T, any>>` | Emits when the user drops an item inside the container. |\n| @Output('cdkDropListEntered')<br> <br>`entered: EventEmitter<CdkDragEnter<T>>` | Emits when the user has moved a new drag item into this container. |\n| @Output('cdkDropListExited')<br> <br>`exited: EventEmitter<CdkDragExit<T>>` | Emits when the user removes an item from the container<br>by dragging it into another container. |\n| @Output('cdkDropListSorted')<br> <br>`sorted: EventEmitter<CdkDragSortEvent<T>>` | Emits as the user is swapping items while actively dragging. |\n| `element: inject<ElementRef<HTMLElement>>(ElementRef)` |  |\n\n##### Methods\n\n| addItem |\n| --- |\n| Registers an items with the drop list. |\n| Parameters |\n| --- |\n| item<br> `CdkDrag<any>` |  |\n\n| getSortedItems |\n| --- |\n| Gets the registered items in the list, sorted by their position in the DOM. |\n| Returns |\n| --- |\n| `CdkDrag[]` |  |\n\n| removeItem |\n| --- |\n| Removes an item from the drop list. |\n| Parameters |\n| --- |\n| item<br> `CdkDrag<any>` |  |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDropListGroup) `CdkDropListGroup`\n\nDeclaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\nelements that are placed inside a `cdkDropListGroup` will be connected to each other\nautomatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\nfrom `cdkDropList`.\n\nSelector:\\[cdkDropListGroup\\]\n\nExported as:cdkDropListGroup\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether starting a dragging sequence from inside this group is disabled. |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDrag) `CdkDrag`\n\nElement that can be moved inside a CdkDropList container.\n\nSelector:\\[cdkDrag\\]\n\nExported as:cdkDrag\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('cdkDragBoundary')<br> <br>`boundaryElement: string | ElementRef<HTMLElement> | HTMLElement` | Node or selector that will be used to determine the element to which the draggable's<br>position will be constrained. If a string is passed in, it'll be used as a selector that<br>will be matched starting from the element's parent and going up the DOM until a match<br>has been found. |\n| @Input('cdkDragConstrainPosition')<br> <br>`constrainPosition: (userPointerPosition: Point, dragRef: DragRef, dimensions: DOMRect, pickupPositionInElement: Point) => Point` | Function that can be used to customize the logic of how the position of the drag item<br>is limited while it's being dragged. Gets called with a point containing the current position<br>of the user's pointer on the page, a reference to the item being dragged and its dimensions.<br>Should return a point describing where the item should be rendered. |\n| @Input('cdkDragData')<br> <br>`data: T` | Arbitrary data to attach to this drag instance. |\n| @Input({ alias: 'cdkDragDisabled', transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether starting to drag this element is disabled. |\n| @Input('cdkDragStartDelay')<br> <br>`dragStartDelay: DragStartDelay` | Amount of milliseconds to wait after the user has put their<br>pointer down before starting to drag the element. |\n| @Input('cdkDragFreeDragPosition')<br> <br>`freeDragPosition: Point` | Sets the position of a `CdkDrag` that is outside of a drop container.<br>Can be used to restore the element's position for a returning user. |\n| @Input('cdkDragLockAxis')<br> <br>`lockAxis: DragAxis` | Locks the position of the dragged element along the specified axis. |\n| @Input('cdkDragPreviewClass')<br> <br>`previewClass: string | string[]` | Class to be added to the preview element. |\n| @Input('cdkDragPreviewContainer')<br> <br>`previewContainer: PreviewContainer` | Configures the place into which the preview of the item will be inserted. Can be configured<br>globally through `CDK_DROP_LIST`. Possible values:<br>- `global` \\- Preview will be inserted at the bottom of the `<body>`. The advantage is that<br>  you don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain<br>  its inherited styles.<br>- `parent` \\- Preview will be inserted into the parent of the drag item. The advantage is that<br>  inherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be<br>  visible due to `z-index`. Furthermore, the preview is going to have an effect over selectors<br>  like `:nth-child` and some flexbox configurations.<br>- `ElementRef<HTMLElement> | HTMLElement` \\- Preview will be inserted into a specific element.<br>  Same advantages and disadvantages as `parent`. |\n| @Input('cdkDragRootElement')<br> <br>`rootElementSelector: string` | Selector that will be used to determine the root draggable element, starting from<br>the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful<br>when trying to enable dragging on an element that you might not have access to. |\n| @Input({ alias: 'cdkDragScale', transform: numberAttribute })<br> <br>`scale: number` | If the parent of the dragged element has a `scale` transform, it can throw off the<br>positioning when the user starts dragging. Use this input to notify the CDK of the scale. |\n| @Output('cdkDragDropped')<br> <br>`dropped: EventEmitter<CdkDragDrop<any>>` | Emits when the user drops the item inside a container. |\n| @Output('cdkDragEnded')<br> <br>`ended: EventEmitter<CdkDragEnd>` | Emits when the user stops dragging an item in the container. |\n| @Output('cdkDragEntered')<br> <br>`entered: EventEmitter<CdkDragEnter<any>>` | Emits when the user has moved the item into a new container. |\n| @Output('cdkDragExited')<br> <br>`exited: EventEmitter<CdkDragExit<any>>` | Emits when the user removes the item its container by dragging it into another container. |\n| @Output('cdkDragMoved')<br> <br>`moved: Observable<CdkDragMove<T>>` | Emits as the user is dragging the item. Use with caution,<br>because this event will fire for every pixel that the user has dragged. |\n| @Output('cdkDragReleased')<br> <br>`released: EventEmitter<CdkDragRelease>` | Emits when the user has released a drag item, before any animations have started. |\n| @Output('cdkDragStarted')<br> <br>`started: EventEmitter<CdkDragStart>` | Emits when the user starts dragging the item. |\n| `dropContainer: inject<CdkDropList>(CDK_DROP_LIST, { optional: true, skipSelf: true })!` |  |\n| `element: inject<ElementRef<HTMLElement>>(ElementRef)` |  |\n\n##### Methods\n\n| getFreeDragPosition |\n| --- |\n| Gets the pixel coordinates of the draggable outside of a drop container. |\n| Returns |\n| --- |\n| `Readonly<Point>` |  |\n\n| getPlaceholderElement |\n| --- |\n| Returns the element that is being used as a placeholder<br>while the current element is being dragged. |\n| Returns |\n| --- |\n| `HTMLElement` |  |\n\n| getRootElement |\n| --- |\n| Returns the root draggable element. |\n| Returns |\n| --- |\n| `HTMLElement` |  |\n\n| reset |\n| --- |\n| Resets a standalone drag item to its initial position. |\n\n| setFreeDragPosition |\n| --- |\n| Sets the current position in pixels the draggable outside of a drop container. |\n| Parameters |\n| --- |\n| value<br> `Point` | New position to be set. |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDragHandle) `CdkDragHandle`\n\nHandle that can be used to drag a CdkDrag instance.\n\nSelector:\\[cdkDragHandle\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ alias: 'cdkDragHandleDisabled', transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether starting to drag through this handle is disabled. |\n| `element: inject<ElementRef<HTMLElement>>(ElementRef)` |  |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDragPreview) `CdkDragPreview`\n\nElement that will be used as a template for the preview\nof a CdkDrag when it is being dragged.\n\nSelector:ng-template\\[cdkDragPreview\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`data: T` | Context data to be added to the preview template instance. |\n| @Input({ transform: booleanAttribute })<br> <br>`matchSize: boolean` | Whether the preview should preserve the same size as the item that is being dragged. |\n| `templateRef: inject<TemplateRef<T>>(TemplateRef)` |  |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDragPlaceholder) `CdkDragPlaceholder`\n\nElement that will be used as a template for the placeholder of a CdkDrag when\nit is being dragged. The placeholder is displayed in place of the element being dragged.\n\nSelector:ng-template\\[cdkDragPlaceholder\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`data: T` | Context data to be added to the placeholder template instance. |\n| `templateRef: inject<TemplateRef<T>>(TemplateRef)` |  |\n\n### [link](https://material.angular.io/cdk/drag-drop/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#DragRef) `DragRef`\n\nReference to a draggable item. Used to manipulate or dispose of the item.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `beforeStarted: Subject<void>` | Emits as the drag sequence is being prepared. |\n| `constrainPosition: (userPointerPosition: Point, dragRef: DragRef, dimensions: DOMRect, pickupPositionInElement: Point) => Point` | Function that can be used to customize the logic of how the position of the drag item<br>is limited while it's being dragged. Gets called with a point containing the current position<br>of the user's pointer on the page, a reference to the item being dragged and its dimensions.<br>Should return a point describing where the item should be rendered. |\n| `data: T` | Arbitrary data that can be attached to the drag item. |\n| `disabled: boolean` | Whether starting to drag this element is disabled. |\n| `dragStartDelay: number | {<br>    touch: number;<br>    mouse: number;<br>}` | Amount of milliseconds to wait after the user has put their<br>pointer down before starting to drag the element. |\n| `dropped: Subject<{<br>    previousIndex: number;<br>    currentIndex: number;<br>    item: DragRef;<br>    container: DropListRef;<br>    previousContainer: DropListRef;<br>    distance: Point;<br>    dropPoint: Point;<br>    isPointerOverContainer: boolean;<br>    event: MouseEvent | TouchEvent;<br>}>` | Emits when the user drops the item inside a container. |\n| `ended: Subject<{<br>    source: DragRef;<br>    distance: Point;<br>    dropPoint: Point;<br>    event: MouseEvent | TouchEvent;<br>}>` | Emits when the user stops dragging an item in the container. |\n| `entered: Subject<{<br>    container: DropListRef;<br>    item: DragRef;<br>    currentIndex: number;<br>}>` | Emits when the user has moved the item into a new container. |\n| `exited: Subject<{<br>    container: DropListRef;<br>    item: DragRef;<br>}>` | Emits when the user removes the item its container by dragging it into another container. |\n| `lockAxis: 'x' | 'y'` | Axis along which dragging is locked. |\n| `moved: Observable<{<br>    source: DragRef;<br>    pointerPosition: {<br>        x: number;<br>        y: number;<br>    };<br>    event: MouseEvent | TouchEvent;<br>    distance: Point;<br>    delta: {<br>        x: -1 | 0 | 1;<br>        y: -1 | 0 | 1;<br>    };<br>}>` | Emits as the user is dragging the item. Use with caution,<br>because this event will fire for every pixel that the user has dragged. |\n| `previewClass: string | string[] | undefined` | Class to be added to the preview element. |\n| `released: Subject<{<br>    source: DragRef;<br>    event: MouseEvent | TouchEvent;<br>}>` | Emits when the user has released a drag item, before any animations have started. |\n| `scale: number` | If the parent of the dragged element has a `scale` transform, it can throw off the<br>positioning when the user starts dragging. Use this input to notify the CDK of the scale. |\n| `started: Subject<{<br>    source: DragRef;<br>    event: MouseEvent | TouchEvent;<br>}>` | Emits when the user starts dragging the item. |\n\n##### Methods\n\n| disableHandle |\n| --- |\n| Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging. |\n| Parameters |\n| --- |\n| handle<br> `HTMLElement` | Handle element that should be disabled. |\n\n| dispose |\n| --- |\n| Removes the dragging functionality from the DOM element. |\n\n| enableHandle |\n| --- |\n| Enables a handle, if it has been disabled. |\n| Parameters |\n| --- |\n| handle<br> `HTMLElement` | Handle element to be enabled. |\n\n| getFreeDragPosition |\n| --- |\n| Gets the current position in pixels the draggable outside of a drop container. |\n| Returns |\n| --- |\n| `Readonly<Point>` |  |\n\n| getPlaceholderElement |\n| --- |\n| Returns the element that is being used as a placeholder<br>while the current element is being dragged. |\n| Returns |\n| --- |\n| `HTMLElement` |  |\n\n| getRootElement |\n| --- |\n| Returns the root draggable element. |\n| Returns |\n| --- |\n| `HTMLElement` |  |\n\n| getVisibleElement |\n| --- |\n| Gets the currently-visible element that represents the drag item.<br>While dragging this is the placeholder, otherwise it's the root element. |\n| Returns |\n| --- |\n| `HTMLElement` |  |\n\n| isDragging |\n| --- |\n| Checks whether the element is currently being dragged. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| reset |\n| --- |\n| Resets a standalone drag item to its initial position. |\n\n| setFreeDragPosition |\n| --- |\n| Sets the current position in pixels the draggable outside of a drop container. |\n| Parameters |\n| --- |\n| value<br> `Point` | New position to be set. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withBoundaryElement |\n| --- |\n| Element to which the draggable's position will be constrained. |\n| Parameters |\n| --- |\n| boundaryElement<br> `HTMLElement | ElementRef<HTMLElement>` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| withDirection |\n| --- |\n| Sets the layout direction of the draggable item. |\n| Parameters |\n| --- |\n| direction<br> `Direction` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| withHandles |\n| --- |\n| Registers the handles that can be used to drag the element. |\n| Parameters |\n| --- |\n| handles<br> `(HTMLElement | ElementRef<HTMLElement>)[]` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| withParent |\n| --- |\n| Sets the parent ref that the ref is nested in. |\n| Parameters |\n| --- |\n| parent<br> `DragRef<unknown>` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| withPlaceholderTemplate |\n| --- |\n| Registers the template that should be used for the drag placeholder. |\n| Parameters |\n| --- |\n| template<br> `DragHelperTemplate<any>` | Template that from which to stamp out the placeholder. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withPreviewContainer |\n| --- |\n| Sets the container into which to insert the preview element. |\n| Parameters |\n| --- |\n| value<br> `PreviewContainer` | Container into which to insert the preview. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withPreviewTemplate |\n| --- |\n| Registers the template that should be used for the drag preview. |\n| Parameters |\n| --- |\n| template<br> `DragPreviewTemplate<any>` | Template that from which to stamp out the preview. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withRootElement |\n| --- |\n| Sets an alternate drag root element. The root element is the element that will be moved as<br>the user is dragging. Passing an alternate root element is useful when trying to enable<br>dragging on an element that you might not have access to. |\n| Parameters |\n| --- |\n| rootElement<br> `HTMLElement | ElementRef<HTMLElement>` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#DropListRef) `DropListRef`\n\nReference to a drop list. Used to manipulate or dispose of the container.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `autoScrollDisabled: boolean` | Whether auto-scrolling the view when the user<br>moves their pointer close to the edges is disabled. |\n| `autoScrollStep: number` | Number of pixels to scroll for each frame when auto-scrolling an element. |\n| `beforeStarted: Subject<void>` | Emits right before dragging has started. |\n| `data: T` | Arbitrary data that can be attached to the drop list. |\n| `disabled: boolean` | Whether starting a dragging sequence from this container is disabled. |\n| `dropped: Subject<{<br>    item: DragRef;<br>    currentIndex: number;<br>    previousIndex: number;<br>    container: DropListRef;<br>    previousContainer: DropListRef;<br>    isPointerOverContainer: boolean;<br>    distance: Point;<br>    dropPoint: Point;<br>    event: MouseEvent | TouchEvent;<br>}>` | Emits when the user drops an item inside the container. |\n| `element: HTMLElement | ElementRef<HTMLElement>` | Element that the drop list is attached to. |\n| `enterPredicate: (drag: DragRef, drop: DropListRef) => boolean` | Function that is used to determine whether an item<br>is allowed to be moved into a drop container. |\n| `entered: Subject<{<br>    item: DragRef;<br>    container: DropListRef;<br>    currentIndex: number;<br>}>` | Emits when the user has moved a new drag item into this container. |\n| `exited: Subject<{<br>    item: DragRef;<br>    container: DropListRef;<br>}>` | Emits when the user removes an item from the container<br>by dragging it into another container. |\n| `lockAxis: 'x' | 'y'` | Locks the position of the draggable elements inside the container along the specified axis. |\n| `receivingStarted: Subject<{<br>    receiver: DropListRef;<br>    initiator: DropListRef;<br>    items: DragRef[];<br>}>` | Emits when a dragging sequence is started in a list connected to the current one. |\n| `receivingStopped: Subject<{<br>    receiver: DropListRef;<br>    initiator: DropListRef;<br>}>` | Emits when a dragging sequence is stopped from a list connected to the current one. |\n| `sortPredicate: (index: number, drag: DragRef, drop: DropListRef) => boolean` | Function that is used to determine whether an item can be sorted into a particular index. |\n| `sorted: Subject<{<br>    previousIndex: number;<br>    currentIndex: number;<br>    container: DropListRef;<br>    item: DragRef;<br>}>` | Emits as the user is swapping items while actively dragging. |\n| `sortingDisabled: boolean` | Whether sorting items within the list is disabled. |\n\n##### Methods\n\n| connectedTo |\n| --- |\n| Sets the containers that are connected to this one. When two or more containers are<br>connected, the user will be allowed to transfer items between them. |\n| Parameters |\n| --- |\n| connectedTo<br> `DropListRef<any>[]` | Other containers that the current containers should be connected to. |\n| Returns |\n| --- |\n| `this` |  |\n\n| dispose |\n| --- |\n| Removes the drop list functionality from the DOM element. |\n\n| drop |\n| --- |\n| Drops an item into this container. |\n| Parameters |\n| --- |\n| item<br> `DragRef<any>` | Item being dropped into the container. |\n| currentIndex<br> `number` | Index at which the item should be inserted. |\n| previousIndex<br> `number` | Index of the item when dragging started. |\n| previousContainer<br> `DropListRef<any>` | Container from which the item got dragged in. |\n| isPointerOverContainer<br> `boolean` | Whether the user's pointer was over the<br>container when the item was dropped. |\n| distance<br> `Point` | Distance the user has dragged since the start of the dragging sequence. |\n| event<br> `MouseEvent | TouchEvent = {} as any` | Event that triggered the dropping sequence. |\n| dropPoint<br> `Point` |  |\n\n| enter |\n| --- |\n| Attempts to move an item into the container. |\n| Parameters |\n| --- |\n| item<br> `DragRef<any>` | Item that was moved into the container. |\n| pointerX<br> `number` | Position of the item along the X axis. |\n| pointerY<br> `number` | Position of the item along the Y axis. |\n| index?<br> `number` | Index at which the item entered. If omitted, the container will try to figure it<br>out automatically. |\n\n| exit |\n| --- |\n| Removes an item from the container after it was dragged into another container by the user. |\n| Parameters |\n| --- |\n| item<br> `DragRef<any>` | Item that was dragged out. |\n\n| getItemIndex |\n| --- |\n| Figures out the index of an item in the container. |\n| Parameters |\n| --- |\n| item<br> `DragRef<any>` | Item whose index should be determined. |\n| Returns |\n| --- |\n| `number` |  |\n\n| getScrollableParents |\n| --- |\n| Gets the scrollable parents that are registered with this drop container. |\n| Returns |\n| --- |\n| `readonly HTMLElement[]` |  |\n\n| isDragging |\n| --- |\n| Whether an item from this list is currently being dragged. |\n\n| isReceiving |\n| --- |\n| Whether the list is able to receive the item that<br>is currently being dragged inside a connected drop list. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| start |\n| --- |\n| Starts dragging an item. |\n\n| withDirection |\n| --- |\n| Sets the layout direction of the drop list. |\n| Parameters |\n| --- |\n| direction<br> `Direction` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| withElementContainer |\n| --- |\n| Configures the drop list so that a different element is used as the container for the<br>dragged items. This is useful for the cases when one might not have control over the<br>full DOM that sets up the dragging.<br>Note that the alternate container needs to be a descendant of the drop list. |\n| Parameters |\n| --- |\n| container<br> `HTMLElement` | New element container to be assigned. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withItems |\n| --- |\n| Sets the draggable items that are a part of this list. |\n| Parameters |\n| --- |\n| items<br> `DragRef<any>[]` | Items that are a part of this list. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withOrientation |\n| --- |\n| Sets the orientation of the container. |\n| Parameters |\n| --- |\n| orientation<br> `DropListOrientation` | New orientation for the container. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withScrollableParents |\n| --- |\n| Sets which parent elements are can be scrolled while the user is dragging. |\n| Parameters |\n| --- |\n| elements<br> `HTMLElement[]` | Elements that can be scrolled. |\n| Returns |\n| --- |\n| `this` |  |\n\n### [link](https://material.angular.io/cdk/drag-drop/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#DragRefConfig) `DragRefConfig`\n\nObject that can be used to configure the behavior of DragRef.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `dragStartThreshold: number` | Minimum amount of pixels that the user should<br>drag, before the CDK initiates a drag sequence. |\n| `parentDragRef: DragRef` | Ref that the current drag item is nested in. |\n| `pointerDirectionChangeThreshold: number` | Amount the pixels the user should drag before the CDK<br>considers them to have changed the drag direction. |\n| `zIndex: number` | `z-index` for the absolutely-positioned elements that are created by the drag item. |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#Point) `Point`\n\nPoint on the page or within an element.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `x: number` |  |\n| `y: number` |  |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDragStart) `CdkDragStart`\n\nEvent emitted when the user starts dragging a draggable.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `event: MouseEvent | TouchEvent` | Native event that started the drag sequence. |\n| `source: CdkDrag<T>` | Draggable that emitted the event. |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDragRelease) `CdkDragRelease`\n\nEvent emitted when the user releases an item, before any animations have started.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `event: MouseEvent | TouchEvent` | Native event that caused the release event. |\n| `source: CdkDrag<T>` | Draggable that emitted the event. |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDragEnd) `CdkDragEnd`\n\nEvent emitted when the user stops dragging a draggable.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `distance: {<br>    x: number;<br>    y: number;<br>}` | Distance in pixels that the user has dragged since the drag sequence started. |\n| `dropPoint: {<br>    x: number;<br>    y: number;<br>}` | Position where the pointer was when the item was dropped |\n| `event: MouseEvent | TouchEvent` | Native event that caused the dragging to stop. |\n| `source: CdkDrag<T>` | Draggable that emitted the event. |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDragEnter) `CdkDragEnter`\n\nEvent emitted when the user moves an item into a new drop container.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `container: CdkDropList<T>` | Container into which the user has moved the item. |\n| `currentIndex: number` | Index at which the item has entered the container. |\n| `item: CdkDrag<I>` | Item that was moved into the container. |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDragExit) `CdkDragExit`\n\nEvent emitted when the user removes an item from a\ndrop container by moving it into another one.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `container: CdkDropList<T>` | Container from which the user has a removed an item. |\n| `item: CdkDrag<I>` | Item that was removed from the container. |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDragDrop) `CdkDragDrop`\n\nEvent emitted when the user drops a draggable item inside a drop container.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `container: CdkDropList<T>` | Container in which the item was dropped. |\n| `currentIndex: number` | Current index of the item. |\n| `distance: {<br>    x: number;<br>    y: number;<br>}` | Distance in pixels that the user has dragged since the drag sequence started. |\n| `dropPoint: {<br>    x: number;<br>    y: number;<br>}` | Position where the pointer was when the item was dropped |\n| `event: MouseEvent | TouchEvent` | Native event that caused the drop event. |\n| `isPointerOverContainer: boolean` | Whether the user's pointer was over the container when the item was dropped. |\n| `item: CdkDrag<I>` | Item that is being dropped. |\n| `previousContainer: CdkDropList<O>` | Container from which the item was picked up. Can be the same as the `container`. |\n| `previousIndex: number` | Index of the item when it was picked up. |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDragMove) `CdkDragMove`\n\nEvent emitted as the user is dragging a draggable item.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `delta: {<br>    x: -1 | 0 | 1;<br>    y: -1 | 0 | 1;<br>}` | Indicates the direction in which the user is dragging the element along each axis.<br>`1` means that the position is increasing (e.g. the user is moving to the right or downwards),<br>whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means<br>that the position hasn't changed. |\n| `distance: {<br>    x: number;<br>    y: number;<br>}` | Distance in pixels that the user has dragged since the drag sequence started. |\n| `event: MouseEvent | TouchEvent` | Native event that is causing the dragging. |\n| `pointerPosition: {<br>    x: number;<br>    y: number;<br>}` | Position of the user's pointer on the page. |\n| `source: CdkDrag<T>` | Item that is being dragged. |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CdkDragSortEvent) `CdkDragSortEvent`\n\nEvent emitted when the user swaps the position of two drag items.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `container: CdkDropList<T>` | Container that the item belongs to. |\n| `currentIndex: number` | Index that the item is currently in. |\n| `item: CdkDrag<I>` | Item that is being sorted. |\n| `previousIndex: number` | Index from which the item was sorted previously. |\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#DragDropConfig) `DragDropConfig`\n\nObject that can be used to configure the drag\nitems and drop lists within a module or a component.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `boundaryElement: string` |  |\n| `constrainPosition: DragConstrainPosition` |  |\n| `dragStartDelay: DragStartDelay` |  |\n| `draggingDisabled: boolean` |  |\n| `listAutoScrollDisabled: boolean` |  |\n| `listOrientation: DropListOrientation` |  |\n| `lockAxis: DragAxis` |  |\n| `previewClass: string | string[]` |  |\n| `previewContainer: 'global' | 'parent'` |  |\n| `rootElementSelector: string` |  |\n| `sortingDisabled: boolean` |  |\n| `zIndex: number` |  |\n\n### [link](https://material.angular.io/cdk/drag-drop/api\\#functions)  Functions\n\n| moveItemInArray |\n| --- |\n| Moves an item one index in an array to another. |\n| Parameters |\n| --- |\n| array<br> `T[]` | Array in which to move the item. |\n| fromIndex<br> `number` | Starting index of the item. |\n| toIndex<br> `number` | Index to which the item should be moved. |\n\n| transferArrayItem |\n| --- |\n| Moves an item from one array to another. |\n| Parameters |\n| --- |\n| currentArray<br> `T[]` | Array from which to transfer the item. |\n| targetArray<br> `T[]` | Array into which to put the item. |\n| currentIndex<br> `number` | Index of the item in its current array. |\n| targetIndex<br> `number` | Index at which to insert the item. |\n\n| copyArrayItem |\n| --- |\n| Copies an item from one array to another, leaving it in its<br>original position in current array. |\n| Parameters |\n| --- |\n| currentArray<br> `T[]` | Array from which to copy the item. |\n| targetArray<br> `T[]` | Array into which is copy the item. |\n| currentIndex<br> `number` | Index of the item in its current array. |\n| targetIndex<br> `number` | Index at which to insert the item. |\n\n### [link](https://material.angular.io/cdk/drag-drop/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#PreviewContainer) `PreviewContainer`\n\nPossible places into which the preview of a drag item can be inserted.\n\n- `global` \\- Preview will be inserted at the bottom of the `<body>`. The advantage is that\nyou don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain\nits inherited styles.\n- `parent` \\- Preview will be inserted into the parent of the drag item. The advantage is that\ninherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be\nvisible due to `z-index`. Furthermore, the preview is going to have an effect over selectors\nlike `:nth-child` and some flexbox configurations.\n- `ElementRef<HTMLElement> | HTMLElement` \\- Preview will be inserted into a specific element.\nSame advantages and disadvantages as `parent`.\n\n```docs-markdown-code\ntype PreviewContainer = 'global' | 'parent' | ElementRef<HTMLElement> | HTMLElement;\n\n```\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#DragStartDelay) `DragStartDelay`\n\nPossible values that can be used to configure the drag start delay.\n\n```docs-markdown-code\ntype DragStartDelay = number | {\n    touch: number;\n    mouse: number;\n};\n\n```\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#DragAxis) `DragAxis`\n\nPossible axis along which dragging can be locked.\n\n```docs-markdown-code\ntype DragAxis = 'x' | 'y';\n\n```\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#DragConstrainPosition) `DragConstrainPosition`\n\nFunction that can be used to constrain the position of a dragged element.\n\n```docs-markdown-code\ntype DragConstrainPosition = (point: Point, dragRef: DragRef) => Point;\n\n```\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#DropListOrientation) `DropListOrientation`\n\nPossible orientations for a drop list.\n\n```docs-markdown-code\ntype DropListOrientation = 'horizontal' | 'vertical' | 'mixed';\n\n```\n\n### [link](https://material.angular.io/cdk/drag-drop/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CDK_DRAG_CONFIG) `CDK_DRAG_CONFIG`\n\nInjection token that can be used to configure the\nbehavior of the drag&drop-related components.\n\n```docs-markdown-code\nconst CDK_DRAG_CONFIG: InjectionToken<DragDropConfig>;\n\n```\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CDK_DROP_LIST_GROUP) `CDK_DROP_LIST_GROUP`\n\nInjection token that can be used to reference instances of `CdkDropListGroup`. It serves as\nalternative token to the actual `CdkDropListGroup` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst CDK_DROP_LIST_GROUP: InjectionToken<CdkDropListGroup<unknown>>;\n\n```\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CDK_DROP_LIST) `CDK_DROP_LIST`\n\nInjection token that can be used to reference instances of `CdkDropList`. It serves as\nalternative token to the actual `CdkDropList` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst CDK_DROP_LIST: InjectionToken<CdkDropList<any>>;\n\n```\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CDK_DRAG_HANDLE) `CDK_DRAG_HANDLE`\n\nInjection token that can be used to reference instances of `CdkDragHandle`. It serves as\nalternative token to the actual `CdkDragHandle` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst CDK_DRAG_HANDLE: InjectionToken<CdkDragHandle>;\n\n```\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CDK_DRAG_PREVIEW) `CDK_DRAG_PREVIEW`\n\nInjection token that can be used to reference instances of `CdkDragPreview`. It serves as\nalternative token to the actual `CdkDragPreview` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst CDK_DRAG_PREVIEW: InjectionToken<CdkDragPreview<any>>;\n\n```\n\n#### [link](https://material.angular.io/cdk/drag-drop/api\\#CDK_DRAG_PLACEHOLDER) `CDK_DRAG_PLACEHOLDER`\n\nInjection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\nalternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst CDK_DRAG_PLACEHOLDER: InjectionToken<CdkDragPlaceholder<any>>;\n\n```\n\nDrag and Drop\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-6eaffcdc-b50c-453c-baee-7d3fc787967c.png"
  },
  "metadata": {
    "favicon": "https://material.angular.io/cdk/drag-drop/assets/img/favicon.ico?v=19.1.0",
    "apple-mobile-web-app-capable": "yes",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:title": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogLocale": "en_US",
    "language": "en-US",
    "ogTitle": "Angular Material",
    "viewport": "width=device-width, initial-scale=1",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "twitter:title": "Angular Material",
    "theme-color": "#d7e3ff",
    "title": "Drag and Drop | Angular Material",
    "mobile-web-app-capable": "yes",
    "og:image:height": "943",
    "og:image:type": "image/png",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:locale": "en_US",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "ogSiteName": "Angular Material",
    "ogUrl": "https://material.angular.io/",
    "author": "Angular Components Team",
    "og:type": "website",
    "og:url": "https://material.angular.io/",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:site": "@Angular",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image:width": "1339",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "twitter:card": "summary",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:site_name": "Angular Material",
    "twitter:creator": "@Angular",
    "scrapeId": "b93c7e7e-f946-488c-abcd-afd5f7b5a5e6",
    "sourceURL": "https://material.angular.io/cdk/drag-drop/api",
    "url": "https://material.angular.io/cdk/drag-drop/api",
    "statusCode": 200
  }
}