{
  "scrapeId": "f20bade5-856d-40e8-955f-3e561349b3ce",
  "sourceURL": "https://angular.dev/guide/di/hierarchical-dependency-injection",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! 🚀](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backDependency Injection\n  - [Overview](https://angular.dev/guide/di)\n  - [Understanding dependency injection](https://angular.dev/guide/di/dependency-injection)\n  - [Creating an injectable service](https://angular.dev/guide/di/creating-injectable-service)\n  - [Defining dependency providers](https://angular.dev/guide/di/dependency-injection-providers)\n  - [Injection context](https://angular.dev/guide/di/dependency-injection-context)\n  - [Hierarchical injectors](https://angular.dev/guide/di/hierarchical-dependency-injection)\n  - [Optimizing injection tokens](https://angular.dev/guide/di/lightweight-injection-tokens)\n  - [DI in action](https://angular.dev/guide/di/di-in-action)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nInjectors in Angular have rules that you can leverage to achieve the desired visibility of injectables in your applications.\nBy understanding these rules, you can determine whether to declare a provider at the application level, in a Component, or in a Directive.\n\nThe applications you build with Angular can become quite large, and one way to manage this complexity is to split up the application into a well-defined tree of components.\n\nThere can be sections of your page that work in a completely independent way than the rest of the application, with its own local copies of the services and other dependencies that it needs.\nSome of the services that these sections of the application use might be shared with other parts of the application, or with parent components that are further up in the component tree, while other dependencies are meant to be private.\n\nWith hierarchical dependency injection, you can isolate sections of the application and give them their own private dependencies not shared with the rest of the application, or have parent components share certain dependencies with its child components only but not with the rest of the component tree, and so on. Hierarchical dependency injection enables you to share dependencies between different parts of the application only when and if you need to.\n\n## [Types of injector hierarchies](https://angular.dev/guide/di/hierarchical-dependency-injection\\#types-of-injector-hierarchies)\n\nAngular has two injector hierarchies:\n\n| Injector hierarchies | Details |\n| :-- | :-- |\n| `EnvironmentInjector` hierarchy | Configure an `EnvironmentInjector` in this hierarchy using `@Injectable()` or `providers` array in `ApplicationConfig`. |\n| `ElementInjector` hierarchy | Created implicitly at each DOM element. An `ElementInjector` is empty by default unless you configure it in the `providers` property on `@Directive()` or `@Component()`. |\n\n### NgModule Based Applications\n\nFor `NgModule` based applications, you can provide dependencies with the `ModuleInjector` hierarchy using an `@NgModule()` or `@Injectable()` annotation.\n\n### [`EnvironmentInjector`](https://angular.dev/guide/di/hierarchical-dependency-injection\\#environmentinjector)\n\nThe `EnvironmentInjector` can be configured in one of two ways by using:\n\n- The `@Injectable()` `providedIn` property to refer to `root` or `platform`\n- The `ApplicationConfig` `providers` array\n\n### Tree-shaking and @Injectable()\n\nUsing the `@Injectable()` `providedIn` property is preferable to using the `ApplicationConfig` `providers` array. With `@Injectable()` `providedIn`, optimization tools can perform tree-shaking, which removes services that your application isn't using. This results in smaller bundle sizes.\n\nTree-shaking is especially useful for a library because the application which uses the library may not have a need to inject it.\n\n`EnvironmentInjector` is configured by the `ApplicationConfig.providers`.\n\nProvide services using `providedIn` of `@Injectable()` as follows:\n\n```\n      import { Injectable } from '@angular/core';@Injectable({  providedIn: 'root'  // <--provides this service in the root EnvironmentInjector})export class ItemService {  name = 'telephone';}\n\n```\n\ncheck\n\nThe `@Injectable()` decorator identifies a service class.\nThe `providedIn` property configures a specific `EnvironmentInjector`, here `root`, which makes the service available in the `root` `EnvironmentInjector`.\n\n### [ModuleInjector](https://angular.dev/guide/di/hierarchical-dependency-injection\\#moduleinjector)\n\nIn the case of `NgModule` based applications, the ModuleInjector can be configured in one of two ways by using:\n\n- The `@Injectable()` `providedIn` property to refer to `root` or `platform`\n- The `@NgModule()` `providers` array\n\n`ModuleInjector` is configured by the `@NgModule.providers` and `NgModule.imports` property. `ModuleInjector` is a flattening of all the providers arrays that can be reached by following the `NgModule.imports` recursively.\n\nChild `ModuleInjector` hierarchies are created when lazy loading other `@NgModules`.\n\n### [Platform injector](https://angular.dev/guide/di/hierarchical-dependency-injection\\#platform-injector)\n\nThere are two more injectors above `root`, an additional `EnvironmentInjector` and `NullInjector()`.\n\nConsider how Angular bootstraps the application with the following in `main.ts`:\n\n```\n      bootstrapApplication(AppComponent, appConfig);\n\n```\n\ncheck\n\nThe `bootstrapApplication()` method creates a child injector of the platform injector which is configured by the `ApplicationConfig` instance.\nThis is the `root` `EnvironmentInjector`.\n\nThe `platformBrowserDynamic()` method creates an injector configured by a `PlatformModule`, which contains platform-specific dependencies.\nThis allows multiple applications to share a platform configuration.\nFor example, a browser has only one URL bar, no matter how many applications you have running.\nYou can configure additional platform-specific providers at the platform level by supplying `extraProviders` using the `platformBrowser()` function.\n\nThe next parent injector in the hierarchy is the `NullInjector()`, which is the top of the tree.\nIf you've gone so far up the tree that you are looking for a service in the `NullInjector()`, you'll get an error unless you've used `@Optional()` because ultimately, everything ends at the `NullInjector()` and it returns an error or, in the case of `@Optional()`, `null`.\nFor more information on `@Optional()`, see the [`@Optional()` section](https://angular.dev/guide/di/hierarchical-dependency-injection#optional) of this guide.\n\nThe following diagram represents the relationship between the `root` `ModuleInjector` and its parent injectors as the previous paragraphs describe.\n\nEnvironmentInjector\n\n(configured by Angular)\n\nhas special things like DomSanitizer => providedIn 'platform'\n\nroot EnvironmentInjector\n\n(configured by AppConfig)\n\nhas things for your app => bootstrapApplication(..., AppConfig)\n\nNullInjector\n\nalways throws an error unless\n\nyou use @Optional()\n\nWhile the name `root` is a special alias, other `EnvironmentInjector` hierarchies don't have aliases.\nYou have the option to create `EnvironmentInjector` hierarchies whenever a dynamically loaded component is created, such as with the Router, which will create child `EnvironmentInjector` hierarchies.\n\nAll requests forward up to the root injector, whether you configured it with the `ApplicationConfig` instance passed to the `bootstrapApplication()` method, or registered all providers with `root` in their own services.\n\n### @Injectable() vs. ApplicationConfig\n\nIf you configure an app-wide provider in the `ApplicationConfig` of `bootstrapApplication`, it overrides one configured for `root` in the `@Injectable()` metadata.\nYou can do this to configure a non-default provider of a service that is shared with multiple applications.\n\nHere is an example of the case where the component router configuration includes a non-default [location strategy](https://angular.dev/guide/di/guide/routing#location-strategy) by listing its provider in the `providers` list of the `ApplicationConfig`.\n\n```\n      providers: [  { provide: LocationStrategy, useClass: HashLocationStrategy }]\n\n```\n\ncheck\n\nFor `NgModule` based applications, configure app-wide providers in the `AppModule` `providers`.\n\n### [`ElementInjector`](https://angular.dev/guide/di/hierarchical-dependency-injection\\#elementinjector)\n\nAngular creates `ElementInjector` hierarchies implicitly for each DOM element.\n\nProviding a service in the `@Component()` decorator using its `providers` or `viewProviders` property configures an `ElementInjector`.\nFor example, the following `TestComponent` configures the `ElementInjector` by providing the service as follows:\n\n```\n      @Component({  …  providers: [{ provide: ItemService, useValue: { name: 'lamp' } }]})export class TestComponent\n\n```\n\ncheck\n\n**HELPFUL:** See the [resolution rules](https://angular.dev/guide/di/hierarchical-dependency-injection#resolution-rules) section to understand the relationship between the `EnvironmentInjector` tree, the `ModuleInjector` and the `ElementInjector` tree.\n\nWhen you provide services in a component, that service is available by way of the `ElementInjector` at that component instance.\nIt may also be visible at child component/directives based on visibility rules described in the [resolution rules](https://angular.dev/guide/di/hierarchical-dependency-injection#resolution-rules) section.\n\nWhen the component instance is destroyed, so is that service instance.\n\n#### [`@Directive()` and `@Component()`](https://angular.dev/guide/di/hierarchical-dependency-injection\\#directive-and-component)\n\nA component is a special type of directive, which means that just as `@Directive()` has a `providers` property, `@Component()` does too.\nThis means that directives as well as components can configure providers, using the `providers` property.\nWhen you configure a provider for a component or directive using the `providers` property, that provider belongs to the `ElementInjector` of that component or directive.\nComponents and directives on the same element share an injector.\n\n## [Resolution rules](https://angular.dev/guide/di/hierarchical-dependency-injection\\#resolution-rules)\n\nWhen resolving a token for a component/directive, Angular resolves it in two phases:\n\n1. Against its parents in the `ElementInjector` hierarchy.\n2. Against its parents in the `EnvironmentInjector` hierarchy.\n\nWhen a component declares a dependency, Angular tries to satisfy that dependency with its own `ElementInjector`.\nIf the component's injector lacks the provider, it passes the request up to its parent component's `ElementInjector`.\n\nThe requests keep forwarding up until Angular finds an injector that can handle the request or runs out of ancestor `ElementInjector` hierarchies.\n\nIf Angular doesn't find the provider in any `ElementInjector` hierarchies, it goes back to the element where the request originated and looks in the `EnvironmentInjector` hierarchy.\nIf Angular still doesn't find the provider, it throws an error.\n\nIf you have registered a provider for the same DI token at different levels, the first one Angular encounters is the one it uses to resolve the dependency.\nIf, for example, a provider is registered locally in the component that needs a service,\nAngular doesn't look for another provider of the same service.\n\n**HELPFUL:** For `NgModule` based applications, Angular will search the `ModuleInjector` hierarchy if it cannot find a provider in the `ElementInjector` hierarchies.\n\n## [Resolution modifiers](https://angular.dev/guide/di/hierarchical-dependency-injection\\#resolution-modifiers)\n\nAngular's resolution behavior can be modified with `optional`, `self`, `skipSelf` and `host`.\nImport each of them from `@angular/core` and use each in the `inject` configuration when you inject your service.\n\n### [Types of modifiers](https://angular.dev/guide/di/hierarchical-dependency-injection\\#types-of-modifiers)\n\nResolution modifiers fall into three categories:\n\n- What to do if Angular doesn't find what you're looking for, that is `optional`\n- Where to start looking, that is `skipSelf`\n- Where to stop looking, `host` and `self`\n\nBy default, Angular always starts at the current `Injector` and keeps searching all the way up.\nModifiers allow you to change the starting, or _self_, location and the ending location.\n\nAdditionally, you can combine all of the modifiers except:\n\n- `host` and `self`\n- `skipSelf` and `self`.\n\n### [`optional`](https://angular.dev/guide/di/hierarchical-dependency-injection\\#optional)\n\n`optional` allows Angular to consider a service you inject to be optional.\nThis way, if it can't be resolved at runtime, Angular resolves the service as `null`, rather than throwing an error.\nIn the following example, the service, `OptionalService`, isn't provided in the service, `ApplicationConfig`, `@NgModule()`, or component class, so it isn't available anywhere in the app.\n\n### src/app/optional/optional.component.ts\n\n```\n      export class OptionalComponent {  public optional? = inject(OptionalService, {optional: true});}\n\n```\n\ncheck\n\n### [`self`](https://angular.dev/guide/di/hierarchical-dependency-injection\\#self)\n\nUse `self` so that Angular will only look at the `ElementInjector` for the current component or directive.\n\nA good use case for `self` is to inject a service but only if it is available on the current host element.\nTo avoid errors in this situation, combine `self` with `optional`.\n\nFor example, in the following `SelfNoDataComponent`, notice the injected `LeafService` as a property.\n\n### src/app/self-no-data/self-no-data.component.ts\n\n```\n      @Component({  selector: 'app-self-no-data',  templateUrl: './self-no-data.component.html',  styleUrls: ['./self-no-data.component.css']})export class SelfNoDataComponent {  public leaf = inject(LeafService, {optional: true, self: true});}\n\n```\n\ncheck\n\nIn this example, there is a parent provider and injecting the service will return the value, however, injecting the service with `self` and `optional` will return `null` because `self` tells the injector to stop searching in the current host element.\n\nAnother example shows the component class with a provider for `FlowerService`.\nIn this case, the injector looks no further than the current `ElementInjector` because it finds the `FlowerService` and returns the tulip `🌷`.\n\ncheck\n\n```\n      import {Component, Self} from '@angular/core';import {FlowerService} from '../flower.service';@Component({  selector: 'app-self',  templateUrl: './self.component.html',  styleUrls: ['./self.component.css'],  providers: [{provide: FlowerService, useValue: {emoji: '🌷'}}],})export class SelfComponent {  constructor(@Self() public flower: FlowerService) {}}// This component provides the FlowerService so the injector// doesn't have to look further up the injector tree\n\n```\n\n### [`skipSelf`](https://angular.dev/guide/di/hierarchical-dependency-injection\\#skipself)\n\n`skipSelf` is the opposite of `self`.\nWith `skipSelf`, Angular starts its search for a service in the parent `ElementInjector`, rather than in the current one.\nSo if the parent `ElementInjector` were using the fern `🌿` value for `emoji`, but you had maple leaf `🍁` in the component's `providers` array, Angular would ignore maple leaf `🍁` and use fern `🌿`.\n\nTo see this in code, assume that the following value for `emoji` is what the parent component were using, as in this service:\n\n### src/app/leaf.service.ts\n\n```\n      export class LeafService {  emoji = '🌿';}\n\n```\n\ncheck\n\nImagine that in the child component, you had a different value, maple leaf `🍁` but you wanted to use the parent's value instead.\nThis is when you'd use `skipSelf`:\n\n### src/app/skipself/skipself.component.ts\n\n```\n      @Component({  selector: 'app-skipself',  templateUrl: './skipself.component.html',  styleUrls: ['./skipself.component.css'],  // Angular would ignore this LeafService instance  providers: [{ provide: LeafService, useValue: { emoji: '🍁' } }]})export class SkipselfComponent {  // Use skipSelf as inject option  public leaf = inject(LeafService, {skipSelf: true});}\n\n```\n\ncheck\n\nIn this case, the value you'd get for `emoji` would be fern `🌿`, not maple leaf `🍁`.\n\n#### [`skipSelf` option with `optional`](https://angular.dev/guide/di/hierarchical-dependency-injection\\#skipself-option-with-optional)\n\nUse the `skipSelf` option with `optional` to prevent an error if the value is `null`.\n\nIn the following example, the `Person` service is injected during property initialization.\n`skipSelf` tells Angular to skip the current injector and `optional` will prevent an error should the `Person` service be `null`.\n\n```\n      class Person {  parent = inject(Person, {optional: true, skipSelf: true})}\n\n```\n\ncheck\n\n### [`host`](https://angular.dev/guide/di/hierarchical-dependency-injection\\#host)\n\n`host` lets you designate a component as the last stop in the injector tree when searching for providers.\n\nEven if there is a service instance further up the tree, Angular won't continue looking.\nUse `host` as follows:\n\n### src/app/host/host.component.ts\n\n```\n      @Component({  selector: 'app-host',  templateUrl: './host.component.html',  styleUrls: ['./host.component.css'],  //  provide the service  providers: [{ provide: FlowerService, useValue: { emoji: '🌷' } }]})export class HostComponent {  // use host when injecting the service  flower = inject(FlowerService, {host: true, optional: true});}\n\n```\n\ncheck\n\nSince `HostComponent` has the `host` option , no matter what the parent of `HostComponent` might have as a `flower.emoji` value, the `HostComponent` will use tulip `🌷`.\n\n### [Modifiers with constructor injection](https://angular.dev/guide/di/hierarchical-dependency-injection\\#modifiers-with-constructor-injection)\n\nSimilarly as presented before, the behavior of constructor injection can be modified with `@Optional()`, `@Self()`, `@SkipSelf()` and `@Host()`.\n\nImport each of them from `@angular/core` and use each in the component class constructor when you inject your service.\n\n### src/app/self-no-data/self-no-data.component.ts\n\n```\n      export class SelfNoDataComponent {  constructor(@Self() @Optional() public leaf?: LeafService) { }}\n\n```\n\ncheck\n\n## [Logical structure of the template](https://angular.dev/guide/di/hierarchical-dependency-injection\\#logical-structure-of-the-template)\n\nWhen you provide services in the component class, services are visible within the `ElementInjector` tree relative to where and how you provide those services.\n\nUnderstanding the underlying logical structure of the Angular template will give you a foundation for configuring services and in turn control their visibility.\n\nComponents are used in your templates, as in the following example:\n\n```\n      <app-root>  <app-child></app-child>;</app-root>\n\n```\n\ncheck\n\n**HELPFUL:** Usually, you declare the components and their templates in separate files.\nFor the purposes of understanding how the injection system works, it is useful to look at them from the point of view of a combined logical tree.\nThe term _logical_ distinguishes it from the render tree, which is your application's DOM tree.\nTo mark the locations of where the component templates are located, this guide uses the `<#VIEW>` pseudo-element, which doesn't actually exist in the render tree and is present for mental model purposes only.\n\nThe following is an example of how the `<app-root>` and `<app-child>` view trees are combined into a single logical tree:\n\n```\n      <app-root>  <#VIEW>    <app-child>     <#VIEW>       …content goes here…     </#VIEW>    </app-child>  </#VIEW></app-root>\n\n```\n\ncheck\n\nUnderstanding the idea of the `<#VIEW>` demarcation is especially significant when you configure services in the component class.\n\n## [Example: Providing services in `@Component()`](https://angular.dev/guide/di/hierarchical-dependency-injection\\#example-providing-services-in-component)\n\nHow you provide services using a `@Component()` (or `@Directive()`) decorator determines their visibility.\nThe following sections demonstrate `providers` and `viewProviders` along with ways to modify service visibility with `skipSelf` and `host`.\n\nA component class can provide services in two ways:\n\n| Arrays | Details |\n| :-- | :-- |\n| With a `providers` array | `@Component({ providers: [SomeService] })` |\n| With a `viewProviders` array | `@Component({ viewProviders: [SomeService] })` |\n\nIn the examples below, you will see the logical tree of an Angular application.\nTo illustrate how the injector works in the context of templates, the logical tree will represent the HTML structure of the application.\nFor example, the logical tree will show that `<child-component>` is a direct children of `<parent-component>`.\n\nIn the logical tree, you will see special attributes: `@Provide`, `@Inject`, and `@ApplicationConfig`.\nThese aren't real attributes but are here to demonstrate what is going on under the hood.\n\n| Angular service attribute | Details |\n| :-- | :-- |\n| `@Inject(Token)=>Value` | If `Token` is injected at this location in the logical tree, its value would be `Value`. |\n| `@Provide(Token=Value)` | Indicates that `Token` is provided with `Value` at this location in the logical tree. |\n| `@ApplicationConfig` | Demonstrates that a fallback `EnvironmentInjector` should be used at this location. |\n\n### [Example app structure](https://angular.dev/guide/di/hierarchical-dependency-injection\\#example-app-structure)\n\nThe example application has a `FlowerService` provided in `root` with an `emoji` value of red hibiscus `🌺`.\n\n### src/app/flower.service.ts\n\n```\n      @Injectable({  providedIn: 'root'})export class FlowerService {  emoji = '🌺';}\n\n```\n\ncheck\n\nConsider an application with only an `AppComponent` and a `ChildComponent`.\nThe most basic rendered view would look like nested HTML elements such as the following:\n\n```\n      <app-root> <!-- AppComponent selector -->  <app-child> <!-- ChildComponent selector -->  </app-child></app-root>\n\n```\n\ncheck\n\nHowever, behind the scenes, Angular uses a logical view representation as follows when resolving injection requests:\n\n```\n      <app-root> <!-- AppComponent selector -->  <#VIEW>    <app-child> <!-- ChildComponent selector -->      <#VIEW>      </#VIEW>    </app-child>  </#VIEW></app-root>\n\n```\n\ncheck\n\nThe `<#VIEW>` here represents an instance of a template.\nNotice that each component has its own `<#VIEW>`.\n\nKnowledge of this structure can inform how you provide and inject your services, and give you complete control of service visibility.\n\nNow, consider that `<app-root>` injects the `FlowerService`:\n\n### src/app/app.component.ts\n\n```\n      export class AppComponent  {  flower = inject(FlowerService);}\n\n```\n\ncheck\n\nAdd a binding to the `<app-root>` template to visualize the result:\n\n### src/app/app.component.html\n\n```\n      <p>Emoji from FlowerService: {{flower.emoji}}</p>\n\n```\n\ncheck\n\nThe output in the view would be:\n\n```\n      Emoji from FlowerService: 🌺\n\n```\n\ncheck\n\nIn the logical tree, this would be represented as follows:\n\n```\n      <app-root @ApplicationConfig        @Inject(FlowerService) flower=>\"🌺\">  <#VIEW>    <p>Emoji from FlowerService: {{flower.emoji}} (🌺)</p>    <app-child>      <#VIEW>      </#VIEW>    </app-child>  </#VIEW></app-root>\n\n```\n\ncheck\n\nWhen `<app-root>` requests the `FlowerService`, it is the injector's job to resolve the `FlowerService` token.\nThe resolution of the token happens in two phases:\n\n1. The injector determines the starting location in the logical tree and an ending location of the search.\n    The injector begins with the starting location and looks for the token at each view level in the logical tree.\n    If the token is found it is returned.\n\n2. If the token is not found, the injector looks for the closest parent `EnvironmentInjector` to delegate the request to.\n\n\nIn the example case, the constraints are:\n\n1. Start with `<#VIEW>` belonging to `<app-root>` and end with `<app-root>`.\n\n   - Normally the starting point for search is at the point of injection.\n      However, in this case `<app-root>` is a component. `@Component` s are special in that they also include their own `viewProviders`, which is why the search starts at `<#VIEW>` belonging to `<app-root>`.\n      This would not be the case for a directive matched at the same location.\n   - The ending location happens to be the same as the component itself, because it is the topmost component in this application.\n2. The `EnvironmentInjector` provided by the `ApplicationConfig` acts as the fallback injector when the injection token can't be found in the `ElementInjector` hierarchies.\n\n\n### [Using the `providers` array](https://angular.dev/guide/di/hierarchical-dependency-injection\\#using-the-providers-array)\n\nNow, in the `ChildComponent` class, add a provider for `FlowerService` to demonstrate more complex resolution rules in the upcoming sections:\n\n### src/app/child.component.ts\n\n```\n      @Component({  selector: 'app-child',  templateUrl: './child.component.html',  styleUrls: ['./child.component.css'],  // use the providers array to provide a service  providers: [{ provide: FlowerService, useValue: { emoji: '🌻' } }]})export class ChildComponent {  // inject the service  flower = inject(FlowerService);}\n\n```\n\ncheck\n\nNow that the `FlowerService` is provided in the `@Component()` decorator, when the `<app-child>` requests the service, the injector has only to look as far as the `ElementInjector` in the `<app-child>`.\nIt won't have to continue the search any further through the injector tree.\n\nThe next step is to add a binding to the `ChildComponent` template.\n\n### src/app/child.component.html\n\n```\n      <p>Emoji from FlowerService: {{flower.emoji}}</p>\n\n```\n\ncheck\n\nTo render the new values, add `<app-child>` to the bottom of the `AppComponent` template so the view also displays the sunflower:\n\n```\n      Child ComponentEmoji from FlowerService: 🌻\n\n```\n\ncheck\n\nIn the logical tree, this is represented as follows:\n\n```\n      <app-root @ApplicationConfig        @Inject(FlowerService) flower=>\"🌺\">  <#VIEW>    <p>Emoji from FlowerService: {{flower.emoji}} (🌺)</p>    <app-child @Provide(FlowerService=\"🌻\")               @Inject(FlowerService)=>\"🌻\"> <!-- search ends here -->      <#VIEW> <!-- search starts here -->        <h2>Child Component</h2>        <p>Emoji from FlowerService: {{flower.emoji}} (🌻)</p>      </#VIEW>    </app-child>  </#VIEW></app-root>\n\n```\n\ncheck\n\nWhen `<app-child>` requests the `FlowerService`, the injector begins its search at the `<#VIEW>` belonging to `<app-child>` ( `<#VIEW>` is included because it is injected from `@Component()`) and ends with `<app-child>`.\nIn this case, the `FlowerService` is resolved in the `providers` array with sunflower `🌻` of the `<app-child>`.\nThe injector doesn't have to look any further in the injector tree.\nIt stops as soon as it finds the `FlowerService` and never sees the red hibiscus `🌺`.\n\n### [Using the `viewProviders` array](https://angular.dev/guide/di/hierarchical-dependency-injection\\#using-the-viewproviders-array)\n\nUse the `viewProviders` array as another way to provide services in the `@Component()` decorator.\nUsing `viewProviders` makes services visible in the `<#VIEW>`.\n\n**HELPFUL:** The steps are the same as using the `providers` array, with the exception of using the `viewProviders` array instead.\n\nFor step-by-step instructions, continue with this section.\nIf you can set it up on your own, skip ahead to [Modifying service availability](https://angular.dev/guide/di/hierarchical-dependency-injection#visibility-of-provided-tokens).\n\nFor demonstration, we are building an `AnimalService` to demonstrate `viewProviders`.\nFirst, create an `AnimalService` with an `emoji` property of whale `🐳`:\n\n### src/app/animal.service.ts\n\n```\n      import { Injectable } from '@angular/core';@Injectable({  providedIn: 'root'})export class AnimalService {  emoji = '🐳';}\n\n```\n\ncheck\n\nFollowing the same pattern as with the `FlowerService`, inject the `AnimalService` in the `AppComponent` class:\n\n### src/app/app.component.ts\n\n```\n      export class AppComponent {    public flower = inject(FlowerService);    public animal = inject(AnimalService);}\n\n```\n\ncheck\n\n**HELPFUL:** You can leave all the `FlowerService` related code in place as it will allow a comparison with the `AnimalService`.\n\nAdd a `viewProviders` array and inject the `AnimalService` in the `<app-child>` class, too, but give `emoji` a different value.\nHere, it has a value of dog `🐶`.\n\n### src/app/child.component.ts\n\n```\n      @Component({  selector: 'app-child',  templateUrl: './child.component.html',  styleUrls: ['./child.component.css'],  // provide services  providers: [{ provide: FlowerService, useValue: { emoji: '🌻' } }],  viewProviders: [{ provide: AnimalService, useValue: { emoji: '🐶' } }]})export class ChildComponent {  // inject services  flower = inject(FlowerService);  animal = inject(AnimalService)...}\n\n```\n\ncheck\n\nAdd bindings to the `ChildComponent` and the `AppComponent` templates.\nIn the `ChildComponent` template, add the following binding:\n\n### src/app/child.component.html\n\n```\n      <p>Emoji from AnimalService: {{animal.emoji}}</p>\n\n```\n\ncheck\n\nAdditionally, add the same to the `AppComponent` template:\n\n### src/app/app.component.html\n\n```\n      <p>Emoji from AnimalService: {{animal.emoji}}</p>s\n\n```\n\ncheck\n\nNow you should see both values in the browser:\n\n```\n      AppComponentEmoji from AnimalService: 🐳Child ComponentEmoji from AnimalService: 🐶\n\n```\n\ncheck\n\nThe logic tree for this example of `viewProviders` is as follows:\n\n```\n      <app-root @ApplicationConfig         @Inject(AnimalService) animal=>\"🐳\">  <#VIEW>    <app-child>      <#VIEW @Provide(AnimalService=\"🐶\")            @Inject(AnimalService=>\"🐶\")>       <!-- ^^using viewProviders means AnimalService is available in <#VIEW>-->       <p>Emoji from AnimalService: {{animal.emoji}} (🐶)</p>      </#VIEW>    </app-child>  </#VIEW></app-root>\n\n```\n\ncheck\n\nJust as with the `FlowerService` example, the `AnimalService` is provided in the `<app-child>` `@Component()` decorator.\nThis means that since the injector first looks in the `ElementInjector` of the component, it finds the `AnimalService` value of dog `🐶`.\nIt doesn't need to continue searching the `ElementInjector` tree, nor does it need to search the `ModuleInjector`.\n\n### [`providers` vs. `viewProviders`](https://angular.dev/guide/di/hierarchical-dependency-injection\\#providers-vs-viewproviders)\n\nThe `viewProviders` field is conceptually similar to `providers`, but there is one notable difference.\nConfigured providers in `viewProviders` are not visible to projected content that ends up as a logical children of the component.\n\nTo see the difference between using `providers` and `viewProviders`, add another component to the example and call it `InspectorComponent`.\n`InspectorComponent` will be a child of the `ChildComponent`.\nIn `inspector.component.ts`, inject the `FlowerService` and `AnimalService` during property initialization:\n\n### src/app/inspector/inspector.component.ts\n\n```\n      export class InspectorComponent {  flower = inject(FlowerService);  animal = inject(AnimalService);}\n\n```\n\ncheck\n\nYou do not need a `providers` or `viewProviders` array.\nNext, in `inspector.component.html`, add the same markup from previous components:\n\n### src/app/inspector/inspector.component.html\n\n```\n      <p>Emoji from FlowerService: {{flower.emoji}}</p><p>Emoji from AnimalService: {{animal.emoji}}</p>\n\n```\n\ncheck\n\nRemember to add the `InspectorComponent` to the `ChildComponent` `imports` array.\n\n### src/app/child/child.component.ts\n\n```\n      @Component({  ...  imports: [InspectorComponent]})\n\n```\n\ncheck\n\nNext, add the following to `child.component.html`:\n\n### src/app/child/child.component.html\n\n```\n      ...<div class=\"container\">  <h3>Content projection</h3>  <ng-content></ng-content></div><h3>Inside the view</h3><app-inspector></app-inspector>\n\n```\n\ncheck\n\n`<ng-content>` allows you to project content, and `<app-inspector>` inside the `ChildComponent` template makes the `InspectorComponent` a child component of `ChildComponent`.\n\nNext, add the following to `app.component.html` to take advantage of content projection.\n\n### src/app/app.component.html\n\n```\n      <app-child>  <app-inspector></app-inspector></app-child>\n\n```\n\ncheck\n\nThe browser now renders the following, omitting the previous examples for brevity:\n\n```\n      ...Content projectionEmoji from FlowerService: 🌻Emoji from AnimalService: 🐳Emoji from FlowerService: 🌻Emoji from AnimalService: 🐶\n\n```\n\ncheck\n\nThese four bindings demonstrate the difference between `providers` and `viewProviders`.\nRemember that the dog emoji `🐶` is declared inside the `<#VIEW>` of `ChildComponent` and isn't visible to the projected content.\nInstead, the projected content sees the whale `🐳`.\n\nHowever, in the next output section though, the `InspectorComponent` is an actual child component of `ChildComponent`, `InspectorComponent` is inside the `<#VIEW>`, so when it asks for the `AnimalService`, it sees the dog `🐶`.\n\nThe `AnimalService` in the logical tree would look like this:\n\n```\n      <app-root @ApplicationConfig         @Inject(AnimalService) animal=>\"🐳\">  <#VIEW>    <app-child>      <#VIEW @Provide(AnimalService=\"🐶\")            @Inject(AnimalService=>\"🐶\")>        <!-- ^^using viewProviders means AnimalService is available in <#VIEW>-->        <p>Emoji from AnimalService: {{animal.emoji}} (🐶)</p>        <div class=\"container\">          <h3>Content projection</h3>          <app-inspector @Inject(AnimalService) animal=>\"🐳\">            <p>Emoji from AnimalService: {{animal.emoji}} (🐳)</p>          </app-inspector>        </div>        <app-inspector>          <#VIEW @Inject(AnimalService) animal=>\"🐶\">            <p>Emoji from AnimalService: {{animal.emoji}} (🐶)</p>          </#VIEW>        </app-inspector>      </#VIEW>    </app-child>  </#VIEW></app-root>\n\n```\n\ncheck\n\nThe projected content of `<app-inspector>` sees the whale `🐳`, not the dog `🐶`, because the dog `🐶` is inside the `<app-child>` `<#VIEW>`.\nThe `<app-inspector>` can only see the dog `🐶` if it is also within the `<#VIEW>`.\n\n### [Visibility of provided tokens](https://angular.dev/guide/di/hierarchical-dependency-injection\\#visibility-of-provided-tokens)\n\nVisibility decorators influence where the search for the injection token begins and ends in the logic tree.\nTo do this, place visibility configuration at the point of injection, that is, when invoking `inject()`, rather than at a point of declaration.\n\nTo alter where the injector starts looking for `FlowerService`, add `skipSelf` to the `<app-child>` `inject()` invocation where `FlowerService` is injected.\nThis invocation is a property initializer the `<app-child>` as shown in `child.component.ts`:\n\n```\n      flower = inject(FlowerService, { skipSelf: true })\n\n```\n\ncheck\n\nWith `skipSelf`, the `<app-child>` injector doesn't look to itself for the `FlowerService`.\nInstead, the injector starts looking for the `FlowerService` at the `ElementInjector` of the `<app-root>`, where it finds nothing.\nThen, it goes back to the `<app-child>` `ModuleInjector` and finds the red hibiscus `🌺` value, which is available because `<app-child>` and `<app-root>` share the same `ModuleInjector`.\nThe UI renders the following:\n\n```\n      Emoji from FlowerService: 🌺\n\n```\n\ncheck\n\nIn a logical tree, this same idea might look like this:\n\n```\n      <app-root @ApplicationConfig        @Inject(FlowerService) flower=>\"🌺\">  <#VIEW>    <app-child @Provide(FlowerService=\"🌻\")>      <#VIEW @Inject(FlowerService, SkipSelf)=>\"🌺\">        <!-- With SkipSelf, the injector looks to the next injector up the tree (app-root) -->      </#VIEW>    </app-child>  </#VIEW></app-root>\n\n```\n\ncheck\n\nThough `<app-child>` provides the sunflower `🌻`, the application renders the red hibiscus `🌺` because `skipSelf` causes the current injector ( `app-child`) to skip itself and look to its parent.\n\nIf you now add `host` (in addition to the `skipSelf`), the result will be `null`.\nThis is because `host` limits the upper bound of the search to the `app-child` `<#VIEW>`.\nHere's the idea in the logical tree:\n\n```\n      <app-root @ApplicationConfig        @Inject(FlowerService) flower=>\"🌺\">  <#VIEW> <!-- end search here with null-->    <app-child @Provide(FlowerService=\"🌻\")> <!-- start search here -->      <#VIEW inject(FlowerService, {skipSelf: true, host: true, optional:true})=>null>      </#VIEW>      </app-parent>  </#VIEW></app-root>\n\n```\n\ncheck\n\nHere, the services and their values are the same, but `host` stops the injector from looking any further than the `<#VIEW>` for `FlowerService`, so it doesn't find it and returns `null`.\n\n### [`skipSelf` and `viewProviders`](https://angular.dev/guide/di/hierarchical-dependency-injection\\#skipself-and-viewproviders)\n\nRemember, `<app-child>` provides the `AnimalService` in the `viewProviders` array with the value of dog `🐶`.\nBecause the injector has only to look at the `ElementInjector` of the `<app-child>` for the `AnimalService`, it never sees the whale `🐳`.\n\nAs in the `FlowerService` example, if you add `skipSelf` to the `inject()` of `AnimalService`, the injector won't look in the `ElementInjector` of the current `<app-child>` for the `AnimalService`.\nInstead, the injector will begin at the `<app-root>` `ElementInjector`.\n\n```\n      @Component({  selector: 'app-child',  …  viewProviders: [    { provide: AnimalService, useValue: { emoji: '🐶' } },  ],})\n\n```\n\ncheck\n\nThe logical tree looks like this with `skipSelf` in `<app-child>`:\n\n```\n      <app-root @ApplicationConfig          @Inject(AnimalService=>\"🐳\")>  <#VIEW><!-- search begins here -->    <app-child>      <#VIEW @Provide(AnimalService=\"🐶\")             @Inject(AnimalService, SkipSelf=>\"🐳\")>        <!--Add skipSelf -->      </#VIEW>    </app-child>  </#VIEW></app-root>\n\n```\n\ncheck\n\nWith `skipSelf` in the `<app-child>`, the injector begins its search for the `AnimalService` in the `<app-root>` `ElementInjector` and finds whale `🐳`.\n\n### [`host` and `viewProviders`](https://angular.dev/guide/di/hierarchical-dependency-injection\\#host-and-viewproviders)\n\nIf you just use `host` for the injection of `AnimalService`, the result is dog `🐶` because the injector finds the `AnimalService` in the `<app-child>` `<#VIEW>` itself.\nThe `ChildComponent` configures the `viewProviders` so that the dog emoji is provided as `AnimalService` value.\nYou can also see `host` the `inject()`:\n\n```\n      @Component({  selector: 'app-child',  …  viewProviders: [    { provide: AnimalService, useValue: { emoji: '🐶' } },  ]})export class ChildComponent {  animal = inject(AnimalService, { host: true })}\n\n```\n\ncheck\n\n`host: true` causes the injector to look until it encounters the edge of the `<#VIEW>`.\n\n```\n      <app-root @ApplicationConfig          @Inject(AnimalService=>\"🐳\")>  <#VIEW>    <app-child>      <#VIEW @Provide(AnimalService=\"🐶\")             inject(AnimalService, {host: true}=>\"🐶\")> <!-- host stops search here -->      </#VIEW>    </app-child>  </#VIEW></app-root>\n\n```\n\ncheck\n\nAdd a `viewProviders` array with a third animal, hedgehog `🦔`, to the `app.component.ts` `@Component()` metadata:\n\n```\n      @Component({  selector: 'app-root',  templateUrl: './app.component.html',  styleUrls: [ './app.component.css' ],  viewProviders: [    { provide: AnimalService, useValue: { emoji: '🦔' } },  ],})\n\n```\n\ncheck\n\nNext, add `skipSelf` along with `host` to the `inject()` for the `AnimalService` injection in `child.component.ts`.\nHere are `host` and `skipSelf` in the `animal` property initialization:\n\n```\n      export class ChildComponent {  animal = inject(AnimalService, { host: true, skipSelf: true });}\n\n```\n\ncheck\n\nWhen `host` and `skipSelf` were applied to the `FlowerService`, which is in the `providers` array, the result was `null` because `skipSelf` starts its search in the `<app-child>` injector, but `host` stops searching at `<#VIEW>` —where there is no `FlowerService`\nIn the logical tree, you can see that the `FlowerService` is visible in `<app-child>`, not its `<#VIEW>`.\n\nHowever, the `AnimalService`, which is provided in the `AppComponent` `viewProviders` array, is visible.\n\nThe logical tree representation shows why this is:\n\n```\n      <app-root @ApplicationConfig        @Inject(AnimalService=>\"🐳\")>  <#VIEW @Provide(AnimalService=\"🦔\")         @Inject(AnimalService, @Optional)=>\"🦔\">    <!-- ^^skipSelf starts here,  host stops here^^ -->    <app-child>      <#VIEW @Provide(AnimalService=\"🐶\")             inject(AnimalService, {skipSelf:true, host: true, optional: true})=>\"🦔\">               <!-- Add skipSelf ^^-->      </#VIEW>      </app-child>  </#VIEW></app-root>\n\n```\n\ncheck\n\n`skipSelf`, causes the injector to start its search for the `AnimalService` at the `<app-root>`, not the `<app-child>`, where the request originates, and `host` stops the search at the `<app-root>` `<#VIEW>`.\nSince `AnimalService` is provided by way of the `viewProviders` array, the injector finds hedgehog `🦔` in the `<#VIEW>`.\n\n## [Example: `ElementInjector` use cases](https://angular.dev/guide/di/hierarchical-dependency-injection\\#example-elementinjector-use-cases)\n\nThe ability to configure one or more providers at different levels opens up useful possibilities.\n\n### [Scenario: service isolation](https://angular.dev/guide/di/hierarchical-dependency-injection\\#scenario-service-isolation)\n\nArchitectural reasons may lead you to restrict access to a service to the application domain where it belongs.\nFor example, consider we build a `VillainsListComponent` that displays a list of villains.\nIt gets those villains from a `VillainsService`.\n\nIf you provide `VillainsService` in the root `AppModule`, it will make `VillainsService` visible everywhere in the application.\nIf you later modify the `VillainsService`, you could break something in other components that started depending this service by accident.\n\nInstead, you should provide the `VillainsService` in the `providers` metadata of the `VillainsListComponent` like this:\n\n### src/app/villains-list.component.ts (metadata)\n\n```\n      @Component({  selector: 'app-villains-list',  templateUrl: './villains-list.component.html',  providers: [VillainsService]})export class VillainsListComponent {}\n\n```\n\ncheck\n\nBy providing `VillainsService` in the `VillainsListComponent` metadata and nowhere else, the service becomes available only in the `VillainsListComponent` and its subcomponent tree.\n\n`VillainService` is a singleton with respect to `VillainsListComponent` because that is where it is declared.\nAs long as `VillainsListComponent` does not get destroyed it will be the same instance of `VillainService` but if there are multiple instances of `VillainsListComponent`, then each instance of `VillainsListComponent` will have its own instance of `VillainService`.\n\n### [Scenario: multiple edit sessions](https://angular.dev/guide/di/hierarchical-dependency-injection\\#scenario-multiple-edit-sessions)\n\nMany applications allow users to work on several open tasks at the same time.\nFor example, in a tax preparation application, the preparer could be working on several tax returns, switching from one to the other throughout the day.\n\nTo demonstrate that scenario, imagine a `HeroListComponent` that displays a list of super heroes.\n\nTo open a hero's tax return, the preparer clicks on a hero name, which opens a component for editing that return.\nEach selected hero tax return opens in its own component and multiple returns can be open at the same time.\n\nEach tax return component has the following characteristics:\n\n- Is its own tax return editing session\n- Can change a tax return without affecting a return in another component\n- Has the ability to save the changes to its tax return or cancel them\n\nSuppose that the `HeroTaxReturnComponent` had logic to manage and restore changes.\nThat would be a straightforward task for a hero tax return.\nIn the real world, with a rich tax return data model, the change management would be tricky.\nYou could delegate that management to a helper service, as this example does.\n\nThe `HeroTaxReturnService` caches a single `HeroTaxReturn`, tracks changes to that return, and can save or restore it.\nIt also delegates to the application-wide singleton `HeroService`, which it gets by injection.\n\n### src/app/hero-tax-return.service.ts\n\n```\n      import { Injectable } from '@angular/core';import { HeroTaxReturn } from './hero';import { HeroesService } from './heroes.service';@Injectable()export class HeroTaxReturnService {  private currentTaxReturn!: HeroTaxReturn;  private originalTaxReturn!: HeroTaxReturn;  private heroService = inject(HeroesService);  set taxReturn(htr: HeroTaxReturn) {    this.originalTaxReturn = htr;    this.currentTaxReturn  = htr.clone();  }  get taxReturn(): HeroTaxReturn {    return this.currentTaxReturn;  }  restoreTaxReturn() {    this.taxReturn = this.originalTaxReturn;  }  saveTaxReturn() {    this.taxReturn = this.currentTaxReturn;    this.heroService.saveTaxReturn(this.currentTaxReturn).subscribe();  }}\n\n```\n\ncheck\n\nHere is the `HeroTaxReturnComponent` that makes use of `HeroTaxReturnService`.\n\n### src/app/hero-tax-return.component.ts\n\n```\n      import { Component, EventEmitter, Input, Output } from '@angular/core';import { HeroTaxReturn } from './hero';import { HeroTaxReturnService } from './hero-tax-return.service';@Component({  selector: 'app-hero-tax-return',  templateUrl: './hero-tax-return.component.html',  styleUrls: [ './hero-tax-return.component.css' ],  providers: [ HeroTaxReturnService ]})export class HeroTaxReturnComponent {  message = '';  @Output() close = new EventEmitter<void>();  get taxReturn(): HeroTaxReturn {    return this.heroTaxReturnService.taxReturn;  }  @Input()  set taxReturn(htr: HeroTaxReturn) {    this.heroTaxReturnService.taxReturn = htr;  }  private heroTaxReturnService = inject(HeroTaxReturnService);  onCanceled()  {    this.flashMessage('Canceled');    this.heroTaxReturnService.restoreTaxReturn();  }  onClose() { this.close.emit(); }  onSaved() {    this.flashMessage('Saved');    this.heroTaxReturnService.saveTaxReturn();  }  flashMessage(msg: string) {    this.message = msg;    setTimeout(() => this.message = '', 500);  }}\n\n```\n\ncheck\n\nThe _tax-return-to-edit_ arrives by way of the `@Input()` property, which is implemented with getters and setters.\nThe setter initializes the component's own instance of the `HeroTaxReturnService` with the incoming return.\nThe getter always returns what that service says is the current state of the hero.\nThe component also asks the service to save and restore this tax return.\n\nThis won't work if the service is an application-wide singleton.\nEvery component would share the same service instance, and each component would overwrite the tax return that belonged to another hero.\n\nTo prevent this, configure the component-level injector of `HeroTaxReturnComponent` to provide the service, using the `providers` property in the component metadata.\n\n### src/app/hero-tax-return.component.ts (providers)\n\n```\n      providers: [HeroTaxReturnService]\n\n```\n\ncheck\n\nThe `HeroTaxReturnComponent` has its own provider of the `HeroTaxReturnService`.\nRecall that every component _instance_ has its own injector.\nProviding the service at the component level ensures that _every_ instance of the component gets a private instance of the service. This makes sure that no tax return gets overwritten.\n\n**HELPFUL:** The rest of the scenario code relies on other Angular features and techniques that you can learn about elsewhere in the documentation.\n\n### [Scenario: specialized providers](https://angular.dev/guide/di/hierarchical-dependency-injection\\#scenario-specialized-providers)\n\nAnother reason to provide a service again at another level is to substitute a _more specialized_ implementation of that service, deeper in the component tree.\n\nFor example, consider a `Car` component that includes tire service information and depends on other services to provide more details about the car.\n\nThe root injector, marked as (A), uses _generic_ providers for details about `CarService` and `EngineService`.\n\n1. `Car` component (A). Component (A) displays tire service data about a car and specifies generic services to provide more information about the car.\n\n2. Child component (B). Component (B) defines its own, _specialized_ providers for `CarService` and `EngineService` that have special capabilities suitable for what's going on in component (B).\n\n3. Child component (C) as a child of Component (B). Component (C) defines its own, even _more specialized_ provider for `CarService`.\n\n\nComponent A\n\nComponent B\n\nComponent C\n\nBehind the scenes, each component sets up its own injector with zero, one, or more providers defined for that component itself.\n\nWhen you resolve an instance of `Car` at the deepest component (C), its injector produces:\n\n- An instance of `Car` resolved by injector (C)\n- An `Engine` resolved by injector (B)\n- Its `Tires` resolved by the root injector (A).\n\n(A) RootInjector\n\nCarService, EngineService, TiresService\n\n(B) ParentInjector\n\nCarService2, EngineService2\n\n(C) ChildInjector\n\nCarService3\n\n(C) Car\n\n(B) Engine\n\n(A) Tires\n\n## [More on dependency injection](https://angular.dev/guide/di/hierarchical-dependency-injection\\#more-on-dependency-injection)",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-e5f61508-c576-476a-970d-b356ba1abde4.png"
  },
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "ogDescription": "The web development framework for building modern apps.",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "description": "The web development framework for building modern apps.",
    "application-name": "Angular",
    "ogUrl": "https://angular.dev/",
    "twitter:url": "https://angular.dev/",
    "language": "en",
    "theme-color": "#ffffff",
    "og:type": "website",
    "twitter:title": "Angular",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:description": "The web development framework for building modern apps.",
    "twitter:card": "summary_large_image",
    "og:title": "Angular",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "og:description": "The web development framework for building modern apps.",
    "og:url": "https://angular.dev/",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "title": "Hierarchical injectors • Angular",
    "apple-mobile-web-app-title": "Angular",
    "msapplication-TileColor": "#e90464",
    "scrapeId": "f20bade5-856d-40e8-955f-3e561349b3ce",
    "sourceURL": "https://angular.dev/guide/di/hierarchical-dependency-injection",
    "url": "https://angular.dev/guide/di/hierarchical-dependency-injection",
    "statusCode": 200
  }
}