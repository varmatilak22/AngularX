{
  "scrapeId": "c30a186b-130c-4ed6-b495-4bfe8e81e939",
  "sourceURL": "https://material.angular.io/cdk/layout/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\n## Overview for layout\n\nThe `layout` package provides utilities to build responsive UIs that react to screen-size changes.\n\n### [link](https://material.angular.io/cdk/layout/overview\\#breakpointobserver)  BreakpointObserver\n\nA layout **breakpoint** is viewport size threshold at which a layout shift can occur. The viewport\nsize ranges between breakpoints correspond to different standard screen sizes.\n\n`BreakpointObserver` lets you evaluate media queries to determine the current screen size and\nreact to changes when the viewport size crosses a breakpoint.\n\nRespond to viewport changes with BreakpointObserver\n\nlinkcodeopen\\_in\\_new\n\nResize your browser window to see the current screen size change.\n\nThe current screen size is **XLarge**\n\n#### [link](https://material.angular.io/cdk/layout/overview\\#check-the-current-viewport-size)  Check the current viewport size\n\nYou can use the `isMatched` method to evaluate one or more media queries against the current\nviewport size.\n\n```ts\nconst isSmallScreen = breakpointObserver.isMatched('(max-width: 599px)');\n\n```\n\n#### [link](https://material.angular.io/cdk/layout/overview\\#react-to-changes-to-the-viewport)  React to changes to the viewport\n\nYou can use the `observe` method to get an observable stream that emits whenever the viewport size\ncrosses a breakpoint.\n\n```ts\nconst layoutChanges = breakpointObserver.observe([\\\n  '(orientation: portrait)',\\\n  '(orientation: landscape)',\\\n]);\n\nlayoutChanges.subscribe(result => {\n  updateMyLayoutForOrientationChange();\n});\n\n```\n\n#### [link](https://material.angular.io/cdk/layout/overview\\#predefined-breakpoints)  Predefined breakpoints\n\nThe built-in `Breakpoints` constant offers the following predefined breakpoints for convenience,\n[originally drawn from the Material Design\\\\\nspecification](https://material.io/archive/guidelines/layout/responsive-ui.html).\n\n| Breakpoint name | Media query |\n| --- | --- |\n| `XSmall` | `(max-width: 599.98px)` |\n| `Small` | `(min-width: 600px) and (max-width: 959.98px)` |\n| `Medium` | `(min-width: 960px) and (max-width: 1279.98px)` |\n| `Large` | `(min-width: 1280px) and (max-width: 1919.98px)` |\n| `XLarge` | `(min-width: 1920px)` |\n| `Handset` | `(max-width: 599.98px) and (orientation: portrait), (max-width: 959.98px) and (orientation: landscape)` |\n| `Tablet` | `(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), (min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)` |\n| `Web` | `(min-width: 840px) and (orientation: portrait), (min-width: 1280px) and (orientation: landscape)` |\n| `HandsetPortrait` | `(max-width: 599.98px) and (orientation: portrait)` |\n| `TabletPortrait` | `(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)` |\n| `WebPortrait` | `(min-width: 840px) and (orientation: portrait)` |\n| `HandsetLandscape` | `(max-width: 959.98px) and (orientation: landscape)` |\n| `TabletLandscape` | `(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)` |\n| `WebLandscape` | `(min-width: 1280px) and (orientation: landscape)` |\n\nYou can use these predefined breakpoints with `BreakpointObserver`.\n\n```ts\nbreakpointObserver.observe([\\\n  Breakpoints.HandsetLandscape,\\\n  Breakpoints.HandsetPortrait\\\n]).subscribe(result => {\n  if (result.matches) {\n    this.activateHandsetLayout();\n  }\n});\n\n```\n\n### [link](https://material.angular.io/cdk/layout/overview\\#mediamatcher)  MediaMatcher\n\n`MediaMatcher` is a low-level utility that wraps the native `matchMedia`. This service\nnormalizes browser differences and serves as a convenient API that can be replaced with a fake in\nunit tests.\nThe `matchMedia` method can be used to get a native\n[`MediaQueryList`](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList).\n\n```ts\n@Component({...})\nclass MyComponent {\n  constructor(mediaMatcher: MediaMatcher) {\n    const mediaQueryList = mediaMatcher.matchMedia('(min-width: 1px)');\n  }\n}\n\n```\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Respond to viewport changes with BreakpointObserver example in StackBlitz\n\nCopy link to example\n\nView code",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-f3b56f7a-06ee-4ad4-b7e4-1801897eeb6d.png"
  },
  "metadata": {
    "twitter:title": "Angular Material",
    "favicon": "https://material.angular.io/cdk/layout/assets/img/favicon.ico?v=19.1.0",
    "ogLocale": "en_US",
    "og:image:height": "943",
    "theme-color": "#d7e3ff",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:card": "summary",
    "twitter:creator": "@Angular",
    "og:title": "Angular Material",
    "og:locale": "en_US",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:site_name": "Angular Material",
    "twitter:site": "@Angular",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "viewport": "width=device-width, initial-scale=1",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:type": "website",
    "apple-mobile-web-app-capable": "yes",
    "mobile-web-app-capable": "yes",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogSiteName": "Angular Material",
    "og:image:type": "image/png",
    "og:image:width": "1339",
    "ogUrl": "https://material.angular.io/",
    "author": "Angular Components Team",
    "title": "Layout | Angular Material",
    "ogTitle": "Angular Material",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "og:url": "https://material.angular.io/",
    "language": "en-US",
    "scrapeId": "c30a186b-130c-4ed6-b495-4bfe8e81e939",
    "sourceURL": "https://material.angular.io/cdk/layout/overview",
    "url": "https://material.angular.io/cdk/layout/overview",
    "statusCode": 200
  }
}