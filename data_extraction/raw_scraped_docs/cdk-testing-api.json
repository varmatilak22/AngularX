{
  "scrapeId": "d2f4ca90-c3cc-40ea-bd7a-a075c8eb6c62",
  "sourceURL": "https://material.angular.io/cdk/testing/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\nAPI for testing\n\n## API reference for Angular CDK testing\n\n`\n          import {ContentContainerComponentHarness} from '@angular/cdk/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/cdk/testing/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/cdk/testing/api\\#ComponentHarness) `ComponentHarness`\n\nBase class for component harnesses that all component harness authors should extend. This base\ncomponent harness provides the basic ability to locate element and sub-component harness. It\nshould be inherited when defining user's own harness.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `locatorFactory: LocatorFactory` |  |\n\n##### Methods\n\n| documentRootLocatorFactory |\n| --- |\n| Gets a `LocatorFactory` for the document root element. This factory can be used to create<br>locators for elements that a component creates outside of its own root element. (e.g. by<br>appending to document.body). |\n| Returns |\n| --- |\n| `LocatorFactory` |  |\n\n| async<br> <br>forceStabilize |\n| --- |\n| Flushes change detection and async tasks in the Angular zone.<br>In most cases it should not be necessary to call this manually. However, there may be some edge<br>cases where it is needed to fully flush animation events. |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| locatorFor |\n| --- |\n| Creates an asynchronous locator function that can be used to find a `ComponentHarness` instance<br>or element under the host element of this `ComponentHarness`. |\n| Parameters |\n| --- |\n| queries<br> `` | A list of queries specifying which harnesses and elements to search for:<br>- A `string` searches for elements matching the CSS selector specified by the string.<br>- A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the<br>  given class.<br>- A `HarnessPredicate` searches for `ComponentHarness` instances matching the given<br>  predicate. |\n| ...queries<br> `T` |  |\n| Returns |\n| --- |\n| `AsyncFactoryFn<LocatorFnResult<T>>` | An asynchronous locator function that searches for and returns a `Promise` for the<br>first element or harness matching the given search criteria. Matches are ordered first by<br>order in the DOM, and second by order in the queries list. If no matches are found, the<br>`Promise` rejects. The type that the `Promise` resolves to is a union of all result types for<br>each query.<br>e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming<br>`DivHarness.hostSelector === 'div'`:<br>- `await ch.locatorFor(DivHarness, 'div')()` gets a `DivHarness` instance for `#d1`<br>- `await ch.locatorFor('div', DivHarness)()` gets a `TestElement` instance for `#d1`<br>- `await ch.locatorFor('span')()` throws because the `Promise` rejects. |\n\n| locatorForAll |\n| --- |\n| Creates an asynchronous locator function that can be used to find `ComponentHarness` instances<br>or elements under the host element of this `ComponentHarness`. |\n| Parameters |\n| --- |\n| queries<br> `` | A list of queries specifying which harnesses and elements to search for:<br>- A `string` searches for elements matching the CSS selector specified by the string.<br>- A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the<br>  given class.<br>- A `HarnessPredicate` searches for `ComponentHarness` instances matching the given<br>  predicate. |\n| ...queries<br> `T` |  |\n| Returns |\n| --- |\n| `AsyncFactoryFn<LocatorFnResult<T>[]>` | An asynchronous locator function that searches for and returns a `Promise` for all<br>elements and harnesses matching the given search criteria. Matches are ordered first by<br>order in the DOM, and second by order in the queries list. If an element matches more than<br>one `ComponentHarness` class, the locator gets an instance of each for the same element. If<br>an element matches multiple `string` selectors, only one `TestElement` instance is returned<br>for that element. The type that the `Promise` resolves to is an array where each element is<br>the union of all result types for each query.<br>e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming<br>`DivHarness.hostSelector === 'div'` and `IdIsD1Harness.hostSelector === '#d1'`:<br>- `await ch.locatorForAll(DivHarness, 'div')()` gets `[<br>    DivHarness, // for #d1<br>    TestElement, // for #d1<br>    DivHarness, // for #d2<br>    TestElement // for #d2<br>  ]`<br>- `await ch.locatorForAll('div', '#d1')()` gets `[<br>    TestElement, // for #d1<br>    TestElement // for #d2<br>  ]`<br>- `await ch.locatorForAll(DivHarness, IdIsD1Harness)()` gets `[<br>    DivHarness, // for #d1<br>    IdIsD1Harness, // for #d1<br>    DivHarness // for #d2<br>  ]`<br>- `await ch.locatorForAll('span')()` gets `[]`. |\n\n| locatorForOptional |\n| --- |\n| Creates an asynchronous locator function that can be used to find a `ComponentHarness` instance<br>or element under the host element of this `ComponentHarness`. |\n| Parameters |\n| --- |\n| queries<br> `` | A list of queries specifying which harnesses and elements to search for:<br>- A `string` searches for elements matching the CSS selector specified by the string.<br>- A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the<br>  given class.<br>- A `HarnessPredicate` searches for `ComponentHarness` instances matching the given<br>  predicate. |\n| ...queries<br> `T` |  |\n| Returns |\n| --- |\n| `AsyncFactoryFn<LocatorFnResult<T> | null>` | An asynchronous locator function that searches for and returns a `Promise` for the<br>first element or harness matching the given search criteria. Matches are ordered first by<br>order in the DOM, and second by order in the queries list. If no matches are found, the<br>`Promise` is resolved with `null`. The type that the `Promise` resolves to is a union of all<br>result types for each query or null.<br>e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming<br>`DivHarness.hostSelector === 'div'`:<br>- `await ch.locatorForOptional(DivHarness, 'div')()` gets a `DivHarness` instance for `#d1`<br>- `await ch.locatorForOptional('div', DivHarness)()` gets a `TestElement` instance for `#d1`<br>- `await ch.locatorForOptional('span')()` gets `null`. |\n\n| async<br> <br>waitForTasksOutsideAngular |\n| --- |\n| Waits for all scheduled or running async tasks to complete. This allows harness<br>authors to wait for async tasks outside of the Angular zone. |\n\n#### [link](https://material.angular.io/cdk/testing/api\\#ContentContainerComponentHarness) `ContentContainerComponentHarness`extends [ComponentHarness](https://material.angular.io/cdk/testing/cdk/testing/api\\#ComponentHarness)\n\nBase class for component harnesses that authors should extend if they anticipate that consumers\nof the harness may want to access other harnesses within the `<ng-content>` of the component.\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getRootHarnessLoader |\n| --- |\n| Gets the root harness loader from which to start<br>searching for content contained by this harness. |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n#### [link](https://material.angular.io/cdk/testing/api\\#HarnessPredicate) `HarnessPredicate`\n\nA class used to associate a ComponentHarness class with predicates functions that can be used to\nfilter instances of the class.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `harnessType: ComponentHarnessConstructor<T>` |  |\n\n##### Methods\n\n| add |\n| --- |\n| Adds a predicate function to be run against candidate harnesses. |\n| Parameters |\n| --- |\n| description<br> `string` | A description of this predicate that may be used in error messages. |\n| predicate<br> `AsyncPredicate<T>` | An async predicate function. |\n\n| addOption |\n| --- |\n| Adds a predicate function that depends on an option value to be run against candidate<br>harnesses. If the option value is undefined, the predicate will be ignored. |\n| Parameters |\n| --- |\n| name<br> `string` | The name of the option (may be used in error messages). |\n| option<br> `O` | The option value. |\n| predicate<br> `AsyncOptionPredicate<T, O>` | The predicate function to run if the option value is not undefined. |\n\n| async<br> <br>evaluate |\n| --- |\n| Evaluates whether the given harness satisfies this predicate. |\n| Parameters |\n| --- |\n| harness<br> `T` | The harness to check |\n| Returns |\n| --- |\n| `Promise<boolean>` | A promise that resolves to true if the harness satisfies this predicate,<br>and resolves to false otherwise. |\n\n| async<br> <br>filter |\n| --- |\n| Filters a list of harnesses on this predicate. |\n| Parameters |\n| --- |\n| harnesses<br> `T[]` | The list of harnesses to filter. |\n| Returns |\n| --- |\n| `Promise<T[]>` | A list of harnesses that satisfy this predicate. |\n\n| getDescription |\n| --- |\n| Gets a description of this predicate for use in error messages. |\n\n| getSelector |\n| --- |\n| Gets the selector used to find candidate elements. |\n\n| static<br> <br>async<br> <br>stringMatches |\n| --- |\n| Checks if the specified nullable string value matches the given pattern. |\n| Parameters |\n| --- |\n| value<br> `string | Promise<string>` | The nullable string value to check, or a Promise resolving to the<br>nullable string value. |\n| pattern<br> `string | RegExp` | The pattern the value is expected to match. If `pattern` is a string,<br>`value` is expected to match exactly. If `pattern` is a regex, a partial match is<br>allowed. If `pattern` is `null`, the value is expected to be `null`. |\n| Returns |\n| --- |\n| `Promise<boolean>` | Whether the value matches the pattern. |\n\n#### [link](https://material.angular.io/cdk/testing/api\\#HarnessEnvironment) `HarnessEnvironment`\n\nBase harness environment class that can be extended to allow `ComponentHarness` es to be used in\ndifferent test environments (e.g. testbed, protractor, etc.). This class implements the\nfunctionality of both a `HarnessLoader` and `LocatorFactory`. This class is generic on the raw\nelement type, `E`, used by the particular test environment.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `rawRootElement: E` |  |\n| `rootElement: TestElement` |  |\n\n##### Methods\n\n| createComponentHarness |\n| --- |\n| Creates a `ComponentHarness` for the given harness type with the given raw host element. |\n| Parameters |\n| --- |\n| harnessType<br> `ComponentHarnessConstructor<T>` |  |\n| element<br> `E` |  |\n| Returns |\n| --- |\n| `T` |  |\n\n| createEnvironment |\n| --- |\n| Creates a `HarnessLoader` rooted at the given raw element. |\n| Parameters |\n| --- |\n| element<br> `E` |  |\n| Returns |\n| --- |\n| `HarnessEnvironment<E>` |  |\n\n| createTestElement |\n| --- |\n| Creates a `TestElement` from a raw element. |\n| Parameters |\n| --- |\n| element<br> `E` |  |\n| Returns |\n| --- |\n| `TestElement` |  |\n\n| documentRootLocatorFactory |\n| --- |\n| Returns |\n| --- |\n| `LocatorFactory` |  |\n\n| async<br> <br>forceStabilize |\n| --- |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getAllRawElements |\n| --- |\n| Gets a list of all elements matching the given selector under this environment's root element. |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<E[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| getDocumentRoot |\n| --- |\n| Gets the root element for the document. |\n| Returns |\n| --- |\n| `E` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>harnessLoaderFor |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>harnessLoaderForAll |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>harnessLoaderForOptional |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader | null>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| locatorFor |\n| --- |\n| Parameters |\n| --- |\n| ...queries<br> `T` |  |\n| Returns |\n| --- |\n| `AsyncFactoryFn<LocatorFnResult<T>>` |  |\n\n| locatorForAll |\n| --- |\n| Parameters |\n| --- |\n| ...queries<br> `T` |  |\n| Returns |\n| --- |\n| `AsyncFactoryFn<LocatorFnResult<T>[]>` |  |\n\n| locatorForOptional |\n| --- |\n| Parameters |\n| --- |\n| ...queries<br> `T` |  |\n| Returns |\n| --- |\n| `AsyncFactoryFn<LocatorFnResult<T> | null>` |  |\n\n| async<br> <br>rootHarnessLoader |\n| --- |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>waitForTasksOutsideAngular |\n| --- |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n### [link](https://material.angular.io/cdk/testing/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/cdk/testing/api\\#HarnessLoader) `HarnessLoader`\n\nInterface used to load ComponentHarness objects. This interface is used by test authors to\ninstantiate `ComponentHarness` es.\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Searches for all elements with the given selector under the current instances's root element,<br>and returns an array of `HarnessLoader` s, one for each matching element, rooted at that<br>element. |\n| Parameters |\n| --- |\n| selector<br> `string` | The selector for the root element of the new `HarnessLoader` |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` | A list of `HarnessLoader` s, one for each matching element, rooted at that element. |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Searches for all instances of the component corresponding to the given harness type under the<br>`HarnessLoader`'s root element, and returns a list `ComponentHarness` for each instance. |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` | A query for a harness to create |\n| Returns |\n| --- |\n| `Promise<T[]>` | A list instances of the given harness type. |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Searches for an element with the given selector under the current instances's root element,<br>and returns a `HarnessLoader` rooted at the matching element. If multiple elements match the<br>selector, the first is used. If no elements match, an error is thrown. |\n| Parameters |\n| --- |\n| selector<br> `string` | The selector for the root element of the new `HarnessLoader` |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` | A `HarnessLoader` rooted at the element matching the given selector. |\n\n| async<br> <br>getHarness |\n| --- |\n| Searches for an instance of the component corresponding to the given harness type under the<br>`HarnessLoader`'s root element, and returns a `ComponentHarness` for that instance. If multiple<br>matching components are found, a harness for the first one is returned. If no matching<br>component is found, an error is thrown. |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` | A query for a harness to create |\n| Returns |\n| --- |\n| `Promise<T>` | An instance of the given harness type |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Searches for an instance of the component corresponding to the given harness type under the<br>`HarnessLoader`'s root element, and returns a `ComponentHarness` for that instance. If multiple<br>matching components are found, a harness for the first one is returned. If no matching<br>component is found, null is returned. |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` | A query for a harness to create |\n| Returns |\n| --- |\n| `Promise<T | null>` | An instance of the given harness type (or null if not found). |\n\n| async<br> <br>hasHarness |\n| --- |\n| Searches for an instance of the component corresponding to the given harness type under the<br>`HarnessLoader`'s root element, and returns a boolean indicating if any were found. |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` | A query for a harness to create |\n| Returns |\n| --- |\n| `Promise<boolean>` | A boolean indicating if an instance was found. |\n\n#### [link](https://material.angular.io/cdk/testing/api\\#LocatorFactory) `LocatorFactory`\n\nInterface used to create asynchronous locator functions used find elements and component\nharnesses. This interface is used by `ComponentHarness` authors to create locator functions for\ntheir `ComponentHarness` subclass.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `rootElement: TestElement` | The root element of this `LocatorFactory` as a `TestElement`. |\n\n##### Methods\n\n| documentRootLocatorFactory |\n| --- |\n| Gets a locator factory rooted at the document root. |\n| Returns |\n| --- |\n| `LocatorFactory` |  |\n\n| async<br> <br>forceStabilize |\n| --- |\n| Flushes change detection and async tasks captured in the Angular zone.<br>In most cases it should not be necessary to call this manually. However, there may be some edge<br>cases where it is needed to fully flush animation events. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>harnessLoaderFor |\n| --- |\n| Gets a `HarnessLoader` instance for an element under the root of this `LocatorFactory`. |\n| Parameters |\n| --- |\n| selector<br> `string` | The selector for the root element. |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` | A `HarnessLoader` rooted at the first element matching the given selector. |\n\n| async<br> <br>harnessLoaderForAll |\n| --- |\n| Gets a list of `HarnessLoader` instances, one for each matching element. |\n| Parameters |\n| --- |\n| selector<br> `string` | The selector for the root element. |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` | A list of `HarnessLoader`, one rooted at each element matching the given selector. |\n\n| async<br> <br>harnessLoaderForOptional |\n| --- |\n| Gets a `HarnessLoader` instance for an element under the root of this `LocatorFactory` |\n| Parameters |\n| --- |\n| selector<br> `string` | The selector for the root element. |\n| Returns |\n| --- |\n| `Promise<HarnessLoader | null>` | A `HarnessLoader` rooted at the first element matching the given selector, or null if<br>no matching element is found. |\n\n| locatorFor |\n| --- |\n| Creates an asynchronous locator function that can be used to find a `ComponentHarness` instance<br>or element under the root element of this `LocatorFactory`. |\n| Parameters |\n| --- |\n| queries<br> `` | A list of queries specifying which harnesses and elements to search for:<br>- A `string` searches for elements matching the CSS selector specified by the string.<br>- A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the<br>  given class.<br>- A `HarnessPredicate` searches for `ComponentHarness` instances matching the given<br>  predicate. |\n| ...queries<br> `T` |  |\n| Returns |\n| --- |\n| `AsyncFactoryFn<LocatorFnResult<T>>` | An asynchronous locator function that searches for and returns a `Promise` for the<br>first element or harness matching the given search criteria. Matches are ordered first by<br>order in the DOM, and second by order in the queries list. If no matches are found, the<br>`Promise` rejects. The type that the `Promise` resolves to is a union of all result types for<br>each query.<br>e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming<br>`DivHarness.hostSelector === 'div'`:<br>- `await lf.locatorFor(DivHarness, 'div')()` gets a `DivHarness` instance for `#d1`<br>- `await lf.locatorFor('div', DivHarness)()` gets a `TestElement` instance for `#d1`<br>- `await lf.locatorFor('span')()` throws because the `Promise` rejects. |\n\n| locatorForAll |\n| --- |\n| Creates an asynchronous locator function that can be used to find `ComponentHarness` instances<br>or elements under the root element of this `LocatorFactory`. |\n| Parameters |\n| --- |\n| queries<br> `` | A list of queries specifying which harnesses and elements to search for:<br>- A `string` searches for elements matching the CSS selector specified by the string.<br>- A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the<br>  given class.<br>- A `HarnessPredicate` searches for `ComponentHarness` instances matching the given<br>  predicate. |\n| ...queries<br> `T` |  |\n| Returns |\n| --- |\n| `AsyncFactoryFn<LocatorFnResult<T>[]>` | An asynchronous locator function that searches for and returns a `Promise` for all<br>elements and harnesses matching the given search criteria. Matches are ordered first by<br>order in the DOM, and second by order in the queries list. If an element matches more than<br>one `ComponentHarness` class, the locator gets an instance of each for the same element. If<br>an element matches multiple `string` selectors, only one `TestElement` instance is returned<br>for that element. The type that the `Promise` resolves to is an array where each element is<br>the union of all result types for each query.<br>e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming<br>`DivHarness.hostSelector === 'div'` and `IdIsD1Harness.hostSelector === '#d1'`:<br>- `await lf.locatorForAll(DivHarness, 'div')()` gets `[<br>    DivHarness, // for #d1<br>    TestElement, // for #d1<br>    DivHarness, // for #d2<br>    TestElement // for #d2<br>  ]`<br>- `await lf.locatorForAll('div', '#d1')()` gets `[<br>    TestElement, // for #d1<br>    TestElement // for #d2<br>  ]`<br>- `await lf.locatorForAll(DivHarness, IdIsD1Harness)()` gets `[<br>    DivHarness, // for #d1<br>    IdIsD1Harness, // for #d1<br>    DivHarness // for #d2<br>  ]`<br>- `await lf.locatorForAll('span')()` gets `[]`. |\n\n| locatorForOptional |\n| --- |\n| Creates an asynchronous locator function that can be used to find a `ComponentHarness` instance<br>or element under the root element of this `LocatorFactory`. |\n| Parameters |\n| --- |\n| queries<br> `` | A list of queries specifying which harnesses and elements to search for:<br>- A `string` searches for elements matching the CSS selector specified by the string.<br>- A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the<br>  given class.<br>- A `HarnessPredicate` searches for `ComponentHarness` instances matching the given<br>  predicate. |\n| ...queries<br> `T` |  |\n| Returns |\n| --- |\n| `AsyncFactoryFn<LocatorFnResult<T> | null>` | An asynchronous locator function that searches for and returns a `Promise` for the<br>first element or harness matching the given search criteria. Matches are ordered first by<br>order in the DOM, and second by order in the queries list. If no matches are found, the<br>`Promise` is resolved with `null`. The type that the `Promise` resolves to is a union of all<br>result types for each query or null.<br>e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming<br>`DivHarness.hostSelector === 'div'`:<br>- `await lf.locatorForOptional(DivHarness, 'div')()` gets a `DivHarness` instance for `#d1`<br>- `await lf.locatorForOptional('div', DivHarness)()` gets a `TestElement` instance for `#d1`<br>- `await lf.locatorForOptional('span')()` gets `null`. |\n\n| async<br> <br>rootHarnessLoader |\n| --- |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` | A `HarnessLoader` rooted at the root element of this `LocatorFactory`. |\n\n| async<br> <br>waitForTasksOutsideAngular |\n| --- |\n| Waits for all scheduled or running async tasks to complete. This allows harness<br>authors to wait for async tasks outside of the Angular zone. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n#### [link](https://material.angular.io/cdk/testing/api\\#ComponentHarnessConstructor) `ComponentHarnessConstructor`\n\nConstructor for a ComponentHarness subclass.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `hostSelector: string` | `ComponentHarness` subclasses must specify a static `hostSelector` property that is used to<br>find the host element for the corresponding component. This property should match the selector<br>for the Angular component. |\n\n##### Methods\n\n| new |\n| --- |\n| Parameters |\n| --- |\n| locatorFactory<br> `LocatorFactory` |  |\n| Returns |\n| --- |\n| `T` |  |\n\n#### [link](https://material.angular.io/cdk/testing/api\\#BaseHarnessFilters) `BaseHarnessFilters`\n\nA set of criteria that can be used to filter a list of `ComponentHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `ancestor: string` | Only find instances that are nested under an element with the given selector. |\n| `selector: string` | Only find instances whose host element matches the given selector. |\n\n#### [link](https://material.angular.io/cdk/testing/api\\#ModifierKeys) `ModifierKeys`\n\nModifier keys that may be held while typing.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `alt: boolean` |  |\n| `control: boolean` |  |\n| `meta: boolean` |  |\n| `shift: boolean` |  |\n\n#### [link](https://material.angular.io/cdk/testing/api\\#TestElement) `TestElement`\n\nThis acts as a common interface for DOM elements across both unit and e2e tests. It is the\ninterface through which the ComponentHarness interacts with the component's DOM.\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blur the element. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>clear |\n| --- |\n| Clear the element's input (for input and textarea elements only). |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>click |\n| --- |\n| Click the element at the default location for the current environment. If you need to guarantee<br>the element is clicked at a specific location, consider using `click('center')` or<br>`click(x, y)` instead. |\n| Parameters |\n| --- |\n| modifiers?<br> `ModifierKeys` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>dispatchEvent |\n| --- |\n| Dispatches an event with a particular name. |\n| Parameters |\n| --- |\n| name<br> `string` | Name of the event to be dispatched. |\n| data?<br> `Record<string, EventData>` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focus the element. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAttribute |\n| --- |\n| Gets the value for the given attribute from the element. |\n| Parameters |\n| --- |\n| name<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getCssValue |\n| --- |\n| Get the computed value of the given CSS property for the element. |\n| Parameters |\n| --- |\n| property<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getDimensions |\n| --- |\n| Gets the dimensions of the element. |\n| Returns |\n| --- |\n| `Promise<ElementDimensions>` |  |\n\n| async<br> <br>getProperty |\n| --- |\n| Gets the value of a property of an element. |\n| Parameters |\n| --- |\n| name<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>hasClass |\n| --- |\n| Checks whether the element has the given class. |\n| Parameters |\n| --- |\n| name<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hover |\n| --- |\n| Hovers the mouse over the element. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>isFocused |\n| --- |\n| Checks whether the element is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>matchesSelector |\n| --- |\n| Checks whether this element matches the given selector. |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>mouseAway |\n| --- |\n| Moves the mouse away from the element. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>rightClick |\n| --- |\n| Right clicks on the element at the specified coordinates relative to the top-left of it. |\n| Parameters |\n| --- |\n| relativeX<br> `number` | Coordinate within the element, along the X-axis at which to click. |\n| relativeY<br> `number` | Coordinate within the element, along the Y-axis at which to click. |\n| modifiers?<br> `ModifierKeys` | Modifier keys held while clicking |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>selectOptions |\n| --- |\n| Selects the options at the specified indexes inside of a native `select` element. |\n| Parameters |\n| --- |\n| ...optionIndexes<br> `number[]` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>sendKeys |\n| --- |\n| Sends the given string to the input as a series of key presses. Also fires input events<br>and attempts to add the string to the Element's value. Note that some environments cannot<br>reproduce native browser behavior for keyboard shortcuts such as Tab, Ctrl + A, etc. |\n| Parameters |\n| --- |\n| ...keys<br> `(string | TestKey)[]` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>setContenteditableValue |\n| --- |\n| Sets the value of a `contenteditable` element. |\n| Parameters |\n| --- |\n| value<br> `string` | Value to be set on the element. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>setInputValue |\n| --- |\n| Sets the value of a property of an input. |\n| Parameters |\n| --- |\n| value<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>text |\n| --- |\n| Gets the text from the element. |\n| Parameters |\n| --- |\n| options?<br> `TextOptions` | Options that affect what text is included. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n#### [link](https://material.angular.io/cdk/testing/api\\#TextOptions) `TextOptions`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `exclude: string` | Optional selector for elements to exclude. |\n\n#### [link](https://material.angular.io/cdk/testing/api\\#ElementDimensions) `ElementDimensions`\n\nDimensions for element size and its position relative to the viewport.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `height: number` |  |\n| `left: number` |  |\n| `top: number` |  |\n| `width: number` |  |\n\n#### [link](https://material.angular.io/cdk/testing/api\\#AutoChangeDetectionStatus) `AutoChangeDetectionStatus`\n\nRepresents the status of auto change detection.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `isDisabled: boolean` | Whether auto change detection is disabled. |\n| `onDetectChangesNow: () => void` | An optional callback, if present it indicates that change detection should be run immediately,<br>while handling the status change. The callback should then be called as soon as change<br>detection is done. |\n\n### [link](https://material.angular.io/cdk/testing/api\\#functions)  Functions\n\n| handleAutoChangeDetectionStatus |\n| --- |\n| Allows a test `HarnessEnvironment` to install its own handler for auto change detection status<br>changes. |\n| Parameters |\n| --- |\n| handler<br> `(status: AutoChangeDetectionStatus) => void` | The handler for the auto change detection status. |\n\n| stopHandlingAutoChangeDetectionStatus |\n| --- |\n| Allows a `HarnessEnvironment` to stop handling auto change detection status changes. |\n\n| async<br> <br>manualChangeDetection |\n| --- |\n| Disables the harness system's auto change detection for the duration of the given function. |\n| Parameters |\n| --- |\n| fn<br> `() => Promise<T>` | The function to disable auto change detection for. |\n\n| async<br> <br>parallel |\n| --- |\n| Resolves the given list of async values in parallel (i.e. via Promise.all) while batching change<br>detection over the entire operation such that change detection occurs exactly once before<br>resolving the values and once after. |\n| Parameters |\n| --- |\n| values<br> `() => Iterable<T | PromiseLike<T>>` | A getter for the async values to resolve in parallel with batched change detection. |\n| Returns |\n| --- |\n| `Promise<T[]>` | The resolved values. |\n\n### [link](https://material.angular.io/cdk/testing/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/cdk/testing/api\\#AsyncFactoryFn) `AsyncFactoryFn`\n\nAn async function that returns a promise when called.\n\n```docs-markdown-code\ntype AsyncFactoryFn = () => Promise<T>;\n\n```\n\n#### [link](https://material.angular.io/cdk/testing/api\\#AsyncPredicate) `AsyncPredicate`\n\nAn async function that takes an item and returns a boolean promise\n\n```docs-markdown-code\ntype AsyncPredicate = (item: T) => Promise<boolean>;\n\n```\n\n#### [link](https://material.angular.io/cdk/testing/api\\#AsyncOptionPredicate) `AsyncOptionPredicate`\n\nAn async function that takes an item and an option value and returns a boolean promise.\n\n```docs-markdown-code\ntype AsyncOptionPredicate = (item: T, option: O) => Promise<boolean>;\n\n```\n\n#### [link](https://material.angular.io/cdk/testing/api\\#HarnessQuery) `HarnessQuery`\n\nA query for a `ComponentHarness`, which is expressed as either a `ComponentHarnessConstructor` or\na `HarnessPredicate`.\n\n```docs-markdown-code\ntype HarnessQuery = ComponentHarnessConstructor<T> | HarnessPredicate<T>;\n\n```\n\n#### [link](https://material.angular.io/cdk/testing/api\\#LocatorFnResult) `LocatorFnResult`\n\nThe result type obtained when searching using a particular list of queries. This type depends on\nthe particular items being queried.\n\n- If one of the queries is for a `ComponentHarnessConstructor<C1>`, it means that the result\nmight be a harness of type `C1`\n- If one of the queries is for a `HarnessPredicate<C2>`, it means that the result might be a\nharness of type `C2`\n- If one of the queries is for a `string`, it means that the result might be a `TestElement`.\n\nSince we don't know for sure which query will match, the result type if the union of the types\nfor all possible results.\n\ne.g.\nThe type:\n`LocatorFnResult&lt;[\\\nComponentHarnessConstructor&lt;MyHarness&gt;,\\\nHarnessPredicate&lt;MyOtherHarness&gt;,\\\nstring\\\n]&gt;`\nis equivalent to:\n`MyHarness | MyOtherHarness | TestElement`.\n\n```docs-markdown-code\ntype LocatorFnResult = {\n    [I in keyof T]: T[I] extends new (...args: any[]) => infer C ? C : T[I] extends {\n        harnessType: new (...args: any[]) => infer C;\n    } ? C : T[I] extends string ? TestElement : never;\n}[number];\n\n```\n\n#### [link](https://material.angular.io/cdk/testing/api\\#EventData) `EventData`\n\nData that can be attached to a custom event dispatched from a `TestElement`.\n\n```docs-markdown-code\ntype EventData = string | number | boolean | Function | undefined | null | EventData[] | {\n    [key: string]: EventData;\n};\n\n```\n\n## API reference for Angular CDK testing-testbed\n\nImport symbols from `@angular/cdk/testing/testbed`\n\n### [link](https://material.angular.io/cdk/testing/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/cdk/testing/api\\#TestbedHarnessEnvironment) `TestbedHarnessEnvironment`extends [HarnessEnvironment](https://material.angular.io/cdk/testing/cdk/testing/api\\#HarnessEnvironment)\n\nA `HarnessEnvironment` implementation for Angular's Testbed.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `rootElement: TestElement` |  |\n\n##### Methods\n\n| createEnvironment |\n| --- |\n| Creates a `HarnessLoader` rooted at the given raw element. |\n| Parameters |\n| --- |\n| element<br> `Element` |  |\n| Returns |\n| --- |\n| `HarnessEnvironment<Element>` |  |\n\n| createTestElement |\n| --- |\n| Creates a `TestElement` from a raw element. |\n| Parameters |\n| --- |\n| element<br> `Element` |  |\n| Returns |\n| --- |\n| `TestElement` |  |\n\n| static<br> <br>documentRootLoader |\n| --- |\n| Creates a `HarnessLoader` at the document root. This can be used if harnesses are<br>located outside of a fixture (e.g. overlays appended to the document body). |\n| Parameters |\n| --- |\n| fixture<br> `ComponentFixture<unknown>` |  |\n| options?<br> `TestbedHarnessEnvironmentOptions` |  |\n| Returns |\n| --- |\n| `HarnessLoader` |  |\n\n| documentRootLocatorFactory |\n| --- |\n| Returns |\n| --- |\n| `LocatorFactory` |  |\n\n| async<br> <br>forceStabilize |\n| --- |\n| Flushes change detection and async tasks captured in the Angular zone.<br>In most cases it should not be necessary to call this manually. However, there may be some edge<br>cases where it is needed to fully flush animation events. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getAllRawElements |\n| --- |\n| Gets a list of all elements matching the given selector under this environment's root element. |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<Element[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| getDocumentRoot |\n| --- |\n| Gets the root element for the document. |\n| Returns |\n| --- |\n| `Element` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| static<br> <br>getNativeElement |\n| --- |\n| Gets the native DOM element corresponding to the given TestElement. |\n| Parameters |\n| --- |\n| el<br> `TestElement` |  |\n| Returns |\n| --- |\n| `Element` |  |\n\n| static<br> <br>async<br> <br>harnessForFixture |\n| --- |\n| Creates an instance of the given harness type, using the fixture's root element as the<br>harness's host element. This method should be used when creating a harness for the root element<br>of a fixture, as components do not have the correct selector when they are created as the root<br>of the fixture. |\n| Parameters |\n| --- |\n| fixture<br> `ComponentFixture<unknown>` |  |\n| harnessType<br> `ComponentHarnessConstructor<T>` |  |\n| options?<br> `TestbedHarnessEnvironmentOptions` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>harnessLoaderFor |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>harnessLoaderForAll |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>harnessLoaderForOptional |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader | null>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>loader |\n| --- |\n| Creates a `HarnessLoader` rooted at the given fixture's root element. |\n| Parameters |\n| --- |\n| fixture<br> `ComponentFixture<unknown>` |  |\n| options?<br> `TestbedHarnessEnvironmentOptions` |  |\n| Returns |\n| --- |\n| `HarnessLoader` |  |\n\n| locatorFor |\n| --- |\n| Parameters |\n| --- |\n| ...queries<br> `T` |  |\n| Returns |\n| --- |\n| `AsyncFactoryFn<LocatorFnResult<T>>` |  |\n\n| locatorForAll |\n| --- |\n| Parameters |\n| --- |\n| ...queries<br> `T` |  |\n| Returns |\n| --- |\n| `AsyncFactoryFn<LocatorFnResult<T>[]>` |  |\n\n| locatorForOptional |\n| --- |\n| Parameters |\n| --- |\n| ...queries<br> `T` |  |\n| Returns |\n| --- |\n| `AsyncFactoryFn<LocatorFnResult<T> | null>` |  |\n\n| async<br> <br>rootHarnessLoader |\n| --- |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>waitForTasksOutsideAngular |\n| --- |\n| Waits for all scheduled or running async tasks to complete. This allows harness<br>authors to wait for async tasks outside of the Angular zone. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n#### [link](https://material.angular.io/cdk/testing/api\\#UnitTestElement) `UnitTestElement`\n\nA `TestElement` implementation for unit tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `element: Element` |  |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blur the element. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>clear |\n| --- |\n| Clear the element's input (for input and textarea elements only). |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>click |\n| --- |\n| Click the element at the default location for the current environment. If you need to guarantee<br>the element is clicked at a specific location, consider using `click('center')` or<br>`click(x, y)` instead. |\n| Parameters |\n| --- |\n| modifiers?<br> `ModifierKeys` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>click |\n| --- |\n| Click the element at the element's center. |\n| Parameters |\n| --- |\n| location<br> `\"center\"` |  |\n| modifiers?<br> `ModifierKeys` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>click |\n| --- |\n| Click the element at the specified coordinates relative to the top-left of the element. |\n| Parameters |\n| --- |\n| relativeX<br> `number` | Coordinate within the element, along the X-axis at which to click. |\n| relativeY<br> `number` | Coordinate within the element, along the Y-axis at which to click. |\n| modifiers?<br> `ModifierKeys` | Modifier keys held while clicking |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>dispatchEvent |\n| --- |\n| Dispatches an event with a particular name. |\n| Parameters |\n| --- |\n| name<br> `string` | Name of the event to be dispatched. |\n| data?<br> `Record<string, EventData>` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focus the element. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAttribute |\n| --- |\n| Gets the value for the given attribute from the element. |\n| Parameters |\n| --- |\n| name<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getCssValue |\n| --- |\n| Get the computed value of the given CSS property for the element. |\n| Parameters |\n| --- |\n| property<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getDimensions |\n| --- |\n| Gets the dimensions of the element. |\n| Returns |\n| --- |\n| `Promise<ElementDimensions>` |  |\n\n| async<br> <br>getProperty |\n| --- |\n| Gets the value of a property of an element. |\n| Parameters |\n| --- |\n| name<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>hasClass |\n| --- |\n| Checks whether the element has the given class. |\n| Parameters |\n| --- |\n| name<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hover |\n| --- |\n| Hovers the mouse over the element. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>isFocused |\n| --- |\n| Checks whether the element is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>matchesSelector |\n| --- |\n| Checks whether this element matches the given selector. |\n| Parameters |\n| --- |\n| selector<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>mouseAway |\n| --- |\n| Moves the mouse away from the element. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>rightClick |\n| --- |\n| Parameters |\n| --- |\n| ...args<br> `[ModifierKeys?] | [\"center\", ModifierKeys?] | [number, number, ModifierKeys?]` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>selectOptions |\n| --- |\n| Selects the options at the specified indexes inside of a native `select` element. |\n| Parameters |\n| --- |\n| ...optionIndexes<br> `number[]` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>sendKeys |\n| --- |\n| Sends the given string to the input as a series of key presses. Also fires input events<br>and attempts to add the string to the Element's value. Note that this cannot<br>reproduce native browser behavior for keyboard shortcuts such as Tab, Ctrl + A, etc. |\n| Parameters |\n| --- |\n| ...keys<br> `(string | TestKey)[]` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>sendKeys |\n| --- |\n| Sends the given string to the input as a series of key presses. Also fires input events<br>and attempts to add the string to the Element's value. |\n| Parameters |\n| --- |\n| modifiers<br> `ModifierKeys` |  |\n| ...keys<br> `(string | TestKey)[]` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>setContenteditableValue |\n| --- |\n| Sets the value of a `contenteditable` element. |\n| Parameters |\n| --- |\n| value<br> `string` | Value to be set on the element. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>setInputValue |\n| --- |\n| Sets the value of a property of an input. |\n| Parameters |\n| --- |\n| value<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>text |\n| --- |\n| Gets the text from the element. |\n| Parameters |\n| --- |\n| options?<br> `TextOptions` | Options that affect what text is included. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n### [link](https://material.angular.io/cdk/testing/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/cdk/testing/api\\#TestbedHarnessEnvironmentOptions) `TestbedHarnessEnvironmentOptions`\n\nOptions to configure the environment.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `queryFn: (selector: string, root: Element) => Iterable<Element> | ArrayLike<Element>` | The query function used to find DOM elements. |\n\nFailed to load document: /docs-content/api-docs/cdk-testing-protractor.html. Error: OK\n\nComponent Harnesses\n\nTestbed\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-6769d501-c7c2-45e3-a1bb-5751053164d0.png"
  },
  "metadata": {
    "twitter:card": "summary",
    "og:image:height": "943",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "theme-color": "#d7e3ff",
    "twitter:creator": "@Angular",
    "mobile-web-app-capable": "yes",
    "ogUrl": "https://material.angular.io/",
    "language": "en-US",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "twitter:site": "@Angular",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "title": "Component Harnesses | Angular Material",
    "og:url": "https://material.angular.io/",
    "author": "Angular Components Team",
    "apple-mobile-web-app-capable": "yes",
    "og:image:type": "image/png",
    "og:title": "Angular Material",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "ogTitle": "Angular Material",
    "viewport": "width=device-width, initial-scale=1",
    "og:type": "website",
    "og:site_name": "Angular Material",
    "og:locale": "en_US",
    "ogLocale": "en_US",
    "twitter:title": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogSiteName": "Angular Material",
    "favicon": "https://material.angular.io/cdk/testing/assets/img/favicon.ico?v=19.1.0",
    "og:image:width": "1339",
    "scrapeId": "d2f4ca90-c3cc-40ea-bd7a-a075c8eb6c62",
    "sourceURL": "https://material.angular.io/cdk/testing/api",
    "url": "https://material.angular.io/cdk/testing/api",
    "statusCode": 200
  }
}