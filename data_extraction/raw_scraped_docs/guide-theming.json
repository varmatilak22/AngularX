{
  "scrapeId": "9141a1cb-c10f-4f4e-a841-59ae14634719",
  "sourceURL": "https://material.angular.io/guide/theming",
  "statusCode": 200,
  "data": {
    "markdown": "# Theming\n\nAngular Material lets you customize the appearance of your components by\ndefining a custom theme. Angular Material’s theming system is inspired by\nGoogle’s [Material Design](https://m3.material.io/styles).\n\nThis guide describes how to set up theming for your application using\nSass APIs introduced in Angular Material v19.\n\nIf your application depends on a version before v19, or if your application's\ntheme is applied using a theme config created with `mat.define-theme`,\n`mat.define-light-theme`, or `mat.define-dark-theme`,\nthen you can refer to the theming guides at\n[v18.material.angular.io/guides](https://v18.material.angular.io/guides).\n\n## [link](https://material.angular.io/guide/theming\\#getting-started)  Getting Started\n\nYour application needs to have a [Sass](https://sass-lang.com/) **theme file**\nthat includes Angular Material’s `mat.theme` mixin.\n\nThe `mat.theme` mixin takes a map that defines color, typography, and density\nvalues and outputs a set of CSS variables that control the component appearance\nand layout. These variables are based on\n[Design Tokens](https://m3.material.io/foundations/design-tokens/overview).\n\nThe color variables are defined using the CSS color function\n[light-dark](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/light-dark)\nso that your theme can switch between light and dark mode using the CSS property\n[color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme).\n\nThe following example theme file applies a violet color palette, Roboto font,\nand standard density to the application’s Angular Material components. It\ntargets the `html` selector to ensure the CSS variables are applied across the\nentire application. The `color-scheme` is explicitly set to `light dark` so that\nthe end user's system preferences are used to determine whether the application\nappears in light or dark mode.\n\n```\n@use '@angular/material' as mat;\n\nhtml {\n  color-scheme: light dark;\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0\n  ));\n}\n\n```\n\nYou can use the following styles to apply the theme’s surface background and\non-surface text colors as a default across your application:\n\n```\nbody {\n  background: var(--mat-sys-surface);\n  color: var(--mat-sys-on-surface);\n}\n\n```\n\nThe `mat.theme` mixin will only declare CSS variables for the categories\nincluded in the input. For example, if `typography` is not defined, then\ntypography CSS variables will not be included in the output.\n\n### [link](https://material.angular.io/guide/theming\\#color) **Color**\n\nThe `theme`‘s color determines the component color styles, such as the fill\ncolor of checkboxes or ripple color of buttons. It depends on color palettes of\nvarying tones to build a color scheme. Check out the\n[Palettes](https://material.angular.io/guide/theming#prebuilt-color-palettes)\nsection to learn about available prebuilt palettes, or how to create custom\npalettes.\n\nYou can set the color in one of two ways: as a single color palette, or as a\ncolor map.\n\n#### [link](https://material.angular.io/guide/theming\\#single-color-palette) _Single Color Palette_\n\nIf you provide a single color palette, Angular Material uses its values for the\ntheme’s primary, secondary, and tertiary colors. The CSS color values will be\ndefined using `light-dark` CSS color function. Your application styles should\ndefine an explicit value declaration for the `color-scheme` CSS property.\n\n#### [link](https://material.angular.io/guide/theming\\#color-map) _Color Map_\n\nIf you provide a color map, then the tertiary color palette can be configured\nseparately from the primary palette. The tertiary palette can be used to add a\ndistinct accent color to some components.\n\nYou can also set the `theme-type` to determine the color values are defined:\n\n- `color-scheme` \\- include both light and dark colors using the `light-dark`\nCSS color function\n- `light` \\- only define the light color values\n- `dark` \\- only define the dark color values\n\nThe `light-dark` CSS color function is\n[widely available](https://caniuse.com/?search=light-dark) for all major\nbrowsers. However, if your application must support older browser versions or\nnon-major browsers, you should explicitly set the `theme-type` to either `light`\nor `dark`.\n\nThe following example theme file applies a violet primary color and orange\ntertiary color. The theme-type is set to `light` which means that only the light\ncolor values will be set for the application. The typography is set to Roboto\nwith a standard density setting.\n\n```\n@use '@angular/material' as mat;\n\nhtml {\n  @include mat.theme((\n    color: (\n      primary: mat.$violet-palette,\n      tertiary: mat.$orange-palette,\n      theme-type: light,\n    ),\n    typography: Roboto,\n    density: 0\n  ));\n}\n\n```\n\n### [link](https://material.angular.io/guide/theming\\#typography) **Typography**\n\nThe `mat.theme` ‘s typography determines the text styles used in components,\nsuch as the font for dialog titles or menu list items.\n\nYou can set the typography in one of two ways: as a single font family value, or\nas a typography map.\n\n#### [link](https://material.angular.io/guide/theming\\#single-font-family-value) _Single Font Family Value_\n\nIf you provide a font family, Angular Material uses it for all the text in its\ncomponents. The font weights used in components are set to 700 for bold text,\n500 for medium text, and 400 for regular text.\n\n#### [link](https://material.angular.io/guide/theming\\#typography-map) _Typography Map_\n\nIf you provide a typography map, then distinct font families are set for plain\nand brand text. The plain font family is typically used for most of the\napplication’s text, while the brand font family is typically used for headings\nand titles.\n\nThe typography map also sets specific weights for bold, medium, and regular\ntext.\n\nThe following example theme file applies the Roboto font family to plain text\nand the Open Sans font family to brand text. It specifies that bold weight is\n900, medium weight is 500, and regular weight is 300. The color scheme uses the\nviolet color palette with a standard density.\n\n```\n@use '@angular/material' as mat;\n\nhtml {\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: (\n      plain-family: Roboto,\n      brand-family: Open Sans,\n      bold-weight: 900,\n      medium-weight: 500,\n      regular-weight: 300,\n    ),\n    density: 0,\n  ));\n}\n\n```\n\n### [link](https://material.angular.io/guide/theming\\#density) **Density**\n\nThe `mat.theme` ‘s density value determines the spacing within components, such\nas how much padding is used around a button’s text or the height of form fields.\n\nThe density value accepts integers from 0 to -5, where 0 is the default spacing\nand -5 is the most dense and compact layout. Each whole number step down (-1,\n-2, etc.) reduces the affected sizes by 4px, down to the minimum size necessary\nfor a component to render itself coherently.\n\nThe following example theme file has a density setting of -2 which causes most\ncomponents to include less whitespace in their layout. The color scheme uses the\nviolet color palette and applies Roboto as the font-family.\n\n```\n@use '@angular/material' as mat;\n\nhtml {\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: -2,\n  ));\n}\n\n```\n\nSetting the density below 0 can reduce accessibility and make navigation harder\nfor users of assistive technology.\n\nDensity customizations do not affect components that appear in task-based or\npop-up contexts, such as the date picker. The Material Design density guidance\nexplicitly discourages changes to density for such interactions because they\ndon't compete for space in the application's layout.\n\n## [link](https://material.angular.io/guide/theming\\#color-palettes) **Color Palettes**\n\nA color palette is a set of similar colors with different hues ranging from\nlight to dark. The Angular Material theme uses color palettes to create a color\nscheme to communicate an application’s hierarchy, state, and brand.\n\n### [link](https://material.angular.io/guide/theming\\#prebuilt-color-palettes) **Prebuilt Color Palettes**\n\nAngular Material provides twelve prebuilt color palettes that can be used for\nyour application’s theme:\n\n- `$red-palette`\n- `$green-palette`\n- `$blue-palette`\n- `$yellow-palette`\n- `$cyan-palette`\n- `$magenta-palette`\n- `$orange-palette`\n- `$chartreuse-palette`\n- `$spring-green-palette`\n- `$azure-palette`\n- `$violet-palette`\n- `$rose-palette`\n\n### [link](https://material.angular.io/guide/theming\\#custom-color-palettes) **Custom Color Palettes**\n\nThe Angular Material\n[palette generation schematic](https://github.com/angular/components/blob/main/src/material/schematics/ng-generate/theme-color/README.md)\nbuilds custom color palettes based on a single color input for the primary\ncolor, and optionally color inputs to further customize secondary, tertiary, and\nneutral palettes:\n\n```\nng generate @angular/material:theme-color\n\n```\n\n## [link](https://material.angular.io/guide/theming\\#loading-fonts) **Loading Fonts**\n\nYou can use Google Fonts as one option to load fonts in your application. For\nexample, the following code in an application’s `<head>` loads the font family\nRoboto with the font weights 700, 500, and 400:\n\n```\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Roboto:wght@400;500;700&display=swap\" rel=\"stylesheet\">\n\n```\n\nLearn more about using fonts with\n[Google Fonts](https://developers.google.com/fonts/docs/getting_started). By\ndefault, projects created with the Angular CLI are\n[configured](https://angular.dev/reference/configs/workspace-config#fonts-optimization-options)\nto inline assets from Google Fonts to reduce render-blocking requests.\n\n## [link](https://material.angular.io/guide/theming\\#supporting-light-and-dark-mode) **Supporting Light and Dark Mode**\n\nBy default, the `mat.theme` mixin defines colors using the CSS color function\n`light-dark` to make it easy for your application to switch between light and\ndark mode. The `light-dark` function depends on the value of `color-scheme`\ndeclared in your application’s global styles. If your application does not\ndefine a value for `color-scheme`, then the light colors will always be applied.\n\nYou can define `color-scheme: light` or `color-scheme: dark` to explicitly\ndefine your application’s mode. To set the mode depending on the user’s system\npreferences, use `color-scheme: light-dark` as shown in the following example:\n\n```\n@use '@angular/material' as mat;\n\nhtml {\n  color-scheme: light dark;\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0\n  ));\n}\n\n```\n\nYou can also use the strategy of defining `color-scheme` under a CSS selector so\nthat the mode depends on whether that class has been applied. In the following\nexample, the application always displays the light mode theme unless the class\n“dark-mode” is added to the HTML body.\n\n```\n@use '@angular/material' as mat;\n\nhtml {\n  color-scheme: light;\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0\n  ));\n}\n\nbody.dark-mode {\n  color-scheme: dark;\n}\n\n```\n\nAngular Material does not automatically apply different styles or themes based\non user preference media queries, such as `color-scheme`, `prefers-color-scheme`\nor `prefers-contrast`. Instead, Angular Material gives you the flexibility to\ndefine your own queries to apply the styles that make sense for your users. This\nmay mean relying on `color-scheme: light dark`, defining custom media queries,\nor reading a saved user preference to apply styles.\n\n## [link](https://material.angular.io/guide/theming\\#multiple-themes) **Multiple Themes**\n\nYou can call the `mat.theme` mixin more than once to apply multiple different\ncolor schemes in your application.\n\n### [link](https://material.angular.io/guide/theming\\#context-specific-themes) **Context-specific Themes**\n\nThe following example theme file customizes the theme for components in\ndifferent contexts. In this case, a cyan-based palette is applied to a container\nof information about deleting data, causing buttons and other components to have\na unique and attention-grabbing style applied:\n\n```\n@use '@angular/material' as mat;\n\nhtml {\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0,\n  ));\n}\n\n.example-bright-container {\n  @include mat.theme((\n    color: mat.$cyan-palette,\n  ));\n}\n\n```\n\n## [link](https://material.angular.io/guide/theming\\#using-theme-styles) **Using Theme Styles**\n\nAn application’s custom components can use the CSS variables defined by\n`mat.theme` to apply the theme’s colors and typography.\n\nThe color variables are useful for emphasizing important text and actions,\nproviding stronger application branding, and ensuring strong contrast ratios\nbetween surface and on-surface elements.\n\nThe typography variables are useful for creating clear information hierarchy and\ntext consistency through the application.\n\nThe following example styles demonstrate a component using the color and\ntypography variables to create an application-wide banner presenting important\ninformation to the user:\n\n```\n:host {\n  background: var(--mat-sys-primary-container);\n  color: var(--mat-sys-on-primary-container);\n  border: 1px solid var(--mat-sys-outline-variant);\n  font: var(--mat-sys-body-large);\n}\n\n```\n\nSee the [Theme Variables](https://material.angular.io/guide/system-variables) guide for a\ncomprehensive list of these variables, examples of where they are used, and how\ncomponents can depend on them.\n\n## [link](https://material.angular.io/guide/theming\\#customizing-tokens) **Customizing Tokens**\n\nAngular Material components also allow for narrowly targeted customization of\nspecific tokens through the `overrides` mixins. This enables fine-grained\nadjustments to specific system-level theme CSS variables as well as individual\ncomponent tokens, such as a component’s border-color or title font size.\n\nThe `overrides` API validates that the customized tokens are correctly spelled\nand can be used to ensure backwards compatibility if tokens are added, moved, or\nrenamed in future versions.\n\n### [link](https://material.angular.io/guide/theming\\#system-tokens) **System Tokens**\n\nSystem-level tokens can be changed to different values through the\n`mat.theme-overrides` mixin, which will redefine CSS variables that are used in\nthe application.\n\nThe following example applies a violet color palette for the application, but\nalters the `primary-container` token to a specific shade of blue.\n\n```\n@use '@angular/material' as mat;\n\nhtml {\n  color-scheme: light dark;\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0\n  ));\n\n  .example-orange-primary-container {\n    @include mat.theme-overrides((\n      primary-container: #84ffff\n    ));\n  }\n}\n\n```\n\nAlternatively, an optional override map can be provided in the `mat.theme` mixin\nto replace values applied by the mixin:\n\n```\n@use '@angular/material' as mat;\n\nhtml {\n  color-scheme: light dark;\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0\n  ), $overrides: (\n    primary-container: orange,\n  ));\n}\n\n```\n\n### [link](https://material.angular.io/guide/theming\\#component-tokens) **Component Tokens**\n\nEach Angular Material component defines an `overrides` mixin that can be used to\ncustomize tokenized styles for their color, typography, and density.\n\nMore information for each component’s override API, including their list of\navailable customizable tokens, can be found on their respective documentation\npage under the Styling tab.\n\nThe following example demonstrates the Card’s `overrides` API to change the\nbackground color to red, increase the corner border radius, and specify a larger\ntitle font size.\n\n```\nhtml {\n  @include mat.card-overrides((\n    elevated-container-color: red,\n    elevated-container-shape: 32px,\n    title-text-size: 2rem,\n  ));\n}\n\n```\n\n### [link](https://material.angular.io/guide/theming\\#direct-style-overrides) **Direct Style Overrides**\n\nAngular Material supports customizing color, typography, and density as outlined\nin this document. Angular strongly discourages, and does not directly support,\noverriding component CSS outside the theming APIs described above. Component DOM\nstructure and CSS classes are considered private implementation details that may\nchange at any time. CSS variables used by the Angular Material components should\nbe defined through the `overrides` API instead of defined explicitly.\n\n## [link](https://material.angular.io/guide/theming\\#shadow-dom) **Shadow DOM**\n\nAngular Material assumes that, by default, all theme styles are loaded as global\nCSS. If you want to use\n[Shadow DOM](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM)\nin your application, you must load the theme styles within each shadow root that\ncontains an Angular Material component. You can accomplish this by manually\nloading the CSS in each shadow root, or by using\n[Constructable Stylesheets](https://web.dev/articles/constructable-stylesheets).\n\nGuide Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-116b73d4-ad00-4696-b8c4-f630c18df3d2.png"
  },
  "metadata": {
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-capable": "yes",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "twitter:creator": "@Angular",
    "og:image:type": "image/png",
    "og:url": "https://material.angular.io/",
    "og:type": "website",
    "og:image:height": "943",
    "theme-color": "#d7e3ff",
    "favicon": "https://material.angular.io/guide/assets/img/favicon.ico?v=19.1.0",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "og:site_name": "Angular Material",
    "og:locale": "en_US",
    "twitter:title": "Angular Material",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "viewport": "width=device-width, initial-scale=1",
    "ogLocale": "en_US",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "language": "en-US",
    "og:image:width": "1339",
    "ogTitle": "Angular Material",
    "ogSiteName": "Angular Material",
    "mobile-web-app-capable": "yes",
    "author": "Angular Components Team",
    "twitter:card": "summary",
    "ogUrl": "https://material.angular.io/",
    "twitter:site": "@Angular",
    "title": "Theming Angular Material | Angular Material",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:title": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "scrapeId": "9141a1cb-c10f-4f4e-a841-59ae14634719",
    "sourceURL": "https://material.angular.io/guide/theming",
    "url": "https://material.angular.io/guide/theming",
    "statusCode": 200
  }
}