{
  "scrapeId": "28b15080-a41e-467c-9d57-6c7e63bd214e",
  "sourceURL": "https://angular.dev/guide/components/host-elements",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backComponents\n  - [Anatomy of components](https://angular.dev/guide/components)\n  - [Selectors](https://angular.dev/guide/components/selectors)\n  - [Styling](https://angular.dev/guide/components/styling)\n  - [Accepting data with input properties](https://angular.dev/guide/components/inputs)\n  - [Custom events with outputs](https://angular.dev/guide/components/outputs)\n  - [Content projection with ng-content](https://angular.dev/guide/components/content-projection)\n  - [Host elements](https://angular.dev/guide/components/host-elements)\n  - [Lifecycle](https://angular.dev/guide/components/lifecycle)\n  - [Referencing component children with queries](https://angular.dev/guide/components/queries)\n  - [Using DOM APIs](https://angular.dev/guide/components/dom-apis)\n  - [Inheritance](https://angular.dev/guide/components/inheritance)\n  - [Programmatically rendering components](https://angular.dev/guide/components/programmatic-rendering)\n  - [Advanced configuration](https://angular.dev/guide/components/advanced-configuration)\n  - [Custom Elements](https://angular.dev/guide/elements)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n**TIP:** This guide assumes you've already read the [Essentials Guide](https://angular.dev/guide/components/essentials). Read that first if you're new to Angular.\n\nAngular creates an instance of a component for every HTML element that matches the component's\nselector. The DOM element that matches a component's selector is that component's **host element**.\nThe contents of a component's template are rendered inside its host element.\n\n```\n      // Component source@Component({  selector: 'profile-photo',  template: `    <img src=\"profile-photo.jpg\" alt=\"Your profile photo\" />  `,})export class ProfilePhoto {}\n\n```\n\ncheck\n\n```\n      <!-- Using the component --><h3>Your profile photo</h3><profile-photo /><button>Upload a new profile photo</button>\n\n```\n\ncheck\n\n```\n      <!-- Rendered DOM --><h3>Your profile photo</h3><profile-photo>  <img src=\"profile-photo.jpg\" alt=\"Your profile photo\" /></profile-photo><button>Upload a new profile photo</button>\n\n```\n\ncheck\n\nIn the above example, `<profile-photo>` is the host element of the `ProfilePhoto` component.\n\n## [Binding to the host element](https://angular.dev/guide/components/host-elements\\#binding-to-the-host-element)\n\nA component can bind properties, attributes, and events to its host element. This behaves\nidentically to bindings on elements inside the component's template, but instead defined with\nthe `host` property in the `@Component` decorator:\n\n```\n      @Component({  ...,  host: {    'role': 'slider',    '[attr.aria-valuenow]': 'value',    '[class.active]': 'isActive()',    '[tabIndex]': 'disabled ? -1 : 0',    '(keydown)': 'updateValue($event)',  },})export class CustomSlider {  value: number = 0;  disabled: boolean = false;  isActive = signal(false);  updateValue(event: KeyboardEvent) { /* ... */ }  /* ... */}\n\n```\n\ncheck\n\n## [The `@HostBinding` and `@HostListener` decorators](https://angular.dev/guide/components/host-elements\\#the-hostbinding-and-hostlistener-decorators)\n\nYou can alternatively bind to the host element by applying the `@HostBinding` and `@HostListener`\ndecorator to class members.\n\n`@HostBinding` lets you bind host properties and attributes to properties and methods:\n\n```\n      @Component({  /* ... */})export class CustomSlider {  @HostBinding('attr.aria-valuenow')  value: number = 0;  @HostBinding('tabIndex')  getTabIndex() {    return this.disabled ? -1 : 0;  }  /* ... */}\n\n```\n\ncheck\n\n`@HostListener` lets you bind event listeners to the host element. The decorator accepts an event\nname and an optional array of arguments:\n\n```\n      export class CustomSlider {  @HostListener('keydown', ['$event'])  updateValue(event: KeyboardEvent) {    /* ... */  }}\n\n```\n\ncheck\n\n**Always prefer using the `host` property over `@HostBinding` and `@HostListener`.** These\ndecorators exist exclusively for backwards compatibility.\n\n## [Binding collisions](https://angular.dev/guide/components/host-elements\\#binding-collisions)\n\nWhen you use a component in a template, you can add bindings to that component instance's element.\nThe component may _also_ define host bindings for the same properties or attributes.\n\n```\n      @Component({  ...,  host: {    'role': 'presentation',    '[id]': 'id',  }})export class ProfilePhoto { /* ... */ }\n\n```\n\ncheck\n\n```\n      <profile-photo role=\"group\" [id]=\"otherId\" />\n\n```\n\ncheck\n\nIn cases like this, the following rules determine which value wins:\n\n- If both values are static, the instance binding wins.\n- If one value is static and the other dynamic, the dynamic value wins.\n- If both values are dynamic, the component's host binding wins.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-41f96410-0297-469c-bf8d-35479fe82777.png"
  },
  "metadata": {
    "apple-mobile-web-app-title": "Angular",
    "og:title": "Angular",
    "twitter:title": "Angular",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "ogUrl": "https://angular.dev/",
    "title": "Host elements â€¢ Angular",
    "viewport": "width=device-width, initial-scale=1",
    "application-name": "Angular",
    "msapplication-TileColor": "#e90464",
    "og:type": "website",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "twitter:description": "The web development framework for building modern apps.",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogTitle": "Angular",
    "theme-color": "#ffffff",
    "og:url": "https://angular.dev/",
    "language": "en",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "ogDescription": "The web development framework for building modern apps.",
    "twitter:url": "https://angular.dev/",
    "og:description": "The web development framework for building modern apps.",
    "twitter:card": "summary_large_image",
    "description": "The web development framework for building modern apps.",
    "scrapeId": "28b15080-a41e-467c-9d57-6c7e63bd214e",
    "sourceURL": "https://angular.dev/guide/components/host-elements",
    "url": "https://angular.dev/guide/components/host-elements",
    "statusCode": 200
  }
}