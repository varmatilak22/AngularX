{
  "scrapeId": "1bfe0693-ae88-4b34-baaf-9e641969c6b0",
  "sourceURL": "https://angular.dev/tools/cli/build-system-migration",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backAngular CLI\n  - [Overview](https://angular.dev/tools/cli)\n  - [Local set-up](https://angular.dev/tools/cli/setup-local)\n  - [Building Angular apps](https://angular.dev/tools/cli/build)\n  - [Serving Angular apps for development](https://angular.dev/tools/cli/serve)\n  - [Deployment](https://angular.dev/tools/cli/deployment)\n  - [End-to-End Testing](https://angular.dev/tools/cli/end-to-end)\n  - [Migrating to new build system](https://angular.dev/tools/cli/build-system-migration)\n  - [Build environments](https://angular.dev/tools/cli/environments)\n  - [Angular CLI builders](https://angular.dev/tools/cli/cli-builder)\n  - [Generating code using schematics](https://angular.dev/tools/cli/schematics)\n  - [Authoring schematics](https://angular.dev/tools/cli/schematics-authoring)\n  - [Schematics for libraries](https://angular.dev/tools/cli/schematics-for-libraries)\n  - [Template type checking](https://angular.dev/tools/cli/template-typecheck)\n  - [Ahead-of-time (AOT) compilation](https://angular.dev/tools/cli/aot-compiler)\n  - [AOT metadata errors](https://angular.dev/tools/cli/aot-metadata-errors)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nIn v17 and higher, the new build system provides an improved way to build Angular applications. This new build system includes:\n\n- A modern output format using ESM, with dynamic import expressions to support lazy module loading.\n- Faster build-time performance for both initial builds and incremental rebuilds.\n- Newer JavaScript ecosystem tools such as [esbuild](https://esbuild.github.io/) and [Vite](https://vitejs.dev/).\n- Integrated SSR and prerendering capabilities.\n- Automatic global and component stylesheet hot replacement.\n\nThis new build system is stable and fully supported for use with Angular applications.\nYou can migrate to the new build system with applications that use the `browser` builder.\nIf using a custom builder, please refer to the documentation for that builder on possible migration options.\n\n**IMPORTANT:** The existing webpack-based build system is still considered stable and fully supported.\nApplications can continue to use the `browser` builder and projects can opt-out of migrating during an update.\n\n## [For new applications](https://angular.dev/tools/cli/build-system-migration\\#for-new-applications)\n\nNew applications will use this new build system by default via the `application` builder.\n\n## [For existing applications](https://angular.dev/tools/cli/build-system-migration\\#for-existing-applications)\n\nBoth automated and manual procedures are available depending on the requirements of the project.\nStarting with v18, the update process will ask if you would like to migrate existing applications to use the new build system via the automated migration.\nPrior to migrating, please consider reviewing the [Known Issues](https://angular.dev/tools/cli/build-system-migration#known-issues) section as it may contain relevant information for your project.\n\n**HELPFUL:** Remember to remove any CommonJS assumptions in the application server code if using SSR such as `require`, `__filename`, `__dirname`, or other constructs from the [CommonJS module scope](https://nodejs.org/api/modules.html#the-module-scope). All application code should be ESM compatible. This does not apply to third-party dependencies.\n\n### [Automated migration (Recommended)](https://angular.dev/tools/cli/build-system-migration\\#automated-migration-recommended)\n\nThe automated migration will adjust both the application configuration within `angular.json` as well as code and stylesheets to remove previous webpack-specific feature usage.\nWhile many changes can be automated and most applications will not require any further changes, each application is unique and there may be some manual changes required.\nAfter the migration, please attempt a build of the application as there could be new errors that will require adjustments within the code.\nThe errors will attempt to provide solutions to the problem when possible and the later sections of this guide describe some of the more common situations that you may encounter.\nWhen updating to Angular v18 via `ng update`, you will be asked to execute the migration.\nThis migration is entirely optional for v18 and can also be run manually at anytime after an update via the following command:\n\n```\n      ng update @angular/cli --name use-application-builder\n\n```\n\ncheck\n\nThe migration does the following:\n\n- Converts existing `browser` or `browser-esbuild` target to `application`\n- Removes any previous SSR builders (because `application` does that now).\n- Updates configuration accordingly.\n- Merges `tsconfig.server.json` with `tsconfig.app.json` and adds the TypeScript option `\"esModuleInterop\": true` to ensure `express` imports are [ESM compliant](https://angular.dev/tools/cli/build-system-migration#esm-default-imports-vs-namespace-imports).\n- Updates application server code to use new bootstrapping and output directory structure.\n- Removes any webpack-specific builder stylesheet usage such as the tilde or caret in `@import`/ `url()` and updates the configuration to provide equivalent behavior\n- Converts to use the new lower dependency `@angular/build` Node.js package if no other `@angular-devkit/build-angular` usage is found.\n\n### [Manual migration](https://angular.dev/tools/cli/build-system-migration\\#manual-migration)\n\nAdditionally for existing projects, you can manually opt-in to use the new builder on a per-application basis with two different options.\nBoth options are considered stable and fully supported by the Angular team.\nThe choice of which option to use is a factor of how many changes you will need to make to migrate and what new features you would like to use in the project.\n\n- The `browser-esbuild` builder builds only the client-side bundle of an application designed to be compatible with the existing `browser` builder that provides the preexisting build system.\nThis builder provides equivalent build options, and in many cases, it serves as a drop-in replacement for existing `browser` applications.\n- The `application` builder covers an entire application, such as the client-side bundle, as well as optionally building a server for server-side rendering and performing build-time prerendering of static pages.\n\nThe `application` builder is generally preferred as it improves server-side rendered (SSR) builds, and makes it easier for client-side rendered projects to adopt SSR in the future.\nHowever it requires a little more migration effort, particularly for existing SSR applications if performed manually.\nIf the `application` builder is difficult for your project to adopt, `browser-esbuild` can be an easier solution which gives most of the build performance benefits with fewer breaking changes.\n\n#### [Manual migration to the compatibility builder](https://angular.dev/tools/cli/build-system-migration\\#manual-migration-to-the-compatibility-builder)\n\nA builder named `browser-esbuild` is available within the `@angular-devkit/build-angular` package that is present in an Angular CLI generated application.\nYou can try out the new build system for applications that use the `browser` builder.\nIf using a custom builder, please refer to the documentation for that builder on possible migration options.\n\nThe compatibility option was implemented to minimize the amount of changes necessary to initially migrate your applications.\nThis is provided via an alternate builder ( `browser-esbuild`).\nYou can update the `build` target for any application target to migrate to the new build system.\n\nThe following is what you would typically find in `angular.json` for an application:\n\n```\n      ...\"architect\": {  \"build\": {    \"builder\": \"@angular-devkit/build-angular:browser\",...\n\n```\n\ncheck\n\nChanging the `builder` field is the only change you will need to make.\n\n```\n      ...\"architect\": {  \"build\": {    \"builder\": \"@angular-devkit/build-angular:browser-esbuild\",...\n\n```\n\ncheck\n\n#### [Manual migration to the new `application` builder](https://angular.dev/tools/cli/build-system-migration\\#manual-migration-to-the-new-application-builder)\n\nA builder named `application` is also available within the `@angular-devkit/build-angular` package that is present in an Angular CLI generated application.\nThis builder is the default for all new applications created via `ng new`.\n\nThe following is what you would typically find in `angular.json` for an application:\n\n```\n      ...\"architect\": {  \"build\": {    \"builder\": \"@angular-devkit/build-angular:browser\",...\n\n```\n\ncheck\n\nChanging the `builder` field is the first change you will need to make.\n\n```\n      ...\"architect\": {  \"build\": {    \"builder\": \"@angular-devkit/build-angular:application\",...\n\n```\n\ncheck\n\nOnce the builder name has been changed, options within the `build` target will need to be updated.\nThe following list discusses all the `browser` builder options that will need to be adjusted.\n\n- `main` should be renamed to `browser`.\n- `polyfills` should be an array, rather than a single file.\n- `buildOptimizer` should be removed, as this is covered by the `optimization` option.\n- `resourcesOutputPath` should be removed, this is now always `media`.\n- `vendorChunk` should be removed, as this was a performance optimization which is no longer needed.\n- `commonChunk` should be removed, as this was a performance optimization which is no longer needed.\n- `deployUrl` should be removed and is not supported. Prefer [`<base href>`](https://angular.dev/tools/cli/guide/routing/common-router-tasks) instead. See [deployment documentation](https://angular.dev/tools/cli/tools/cli/deployment#--deploy-url) for more information.\n- `ngswConfigPath` should be renamed to `serviceWorker`.\n\nIf the application is not using SSR currently, this should be the final step to allow `ng build` to function.\nAfter executing `ng build` for the first time, there may be new warnings or errors based on behavioral differences or application usage of webpack-specific features.\nMany of the warnings will provide suggestions on how to remedy that problem.\nIf it appears that a warning is incorrect or the solution is not apparent, please open an issue on [GitHub](https://github.com/angular/angular-cli/issues).\nAlso, the later sections of this guide provide additional information on several specific cases as well as current known issues.\n\nFor applications new to SSR, the [Angular SSR Guide](https://angular.dev/tools/cli/guide/ssr) provides additional information regarding the setup process for adding SSR to an application.\n\nFor applications that are already using SSR, additional adjustments will be needed to update the application server to support the new integrated SSR capabilities.\nThe `application` builder now provides the integrated functionality for all of the following preexisting builders:\n\n- `app-shell`\n- `prerender`\n- `server`\n- `ssr-dev-server`\n\nThe `ng update` process will automatically remove usages of the `@nguniversal` scope packages where some of these builders were previously located.\nThe new `@angular/ssr` package will also be automatically added and used with configuration and code being adjusted during the update.\nThe `@angular/ssr` package supports the `browser` builder as well as the `application` builder.\n\n## [Executing a build](https://angular.dev/tools/cli/build-system-migration\\#executing-a-build)\n\nOnce you have updated the application configuration, builds can be performed using `ng build` as was previously done.\nDepending on the choice of builder migration, some of the command line options may be different.\nIf the build command is contained in any `npm` or other scripts, ensure they are reviewed and updated.\nFor applications that have migrated to the `application` builder and that use SSR and/or prererending, you also may be able to remove extra `ng run` commands from scripts now that `ng build` has integrated SSR support.\n\n```\n      ng build\n\n```\n\ncheck\n\n## [Starting the development server](https://angular.dev/tools/cli/build-system-migration\\#starting-the-development-server)\n\nThe development server will automatically detect the new build system and use it to build the application.\nTo start the development server no changes are necessary to the `dev-server` builder configuration or command line.\n\n```\n      ng serve\n\n```\n\ncheck\n\nYou can continue to use the [command line options](https://angular.dev/cli/serve) you have used in the past with the development server.\n\n**HELPFUL:** With the development server, you may see a small Flash of Unstyled Content (FOUC) on startup as the server initializes.\nThe development server attempts to defer processing of stylesheets until first use to improve rebuild times.\nThis will not occur in builds outside the development server.\n\n### [Hot module replacement](https://angular.dev/tools/cli/build-system-migration\\#hot-module-replacement)\n\nHot Module Replacement (HMR) is a technique used by development servers to avoid reloading the entire page when only part of an application is changed.\nThe changes in many cases can be immediately shown in the browser which allows for an improved edit/refresh cycle while developing an application.\nWhile general JavaScript-based hot module replacement (HMR) is currently not supported, several more specific forms of HMR are available:\n\n- **global stylesheet** ( `styles` build option)\n- **component stylesheet** (inline and file-based)\n- **component template** (inline and file-based)\n\nThe HMR capabilities are automatically enabled and require no code or configuration changes to use.\nAngular provides HMR support for both file-based ( `templateUrl`/ `styleUrl`/ `styleUrls`) and inline ( `template`/ `styles`) component styles and templates.\nThe build system will attempt to compile and process the minimal amount of application code when it detects a stylesheet only change.\n\nIf preferred, the HMR capabilities can be disabled by setting the `hmr` development server option to `false`.\nThis can also be changed on the command line via:\n\n```\n      ng serve --no-hmr\n\n```\n\ncheck\n\n### [Vite as a development server](https://angular.dev/tools/cli/build-system-migration\\#vite-as-a-development-server)\n\nThe usage of Vite in the Angular CLI is currently within a _development server capacity only_. Even without using the underlying Vite build system, Vite provides a full-featured development server with client side support that has been bundled into a low dependency npm package. This makes it an ideal candidate to provide comprehensive development server functionality. The current development server process uses the new build system to generate a development build of the application in memory and passes the results to Vite to serve the application. The usage of Vite, much like the Webpack-based development server, is encapsulated within the Angular CLI `dev-server` builder and currently cannot be directly configured.\n\n### [Prebundling](https://angular.dev/tools/cli/build-system-migration\\#prebundling)\n\nPrebundling provides improved build and rebuild times when using the development server.\nVite provides [prebundling capabilities](https://vite.dev/guide/dep-pre-bundling) that are enabled by default when using the Angular CLI.\nThe prebundling process analyzes all the third-party project dependencies within a project and processes them the first time the development server is executed.\nThis process removes the need to rebuild and bundle the project's dependencies each time a rebuild occurs or the development server is executed.\n\nIn most cases, no additional customization is required. However, some situations where it may be needed include:\n\n- Customizing loader behavior for imports within the dependency such as the [`loader` option](https://angular.dev/tools/cli/build-system-migration#file-extension-loader-customization)\n- Symlinking a dependency to local code for development such as [`npm link`](https://docs.npmjs.com/cli/v10/commands/npm-link)\n- Working around an error encountered during prebundling of a dependency\n\nThe prebundling process can be fully disabled or individual dependencies can be excluded if needed by a project.\nThe `dev-server` builder's `prebundle` option can be used for these customizations.\nTo exclude specific dependencies, the `prebundle.exclude` option is available:\n\n```\n      \"serve\": {      \"builder\": \"@angular/build:dev-server\",      \"options\": {        \"prebundle\": {          \"exclude\": [\"some-dep\"]        }      },\n\n```\n\ncheck\n\nBy default, `prebundle` is set to `true` but can be set to `false` to fully disable prebundling.\nHowever, excluding specific dependencies is recommended instead since rebuild times will increase with prebundling disabled.\n\n```\n      \"serve\": {      \"builder\": \"@angular/build:dev-server\",      \"options\": {        \"prebundle\": false      },\n\n```\n\ncheck\n\n## [New features](https://angular.dev/tools/cli/build-system-migration\\#new-features)\n\nOne of the main benefits of the application build system is the improved build and rebuild speed.\nHowever, the new application build system also provides additional features not present in the `browser` builder.\n\n**IMPORTANT:** The new features of the `application` builder described here are incompatible with the `karma` test builder by default because it is using the `browser` builder internally.\nUsers can opt-in to use the `application` builder by setting the `builderMode` option to `application` for the `karma` builder.\nThis option is currently in developer preview.\nIf you notice any issues, please report them [here](https://github.com/angular/angular-cli/issues).\n\n### [Build-time value replacement (define)](https://angular.dev/tools/cli/build-system-migration\\#build-time-value-replacement-define)\n\nThe `define` option allows identifiers present in the code to be replaced with another value at build time.\nThis is similar to the behavior of Webpack's `DefinePlugin` which was previously used with some custom Webpack configurations that used third-party builders.\nThe option can either be used within the `angular.json` configuration file or on the command line.\nConfiguring `define` within `angular.json` is useful for cases where the values are constant and able to be checked in to source control.\n\nWithin the configuration file, the option is in the form of an object.\nThe keys of the object represent the identifier to replace and the values of the object represent the corresponding replacement value for the identifier.\nAn example is as follows:\n\n```\n      \"build\": {    \"builder\": \"@angular/build:application\",    \"options\": {      ...      \"define\": {          \"SOME_NUMBER\": \"5\",          \"ANOTHER\": \"'this is a string literal, note the extra single quotes'\",          \"REFERENCE\": \"globalThis.someValue.noteTheAbsentSingleQuotes\"      }    }  }\n\n```\n\ncheck\n\n**HELPFUL:** All replacement values are defined as strings within the configuration file.\nIf the replacement is intended to be an actual string literal, it should be enclosed in single quote marks.\nThis allows the flexibility of using any valid JSON type as well as a different identifier as a replacement.\n\nThe command line usage is preferred for values that may change per build execution such as the git commit hash or an environment variable.\nThe CLI will merge `--define` values from the command line with `define` values from `angular.json`, including both in a build.\nCommand line usage takes precedence if the same identifier is present for both.\nFor command line usage, the `--define` option uses the format of `IDENTIFIER=VALUE`.\n\n```\n      ng build --define SOME_NUMBER=5 --define \"ANOTHER='these will overwrite existing'\"\n\n```\n\ncheck\n\nEnvironment variables can also be selectively included in a build.\nFor non-Windows shells, the quotes around the hash literal can be escaped directly if preferred.\nThis example assumes a bash-like shell but similar behavior is available for other shells as well.\n\n```\n      export MY_APP_API_HOST=\"http://example.com\"export API_RETRY=3ng build --define API_HOST=\\'$MY_APP_API_HOST\\' --define API_RETRY=$API_RETRY\n\n```\n\ncheck\n\nFor either usage, TypeScript needs to be aware of the types for the identifiers to prevent type-checking errors during the build.\nThis can be accomplished with an additional type definition file within the application source code ( `src/types.d.ts`, for example) with similar content:\n\n```\n      declare const SOME_NUMBER: number;declare const ANOTHER: string;declare const GIT_HASH: string;declare const API_HOST: string;declare const API_RETRY: number;\n\n```\n\ncheck\n\nThe default project configuration is already setup to use any type definition files present in the project source directories.\nIf the TypeScript configuration for the project has been altered, it may need to be adjusted to reference this newly added type definition file.\n\n**IMPORTANT:** This option will not replace identifiers contained within Angular metadata such as a Component or Directive decorator.\n\n### [File extension loader customization](https://angular.dev/tools/cli/build-system-migration\\#file-extension-loader-customization)\n\n**IMPORTANT:** This feature is only available with the `application` builder.\n\nSome projects may need to control how all files with a specific file extension are loaded and bundled into an application.\nWhen using the `application` builder, the `loader` option can be used to handle these cases.\nThe option allows a project to define the type of loader to use with a specified file extension.\nA file with the defined extension can then be used within the application code via an import statement or dynamic import expression.\nThe available loaders that can be used are:\n\n- `text` \\- inlines the content as a `string` available as the default export\n- `binary` \\- inlines the content as a `Uint8Array` available as the default export\n- `file` \\- emits the file at the application output path and provides the runtime location of the file as the default export\n- `empty` \\- considers the content to be empty and will not include it in bundles\n\nThe `empty` value, while less common, can be useful for compatibility of third-party libraries that may contain bundler-specific import usage that needs to be removed.\nOne case for this is side-effect imports ( `import 'my.css';`) of CSS files which has no effect in a browser.\nInstead, the project can use `empty` and then the CSS files can be added to the `styles` build option or use some other injection method.\n\nThe loader option is an object-based option with the keys used to define the file extension and the values used to define the loader type.\n\nAn example of the build option usage to inline the content of SVG files into the bundled application would be as follows:\n\n```\n      \"build\": {    \"builder\": \"@angular/build:application\",    \"options\": {      ...      \"loader\": {        \".svg\": \"text\"      }    }  }\n\n```\n\ncheck\n\nAn SVG file can then be imported:\n\n```\n      import contents from './some-file.svg';console.log(contents); // <svg>...</svg>\n\n```\n\ncheck\n\nAdditionally, TypeScript needs to be aware of the module type for the import to prevent type-checking errors during the build. This can be accomplished with an additional type definition file within the application source code ( `src/types.d.ts`, for example) with the following or similar content:\n\n```\n      declare module \"*.svg\" {  const content: string;  export default content;}\n\n```\n\ncheck\n\nThe default project configuration is already setup to use any type definition files ( `.d.ts` files) present in the project source directories. If the TypeScript configuration for the project has been altered, the tsconfig may need to be adjusted to reference this newly added type definition file.\n\n### [Import attribute loader customization](https://angular.dev/tools/cli/build-system-migration\\#import-attribute-loader-customization)\n\nFor cases where only certain files should be loaded in a specific way, per file control over loading behavior is available.\nThis is accomplished with a `loader` [import attribute](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import/with) that can be used with both import statements and expressions.\nThe presence of the import attribute takes precedence over all other loading behavior including JS/TS and any `loader` build option values.\nFor general loading for all files of an otherwise unsupported file type, the [`loader`](https://angular.dev/tools/cli/build-system-migration#file-extension-loader-customization) build option is recommended.\n\nFor the import attribute, the following loader values are supported:\n\n- `text` \\- inlines the content as a `string` available as the default export\n- `binary` \\- inlines the content as a `Uint8Array` available as the default export\n- `file` \\- emits the file at the application output path and provides the runtime location of the file as the default export\n\nAn additional requirement to use import attributes is that the TypeScript `module` option must be set to `esnext` to allow TypeScript to successfully build the application code.\nOnce `ES2025` is available within TypeScript, this change will no longer be needed.\n\nAt this time, TypeScript does not support type definitions that are based on import attribute values.\nThe use of `@ts-expect-error`/ `@ts-ignore` or the use of individual type definition files (assuming the file is only imported with the same loader attribute) is currently required.\nAs an example, an SVG file can be imported as text via:\n\n```\n      // @ts-expect-error TypeScript cannot provide types based on attributes yetimport contents from './some-file.svg' with { loader: 'text' };\n\n```\n\ncheck\n\nThe same can be accomplished with an import expression inside an async function.\n\n```\n      async function loadSvg(): Promise<string> {  // @ts-expect-error TypeScript cannot provide types based on attributes yet  return import('./some-file.svg', { with: { loader: 'text' } }).then((m) => m.default);}\n\n```\n\ncheck\n\nFor the import expression, the `loader` value must be a string literal to be statically analyzed.\nA warning will be issued if the value is not a string literal.\n\nThe `file` loader is useful when a file will be loaded at runtime through either a `fetch()`, setting to an image elements `src`, or other similar method.\n\n```\n      // @ts-expect-error TypeScript cannot provide types based on attributes yetimport imagePath from './image.webp' with { loader: 'file' };console.log(imagePath); // media/image-ULK2SIIB.webp\n\n```\n\ncheck\n\nFor production builds as shown in the code comment above, hashing will be automatically added to the path for long-term caching.\n\n**HELPFUL:** When using the development server and using a `loader` attribute to import a file from a Node.js package, that package must be excluded from prebundling via the development server `prebundle` option.\n\n### [Import/export conditions](https://angular.dev/tools/cli/build-system-migration\\#import-export-conditions)\n\nProjects may need to map certain import paths to different files based on the type of build.\nThis can be particularly useful for cases such as `ng serve` needing to use debug/development specific code but `ng build` needing to use code without any development features/information.\nSeveral import/export [conditions](https://nodejs.org/api/packages.html#community-conditions-definitions) are automatically applied to support these project needs:\n\n- For optimized builds, the `production` condition is enabled.\n- For non-optimized builds, the `development` condition is enabled.\n- For browser output code, the `browser` condition is enabled.\n\nAn optimized build is determined by the value of the `optimization` option.\nWhen `optimization` is set to `true` or more specifically if `optimization.scripts` is set to `true`, then the build is considered optimized.\nThis classification applies to both `ng build` and `ng serve`.\nIn a new project, `ng build` defaults to optimized and `ng serve` defaults to non-optimized.\n\nA useful method to leverage these conditions within application code is to combine them with [subpath imports](https://nodejs.org/api/packages.html#subpath-imports).\nBy using the following import statement:\n\n```\n      import {verboseLogging} from '#logger';\n\n```\n\ncheck\n\nThe file can be switched in the `imports` field in `package.json`:\n\n```\n      {  ...  \"imports\": {    \"#logger\": {      \"development\": \"./src/logging/debug.ts\",      \"default\": \"./src/logging/noop.ts\"    }  }}\n\n```\n\ncheck\n\nFor applications that are also using SSR, browser and server code can be switched by using the `browser` condition:\n\n```\n      {  ...  \"imports\": {    \"#crashReporter\": {      \"browser\": \"./src/browser-logger.ts\",      \"default\": \"./src/server-logger.ts\"    }  }}\n\n```\n\ncheck\n\nThese conditions also apply to Node.js packages and any defined [`exports`](https://nodejs.org/api/packages.html#conditional-exports) within the packages.\n\n**HELPFUL:** If currently using the `fileReplacements` build option, this feature may be able to replace its usage.\n\n## [Known Issues](https://angular.dev/tools/cli/build-system-migration\\#known-issues)\n\nThere are currently several known issues that you may encounter when trying the new build system. This list will be updated to stay current. If any of these issues are currently blocking you from trying out the new build system, please check back in the future as it may have been solved.\n\n### [Type-checking of Web Worker code and processing of nested Web Workers](https://angular.dev/tools/cli/build-system-migration\\#type-checking-of-web-worker-code-and-processing-of-nested-web-workers)\n\nWeb Workers can be used within application code using the same syntax ( `new Worker(new URL('<workerfile>', import.meta.url))`) that is supported with the `browser` builder.\nHowever, the code within the Worker will not currently be type-checked by the TypeScript compiler. TypeScript code is supported just not type-checked.\nAdditionally, any nested workers will not be processed by the build system. A nested worker is a Worker instantiation within another Worker file.\n\n### [ESM default imports vs. namespace imports](https://angular.dev/tools/cli/build-system-migration\\#esm-default-imports-vs-namespace-imports)\n\nTypeScript by default allows default exports to be imported as namespace imports and then used in call expressions.\nThis is unfortunately a divergence from the ECMAScript specification.\nThe underlying bundler ( `esbuild`) within the new build system expects ESM code that conforms to the specification.\nThe build system will now generate a warning if your application uses an incorrect type of import of a package.\nHowever, to allow TypeScript to accept the correct usage, a TypeScript option must be enabled within the application's `tsconfig` file.\nWhen enabled, the [`esModuleInterop`](https://www.typescriptlang.org/tsconfig#esModuleInterop) option provides better alignment with the ECMAScript specification and is also recommended by the TypeScript team.\nOnce enabled, you can update package imports where applicable to an ECMAScript conformant form.\n\nUsing the [`moment`](https://npmjs.com/package/moment) package as an example, the following application code will cause runtime errors:\n\n```\n      import * as moment from 'moment';console.log(moment().format());\n\n```\n\ncheck\n\nThe build will generate a warning to notify you that there is a potential problem. The warning will be similar to:\n\n```\n      â–² [WARNING] Calling \"moment\" will crash at run-time because it's an import namespace object, not a function [call-import-namespace]    src/main.ts:2:12:      2 â”‚ console.log(moment().format());        â•µ             ~~~~~~Consider changing \"moment\" to a default import instead:    src/main.ts:1:7:      1 â”‚ import * as moment from 'moment';        â”‚        ~~~~~~~~~~~        â•µ        moment\n\n```\n\ncheck\n\nHowever, you can avoid the runtime errors and the warning by enabling the `esModuleInterop` TypeScript option for the application and changing the import to the following:\n\n```\n      import moment from 'moment';console.log(moment().format());\n\n```\n\ncheck\n\n### [Order-dependent side-effectful imports in lazy modules](https://angular.dev/tools/cli/build-system-migration\\#order-dependent-side-effectful-imports-in-lazy-modules)\n\nImport statements that are dependent on a specific ordering and are also used in multiple lazy modules can cause top-level statements to be executed out of order.\nThis is not common as it depends on the usage of side-effectful modules and does not apply to the `polyfills` option.\nThis is caused by a [defect](https://github.com/evanw/esbuild/issues/399) in the underlying bundler but will be addressed in a future update.\n\n**IMPORTANT:** Avoiding the use of modules with non-local side effects (outside of polyfills) is recommended whenever possible regardless of the build system being used and avoids this particular issue. Modules with non-local side effects can have a negative effect on both application size and runtime performance as well.\n\n## [Bug reports](https://angular.dev/tools/cli/build-system-migration\\#bug-reports)\n\nReport issues and feature requests on [GitHub](https://github.com/angular/angular-cli/issues).\n\nPlease provide a minimal reproduction where possible to aid the team in addressing issues.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-0ba42127-deac-45f3-9d17-263e38a8972f.png"
  },
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "apple-mobile-web-app-title": "Angular",
    "theme-color": "#ffffff",
    "description": "The web development framework for building modern apps.",
    "twitter:url": "https://angular.dev/",
    "twitter:description": "The web development framework for building modern apps.",
    "ogUrl": "https://angular.dev/",
    "og:description": "The web development framework for building modern apps.",
    "ogDescription": "The web development framework for building modern apps.",
    "msapplication-TileColor": "#e90464",
    "title": "Migrating to new build system â€¢ Angular",
    "ogTitle": "Angular",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "language": "en",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "twitter:title": "Angular",
    "application-name": "Angular",
    "og:title": "Angular",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "og:type": "website",
    "og:url": "https://angular.dev/",
    "twitter:card": "summary_large_image",
    "scrapeId": "1bfe0693-ae88-4b34-baaf-9e641969c6b0",
    "sourceURL": "https://angular.dev/tools/cli/build-system-migration",
    "url": "https://angular.dev/tools/cli/build-system-migration",
    "statusCode": 200
  }
}