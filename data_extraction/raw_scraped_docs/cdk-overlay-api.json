{
  "scrapeId": "dc02d047-1b33-48b1-84a1-40183ffa04ab",
  "sourceURL": "https://material.angular.io/cdk/overlay/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\nAPI for overlay\n\n## API reference for Angular CDK overlay\n\n`\n          import {OverlayModule} from '@angular/cdk/overlay';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/cdk/overlay/api\\#services)  Services\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#Overlay) `Overlay`\n\nService to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\nused as a low-level building block for other components. Dialogs, tooltips, menus,\nselects, etc. can all be built using overlays. The service should primarily be used by authors\nof re-usable components rather than developers building end-user applications.\n\nAn overlay _is_ a PortalOutlet, so any kind of Portal can be loaded into one.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `scrollStrategies: inject(ScrollStrategyOptions)` |  |\n\n##### Methods\n\n| create |\n| --- |\n| Creates an overlay. |\n| Parameters |\n| --- |\n| config?<br> `OverlayConfig` | Configuration applied to the overlay. |\n| Returns |\n| --- |\n| `OverlayRef` | Reference to the created overlay. |\n\n| position |\n| --- |\n| Gets a position builder that can be used, via fluent API,<br>to construct and configure a position strategy. |\n| Returns |\n| --- |\n| `OverlayPositionBuilder` | An overlay position builder. |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#OverlayContainer) `OverlayContainer`\n\nContainer inside which all overlays will render.\n\n##### Methods\n\n| getContainerElement |\n| --- |\n| This method returns the overlay container element. It will lazily<br>create the element the first time it is called to facilitate using<br>the container in non-browser environments. |\n| Returns |\n| --- |\n| `HTMLElement` | the container element |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#FullscreenOverlayContainer) `FullscreenOverlayContainer`extends [OverlayContainer](https://material.angular.io/cdk/overlay/cdk/overlay/api\\#OverlayContainer)\n\nAlternative to OverlayContainer that supports correct displaying of overlay elements in\nFullscreen mode\n[https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen)\n\nShould be provided in the root component.\n\n##### Methods\n\n| getContainerElement |\n| --- |\n| This method returns the overlay container element. It will lazily<br>create the element the first time it is called to facilitate using<br>the container in non-browser environments. |\n| Returns |\n| --- |\n| `HTMLElement` | the container element |\n\n| getFullscreenElement |\n| --- |\n| When the page is put into fullscreen mode, a specific element is specified.<br>Only that element and its children are visible when in fullscreen mode. |\n| Returns |\n| --- |\n| `Element` |  |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#OverlayPositionBuilder) `OverlayPositionBuilder`\n\nBuilder for overlay position strategy.\n\n##### Methods\n\n| flexibleConnectedTo |\n| --- |\n| Creates a flexible position strategy. |\n| Parameters |\n| --- |\n| origin<br> `FlexibleConnectedPositionStrategyOrigin` | Origin relative to which to position the overlay. |\n| Returns |\n| --- |\n| `FlexibleConnectedPositionStrategy` |  |\n\n| global |\n| --- |\n| Creates a global position strategy. |\n| Returns |\n| --- |\n| `GlobalPositionStrategy` |  |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#ScrollStrategyOptions) `ScrollStrategyOptions`\n\nOptions for how an overlay will handle scrolling.\n\nUsers can provide a custom value for `ScrollStrategyOptions` to replace the default\nbehaviors. This class primarily acts as a factory for ScrollStrategy instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `block: () => new BlockScrollStrategy(this._viewportRuler, this._document)` | Block scrolling. |\n| `close: (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config)` | Close the overlay as soon as the user scrolls. |\n| `noop: () => new NoopScrollStrategy()` | Do nothing on scroll. |\n| `reposition: (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config)` | Update the overlay's position on scroll. |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#OverlayOutsideClickDispatcher) `OverlayOutsideClickDispatcher`\n\nService for dispatching mouse click events that land on the body to appropriate overlay ref,\nif any. It maintains a list of attached overlays to determine best suited overlay based\non event target and order of overlay opens.\n\n##### Methods\n\n| add |\n| --- |\n| Add a new overlay to the list of attached overlay refs. |\n| Parameters |\n| --- |\n| overlayRef<br> `OverlayRef` |  |\n\n| detach |\n| --- |\n| Detaches the global keyboard event listener. |\n\n| remove |\n| --- |\n| Remove an overlay from the list of attached overlay refs. |\n| Parameters |\n| --- |\n| overlayRef<br> `OverlayRef` |  |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#OverlayKeyboardDispatcher) `OverlayKeyboardDispatcher`\n\nService for dispatching keyboard events that land on the body to appropriate overlay ref,\nif any. It maintains a list of attached overlays to determine best suited overlay based\non event target and order of overlay opens.\n\n##### Methods\n\n| add |\n| --- |\n| Add a new overlay to the list of attached overlay refs. |\n| Parameters |\n| --- |\n| overlayRef<br> `OverlayRef` |  |\n\n| detach |\n| --- |\n| Detaches the global keyboard event listener. |\n\n| remove |\n| --- |\n| Remove an overlay from the list of attached overlay refs. |\n| Parameters |\n| --- |\n| overlayRef<br> `OverlayRef` |  |\n\n### [link](https://material.angular.io/cdk/overlay/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#CdkOverlayOrigin) `CdkOverlayOrigin`\n\nDirective applied to an element to make it usable as an origin for an Overlay using a\nConnectedPositionStrategy.\n\nSelector:\\[cdk-overlay-origin\\]\\[overlay-origin\\]\\[cdkOverlayOrigin\\]\n\nExported as:cdkOverlayOrigin\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `elementRef: inject(ElementRef)` |  |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#CdkConnectedOverlay) `CdkConnectedOverlay`\n\nDirective to facilitate declarative creation of an\nOverlay using a FlexibleConnectedPositionStrategy.\n\nSelector:\\[cdk-connected-overlay\\]\\[connected-overlay\\]\\[cdkConnectedOverlay\\]\n\nExported as:cdkConnectedOverlay\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('cdkConnectedOverlayBackdropClass')<br> <br>`backdropClass: string | string[]` | The custom class to be set on the backdrop element. |\n| @Input('cdkConnectedOverlayDisableClose')<br> <br>`disableClose: boolean` | Whether the overlay can be closed by user interaction. |\n| @Input({ alias: 'cdkConnectedOverlayDisposeOnNavigation', transform: booleanAttribute })<br> <br>`disposeOnNavigation: boolean` | Whether the overlay should be disposed of when the user goes backwards/forwards in history. |\n| @Input({ alias: 'cdkConnectedOverlayFlexibleDimensions', transform: booleanAttribute })<br> <br>`flexibleDimensions: boolean` | Whether the overlay's width and height can be constrained to fit within the viewport. |\n| @Input({ alias: 'cdkConnectedOverlayGrowAfterOpen', transform: booleanAttribute })<br> <br>`growAfterOpen: boolean` | Whether the overlay can grow after the initial open when flexible positioning is turned on. |\n| @Input({ alias: 'cdkConnectedOverlayHasBackdrop', transform: booleanAttribute })<br> <br>`hasBackdrop: boolean` | Whether or not the overlay should attach a backdrop. |\n| @Input('cdkConnectedOverlayHeight')<br> <br>`height: number | string` | The height of the overlay panel. |\n| @Input({ alias: 'cdkConnectedOverlayLockPosition', transform: booleanAttribute })<br> <br>`lockPosition: boolean` | Whether or not the overlay should be locked when scrolling. |\n| @Input('cdkConnectedOverlayMinHeight')<br> <br>`minHeight: number | string` | The min height of the overlay panel. |\n| @Input('cdkConnectedOverlayMinWidth')<br> <br>`minWidth: number | string` | The min width of the overlay panel. |\n| @Input('cdkConnectedOverlayOffsetX')<br> <br>`offsetX: number` | The offset in pixels for the overlay connection point on the x-axis |\n| @Input('cdkConnectedOverlayOffsetY')<br> <br>`offsetY: number` | The offset in pixels for the overlay connection point on the y-axis |\n| @Input('cdkConnectedOverlayOpen')<br> <br>`open: boolean` | Whether the overlay is open. |\n| @Input('cdkConnectedOverlayOrigin')<br> <br>`origin: CdkOverlayOrigin | FlexibleConnectedPositionStrategyOrigin` | Origin for the connected overlay. |\n| @Input('cdkConnectedOverlayPanelClass')<br> <br>`panelClass: string | string[]` | The custom class to add to the overlay pane element. |\n| @Input('cdkConnectedOverlayPositionStrategy')<br> <br>`positionStrategy: FlexibleConnectedPositionStrategy` | This input overrides the positions input if specified. It lets users pass<br>in arbitrary positioning strategies. |\n| @Input('cdkConnectedOverlayPositions')<br> <br>`positions: ConnectedPosition[]` | Registered connected position pairs. |\n| @Input({ alias: 'cdkConnectedOverlayPush', transform: booleanAttribute })<br> <br>`push: boolean` | Whether the overlay can be pushed on-screen if none of the provided positions fit. |\n| @Input('cdkConnectedOverlayScrollStrategy')<br> <br>`scrollStrategy: ScrollStrategy` | Strategy to be used when handling scroll events while the overlay is open. |\n| @Input('cdkConnectedOverlayTransformOriginOn')<br> <br>`transformOriginSelector: string` | CSS selector which to set the transform origin. |\n| @Input('cdkConnectedOverlayViewportMargin')<br> <br>`viewportMargin: number` | Margin between the overlay and the viewport edges. |\n| @Input('cdkConnectedOverlayWidth')<br> <br>`width: number | string` | The width of the overlay panel. |\n| @Output()<br>`attach: EventEmitter<void>` | Event emitted when the overlay has been attached. |\n| @Output()<br>`backdropClick: EventEmitter<MouseEvent>` | Event emitted when the backdrop is clicked. |\n| @Output()<br>`detach: EventEmitter<void>` | Event emitted when the overlay has been detached. |\n| @Output()<br>`overlayKeydown: EventEmitter<KeyboardEvent>` | Emits when there are keyboard events that are targeted at the overlay. |\n| @Output()<br>`overlayOutsideClick: EventEmitter<MouseEvent>` | Emits when there are mouse outside click events that are targeted at the overlay. |\n| @Output()<br>`positionChange: EventEmitter<ConnectedOverlayPositionChange>` | Event emitted when the position has changed. |\n| `dir: Direction` | The element's layout direction. |\n| `overlayRef: OverlayRef` | The associated overlay reference. |\n\n##### Methods\n\n| attachOverlay |\n| --- |\n| Attaches the overlay. |\n\n| detachOverlay |\n| --- |\n| Detaches the overlay. |\n\n### [link](https://material.angular.io/cdk/overlay/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#OverlayRef) `OverlayRef`\n\nReference to an overlay that has been created with the Overlay service.\nUsed to manipulate or dispose of said overlay.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `backdropElement: HTMLElement | null` | The overlay's backdrop HTML element. |\n| `hostElement: HTMLElement` | Wrapper around the panel element. Can be used for advanced<br>positioning where a wrapper with specific styling is<br>required around the overlay pane. |\n| `overlayElement: HTMLElement` | The overlay's HTML element |\n\n##### Methods\n\n| addPanelClass |\n| --- |\n| Add a CSS class or an array of classes to the overlay pane. |\n| Parameters |\n| --- |\n| classes<br> `string | string[]` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `ComponentPortal<T>` |  |\n| Returns |\n| --- |\n| `ComponentRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `TemplatePortal<T>` |  |\n| Returns |\n| --- |\n| `EmbeddedViewRef<T>` |  |\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| portal<br> `any` |  |\n| Returns |\n| --- |\n| `any` |  |\n\n| attachments |\n| --- |\n| Gets an observable that emits when the overlay has been attached. |\n| Returns |\n| --- |\n| `Observable<void>` |  |\n\n| backdropClick |\n| --- |\n| Gets an observable that emits when the backdrop has been clicked. |\n| Returns |\n| --- |\n| `Observable<MouseEvent>` |  |\n\n| detach |\n| --- |\n| Detaches an overlay from a portal. |\n| Returns |\n| --- |\n| `any` | The portal detachment result. |\n\n| detachBackdrop |\n| --- |\n| Detaches the backdrop (if any) associated with the overlay. |\n\n| detachments |\n| --- |\n| Gets an observable that emits when the overlay has been detached. |\n| Returns |\n| --- |\n| `Observable<void>` |  |\n\n| dispose |\n| --- |\n| Cleans up the overlay from the DOM. |\n\n| getConfig |\n| --- |\n| Gets the current overlay configuration, which is immutable. |\n| Returns |\n| --- |\n| `OverlayConfig` |  |\n\n| getDirection |\n| --- |\n| Returns the layout direction of the overlay panel. |\n| Returns |\n| --- |\n| `Direction` |  |\n\n| hasAttached |\n| --- |\n| Whether the overlay has attached content. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| keydownEvents |\n| --- |\n| Gets an observable of keydown events targeted to this overlay. |\n| Returns |\n| --- |\n| `Observable<KeyboardEvent>` |  |\n\n| outsidePointerEvents |\n| --- |\n| Gets an observable of pointer events targeted outside this overlay. |\n| Returns |\n| --- |\n| `Observable<MouseEvent>` |  |\n\n| removePanelClass |\n| --- |\n| Remove a CSS class or an array of classes from the overlay pane. |\n| Parameters |\n| --- |\n| classes<br> `string | string[]` |  |\n\n| setDirection |\n| --- |\n| Sets the LTR/RTL direction for the overlay. |\n| Parameters |\n| --- |\n| dir<br> `Directionality | Direction` |  |\n\n| updatePosition |\n| --- |\n| Updates the position of the overlay based on the position strategy. |\n\n| updatePositionStrategy |\n| --- |\n| Switches to a new position strategy and updates the overlay position. |\n| Parameters |\n| --- |\n| strategy<br> `PositionStrategy` |  |\n\n| updateScrollStrategy |\n| --- |\n| Switches to a new scroll strategy. |\n| Parameters |\n| --- |\n| strategy<br> `ScrollStrategy` |  |\n\n| updateSize |\n| --- |\n| Update the size properties of the overlay. |\n| Parameters |\n| --- |\n| sizeConfig<br> `OverlaySizeConfig` |  |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#GlobalPositionStrategy) `GlobalPositionStrategy`\n\nA strategy for positioning overlays. Using this strategy, an overlay is given an\nexplicit position relative to the browser's viewport. We use flexbox, instead of\ntransforms, in order to avoid issues with subpixel rendering which can cause the\nelement to become blurry.\n\n##### Methods\n\n| attach |\n| --- |\n| Parameters |\n| --- |\n| overlayRef<br> `OverlayRef` |  |\n\n| bottom |\n| --- |\n| Sets the bottom position of the overlay. Clears any previously set vertical position. |\n| Parameters |\n| --- |\n| value<br> `string = ''` | New bottom offset. |\n| Returns |\n| --- |\n| `this` |  |\n\n| centerHorizontally |\n| --- |\n| Centers the overlay horizontally with an optional offset.<br>Clears any previously set horizontal position. |\n| Parameters |\n| --- |\n| offset<br> `string = ''` | Overlay offset from the horizontal center. |\n| Returns |\n| --- |\n| `this` |  |\n\n| centerVertically |\n| --- |\n| Centers the overlay vertically with an optional offset.<br>Clears any previously set vertical position. |\n| Parameters |\n| --- |\n| offset<br> `string = ''` | Overlay offset from the vertical center. |\n| Returns |\n| --- |\n| `this` |  |\n\n| end |\n| --- |\n| Sets the overlay to the end of the viewport, depending on the overlay direction.<br>This will be to the right in LTR layouts and to the left in RTL. |\n| Parameters |\n| --- |\n| offset<br> `` | Offset from the edge of the screen. |\n| value<br> `string = ''` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| left |\n| --- |\n| Sets the left position of the overlay. Clears any previously set horizontal position. |\n| Parameters |\n| --- |\n| value<br> `string = ''` | New left offset. |\n| Returns |\n| --- |\n| `this` |  |\n\n| right |\n| --- |\n| Sets the right position of the overlay. Clears any previously set horizontal position. |\n| Parameters |\n| --- |\n| value<br> `string = ''` | New right offset. |\n| Returns |\n| --- |\n| `this` |  |\n\n| start |\n| --- |\n| Sets the overlay to the start of the viewport, depending on the overlay direction.<br>This will be to the left in LTR layouts and to the right in RTL. |\n| Parameters |\n| --- |\n| offset<br> `` | Offset from the edge of the screen. |\n| value<br> `string = ''` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| top |\n| --- |\n| Sets the top position of the overlay. Clears any previously set vertical position. |\n| Parameters |\n| --- |\n| value<br> `string = ''` | New top offset. |\n| Returns |\n| --- |\n| `this` |  |\n\n| Deprecated<br> <br>height |\n| --- |\n| Sets the overlay height and clears any previously set height. |\n| Parameters |\n| --- |\n| value<br> `string = ''` | New height for the overlay |\n| Returns |\n| --- |\n| `this` |  |\n\n| Deprecated<br> <br>width |\n| --- |\n| Sets the overlay width and clears any previously set width. |\n| Parameters |\n| --- |\n| value<br> `string = ''` | New width for the overlay |\n| Returns |\n| --- |\n| `this` |  |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#FlexibleConnectedPositionStrategy) `FlexibleConnectedPositionStrategy`\n\nA strategy for positioning overlays. Using this strategy, an overlay is given an\nimplicit position relative some origin element. The relative position is defined in terms of\na point on the origin element that is connected to a point on the overlay element. For example,\na basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\nof the overlay.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `positionChanges: Observable<ConnectedOverlayPositionChange>` | Observable sequence of position changes. |\n| `positions: ConnectionPositionPair[]` | Ordered list of preferred positions, from most to least desirable. |\n\n##### Methods\n\n| attach |\n| --- |\n| Attaches this position strategy to an overlay. |\n| Parameters |\n| --- |\n| overlayRef<br> `OverlayRef` |  |\n\n| detach |\n| --- |\n\n| dispose |\n| --- |\n| Cleanup after the element gets destroyed. |\n\n| reapplyLastPosition |\n| --- |\n| This re-aligns the overlay element with the trigger in its last calculated position,<br>even if a position higher in the \"preferred positions\" list would now fit. This<br>allows one to re-align the panel without changing the orientation of the panel. |\n\n| setOrigin |\n| --- |\n| Sets the origin, relative to which to position the overlay.<br>Using an element origin is useful for building components that need to be positioned<br>relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be<br>used for cases like contextual menus which open relative to the user's pointer. |\n| Parameters |\n| --- |\n| origin<br> `FlexibleConnectedPositionStrategyOrigin` | Reference to the new origin. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withDefaultOffsetX |\n| --- |\n| Sets the default offset for the overlay's connection point on the x-axis. |\n| Parameters |\n| --- |\n| offset<br> `number` | New offset in the X axis. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withDefaultOffsetY |\n| --- |\n| Sets the default offset for the overlay's connection point on the y-axis. |\n| Parameters |\n| --- |\n| offset<br> `number` | New offset in the Y axis. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withFlexibleDimensions |\n| --- |\n| Sets whether the overlay's width and height can be constrained to fit within the viewport. |\n| Parameters |\n| --- |\n| flexibleDimensions<br> `boolean = true` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| withGrowAfterOpen |\n| --- |\n| Sets whether the overlay can grow after the initial open via flexible width/height. |\n| Parameters |\n| --- |\n| growAfterOpen<br> `boolean = true` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| withLockedPosition |\n| --- |\n| Sets whether the overlay's position should be locked in after it is positioned<br>initially. When an overlay is locked in, it won't attempt to reposition itself<br>when the position is re-applied (e.g. when the user scrolls away). |\n| Parameters |\n| --- |\n| isLocked<br> `boolean = true` | Whether the overlay should locked in. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withPositions |\n| --- |\n| Adds new preferred positions. |\n| Parameters |\n| --- |\n| positions<br> `ConnectedPosition[]` | List of positions options for this overlay. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withPush |\n| --- |\n| Sets whether the overlay can be pushed on-screen if none of the provided positions fit. |\n| Parameters |\n| --- |\n| canPush<br> `boolean = true` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| withScrollableContainers |\n| --- |\n| Sets the list of Scrollable containers that host the origin element so that<br>on reposition we can evaluate if it or the overlay has been clipped or outside view. Every<br>Scrollable must be an ancestor element of the strategy's origin element. |\n| Parameters |\n| --- |\n| scrollables<br> `CdkScrollable[]` |  |\n| Returns |\n| --- |\n| `this` |  |\n\n| withTransformOriginOn |\n| --- |\n| Configures that the position strategy should set a `transform-origin` on some elements<br>inside the overlay, depending on the current position that is being applied. This is<br>useful for the cases where the origin of an animation can change depending on the<br>alignment of the overlay. |\n| Parameters |\n| --- |\n| selector<br> `string` | CSS selector that will be used to find the target<br>elements onto which to set the transform origin. |\n| Returns |\n| --- |\n| `this` |  |\n\n| withViewportMargin |\n| --- |\n| Sets a minimum distance the overlay may be positioned to the edge of the viewport. |\n| Parameters |\n| --- |\n| margin<br> `number` | Required margin between the overlay and the viewport edge in pixels. |\n| Returns |\n| --- |\n| `this` |  |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#OverlayConfig) `OverlayConfig`\n\nInitial configuration used when creating an overlay.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `backdropClass: string | string[]` | Custom class to add to the backdrop |\n| `direction: Direction | Directionality` | Direction of the text in the overlay panel. If a `Directionality` instance<br>is passed in, the overlay will handle changes to its value automatically. |\n| `disposeOnNavigation: boolean` | Whether the overlay should be disposed of when the user goes backwards/forwards in history.<br>Note that this usually doesn't include clicking on links (unless the user is using<br>the `HashLocationStrategy`). |\n| `hasBackdrop: boolean` | Whether the overlay has a backdrop. |\n| `height: number | string` | The height of the overlay panel. If a number is provided, pixel units are assumed. |\n| `maxHeight: number | string` | The max-height of the overlay panel. If a number is provided, pixel units are assumed. |\n| `maxWidth: number | string` | The max-width of the overlay panel. If a number is provided, pixel units are assumed. |\n| `minHeight: number | string` | The min-height of the overlay panel. If a number is provided, pixel units are assumed. |\n| `minWidth: number | string` | The min-width of the overlay panel. If a number is provided, pixel units are assumed. |\n| `panelClass: string | string[]` | Custom class to add to the overlay pane. |\n| `positionStrategy: PositionStrategy` | Strategy with which to position the overlay. |\n| `scrollStrategy: ScrollStrategy` | Strategy to be used when handling scroll events while the overlay is open. |\n| `width: number | string` | The width of the overlay panel. If a number is provided, pixel units are assumed. |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#ConnectionPositionPair) `ConnectionPositionPair`\n\nThe points of the origin element and the overlay element to connect.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `offsetX: number` | Offset along the X axis. |\n| `offsetY: number` | Offset along the Y axis. |\n| `originX: HorizontalConnectionPos` | X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. |\n| `originY: VerticalConnectionPos` | Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. |\n| `overlayX: HorizontalConnectionPos` | X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. |\n| `overlayY: VerticalConnectionPos` | Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. |\n| `panelClass: string | string[]` | Class(es) to be applied to the panel while this position is active. |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#ConnectedOverlayPositionChange) `ConnectedOverlayPositionChange`\n\nThe change event emitted by the strategy when a fallback position is used.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `connectionPair: ConnectionPositionPair` | The position used as a result of this change. |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#RepositionScrollStrategy) `RepositionScrollStrategy`\n\nStrategy that will update the element position as the user is scrolling.\n\n##### Methods\n\n| attach |\n| --- |\n| Attaches this scroll strategy to an overlay. |\n| Parameters |\n| --- |\n| overlayRef<br> `OverlayRef` |  |\n\n| detach |\n| --- |\n\n| disable |\n| --- |\n| Disables repositioning of the attached overlay on scroll. |\n\n| enable |\n| --- |\n| Enables repositioning of the attached overlay on scroll. |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#CloseScrollStrategy) `CloseScrollStrategy`\n\nStrategy that will close the overlay as soon as the user starts scrolling.\n\n##### Methods\n\n| attach |\n| --- |\n| Attaches this scroll strategy to an overlay. |\n| Parameters |\n| --- |\n| overlayRef<br> `OverlayRef` |  |\n\n| detach |\n| --- |\n\n| disable |\n| --- |\n| Disables the closing the attached overlay on scroll. |\n\n| enable |\n| --- |\n| Enables the closing of the attached overlay on scroll. |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#NoopScrollStrategy) `NoopScrollStrategy`\n\nScroll strategy that doesn't do anything.\n\n##### Methods\n\n| attach |\n| --- |\n| Does nothing, as this scroll strategy is a no-op. |\n\n| disable |\n| --- |\n| Does nothing, as this scroll strategy is a no-op. |\n\n| enable |\n| --- |\n| Does nothing, as this scroll strategy is a no-op. |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#BlockScrollStrategy) `BlockScrollStrategy`\n\nStrategy that will prevent the user from scrolling while the overlay is visible.\n\n##### Methods\n\n| attach |\n| --- |\n| Attaches this scroll strategy to an overlay. |\n\n| disable |\n| --- |\n| Unblocks page-level scroll while the attached overlay is open. |\n\n| enable |\n| --- |\n| Blocks page-level scroll while the attached overlay is open. |\n\n### [link](https://material.angular.io/cdk/overlay/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#OverlaySizeConfig) `OverlaySizeConfig`\n\nSize properties for an overlay.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `height: number | string` |  |\n| `maxHeight: number | string` |  |\n| `maxWidth: number | string` |  |\n| `minHeight: number | string` |  |\n| `minWidth: number | string` |  |\n| `width: number | string` |  |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#PositionStrategy) `PositionStrategy`\n\nStrategy for setting the position on an overlay.\n\n##### Methods\n\n| apply |\n| --- |\n| Updates the position of the overlay element. |\n\n| attach |\n| --- |\n| Attaches this position strategy to an overlay. |\n| Parameters |\n| --- |\n| overlayRef<br> `OverlayRef` |  |\n\n| detach |\n| --- |\n| Called when the overlay is detached. |\n\n| dispose |\n| --- |\n| Cleans up any DOM modifications made by the position strategy, if necessary. |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#ConnectedPosition) `ConnectedPosition`\n\nA connected position as specified by the user.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `offsetX: number` |  |\n| `offsetY: number` |  |\n| `originX: 'start' | 'center' | 'end'` |  |\n| `originY: 'top' | 'center' | 'bottom'` |  |\n| `overlayX: 'start' | 'center' | 'end'` |  |\n| `overlayY: 'top' | 'center' | 'bottom'` |  |\n| `panelClass: string | string[]` |  |\n| `weight: number` |  |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#OriginConnectionPosition) `OriginConnectionPosition`\n\nA connection point on the origin element.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `originX: HorizontalConnectionPos` |  |\n| `originY: VerticalConnectionPos` |  |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#OverlayConnectionPosition) `OverlayConnectionPosition`\n\nA connection point on the overlay element.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `overlayX: HorizontalConnectionPos` |  |\n| `overlayY: VerticalConnectionPos` |  |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#ScrollStrategy) `ScrollStrategy`\n\nDescribes a strategy that will be used by an overlay to handle scroll events while it is open.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `attach: (overlayRef: OverlayRef) => void` | Attaches this `ScrollStrategy` to an overlay. |\n| `detach: () => void` | Detaches the scroll strategy from the current overlay. |\n| `disable: () => void` | Disable this scroll strategy (called when the attached overlay is detached from a portal). |\n| `enable: () => void` | Enable this scroll strategy (called when the attached overlay is attached to a portal). |\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#RepositionScrollStrategyConfig) `RepositionScrollStrategyConfig`\n\nConfig options for the RepositionScrollStrategy.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `autoClose: boolean` | Whether to close the overlay once the user has scrolled away completely. |\n| `scrollThrottle: number` | Time in milliseconds to throttle the scroll events. |\n\n### [link](https://material.angular.io/cdk/overlay/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#FlexibleConnectedPositionStrategyOrigin) `FlexibleConnectedPositionStrategyOrigin`\n\nPossible values that can be set as the origin of a FlexibleConnectedPositionStrategy.\n\n```docs-markdown-code\ntype FlexibleConnectedPositionStrategyOrigin = ElementRef | Element | (Point & {\n    width?: number;\n    height?: number;\n});\n\n```\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#HorizontalConnectionPos) `HorizontalConnectionPos`\n\nHorizontal dimension of a connection point on the perimeter of the origin or overlay element.\n\n```docs-markdown-code\ntype HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n```\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#VerticalConnectionPos) `VerticalConnectionPos`\n\nVertical dimension of a connection point on the perimeter of the origin or overlay element.\n\n```docs-markdown-code\ntype VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n```\n\n### [link](https://material.angular.io/cdk/overlay/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#STANDARD_DROPDOWN_ADJACENT_POSITIONS) `STANDARD_DROPDOWN_ADJACENT_POSITIONS`\n\n```docs-markdown-code\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS: ConnectedPosition[];\n\n```\n\n#### [link](https://material.angular.io/cdk/overlay/api\\#STANDARD_DROPDOWN_BELOW_POSITIONS) `STANDARD_DROPDOWN_BELOW_POSITIONS`\n\n```docs-markdown-code\nconst STANDARD_DROPDOWN_BELOW_POSITIONS: ConnectedPosition[];\n\n```\n\nOverlay\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nPass the \\`height\\` through the \\`OverlayConfig\\`. Will be removed in v8.0.0 or later.\n\nPass the \\`width\\` through the \\`OverlayConfig\\`. Will be removed in v8.0.0 or later.\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-1c815eb2-159b-4e34-a434-603a2850e259.png"
  },
  "metadata": {
    "og:locale": "en_US",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "author": "Angular Components Team",
    "twitter:site": "@Angular",
    "twitter:title": "Angular Material",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:site_name": "Angular Material",
    "og:image:type": "image/png",
    "ogTitle": "Angular Material",
    "twitter:card": "summary",
    "og:url": "https://material.angular.io/",
    "title": "Overlay | Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-capable": "yes",
    "og:type": "website",
    "ogSiteName": "Angular Material",
    "og:image:width": "1339",
    "language": "en-US",
    "twitter:creator": "@Angular",
    "ogUrl": "https://material.angular.io/",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "og:image:height": "943",
    "ogLocale": "en_US",
    "og:title": "Angular Material",
    "theme-color": "#d7e3ff",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "mobile-web-app-capable": "yes",
    "favicon": "https://material.angular.io/cdk/overlay/assets/img/favicon.ico?v=19.1.0",
    "viewport": "width=device-width, initial-scale=1",
    "scrapeId": "dc02d047-1b33-48b1-84a1-40183ffa04ab",
    "sourceURL": "https://material.angular.io/cdk/overlay/api",
    "url": "https://material.angular.io/cdk/overlay/api",
    "statusCode": 200
  }
}