{
  "scrapeId": "a8a42ed8-e55f-4efd-82c8-5cdb50fb7be8",
  "sourceURL": "https://angular.dev/tools/devtools",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nAngular DevTools is a browser extension that provides debugging and profiling capabilities for Angular applications.\n\nIntroducing Angular DevTools - YouTube\n\nAngular\n\n159K subscribers\n\n[Introducing Angular DevTools](https://www.youtube.com/watch?v=bavWOHZM6zE)\n\nAngular\n\nSearch\n\nWatch later\n\nShare\n\nCopy link\n\nInfo\n\nShopping\n\nTap to unmute\n\nIf playback doesn't begin shortly, try restarting your device.\n\nYou're signed out\n\nVideos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.\n\nCancelConfirm\n\nMore videos\n\n## More videos\n\nShare\n\nInclude playlist\n\nAn error occurred while retrieving sharing information. Please try again later.\n\n[Watch on](https://www.youtube.com/watch?v=bavWOHZM6zE&embeds_referring_euri=https%3A%2F%2Fangular.dev%2F)\n\n0:00\n\n0:00 / 2:02â€¢Live\n\nâ€¢\n\n[Watch on YouTube](https://www.youtube.com/watch?v=bavWOHZM6zE \"Watch on YouTube\")\n\nInstall Angular DevTools from the [Chrome Web Store](https://chrome.google.com/webstore/detail/angular-developer-tools/ienfalfjdbdpebioblfackkekamfmbnh) or from [Firefox Addons](https://addons.mozilla.org/firefox/addon/angular-devtools/).\n\nYou can open Chrome or Firefox DevTools on any web page by pressing `F12` or `Ctrl+Shift+I` (Windows or Linux) and `Fn+F12` or `Cmd+Option+I` (Mac).\nOnce browser DevTools is open and Angular DevTools is installed, you can find it under the \"Angular\" tab.\n\n**HELPFUL:** Chrome's new tab page does not run installed extensions, so the Angular tab will not appear in DevTools. Visit any other page to see it.\n\n![An overview of Angular DevTools showing a tree of components for an application.](https://angular.dev/assets/images/guide/devtools/devtools.png)\n\n## [Open your application](https://angular.dev/tools/devtools\\#open-your-application)\n\nWhen you open the extension, you'll see two additional tabs:\n\n| Tabs | Details |\n| :-- | :-- |\n| [Components](https://angular.dev/tools/devtools#debug-your-application) | Lets you explore the components and directives in your application and preview or edit their state. |\n| [Profiler](https://angular.dev/tools/devtools#profile-your-application) | Lets you profile your application and understand what the performance bottleneck is during change detection execution. |\n\n![A screenshot of the top of Angular DevTools illustrating two tabs in the upper-left corner, one labeled 'Components' and another labeled 'Profiler'.](https://angular.dev/assets/images/guide/devtools/devtools-tabs.png)\n\nIn the top-right corner of Angular DevTools you'll find which version of Angular is running on the page as well as the latest commit hash for the extension.\n\n### [Angular application not detected](https://angular.dev/tools/devtools\\#angular-application-not-detected)\n\nIf you see an error message \"Angular application not detected\" when opening Angular DevTools, this means it is not able to communicate with an Angular app on the page.\nThe most common reason for this is because the web page you are inspecting does not contain an Angular application.\nDouble check that you are inspecting the right web page and that the Angular app is running.\n\n### [We detected an application built with production configuration](https://angular.dev/tools/devtools\\#we-detected-an-application-built-with-production-configuration)\n\nIf you see an error message \"We detected an application built with production configuration. Angular DevTools only supports development builds.\", this means that an Angular application was found on the page, but it was compiled with production optimizations.\nWhen compiling for production, Angular CLI removes various debug features to minimize the amount of the JavaScript on the page to improve performance. This includes features needed to communicate with DevTools.\n\nTo run DevTools, you need to compile your application with optimizations disabled. `ng serve` does this by default.\nIf you need to debug a deployed application, disable optimizations in your build with the [`optimization` configuration option](https://angular.dev/reference/configs/workspace-config#optimization-configuration) ( `{\"optimization\": false}`).\n\n## [Debug your application](https://angular.dev/tools/devtools\\#debug-your-application)\n\nThe **Components** tab lets you explore the structure of your application.\nYou can visualize the component and directive instances in the DOM and inspect or modify their state.\n\n### [Explore the application structure](https://angular.dev/tools/devtools\\#explore-the-application-structure)\n\nThe component tree displays a hierarchical relationship of the _components and directives_ within your application.\n\n![A screenshot of the 'Components' tab showing a tree of Angular components and directives starting the root of the application.](https://angular.dev/assets/images/guide/devtools/component-explorer.png)\n\nClick the individual components or directives in the component explorer to select them and preview their properties.\nAngular DevTools displays properties and metadata on the right side of the component tree.\n\nTo look up a component or directive by name use the search box above the component tree.\n\n![A screenshot of the 'Components' tab. The filter bar immediately underneath the tab is searching for 'todo' and all components with 'todo' in the name are highlighted in the tree. `app-todos` is currently selected and a sidebar to the right displays information about the component's properties. This includes a section of `@Output` fields and another section for other properties.](https://angular.dev/assets/images/guide/devtools/search.png)\n\n### [Navigate to the host node](https://angular.dev/tools/devtools\\#navigate-to-the-host-node)\n\nTo go to the host element of a particular component or directive, double-click it in the component explorer.\nAngular DevTools will open the Elements tab in Chrome or the Inspector tab in Firefox, and select the associated DOM node.\n\n### [Navigate to source](https://angular.dev/tools/devtools\\#navigate-to-source)\n\nFor components, Angular DevTools lets you navigate to the component definition in the Sources tab (Chrome) and Debugger tab (Firefox).\nAfter you select a particular component, click the icon at the top-right of the properties view:\n\n![A screenshot of the 'Components' tab. The properties view on the right is visible for a component and the mouse rests in the upper right corner of that view on top of a `<>` icon. An adjacent tooltip reads 'Open component source'.](https://angular.dev/assets/images/guide/devtools/navigate-source.png)\n\n### [Update property value](https://angular.dev/tools/devtools\\#update-property-value)\n\nLike browsers' DevTools, the properties view lets you edit the value of an input, output, or other properties.\nRight-click on the property value and if edit functionality is available for this value type, a text input will appear.\nType the new value and press `Enter` to apply this value to the property.\n\n![A screenshot of the 'Components' tab with the properties view open for a component. An `@Input` named `todo` contains a `label` property which is currently selected and has been manually updated to the value 'Buy milk'.](https://angular.dev/assets/images/guide/devtools/update-property.png)\n\n### [Access selected component or directive in console](https://angular.dev/tools/devtools\\#access-selected-component-or-directive-in-console)\n\nAs a shortcut in the console, Angular DevTools provides access to instances of recently selected components or directives.\nType `$ng0` to get a reference to the instance of the currently selected component or directive, and type `$ng1` for the previously selected instance, `$ng2` for the instance selected before that, and so on.\n\n![A screenshot of the 'Components' tab with the browser console underneath. In the console, the user has typed three commands, `$ng0`, `$ng1`, and `$ng2` to view the three most recently selected elements. After each statement, the console prints a different component reference.](https://angular.dev/assets/images/guide/devtools/access-console.png)\n\n### [Select a directive or component](https://angular.dev/tools/devtools\\#select-a-directive-or-component)\n\nSimilar to browsers' DevTools, you can inspect the page to select a particular component or directive.\nClick the _**Inspect element**_ icon in the top left corner within Angular DevTools and hover over a DOM element on the page.\nThe extension recognizes the associated directives and/or components and lets you select the corresponding element in the Component tree.\n\n![A screenshot of the 'Components' tab with an Angular todo application visible. In the very top-left corner of Angular DevTools, an icon of a screen with a mouse icon inside it is selected. The mouse rests on a todo element in the Angular application UI. The element is highlighted with a `<TodoComponent>` label displayed in an adjacent tooltip.](https://angular.dev/assets/images/guide/devtools/inspect-element.png)\n\n## [Profile your application](https://angular.dev/tools/devtools\\#profile-your-application)\n\nThe **Profiler** tab lets you visualize the execution of Angular's change detection.\nThis is useful for determining when and how change detection impacts your application's performance.\n\n![A screenshot of the 'Profiler' tab which reads 'Click the play button to start a new recording, or upload a json file containing profiler data.' Next to this is a record button to being recording a new profile as well as a file picker to select an existing profile.](https://angular.dev/assets/images/guide/devtools/profiler.png)\n\nThe Profiler tab lets you start profiling the current application or import an existing profile from a previous run.\nTo start profiling your application, hover over the circle in the top-left corner within the **Profiler** tab and click **Start recording**.\n\nDuring profiling, Angular DevTools captures execution events, such as change detection and lifecycle hook execution.\nInteract with your application to trigger change detection and generate data Angular DevTools can use.\nTo finish recording, click the circle again to **Stop recording**.\n\nYou can also import an existing recording.\nRead more about this feature in the [Import recording](https://angular.dev/tools/devtools#import-and-export-recordings) section.\n\n### [Understand your application's execution](https://angular.dev/tools/devtools\\#understand-your-applications-execution)\n\nAfter recording or importing a profile, Angular DevTools displays a visualization of change detection cycles.\n\n![A screenshot of the 'Profiler' tab after a profile has been recorded or uploaded. It displays a bar chart illustrating various change detection cycles with some text which reads 'Select a bar to preview a particular change detection cycle'.](https://angular.dev/assets/images/guide/devtools/default-profiler-view.png)\n\nEach bar in the sequence represents a change detection cycle in your app.\nThe taller a bar is, the longer the application spent running change detection in this cycle.\nWhen you select a bar, DevTools displays useful information about it including:\n\n- A bar chart with all the components and directives that it captured during this cycle\n- How much time Angular spent running change detection in this cycle.\n- An estimated frame rate as experienced by the user.\n- The source which triggered change detection.\n\n![A screenshot of the 'Profiler' tab. A single bar has been selected by the user and a nearby dropdown menu displays 'Bar chart`, showing a second bar chart underneath it. The new chart has two bars which take up the majority of the space, one labeled `TodosComponent` and the other labeled `NgForOf`. The other bars are small enough to be negligible in comparison.](https://angular.dev/assets/images/guide/devtools/profiler-selected-bar.png)\n\n### [Understand component execution](https://angular.dev/tools/devtools\\#understand-component-execution)\n\nThe bar chart displayed after clicking on a change detection cycle displays a detailed view about how much time your application spent running change detection in that particular component or directive.\n\nThis example shows the total time spent by the `NgForOf` directive and which method was called on it.\n\n![A screenshot of the 'Profiler' tab where the `NgForOf` bar is selected. A detailed view of `NgForOf` is visible to the right where it lists 'Total time spent: 1.76 ms'. It includes a with exactly one row, listing `NgForOf` as a directives with an `ngDoCheck` method which took 1.76 ms. It also includes a list labeled 'Parent Hierarchy' containing the parent components of this directive.](https://angular.dev/assets/images/guide/devtools/directive-details.png)\n\n### [Hierarchical views](https://angular.dev/tools/devtools\\#hierarchical-views)\n\n![A screenshot of the 'Profiler' tab. A single bar has been selected by the user and a nearby dropdown menu now displays 'Flame graph', showing a flame graph underneath it. The flame graph starts with a row called 'Entire application' and another row called 'AppComponent'. Beneath those, the rows start to break up into multiple items, starting with `[RouterOutlet]` and `DemoAppComponent` on the third row. A few layers deep, one cell is highlighted red.](https://angular.dev/assets/images/guide/devtools/flame-graph-view.png)\n\nYou can also visualize the change detection execution in a flame graph-like view.\n\nEach tile in the graph represents an element on the screen at a specific position in the render tree.\nFor example, consider a change detection cycle where a `LoggedOutUserComponent` is removed and in its place Angular rendered a `LoggedInUserComponent`. In this scenario both components will be displayed in the same tile.\n\nThe x-axis represents the full time it took to render this change detection cycle.\nThe y-axis represents the element hierarchy. Running change detection for an element requires render its directives and child components.\nTogether, this graph visualizes which components are taking the longest time to render and where that time is going.\n\nEach tile is colored depending on how much time Angular spent there.\nAngular DevTools determines the intensity of the color by the time spent relative to the tile where rendering took the most time.\n\nWhen you click on a certain tile, you'll see details about it in the panel on the right.\nDouble-clicking the tile zooms it in so you can more easily view its nested children.\n\n### [Debug change detection and `OnPush` components](https://angular.dev/tools/devtools\\#debug-change-detection-and-onpush-components)\n\nNormally, the graph visualizes the time it takes to _render_ an application, for any given change detection frame. However some components such as `OnPush` components will only re-render if their input properties change. It can be useful to visualize the flame graph without these components for particular frames.\n\nTo visualize only the components in a change detection frame that went through the change detection process, select the **Change detection** checkbox at the top, above the flame graph.\n\nThis view highlights all the components that went through change detection and displays those that did not in gray, such as `OnPush` components that did not re-render.\n\n![A screenshot of the 'Profiler' tab displaying a flame chart visualization of a change detection cycle. A checkbox labeled 'Show only change detection' is now checked. The flame graph looks very similar to before, however the color of components has changed from orange to blue. Several tiles labeled `[RouterOutlet]` are no longer highlighted with any color.](https://angular.dev/assets/images/guide/devtools/debugging-onpush.png)\n\n### [Import and export recordings](https://angular.dev/tools/devtools\\#import-and-export-recordings)\n\nClick the **Save Profile** button at the top-right of a recorded profiling session to export it as a JSON file and save it to the disk.\nLater, import the file in the initial view of the profiler by clicking the **Choose file** input.\n\n![A screenshot of the 'Profiler' tab displaying change detection cycles. On the right side a 'Save Profile' button is visible.](https://angular.dev/assets/images/guide/devtools/save-profile.png)\n\n## [Inspect your injectors](https://angular.dev/tools/devtools\\#inspect-your-injectors)\n\nNOTE: The Injector Tree is available for Angular Applications built with version 17 or higher.\n\n### [View the injector hierarchy of your application](https://angular.dev/tools/devtools\\#view-the-injector-hierarchy-of-your-application)\n\nThe **Injector Tree** tab lets you explore the structure of the Injectors configured in your application. Here you will see two trees representing the [injector hierarchy](https://angular.dev/guide/di/hierarchical-dependency-injection) of your application. One tree is your environment hierarchy, the other is your element hierarchy.\n\n![A screenshot of the 'Profiler' tab displaying the injector tree tab in Angular Devtools visualizing the injector graph for an example application.](https://angular.dev/assets/images/guide/devtools/di-injector-tree.png)\n\n### [Visualize resolution paths](https://angular.dev/tools/devtools\\#visualize-resolution-paths)\n\nWhen a specific injector is selected, the path that Angular's dependency injection algorithm traverses from that injector to the root is highlighted. For element injectors, this includes highlighting the environment injectors that the dependency injection algorithm jumps to when a dependency cannot be resolved in the element hierarchy.\n\nSee [resolution rules](https://angular.dev/guide/di/hierarchical-dependency-injection#resolution-rules) for more details about how Angular resolves resolution paths.\n\n![A screenshot of the 'Profiler' tab displaying how the injector tree visualize highlights resolution paths when an injector is selected.](https://angular.dev/assets/images/guide/devtools/di-injector-tree-selected.png)\n\n### [View injector providers](https://angular.dev/tools/devtools\\#view-injector-providers)\n\nClicking an injector that has configured providers will display those providers in a list on the right of the injector tree view. Here you can view the provided token and it's type.\n\n![A screenshot of the 'Profiler' tab displaying how providers are made visible when an injector is selected.](https://angular.dev/assets/images/guide/devtools/di-injector-tree-providers.png)",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-b2820226-8544-4a96-837e-75d145149ac7.png"
  },
  "metadata": {
    "language": "en",
    "ogDescription": "The web development framework for building modern apps.",
    "twitter:title": "Angular",
    "title": "DevTools â€¢ Angular",
    "theme-color": "#ffffff",
    "og:url": "https://angular.dev/",
    "og:title": "Angular",
    "twitter:description": "The web development framework for building modern apps.",
    "ogTitle": "Angular",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogUrl": "https://angular.dev/",
    "og:type": "website",
    "description": "The web development framework for building modern apps.",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "apple-mobile-web-app-title": "Angular",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "application-name": "Angular",
    "msapplication-TileColor": "#e90464",
    "og:description": "The web development framework for building modern apps.",
    "twitter:card": "summary_large_image",
    "viewport": [
      "width=device-width, initial-scale=1",
      "width=device-width, initial-scale=1"
    ],
    "twitter:url": "https://angular.dev/",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "scrapeId": "a8a42ed8-e55f-4efd-82c8-5cdb50fb7be8",
    "sourceURL": "https://angular.dev/tools/devtools",
    "url": "https://angular.dev/tools/devtools",
    "statusCode": 200
  }
}