{
  "scrapeId": "ed66c273-0ea0-4265-8e02-4216b5a9df48",
  "sourceURL": "https://material.angular.io/components/tree/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for tree\n\nThe `mat-tree` provides a Material Design styled tree that can be used to display hierarchical\ndata.\n\nThis tree builds on the foundation of the CDK tree and uses a similar interface for its\ndata source input and template, except that its element and attribute selectors will be prefixed\nwith `mat-` instead of `cdk-`.\n\nThere are two types of trees: flat and nested. The DOM structures are different for these\ntwo types of trees.\n\n#### [link](https://material.angular.io/components/tree/overview\\#flat-tree)  Flat tree\n\nIn a flat tree, the hierarchy is flattened; nodes are not rendered inside of each other,\nbut instead are rendered as siblings in sequence.\n\n```html\n<mat-tree>\n  <mat-tree-node> parent node </mat-tree-node>\n  <mat-tree-node> -- child node1 </mat-tree-node>\n  <mat-tree-node> -- child node2 </mat-tree-node>\n</mat-tree>\n\n```\n\nTree with flat nodes (childrenAccessor)\n\nlinkcodeopen\\_in\\_new\n\nchevron\\_right  Fruit  chevron\\_right  Vegetables\n\nFlat trees are generally easier to style and inspect. They are also more friendly to scrolling\nvariations, such as infinite or virtual scrolling.\n\n#### [link](https://material.angular.io/components/tree/overview\\#nested-tree)  Nested tree\n\nIn a nested tree, children nodes are placed inside their parent node in DOM. The parent node\ncontains a node outlet into which children are projected.\n\n```html\n<mat-tree>\n   <mat-nested-tree-node>\n     parent node\n     <mat-nested-tree-node> -- child node1 </mat-nested-tree-node>\n     <mat-nested-tree-node> -- child node2 </mat-nested-tree-node>\n   </mat-nested-tree-node>\n</mat-tree>\n\n```\n\nTree with nested nodes (childrenAccessor)\n\nlinkcodeopen\\_in\\_new\n\nchevron\\_right  Fruit\n\nApple  Banana  Fruit loops\n\nchevron\\_right  Vegetables\n\nchevron\\_right  Green\n\nBroccoli  Brussels sprouts\n\nchevron\\_right  Orange\n\nPumpkins  Carrots\n\nNested trees are easier to work with when hierarchical relationships are visually represented in\nways that would be difficult to accomplish with flat nodes.\n\n### [link](https://material.angular.io/components/tree/overview\\#usage)  Usage\n\n#### [link](https://material.angular.io/components/tree/overview\\#writing-your-tree-template)  Writing your tree template\n\nIn order to use the tree, you must define a tree node template. There are two types of tree nodes,\n`<mat-tree-node>` for flat tree and `<mat-nested-tree-node>` for nested tree. The tree node\ntemplate defines the look of the tree node, expansion/collapsing control and the structure for\nnested children nodes.\n\nA node definition is specified via any element with `matNodeDef`. This directive exports the node\ndata to be used in any bindings in the node template.\n\n```html\n<mat-tree-node *matNodeDef=\"let node\">\n  {{node.key}}: {{node.value}}\n</mat-tree-node>\n\n```\n\n##### [link](https://material.angular.io/components/tree/overview\\#flat-tree-node-template)  Flat tree node template\n\nFlat trees use the `level` of a node to both render and determine hierarchy of the nodes for screen\nreaders. This may be provided either via `levelAccessor`, or will be calculated by `MatTree` if\n`childrenAccessor` is provided.\n\nSpacing can be added either by applying the `matNodePadding` directive or by applying custom styles\nbased on the `aria-level` attribute.\n\n##### [link](https://material.angular.io/components/tree/overview\\#nested-tree-node-template)  Nested tree node template\n\nWhen using nested tree nodes, the node template must contain a `matTreeNodeOutlet`, which marks\nwhere the children of the node will be rendered.\n\n```html\n<mat-nested-tree-node *matNodeDef=\"let node\">\n  {{node.value}}\n  <ng-container matTreeNodeOutlet></ng-container>\n</mat-nested-tree-node>\n\n```\n\n#### [link](https://material.angular.io/components/tree/overview\\#adding-expandcollapse)  Adding expand/collapse\n\nThe `matTreeNodeToggle` directive can be used to add expand/collapse functionality for tree nodes.\nThe toggle calls the expand/collapse functions in the `matTree` and is able to expand/collapse\na tree node recursively by setting `[matTreeNodeToggleRecursive]` to true.\n\n`matTreeNodeToggle` should be attached to button elements, and will trigger upon click or keyboard\nactivation. For icon buttons, ensure that `aria-label` is provided.\n\n```html\n<mat-tree-node *matNodeDef=\"let node\">\n  <button matTreeNodeToggle aria-label=\"toggle tree node\" [matTreeNodeToggleRecursive]=\"true\">\n    <mat-icon>expand</mat-icon>\n  </button>\n  {{node.value}}\n</mat-tree-node>\n\n```\n\n### [link](https://material.angular.io/components/tree/overview\\#toggle)  Toggle\n\nA `matTreeNodeToggle` can be added in the tree node template to expand/collapse the tree node. The\ntoggle toggles the expand/collapse functions in `TreeControl` and is able to expand/collapse a\ntree node recursively by setting `[matTreeNodeToggleRecursive]` to `true`.\n\nThe toggle can be placed anywhere in the tree node, and is only toggled by `click` action.\n\n### [link](https://material.angular.io/components/tree/overview\\#padding-flat-tree-only)  Padding (Flat tree only)\n\nThe `matTreeNodePadding` can be placed in a flat tree's node template to display the `level`\ninformation of a flat tree node.\n\n```html\n<mat-tree-node *matNodeDef=\"let node\" matNodePadding>\n  {{node.value}}\n</mat-tree-node>\n\n```\n\nThis is unnecessary for a nested tree, since the hierarchical structure of the DOM allows for\npadding to be added via CSS.\n\n#### [link](https://material.angular.io/components/tree/overview\\#conditional-template)  Conditional template\n\nThe tree may include multiple node templates, where a template is chosen\nfor a particular data node via the `when` predicate of the template.\n\n```html\n<mat-tree-node *matNodeDef=\"let node\" matTreeNodePadding>\n  {{node.value}}\n</mat-tree-node>\n<mat-tree-node *matNodeDef=\"let node; when: isSpecial\" matTreeNodePadding>\n  [ A special node {{node.value}} ]\n</mat-tree-node>\n\n```\n\n### [link](https://material.angular.io/components/tree/overview\\#data-source)  Data Source\n\n#### [link](https://material.angular.io/components/tree/overview\\#connecting-the-tree-to-a-data-source)  Connecting the tree to a data source\n\nSimilar to `mat-table`, you can provide data to the tree through a `DataSource`. When the tree receives\na `DataSource` it will call its `connect()` method which returns an observable that emits an array\nof data. Whenever the data source emits data to this stream, the tree will render an update.\n\nBecause the data source provides this stream, it bears the responsibility of toggling tree\nupdates. This can be based on anything: tree node expansion change, websocket connections, user\ninteraction, model updates, time-based intervals, etc.\n\nThere are two main methods of providing data to the tree:\n\n- flattened data, combined with `levelAccessor`. This should be used if the data source already\nflattens the nested data structure into a single array.\n- only root data, combined with `childrenAccessor`. This should be used if the data source is\nalready provided as a nested data structure.\n\n#### [link](https://material.angular.io/components/tree/overview\\#levelaccessor) `levelAccessor`\n\n`levelAccessor` is a function that when provided a datum, returns the level the data sits at in the\ntree structure. If `levelAccessor` is provided, the data provided by `dataSource` should contain all\nrenderable nodes in a single array.\n\nThe data source is responsible for handling node expand/collapse events and providing an updated\narray of renderable nodes, if applicable. This can be listened to via the `(expansionChange)` event\non `mat-tree-node` and `mat-nested-tree-node`.\n\n#### [link](https://material.angular.io/components/tree/overview\\#childrenaccessor) `childrenAccessor`\n\n`childrenAccessor` is a function that when provided a datum, returns the children of that particular\ndatum. If `childrenAccessor` is provided, the data provided by `dataSource` should _only_ contain\nthe root nodes of the tree.\n\n#### [link](https://material.angular.io/components/tree/overview\\#trackby) `trackBy`\n\nTo improve performance, a `trackBy` function can be provided to the tree similar to Angular’s\n[`ngFor` `trackBy`](https://angular.dev/api/common/NgForOf?tab=usage-notes). This informs the\ntree how to uniquely identify nodes to track how the data changes with each update.\n\n```html\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" [trackBy]=\"trackByFn\">\n\n```\n\n### [link](https://material.angular.io/components/tree/overview\\#accessibility)  Accessibility\n\nThe `<mat-tree>` implements the [`tree` widget](https://www.w3.org/WAI/ARIA/apg/patterns/treeview/),\nincluding keyboard navigation and appropriate roles and ARIA attributes.\n\nIn order to use the new accessibility features, migrating to `levelAccessor` and `childrenAccessor`\nis required. Trees using `treeControl` do not implement the correct accessibility features for\nbackwards compatibility.\n\n#### [link](https://material.angular.io/components/tree/overview\\#isexpandable)  isExpandable\n\nIn order for the tree to correctly determine whether or not a node is expandable, the `isExpandable`\nproperty must be set on all `mat-tree-node` or `mat-tree-nested-node` that are expandable.\n\n#### [link](https://material.angular.io/components/tree/overview\\#activation-actions)  Activation actions\n\nFor trees with nodes that have actions upon activation or click, `<mat-tree-node>` will emit\n`(activation)` events that can be listened to when the user activates a node via keyboard\ninteraction.\n\n```html\n<mat-tree-node\n    *matNodeDef=\"let node\"\n    (click)=\"performAction(node)\"\n    (activation)=\"performAction($event)\">\n</mat-tree-node>\n\n```\n\nIn this example, `$event` contains the node's data and is equivalent to the implicit data passed in\nthe `matNodeDef` context.\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Tree with flat nodes (childrenAccessor) example in StackBlitz\n\nCopy link to example\n\nView code\n\nEdit Tree with nested nodes (childrenAccessor) example in StackBlitz",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-18018b1e-8ac8-4c4a-958c-a6d284a7134c.png"
  },
  "metadata": {
    "title": "Tree | Angular Material",
    "mobile-web-app-capable": "yes",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "theme-color": "#d7e3ff",
    "ogSiteName": "Angular Material",
    "og:url": "https://material.angular.io/",
    "ogUrl": "https://material.angular.io/",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "ogTitle": "Angular Material",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "apple-mobile-web-app-capable": "yes",
    "og:image:width": "1339",
    "ogLocale": "en_US",
    "twitter:site": "@Angular",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "viewport": "width=device-width, initial-scale=1",
    "author": "Angular Components Team",
    "favicon": "https://material.angular.io/components/tree/assets/img/favicon.ico?v=19.1.0",
    "og:image:height": "943",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:card": "summary",
    "twitter:title": "Angular Material",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "og:type": "website",
    "og:locale": "en_US",
    "og:site_name": "Angular Material",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:creator": "@Angular",
    "language": "en-US",
    "og:title": "Angular Material",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image:type": "image/png",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "scrapeId": "ed66c273-0ea0-4265-8e02-4216b5a9df48",
    "sourceURL": "https://material.angular.io/components/tree/overview",
    "url": "https://material.angular.io/components/tree/overview",
    "statusCode": 200
  }
}