{
  "scrapeId": "b6797e05-4112-4717-9b67-2c159fc73922",
  "sourceURL": "https://material.angular.io/components/stepper/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for stepper\n\n## API reference for Angular Material stepper\n\n`\n          import {MatStepperModule} from '@angular/material/stepper';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/stepper/api\\#services)  Services\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepperIntl) `MatStepperIntl`\n\nStepper data that is required for internationalization.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `changes: Subject<void>` | Stream that emits whenever the labels here are changed. Use this to notify<br>components if the labels have changed after initialization. |\n| `completedLabel: string` | Label that is used to indicate step as completed to screen readers. |\n| `editableLabel: string` | Label that is used to indicate step as editable to screen readers. |\n| `optionalLabel: string` | Label that is rendered below optional steps. |\n\n### [link](https://material.angular.io/components/stepper/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepLabel) `MatStepLabel`extends [CdkStepLabel](https://material.angular.io/components/stepper/cdk/stepper/api\\#CdkStepLabel)\n\nSelector:\\[matStepLabel\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `template: inject<TemplateRef<any>>(TemplateRef)` |  |\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStep) `MatStep`extends [CdkStep](https://material.angular.io/components/stepper/cdk/stepper/api\\#CdkStep)\n\nSelector:mat-step\n\nExported as:matStep\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-label')<br> <br>`ariaLabel: string` | Aria label for the tab. |\n| @Input('aria-labelledby')<br> <br>`ariaLabelledby: string` | Reference to the element that the tab is labelled by.<br>Will be cleared if `aria-label` is set at the same time. |\n| @Input()<br>`color: ThemePalette` | Theme color for the particular step. This API is supported in M2 themes<br>only, it has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/stepper/styling](https://material.angular.io/components/stepper/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`completed: boolean` | Whether step is marked as completed. |\n| @Input({ transform: booleanAttribute })<br> <br>`editable: boolean` | Whether the user can return to this step once it has been marked as completed. |\n| @Input()<br>`errorMessage: string` | Error message to display when there's an error. |\n| @Input({ transform: booleanAttribute })<br> <br>`hasError: boolean` | Whether step has an error. |\n| @Input()<br>`label: string` | Plain text label of the step. |\n| @Input({ transform: booleanAttribute })<br> <br>`optional: boolean` | Whether the completion of step is optional. |\n| @Input()<br>`state: StepState` | State of the step. |\n| @Input()<br>`stepControl: AbstractControl` | The top level abstract control of the step. |\n| @Output('interacted')<br> <br>`interactedStream: EventEmitter<CdkStep>` | Emits when the user has attempted to move away from the step. |\n| `content: TemplateRef<any>` | Template for step content. |\n| `interacted: false` | Whether user has attempted to move away from the step. |\n| `stepLabel: MatStepLabel` | Content for step label given by `<ng-template matStepLabel>`. |\n\n##### Methods\n\n| isErrorState |\n| --- |\n| Custom error state matcher that additionally checks for validity of interacted form. |\n| Parameters |\n| --- |\n| control<br> `AbstractControl<any, any>` |  |\n| form<br> `FormGroupDirective | NgForm` |  |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| reset |\n| --- |\n| Resets the step to its initial state. Note that this includes resetting form data. |\n\n| select |\n| --- |\n| Selects this step component. |\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepper) `MatStepper`extends [CdkStepper](https://material.angular.io/components/stepper/cdk/stepper/api\\#CdkStepper)\n\nSelector:mat-steppermat-vertical-steppermat-horizontal-stepper\\[matStepper\\]\n\nExported as:matStepper, matVerticalStepper, matHorizontalStepper\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`animationDuration: string` | Duration for the animation. Will be normalized to milliseconds if no units are set. |\n| @Input()<br>`color: ThemePalette` | Theme color for all of the steps in stepper. This API is supported in M2<br>themes only, it has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/stepper/styling](https://material.angular.io/components/stepper/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input()<br>`disableRipple: boolean` | Whether ripples should be disabled for the step headers. |\n| @Input()<br>`headerPosition: 'top' | 'bottom'` | Position of the stepper's header.<br>Only applies in the `horizontal` orientation. |\n| @Input()<br>`labelPosition: 'bottom' | 'end'` | Whether the label should display in bottom or end position.<br>Only applies in the `horizontal` orientation. |\n| @Input({ transform: booleanAttribute })<br> <br>`linear: boolean` | Whether the validity of previous steps should be checked or not. |\n| @Input()<br>`orientation: StepperOrientation` | Orientation of the stepper. |\n| @Input()<br>`selected: CdkStep | undefined` | The step that is selected. |\n| @Input({ transform: numberAttribute })<br> <br>`selectedIndex: number` | The index of the selected step. |\n| @Output()<br>`animationDone: EventEmitter<void>` | Event emitted when the current step is done transitioning in. |\n| @Output()<br>`selectedIndexChange: EventEmitter<number>` | Output to support two-way binding on `[(selectedIndex)]` |\n| @Output()<br>`selectionChange: EventEmitter<StepperSelectionEvent>` | Event emitted when the selected step has changed. |\n| `steps: QueryList<MatStep>` | Steps that belong to the current stepper, excluding ones from nested steppers. |\n\n##### Methods\n\n| next |\n| --- |\n| Selects and focuses the next step in list. |\n\n| previous |\n| --- |\n| Selects and focuses the previous step in list. |\n\n| reset |\n| --- |\n| Resets the stepper to its initial state. Note that this includes clearing form data. |\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepperNext) `MatStepperNext`extends [CdkStepperNext](https://material.angular.io/components/stepper/cdk/stepper/api\\#CdkStepperNext)\n\nButton that moves to the next step in a stepper workflow.\n\nSelector:button\\[matStepperNext\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`type: string` | Type of the next button. Defaults to \"submit\" if not specified. |\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepperPrevious) `MatStepperPrevious`extends [CdkStepperPrevious](https://material.angular.io/components/stepper/cdk/stepper/api\\#CdkStepperPrevious)\n\nButton that moves to the previous step in a stepper workflow.\n\nSelector:button\\[matStepperPrevious\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`type: string` | Type of the previous button. Defaults to \"button\" if not specified. |\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepHeader) `MatStepHeader`extends [CdkStepHeader](https://material.angular.io/components/stepper/cdk/stepper/api\\#CdkStepHeader)\n\nSelector:mat-step-header\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`active: boolean` | Whether the given step label is active. |\n| @Input()<br>`color: ThemePalette` | Theme color of the step header. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/stepper/styling](https://material.angular.io/components/stepper/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input()<br>`disableRipple: boolean` | Whether the ripple should be disabled. |\n| @Input()<br>`errorMessage: string` | Error message to display when there's an error. |\n| @Input()<br>`iconOverrides: {<br>    [key: string]: TemplateRef<MatStepperIconContext>;<br>}` | Overrides for the header icons, passed in via the stepper. |\n| @Input()<br>`index: number` | Index of the given step. |\n| @Input()<br>`label: MatStepLabel | string` | Label of the given step. |\n| @Input()<br>`optional: boolean` | Whether the given step is optional. |\n| @Input()<br>`selected: boolean` | Whether the given step is selected. |\n| @Input()<br>`state: StepState` | State of the given step. |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the step header. |\n| Parameters |\n| --- |\n| origin?<br> `FocusOrigin` |  |\n| options?<br> `FocusOptions` |  |\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepperIcon) `MatStepperIcon`\n\nTemplate to be used to override the icons inside the step header.\n\nSelector:ng-template\\[matStepperIcon\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('matStepperIcon')<br> <br>`name: StepState` | Name of the icon to be overridden. |\n| `templateRef: inject<TemplateRef<MatStepperIconContext>>(TemplateRef)` |  |\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepContent) `MatStepContent`\n\nContent for a `mat-step` that will be rendered lazily.\n\nSelector:ng-template\\[matStepContent\\]\n\n### [link](https://material.angular.io/components/stepper/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepperIconContext) `MatStepperIconContext`\n\nTemplate context available to an attached `matStepperIcon`.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `active: boolean` | Whether the step is currently active. |\n| `index: number` | Index of the step. |\n| `optional: boolean` | Whether the step is optional. |\n\n## API reference for Angular Material stepper-testing\n\n`\n          import {MatStepperHarness} from '@angular/material/stepper/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/stepper/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepperHarness) `MatStepperHarness`extends [ComponentHarness](https://material.angular.io/components/stepper/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard Material stepper in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-stepper-horizontal, .mat-stepper-vertical'` | The selector for the host element of a `MatStepper` instance. |\n\n##### Methods\n\n| async<br> <br>getOrientation |\n| --- |\n| Gets the orientation of the stepper. |\n| Returns |\n| --- |\n| `Promise<StepperOrientation>` |  |\n\n| async<br> <br>getSteps |\n| --- |\n| Gets the list of steps in the stepper. |\n| Parameters |\n| --- |\n| filter<br> `StepHarnessFilters = {}` | Optionally filters which steps are included. |\n| Returns |\n| --- |\n| `Promise<MatStepHarness[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>selectStep |\n| --- |\n| Selects a step in this stepper. |\n| Parameters |\n| --- |\n| filter<br> `StepHarnessFilters = {}` | An optional filter to apply to the child steps. The first step matching the<br>filter will be selected. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatStepperHarness` that meets<br>certain criteria. |\n| Parameters |\n| --- |\n| options<br> `StepperHarnessFilters = {}` | Options for filtering which stepper instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatStepperHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepHarness) `MatStepHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/stepper/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a standard Angular Material step in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-step-header'` | The selector for the host element of a `MatStep` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getAriaLabel |\n| --- |\n| Gets the `aria-label` of the step. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getAriaLabelledby |\n| --- |\n| Gets the value of the `aria-labelledby` attribute. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getLabel |\n| --- |\n| Gets the label of the step. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getRootHarnessLoader |\n| --- |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>hasErrors |\n| --- |\n| Whether the step is currently showing its error state. Note that this doesn't mean that there<br>are or aren't any invalid form controls inside the step, but that the step is showing its<br>error-specific styling which depends on there being invalid controls, as well as the<br>`ErrorStateMatcher` determining that an error should be shown and that the `showErrors`<br>option was enabled through the `STEPPER_GLOBAL_OPTIONS` injection token. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isCompleted |\n| --- |\n| Whether the step has been filled out. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isOptional |\n| --- |\n| Whether the step is optional. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isSelected |\n| --- |\n| Whether the step is selected. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>select |\n| --- |\n| Selects the given step by clicking on the label. The step may not be selected<br>if the stepper doesn't allow it (e.g. if there are validation errors). |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatStepHarness` that meets<br>certain criteria. |\n| Parameters |\n| --- |\n| options<br> `StepHarnessFilters = {}` | Options for filtering which steps are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatStepHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepperNextHarness) `MatStepperNextHarness`\n\nHarness for interacting with a standard Angular Material stepper next button in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-stepper-next'` | The selector for the host element of a `MatStep` instance. |\n\n##### Methods\n\n| click |\n| --- |\n| Clicks the button. |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| getText |\n| --- |\n| Gets the text of the button. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatStepperNextHarness` that meets<br>certain criteria. |\n| Parameters |\n| --- |\n| options<br> `StepperButtonHarnessFilters = {}` | Options for filtering which steps are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatStepperNextHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/stepper/api\\#MatStepperPreviousHarness) `MatStepperPreviousHarness`\n\nHarness for interacting with a standard Angular Material stepper previous button in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-stepper-previous'` | The selector for the host element of a `MatStep` instance. |\n\n##### Methods\n\n| click |\n| --- |\n| Clicks the button. |\n| Returns |\n| --- |\n| `Promise<void>` |  |\n\n| getText |\n| --- |\n| Gets the text of the button. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatStepperPreviousHarness`<br>that meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `StepperButtonHarnessFilters = {}` | Options for filtering which steps are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatStepperPreviousHarness>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/stepper/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/stepper/api\\#StepHarnessFilters) `StepHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatStepHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `completed: boolean` | Only find completed steps. |\n| `invalid: boolean` | Only find steps that have errors. |\n| `label: string | RegExp` | Only find instances whose label matches the given value. |\n| `selected: boolean` | Only find steps with the given selected state. |\n\n#### [link](https://material.angular.io/components/stepper/api\\#StepperHarnessFilters) `StepperHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatStepperHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `orientation: StepperOrientation` | Only find instances whose orientation matches the given value. |\n\n#### [link](https://material.angular.io/components/stepper/api\\#StepperButtonHarnessFilters) `StepperButtonHarnessFilters`\n\nA set of criteria that can be used to filter a list of\n`MatStepperNextHarness` and `MatStepperPreviousHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `text: string | RegExp` | Only find instances whose text matches the given value. |\n\nStepper\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-8ecd4618-6efd-4584-b14c-112915910df4.png"
  },
  "metadata": {
    "og:url": "https://material.angular.io/",
    "og:image:type": "image/png",
    "ogLocale": "en_US",
    "og:type": "website",
    "viewport": "width=device-width, initial-scale=1",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogTitle": "Angular Material",
    "title": "Stepper | Angular Material",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "language": "en-US",
    "og:image:height": "943",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:card": "summary",
    "twitter:creator": "@Angular",
    "ogUrl": "https://material.angular.io/",
    "ogSiteName": "Angular Material",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-capable": "yes",
    "author": "Angular Components Team",
    "twitter:site": "@Angular",
    "og:site_name": "Angular Material",
    "favicon": "https://material.angular.io/components/stepper/assets/img/favicon.ico?v=19.1.0",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:width": "1339",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:locale": "en_US",
    "mobile-web-app-capable": "yes",
    "twitter:title": "Angular Material",
    "theme-color": "#d7e3ff",
    "og:title": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "scrapeId": "b6797e05-4112-4717-9b67-2c159fc73922",
    "sourceURL": "https://material.angular.io/components/stepper/api",
    "url": "https://material.angular.io/components/stepper/api",
    "statusCode": 200
  }
}