{
  "scrapeId": "cc0052b4-b67a-4377-b641-ee72e18a06e5",
  "sourceURL": "https://material.angular.io/components/grid-list/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for grid-list\n\n## API reference for Angular Material grid-list\n\n`\n          import {MatGridListModule} from '@angular/material/grid-list';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/grid-list/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/grid-list/api\\#MatGridList) `MatGridList`\n\nSelector:mat-grid-list\n\nExported as:matGridList\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`cols: number` | Amount of columns in the grid list. |\n| @Input()<br>`gutterSize: string` | Size of the grid list's gutter in pixels. |\n| @Input()<br>`rowHeight: string | number` | Set internal representation of row height from the user-provided value. |\n\n#### [link](https://material.angular.io/components/grid-list/api\\#MatGridTile) `MatGridTile`\n\nSelector:mat-grid-tile\n\nExported as:matGridTile\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`colspan: number` | Amount of columns that the grid tile takes up. |\n| @Input()<br>`rowspan: number` | Amount of rows that the grid tile takes up. |\n\n#### [link](https://material.angular.io/components/grid-list/api\\#MatGridTileText) `MatGridTileText`\n\nSelector:mat-grid-tile-headermat-grid-tile-footer\n\n### [link](https://material.angular.io/components/grid-list/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/grid-list/api\\#%C9%B5TileCoordinator) `ɵTileCoordinator`\n\n```docs-markdown-code\nconst ɵTileCoordinator: typeof TileCoordinator;\n\n```\n\n## API reference for Angular Material grid-list-testing\n\n`\n          import {MatGridTileHarness} from '@angular/material/grid-list/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/grid-list/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/grid-list/api\\#MatGridTileHarness) `MatGridTileHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/grid-list/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a standard `MatGridTitle` in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-grid-tile'` | The selector for the host element of a `MatGridTile` instance. |\n\n##### Methods\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getColspan |\n| --- |\n| Gets the amount of columns that the grid-tile takes up. |\n| Returns |\n| --- |\n| `Promise<number>` |  |\n\n| async<br> <br>getFooterText |\n| --- |\n| Gets the text of the footer if present. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getHeaderText |\n| --- |\n| Gets the text of the header if present. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getRowspan |\n| --- |\n| Gets the amount of rows that the grid-tile takes up. |\n| Returns |\n| --- |\n| `Promise<number>` |  |\n\n| async<br> <br>hasAvatar |\n| --- |\n| Whether the grid-tile has an avatar. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hasFooter |\n| --- |\n| Whether the grid-tile has a footer. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hasHeader |\n| --- |\n| Whether the grid-tile has a header. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatGridTileHarness`<br>that meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `GridTileHarnessFilters = {}` | Options for filtering which dialog instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatGridTileHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/grid-list/api\\#MatGridListHarness) `MatGridListHarness`extends [ComponentHarness](https://material.angular.io/components/grid-list/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a standard `MatGridList` in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-grid-list'` | The selector for the host element of a `MatGridList` instance. |\n\n##### Methods\n\n| async<br> <br>getColumns |\n| --- |\n| Gets the amount of columns of the grid-list. |\n| Returns |\n| --- |\n| `Promise<number>` |  |\n\n| async<br> <br>getTileAtPosition |\n| --- |\n| Gets a tile of the grid-list that is located at the given location. |\n| Parameters |\n| --- |\n| row<br> `` | Zero-based row index. |\n| column<br> `` | Zero-based column index. |\n| \\_\\_0<br> `{ row: number; column: number; }` |  |\n| Returns |\n| --- |\n| `Promise<MatGridTileHarness>` |  |\n\n| async<br> <br>getTiles |\n| --- |\n| Gets all tiles of the grid-list. |\n| Parameters |\n| --- |\n| filters<br> `GridTileHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<MatGridTileHarness[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatGridListHarness`<br>that meets certain criteria. |\n| Parameters |\n| --- |\n| options<br> `GridListHarnessFilters = {}` | Options for filtering which dialog instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatGridListHarness>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/grid-list/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/grid-list/api\\#GridListHarnessFilters) `GridListHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatGridListHarness` instances.\n\n#### [link](https://material.angular.io/components/grid-list/api\\#GridTileHarnessFilters) `GridTileHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatTileHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `footerText: string | RegExp` | Text the grid-tile footer should match. |\n| `headerText: string | RegExp` | Text the grid-tile header should match. |\n\nGrid list\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-40769db3-26e7-4018-b1e3-d478f39af064.png"
  },
  "metadata": {
    "mobile-web-app-capable": "yes",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "ogLocale": "en_US",
    "ogSiteName": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image:type": "image/png",
    "viewport": "width=device-width, initial-scale=1",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:title": "Angular Material",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:creator": "@Angular",
    "author": "Angular Components Team",
    "twitter:title": "Angular Material",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:width": "1339",
    "apple-mobile-web-app-capable": "yes",
    "twitter:site": "@Angular",
    "og:locale": "en_US",
    "favicon": "https://material.angular.io/components/grid-list/assets/img/favicon.ico?v=19.1.0",
    "language": "en-US",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:type": "website",
    "og:site_name": "Angular Material",
    "ogUrl": "https://material.angular.io/",
    "theme-color": "#d7e3ff",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "title": "Grid list | Angular Material",
    "twitter:card": "summary",
    "og:image:height": "943",
    "ogTitle": "Angular Material",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "og:url": "https://material.angular.io/",
    "scrapeId": "cc0052b4-b67a-4377-b641-ee72e18a06e5",
    "sourceURL": "https://material.angular.io/components/grid-list/api",
    "url": "https://material.angular.io/components/grid-list/api",
    "statusCode": 200
  }
}