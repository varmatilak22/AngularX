{
  "scrapeId": "74dd9b26-a2f4-4ab9-b3f8-8f35c8482333",
  "sourceURL": "https://angular.dev/guide/components/outputs",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backComponents\n  - [Anatomy of components](https://angular.dev/guide/components)\n  - [Selectors](https://angular.dev/guide/components/selectors)\n  - [Styling](https://angular.dev/guide/components/styling)\n  - [Accepting data with input properties](https://angular.dev/guide/components/inputs)\n  - [Custom events with outputs](https://angular.dev/guide/components/outputs)\n  - [Content projection with ng-content](https://angular.dev/guide/components/content-projection)\n  - [Host elements](https://angular.dev/guide/components/host-elements)\n  - [Lifecycle](https://angular.dev/guide/components/lifecycle)\n  - [Referencing component children with queries](https://angular.dev/guide/components/queries)\n  - [Using DOM APIs](https://angular.dev/guide/components/dom-apis)\n  - [Inheritance](https://angular.dev/guide/components/inheritance)\n  - [Programmatically rendering components](https://angular.dev/guide/components/programmatic-rendering)\n  - [Advanced configuration](https://angular.dev/guide/components/advanced-configuration)\n  - [Custom Elements](https://angular.dev/guide/elements)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\n**TIP:** This guide assumes you've already read the [Essentials Guide](https://angular.dev/guide/components/essentials). Read that first if you're new to Angular.\n\nAngular components can define custom events by assigning a property to the `output` function:\n\n```\n      @Component({/*...*/})export class ExpandablePanel {  panelClosed = output<void>();}\n\n```\n\ncheck\n\n```\n      <expandable-panel (panelClosed)=\"savePanelState()\" />\n\n```\n\ncheck\n\nThe `output` function returns an `OutputEmitterRef`. You can emit an event by calling the `emit` method on the `OutputEmitterRef`:\n\n```\n      this.panelClosed.emit();\n\n```\n\ncheck\n\nAngular refers to properties initialized with the `output` function as **outputs**. You can use outputs to raise custom events, similar to native browser events like `click`.\n\n**Angular custom events do not bubble up the DOM**.\n\n**Output names are case-sensitive.**\n\nWhen extending a component class, **outputs are inherited by the child class.**\n\nThe `output` function has special meaning to the Angular compiler. **You can exclusively call `output` in component and directive property initializers.**\n\n## [Emitting event data](https://angular.dev/guide/components/outputs\\#emitting-event-data)\n\nYou can pass event data when calling `emit`:\n\n```\n      // You can emit primitive values.this.valueChanged.emit(7);// You can emit custom event objectsthis.thumbDropped.emit({  pointerX: 123,  pointerY: 456,})\n\n```\n\ncheck\n\nWhen defining an event listener in a template, you can access the event data from the `$event` variable:\n\n```\n      <custom-slider (valueChanged)=\"logValue($event)\" />\n\n```\n\ncheck\n\n## [Customizing output names](https://angular.dev/guide/components/outputs\\#customizing-output-names)\n\nThe `output` function accepts a parameter that lets you specify a different name for the event in a template:\n\n```\n      @Component({/*...*/})export class CustomSlider {  changed = output({alias: 'valueChanged'});}\n\n```\n\ncheck\n\n```\n      <custom-slider (valueChanged)=\"saveVolume()\" />\n\n```\n\ncheck\n\nThis alias does not affect usage of the property in TypeScript code.\n\nWhile you should generally avoid aliasing outputs for components, this feature can be useful for renaming properties while preserving an alias for the original name or for avoiding collisions with the name of native DOM events.\n\n## [Subscribing to outputs programmatically](https://angular.dev/guide/components/outputs\\#subscribing-to-outputs-programmatically)\n\nWhen creating a component dynamically, you can programmatically subscribe to output events\nfrom the component instance. The `OutputRef` type includes a `subscribe` method:\n\n```\n      const someComponentRef: ComponentRef<SomeComponent> = viewContainerRef.createComponent(/*...*/);someComponentRef.instance.someEventProperty.subscribe(eventData => {  console.log(eventData);});\n\n```\n\ncheck\n\nAngular automatically cleans up event subscriptions when it destroys components with subscribers. Alternatively, you can manually unsubscribe from an event. The `subscribe` function returns an `OutputRefSubscription` with an `unsubscribe` method:\n\n```\n      const eventSubscription = someComponent.someEventProperty.subscribe(eventData => {  console.log(eventData);});// ...eventSubscription.unsubscribe();\n\n```\n\ncheck\n\n## [Choosing event names](https://angular.dev/guide/components/outputs\\#choosing-event-names)\n\nAvoid choosing output names that collide with events on DOM elements like HTMLElement. Name collisions introduce confusion about whether the bound property belongs to the component or the DOM element.\n\nAvoid adding prefixes for component outputs like you would with component selectors. Since a given element can only host one component, any custom properties can be assumed to belong to the component.\n\nAlways use [camelCase](https://en.wikipedia.org/wiki/Camel_case) output names. Avoid prefixing output names with \"on\".\n\n## [Using outputs with RxJS](https://angular.dev/guide/components/outputs\\#using-outputs-with-rxjs)\n\nSee [RxJS interop with component and directive outputs](https://angular.dev/guide/components/ecosystem/rxjs-interop/output-interop) for details on interoperability between outputs and RxJS.\n\n## [Declaring outputs with the `@Output` decorator](https://angular.dev/guide/components/outputs\\#declaring-outputs-with-the-output-decorator)\n\n**TIP:** While the Angular team recommends using the `output` function for new projects, the\noriginal decorator-based `@Output` API remains fully supported.\n\nYou can alternatively define custom events by assigning a property to a new `EventEmitter` and adding the `@Output` decorator:\n\n```\n      @Component({/*...*/})export class ExpandablePanel {  @Output() panelClosed = new EventEmitter<void>();}\n\n```\n\ncheck\n\nYou can emit an event by calling the `emit` method on the `EventEmitter`.\n\n### [Aliases with the `@Output` decorator](https://angular.dev/guide/components/outputs\\#aliases-with-the-output-decorator)\n\nThe `@Output` decorator accepts a parameter that lets you specify a different name for the event in a template:\n\n```\n      @Component({/*...*/})export class CustomSlider {  @Output('valueChanged') changed = new EventEmitter<number>();}\n\n```\n\ncheck\n\n```\n      <custom-slider (valueChanged)=\"saveVolume()\" />\n\n```\n\ncheck\n\nThis alias does not affect usage of the property in TypeScript code.\n\n## [Specify outputs in the `@Component` decorator](https://angular.dev/guide/components/outputs\\#specify-outputs-in-the-component-decorator)\n\nIn addition to the `@Output` decorator, you can also specify a component's outputs with the `outputs` property in the `@Component` decorator. This can be useful when a component inherits a property from a base class:\n\n```\n      // `CustomSlider` inherits the `valueChanged` property from `BaseSlider`.@Component({  /*...*/  outputs: ['valueChanged'],})export class CustomSlider extends BaseSlider {}\n\n```\n\ncheck\n\nYou can additionally specify an output alias in the `outputs` list by putting the alias after a colon in the string:\n\n```\n      // `CustomSlider` inherits the `valueChanged` property from `BaseSlider`.@Component({  /*...*/  outputs: ['valueChanged: volumeChanged'],})export class CustomSlider extends BaseSlider {}\n\n```\n\ncheck",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-04a3218c-1ff1-40b3-bdef-a372233b58d0.png"
  },
  "metadata": {
    "theme-color": "#ffffff",
    "twitter:card": "summary_large_image",
    "ogTitle": "Angular",
    "application-name": "Angular",
    "og:description": "The web development framework for building modern apps.",
    "og:title": "Angular",
    "language": "en",
    "twitter:url": "https://angular.dev/",
    "apple-mobile-web-app-title": "Angular",
    "ogDescription": "The web development framework for building modern apps.",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "title": "Custom events with outputs â€¢ Angular",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "msapplication-TileColor": "#e90464",
    "og:type": "website",
    "og:url": "https://angular.dev/",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "viewport": "width=device-width, initial-scale=1",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:title": "Angular",
    "ogUrl": "https://angular.dev/",
    "twitter:description": "The web development framework for building modern apps.",
    "description": "The web development framework for building modern apps.",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "scrapeId": "74dd9b26-a2f4-4ab9-b3f8-8f35c8482333",
    "sourceURL": "https://angular.dev/guide/components/outputs",
    "url": "https://angular.dev/guide/components/outputs",
    "statusCode": 200
  }
}