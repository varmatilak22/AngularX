{
  "scrapeId": "1aefc101-0b3a-47c6-9fc4-0c7d909df0f0",
  "sourceURL": "https://angular.dev/guide/components",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backComponents\n  - [Anatomy of components](https://angular.dev/guide/components)\n  - [Selectors](https://angular.dev/guide/components/selectors)\n  - [Styling](https://angular.dev/guide/components/styling)\n  - [Accepting data with input properties](https://angular.dev/guide/components/inputs)\n  - [Custom events with outputs](https://angular.dev/guide/components/outputs)\n  - [Content projection with ng-content](https://angular.dev/guide/components/content-projection)\n  - [Host elements](https://angular.dev/guide/components/host-elements)\n  - [Lifecycle](https://angular.dev/guide/components/lifecycle)\n  - [Referencing component children with queries](https://angular.dev/guide/components/queries)\n  - [Using DOM APIs](https://angular.dev/guide/components/dom-apis)\n  - [Inheritance](https://angular.dev/guide/components/inheritance)\n  - [Programmatically rendering components](https://angular.dev/guide/components/programmatic-rendering)\n  - [Advanced configuration](https://angular.dev/guide/components/advanced-configuration)\n  - [Custom Elements](https://angular.dev/guide/elements)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nIn-depth Guides\n\nComponents\n\n# Anatomy of a component\n\n[edit](https://github.com/angular/angular/edit/main/adev/src/content/guide/components/anatomy-of-components.md \"Edit this page\")\n\n**TIP:** This guide assumes you've already read the [Essentials Guide](https://angular.dev/guide/essentials). Read that first if you're new to Angular.\n\nEvery component must have:\n\n- A TypeScript class with _behaviors_ such as handling user input and fetching data from a server\n- An HTML template that controls what renders into the DOM\n- A [CSS selector](https://developer.mozilla.org/docs/Learn/CSS/Building_blocks/Selectors) that defines how the component is used in HTML\n\nYou provide Angular-specific information for a component by adding a `@Component` [decorator](https://www.typescriptlang.org/docs/handbook/decorators.html) on top of the TypeScript class:\n\n```\n      @Component({  selector: 'profile-photo',  template: `<img src=\"profile-photo.jpg\" alt=\"Your profile photo\">`,})export class ProfilePhoto { }\n\n```\n\ncheck\n\nFor full details on writing Angular templates, including data binding, event handling, and control flow, see the [Templates guide](https://angular.dev/guide/guide/templates).\n\nThe object passed to the `@Component` decorator is called the component's **metadata**. This includes the `selector`, `template`, and other properties described throughout this guide.\n\nComponents can optionally include a list of CSS styles that apply to that component's DOM:\n\n```\n      @Component({  selector: 'profile-photo',  template: `<img src=\"profile-photo.jpg\" alt=\"Your profile photo\">`,  styles: `img { border-radius: 50%; }`,})export class ProfilePhoto { }\n\n```\n\ncheck\n\nBy default, a component's styles only affect elements defined in that component's template. See [Styling Components](https://angular.dev/guide/guide/components/styling) for details on Angular's approach to styling.\n\nYou can alternatively choose to write your template and styles in separate files:\n\n```\n      @Component({  selector: 'profile-photo',  templateUrl: 'profile-photo.html',  styleUrl: 'profile-photo.css',})export class ProfilePhoto { }\n\n```\n\ncheck\n\nThis can help separate the concerns of _presentation_ from _behavior_ in your project. You can choose one approach for your entire project, or you decide which to use for each component.\n\nBoth `templateUrl` and `styleUrl` are relative to the directory in which the component resides.\n\n## [Using components](https://angular.dev/guide/components\\#using-components)\n\n### [Imports in the `@Component` decorator](https://angular.dev/guide/components\\#imports-in-the-component-decorator)\n\nTo use a component, [directive](https://angular.dev/guide/guide/directives), or [pipe](https://angular.dev/guide/guide/templates/pipes), you must add\nit to the `imports` array in the `@Component` decorator:\n\n```\n      import {ProfilePhoto} from './profile-photo';@Component({  // Import the `ProfilePhoto` component in  // order to use it in this component's template.  imports: [ProfilePhoto],  /* ... */})export class UserProfile { }\n\n```\n\ncheck\n\nBy default, Angular components are _standalone_, meaning that you can directly add them to the `imports` array of other components. Components created with an earlier version of Angular may instead specify `standalone: false` in their `@Component` decorator. For these components, you instead import the `NgModule` in which the component is defined. See the full [`NgModule` guide](https://angular.dev/guide/guide/ngmodules) for details.\n\n**IMPORTANT:** In Angular versions before 19.0.0, the `standalone` option defaults to `false`.\n\n### [Showing components in a template](https://angular.dev/guide/components\\#showing-components-in-a-template)\n\nEvery component defines a [CSS selector](https://developer.mozilla.org/docs/Learn/CSS/Building_blocks/Selectors):\n\n```\n      @Component({  selector: 'profile-photo',  ...})export class ProfilePhoto { }\n\n```\n\ncheck\n\nSee [Component Selectors](https://angular.dev/guide/guide/components/selectors) for details about which types of selectors Angular supports and guidance on choosing a selector.\n\nYou show a component by creating a matching HTML element in the template of _other_ components:\n\n```\n      @Component({  selector: 'profile-photo',})export class ProfilePhoto { }@Component({  imports: [ProfilePhoto],  template: `<profile-photo />`})export class UserProfile { }\n\n```\n\ncheck\n\nAngular creates an instance of the component for every matching HTML element it encounters. The DOM element that matches a component's selector is referred to as that component's **host element**. The contents of a component's template are rendered inside its host element.\n\nThe DOM rendered by a component, corresponding to that component's template, is called that\ncomponent's **view**.\n\nIn composing components in this way, **you can think of your Angular application as a tree of components**.\n\nAccountSettings\n\nUserProfile\n\nPaymentInfo\n\nProfilePic\n\nUserBio\n\nThis tree structure is important to understanding several other Angular concepts, including [dependency injection](https://angular.dev/guide/guide/di) and [child queries](https://angular.dev/guide/guide/components/queries).",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-fa2b6c7d-b276-41cc-8d1f-bd0b5381bf5c.png"
  },
  "metadata": {
    "twitter:url": "https://angular.dev/",
    "application-name": "Angular",
    "msapplication-TileColor": "#e90464",
    "twitter:description": "The web development framework for building modern apps.",
    "twitter:card": "summary_large_image",
    "twitter:title": "Angular",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "apple-mobile-web-app-title": "Angular",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "language": "en",
    "og:type": "website",
    "og:title": "Angular",
    "theme-color": "#ffffff",
    "title": "Anatomy of components â€¢ Angular",
    "viewport": "width=device-width, initial-scale=1",
    "description": "The web development framework for building modern apps.",
    "ogUrl": "https://angular.dev/",
    "ogTitle": "Angular",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "og:url": "https://angular.dev/",
    "og:description": "The web development framework for building modern apps.",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "ogDescription": "The web development framework for building modern apps.",
    "scrapeId": "1aefc101-0b3a-47c6-9fc4-0c7d909df0f0",
    "sourceURL": "https://angular.dev/guide/components",
    "url": "https://angular.dev/guide/components",
    "statusCode": 200
  }
}