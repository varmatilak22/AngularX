{
  "scrapeId": "e035271b-ddf9-4dee-ab6d-9c4dae64d0d2",
  "sourceURL": "https://angular.dev/guide/di/dependency-injection-providers",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuDocs\n\n- Introduction\n\n  - [What is Angular?](https://angular.dev/overview)\n  - [Installation](https://angular.dev/installation)\n  - Essentials\n  - [Start coding! ðŸš€](https://angular.dev/tutorials/learn-angular)\n- In-depth Guides\n\n  - Signals\n  - Components\n  - Templates\n  - Directives\n  - Dependency Injection\n  - Routing\n  - Forms\n  - HTTP Client\n  - Server-side & hybrid-rendering\n  - Testing\n  - Internationalization\n  - Experimental features\n- Developer Tools\n\n  - Angular CLI\n  - Libraries\n  - [DevTools](https://angular.dev/tools/devtools)\n  - [Language Service](https://angular.dev/tools/language-service)\n- Best Practices\n\n  - [Style Guide](https://angular.dev/style-guide)\n  - [Security](https://angular.dev/best-practices/security)\n  - [Accessibility](https://angular.dev/best-practices/a11y)\n  - Performance\n  - [Keeping up-to-date](https://angular.dev/update)\n- Extended Ecosystem\n\n  - [NgModules](https://angular.dev/guide/ngmodules/overview)\n  - Animations\n  - Using RxJS with Angular\n  - Service Workers & PWAs\n  - [Web workers](https://angular.dev/ecosystem/web-workers)\n  - [Custom build pipeline](https://angular.dev/ecosystem/custom-build-pipeline)\n  - [Angular Fire](https://github.com/angular/angularfire#readme)\n  - [Google Maps](https://github.com/angular/components/tree/main/src/google-maps#readme)\n  - [Google Pay](https://github.com/google-pay/google-pay-button#angular)\n  - [YouTube player](https://github.com/angular/components/blob/main/src/youtube-player/README.md)\n  - [Angular CDK](https://material.angular.io/cdk/categories)\n  - [Angular Material](https://material.angular.io/)\n\n- arrow\\_backDependency Injection\n  - [Overview](https://angular.dev/guide/di)\n  - [Understanding dependency injection](https://angular.dev/guide/di/dependency-injection)\n  - [Creating an injectable service](https://angular.dev/guide/di/creating-injectable-service)\n  - [Defining dependency providers](https://angular.dev/guide/di/dependency-injection-providers)\n  - [Injection context](https://angular.dev/guide/di/dependency-injection-context)\n  - [Hierarchical injectors](https://angular.dev/guide/di/hierarchical-dependency-injection)\n  - [Optimizing injection tokens](https://angular.dev/guide/di/lightweight-injection-tokens)\n  - [DI in action](https://angular.dev/guide/di/di-in-action)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nThe previous sections described how to use class instances as dependencies.\nAside from classes, you can also use values such as `boolean`, `string`, `Date`, and objects as dependencies.\nAngular provides the necessary APIs to make the dependency configuration flexible, so you can make those values available in DI.\n\n## [Specifying a provider token](https://angular.dev/guide/di/dependency-injection-providers\\#specifying-a-provider-token)\n\nIf you specify the service class as the provider token, the default behavior is for the injector to instantiate that class using the `new` operator.\n\nIn the following example, the app component provides a `Logger` instance:\n\n### src/app/app.component.ts\n\n```\n      providers: [Logger],\n\n```\n\ncheck\n\nYou can, however, configure DI to associate the `Logger` provider token with a different class or any other value.\nSo when the `Logger` is injected, the configured value is used instead.\n\nIn fact, the class provider syntax is a shorthand expression that expands into a provider configuration, defined by the `Provider` interface.\nAngular expands the `providers` value in this case into a full provider object as follows:\n\n### src/app/app.component.ts\n\n```\n      [{ provide: Logger, useClass: Logger }]\n\n```\n\ncheck\n\nThe expanded provider configuration is an object literal with two properties:\n\n- The `provide` property holds the token that serves as the key for consuming the dependency value.\n- The second property is a provider definition object, which tells the injector **how** to create the dependency value. The provider-definition can be one of the following:\n\n  - `useClass` \\- this option tells Angular DI to instantiate a provided class when a dependency is injected\n  - `useExisting` \\- allows you to alias a token and reference any existing one.\n  - `useFactory` \\- allows you to define a function that constructs a dependency.\n  - `useValue` \\- provides a static value that should be used as a dependency.\n\nThe sections below describe how to use the different provider definitions.\n\n### [Class providers: useClass](https://angular.dev/guide/di/dependency-injection-providers\\#class-providers-useclass)\n\nThe `useClass` provider key lets you create and return a new instance of the specified class.\n\nYou can use this type of provider to substitute an alternative implementation for a common or default class.\nThe alternative implementation can, for example, implement a different strategy, extend the default class, or emulate the behavior of the real class in a test case.\n\nIn the following example, `BetterLogger` would be instantiated when the `Logger` dependency is requested in a component or any other class:\n\n### src/app/app.component.ts\n\n```\n      [{ provide: Logger, useClass: BetterLogger }]\n\n```\n\ncheck\n\nIf the alternative class providers have their own dependencies, specify both providers in the providers metadata property of the parent module or component:\n\n### src/app/app.component.ts\n\n```\n      [  UserService, // dependency needed in `EvenBetterLogger`.  { provide: Logger, useClass: EvenBetterLogger },]\n\n```\n\ncheck\n\nIn this example, `EvenBetterLogger` displays the user name in the log message. This logger gets the user from an injected `UserService` instance:\n\n### src/app/even-better-logger.component.ts\n\n```\n      @Injectable()export class EvenBetterLogger extends Logger {  private userService = inject(UserService);  override log(message: string) {    const name = this.userService.user.name;    super.log(`Message to ${name}: ${message}`);  }}\n\n```\n\ncheck\n\nAngular DI knows how to construct the `UserService` dependency, since it has been configured above and is available in the injector.\n\n### [Alias providers: useExisting](https://angular.dev/guide/di/dependency-injection-providers\\#alias-providers-useexisting)\n\nThe `useExisting` provider key lets you map one token to another.\nIn effect, the first token is an alias for the service associated with the second token, creating two ways to access the same service object.\n\nIn the following example, the injector injects the singleton instance of `NewLogger` when the component asks for either the new or the old logger:\nIn this way, `OldLogger` is an alias for `NewLogger`.\n\n### src/app/app.component.ts\n\n```\n      [  NewLogger,  // Alias OldLogger w/ reference to NewLogger  { provide: OldLogger, useExisting: NewLogger},]\n\n```\n\ncheck\n\n**NOTE:** Ensure you do not alias `OldLogger` to `NewLogger` with `useClass`, as this creates two different `NewLogger` instances.\n\n### [Factory providers: useFactory](https://angular.dev/guide/di/dependency-injection-providers\\#factory-providers-usefactory)\n\nThe `useFactory` provider key lets you create a dependency object by calling a factory function.\nWith this approach, you can create a dynamic value based on information available in the DI and elsewhere in the app.\n\nIn the following example, only authorized users should see secret heroes in the `HeroService`.\nAuthorization can change during the course of a single application session, as when a different user logs in .\n\nTo keep security-sensitive information in `UserService` and out of `HeroService`, give the `HeroService` constructor a boolean flag to control display of secret heroes:\n\n### src/app/heroes/hero.service.ts\n\n```\n      class HeroService {  constructor(    private logger: Logger,    private isAuthorized: boolean) { }  getHeroes() {    const auth = this.isAuthorized ? 'authorized' : 'unauthorized';    this.logger.log(`Getting heroes for ${auth} user.`);    return HEROES.filter(hero => this.isAuthorized || !hero.isSecret);  }}\n\n```\n\ncheck\n\nTo implement the `isAuthorized` flag, use a factory provider to create a new logger instance for `HeroService`.\nThis is necessary as we need to manually pass `Logger` when constructing the hero service:\n\n### src/app/heroes/hero.service.provider.ts\n\n```\n      const heroServiceFactory = (logger: Logger, userService: UserService) =>  new HeroService(logger, userService.user.isAuthorized);\n\n```\n\ncheck\n\nThe factory function has access to `UserService`.\nYou inject both `Logger` and `UserService` into the factory provider so the injector can pass them along to the factory function:\n\n### src/app/heroes/hero.service.provider.ts\n\n```\n      export const heroServiceProvider = {  provide: HeroService,  useFactory: heroServiceFactory,  deps: [Logger, UserService]};\n\n```\n\ncheck\n\n- The `useFactory` field specifies that the provider is a factory function whose implementation is `heroServiceFactory`.\n- The `deps` property is an array of provider tokens.\nThe `Logger` and `UserService` classes serve as tokens for their own class providers.\nThe injector resolves these tokens and injects the corresponding services into the matching `heroServiceFactory` factory function parameters, based on the order specified.\n\nCapturing the factory provider in the exported variable, `heroServiceProvider`, makes the factory provider reusable.\n\n### [Value providers: useValue](https://angular.dev/guide/di/dependency-injection-providers\\#value-providers-usevalue)\n\nThe `useValue` key lets you associate a static value with a DI token.\n\nUse this technique to provide runtime configuration constants such as website base addresses and feature flags.\nYou can also use a value provider in a unit test to provide mock data in place of a production data service.\n\nThe next section provides more information about the `useValue` key.\n\n## [Using an `InjectionToken` object](https://angular.dev/guide/di/dependency-injection-providers\\#using-an-injectiontoken-object)\n\nUse an `InjectionToken` object as provider token for non-class dependencies.\nThe following example defines a token, `APP_CONFIG`. of the type `InjectionToken`:\n\n### src/app/app.config.ts\n\n```\n      import { InjectionToken } from '@angular/core';export interface AppConfig {  title: string;}export const APP_CONFIG = new InjectionToken<AppConfig>('app.config description');\n\n```\n\ncheck\n\nThe optional type parameter, `<AppConfig>`, and the token description, `app.config description`, specify the token's purpose.\n\nNext, register the dependency provider in the component using the `InjectionToken` object of `APP_CONFIG`:\n\n### src/app/app.component.ts\n\n```\n      const MY_APP_CONFIG_VARIABLE: AppConfig = {  title: 'Hello',};providers: [{ provide: APP_CONFIG, useValue: MY_APP_CONFIG_VARIABLE }]\n\n```\n\ncheck\n\nNow, inject the configuration object in the constructor body with the `inject` function:\n\n### src/app/app.component.ts\n\n```\n      export class AppComponent {  constructor() {    const config = inject(APP_CONFIG);    this.title = config.title;  }}\n\n```\n\ncheck\n\n### [Interfaces and DI](https://angular.dev/guide/di/dependency-injection-providers\\#interfaces-and-di)\n\nThough the TypeScript `AppConfig` interface supports typing within the class, the `AppConfig` interface plays no role in DI.\nIn TypeScript, an interface is a design-time artifact, and does not have a runtime representation, or token, that the DI framework can use.\n\nWhen the TypeScript transpiles to JavaScript, the interface disappears because JavaScript doesn't have interfaces.\nBecause there is no interface for Angular to find at runtime, the interface cannot be a token, nor can you inject it:\n\n### src/app/app.component.ts\n\n```\n      // Can't use interface as provider token[{ provide: AppConfig, useValue: MY_APP_CONFIG_VARIABLE })]\n\n```\n\ncheck\n\n### src/app/app.component.ts\n\n```\n      export class AppComponent {  // Can't inject using the interface as the parameter type  private config = inject(AppConfig);}\n\n```\n\ncheck",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-ceefa6c5-cc81-4472-929f-fd1c52c1df8f.png"
  },
  "metadata": {
    "ogTitle": "Angular",
    "apple-mobile-web-app-title": "Angular",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:title": "Angular",
    "twitter:url": "https://angular.dev/",
    "theme-color": "#ffffff",
    "msapplication-TileColor": "#e90464",
    "language": "en",
    "og:description": "The web development framework for building modern apps.",
    "application-name": "Angular",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "twitter:card": "summary_large_image",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "og:url": "https://angular.dev/",
    "og:title": "Angular",
    "description": "The web development framework for building modern apps.",
    "title": "Defining dependency providers â€¢ Angular",
    "twitter:description": "The web development framework for building modern apps.",
    "ogDescription": "The web development framework for building modern apps.",
    "ogUrl": "https://angular.dev/",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "viewport": "width=device-width, initial-scale=1",
    "og:type": "website",
    "scrapeId": "e035271b-ddf9-4dee-ab6d-9c4dae64d0d2",
    "sourceURL": "https://angular.dev/guide/di/dependency-injection-providers",
    "url": "https://angular.dev/guide/di/dependency-injection-providers",
    "statusCode": 200
  }
}