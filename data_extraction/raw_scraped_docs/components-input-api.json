{
  "scrapeId": "3b7bfb73-f6fd-4d6e-84ca-d859f33e40b1",
  "sourceURL": "https://material.angular.io/components/input/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for input\n\n## API reference for Angular Material input\n\n`\n          import {MatInputModule} from '@angular/material/input';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/input/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/input/api\\#MatInput) `MatInput`\n\nSelector:input\\[matInput\\]textarea\\[matInput\\]select\\[matNativeControl\\]input\\[matNativeControl\\]textarea\\[matNativeControl\\]\n\nExported as:matInput\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Whether the input should remain interactive when it is disabled. |\n| @Input()<br>`errorStateMatcher: ErrorStateMatcher` | An object used to control when error messages are shown. |\n| @Input()<br>`readonly: boolean` | Whether the element is readonly. |\n| @Input()<br>`type: string` | Input type of the element. |\n| `errorState: boolean` | Whether the input is in an error state. |\n| `ngControl: inject(NgControl, { optional: true, self: true })!` |  |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the input. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n\n| updateErrorState |\n| --- |\n| Refreshes the error state of the input. |\n\n### [link](https://material.angular.io/components/input/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/input/api\\#MatInputConfig) `MatInputConfig`\n\nObject that can be used to configure the default options for the input.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `disabledInteractive: boolean` | Whether disabled inputs should be interactive. |\n\n### [link](https://material.angular.io/components/input/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/input/api\\#MAT_INPUT_CONFIG) `MAT_INPUT_CONFIG`\n\nInjection token that can be used to provide the default options for the input.\n\n```docs-markdown-code\nconst MAT_INPUT_CONFIG: InjectionToken<MatInputConfig>;\n\n```\n\n#### [link](https://material.angular.io/components/input/api\\#MAT_INPUT_VALUE_ACCESSOR) `MAT_INPUT_VALUE_ACCESSOR`\n\nThis token is used to inject the object whose value should be set into `MatInput`. If none is\nprovided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\nthemselves for this token, in order to make `MatInput` delegate the getting and setting of the\nvalue to them.\n\n```docs-markdown-code\nconst MAT_INPUT_VALUE_ACCESSOR: InjectionToken<{ value: any; }>;\n\n```\n\n## API reference for Angular Material input-testing\n\n`\n          import {MatInputHarness} from '@angular/material/input/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/input/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/input/api\\#MatInputHarness) `MatInputHarness`extends [MatFormFieldControlHarness](https://material.angular.io/components/input/api)\n\nHarness for interacting with a standard Material inputs in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '[matInput], input[matNativeControl], textarea[matNativeControl]'` |  |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the input and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the input and returns a promise that indicates when the<br>action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getId |\n| --- |\n| Gets the id of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getName |\n| --- |\n| Gets the name of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getPlaceholder |\n| --- |\n| Gets the placeholder of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getType |\n| --- |\n| Gets the type of the input. Returns \"textarea\" if the input is<br>a textarea. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getValue |\n| --- |\n| Gets the value of the input. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the input is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the input is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isReadonly |\n| --- |\n| Whether the input is readonly. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRequired |\n| --- |\n| Whether the input is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>setValue |\n| --- |\n| Sets the value of the input. The value will be set by simulating<br>keypresses that correspond to the given value. |\n| Parameters |\n| --- |\n| newValue<br> `string` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatInputHarness` that meets<br>certain criteria. |\n| Parameters |\n| --- |\n| options<br> `InputHarnessFilters = {}` | Options for filtering which input instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatInputHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/input/api\\#MatNativeSelectHarness) `MatNativeSelectHarness`extends [MatFormFieldControlHarness](https://material.angular.io/components/input/api)\n\nHarness for interacting with a native `select` in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: 'select[matNativeControl]'` |  |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the select and returns a void promise that indicates when the action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the select and returns a void promise that indicates when the action is complete. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getId |\n| --- |\n| Gets the id of the select. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getName |\n| --- |\n| Gets the name of the select. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getOptions |\n| --- |\n| Gets the options inside the select panel. |\n| Parameters |\n| --- |\n| filter<br> `NativeOptionHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<MatNativeOptionHarness[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Gets a boolean promise indicating if the select is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the select is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isMultiple |\n| --- |\n| Gets a boolean promise indicating if the select is in multi-selection mode. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRequired |\n| --- |\n| Gets a boolean promise indicating if the select is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>selectOptions |\n| --- |\n| Selects the options that match the passed-in filter. If the select is in multi-selection<br>mode all options will be clicked, otherwise the harness will pick the first matching option. |\n| Parameters |\n| --- |\n| filter<br> `NativeOptionHarnessFilters = {}` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatNativeSelectHarness` that meets<br>certain criteria. |\n| Parameters |\n| --- |\n| options<br> `NativeSelectHarnessFilters = {}` | Options for filtering which select instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<MatNativeSelectHarness>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/input/api\\#MatNativeOptionHarness) `MatNativeOptionHarness`extends [ComponentHarness](https://material.angular.io/components/input/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a native `option` in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: 'select[matNativeControl] option'` | Selector used to locate option instances. |\n\n##### Methods\n\n| async<br> <br>getIndex |\n| --- |\n| Index of the option within the native `select` element. |\n| Returns |\n| --- |\n| `Promise<number>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets the option's label text. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Gets whether the option is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isSelected |\n| --- |\n| Gets whether the option is selected. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a `MatNativeOptionHarness` that meets<br>certain criteria. |\n| Parameters |\n| --- |\n| options<br> `NativeOptionHarnessFilters = {}` | Options for filtering which option instances are considered a match. |\n\n### [link](https://material.angular.io/components/input/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/input/api\\#InputHarnessFilters) `InputHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatInputHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `placeholder: string | RegExp` | Filters based on the placeholder text of the input. |\n| `value: string | RegExp` | Filters based on the value of the input. |\n\n#### [link](https://material.angular.io/components/input/api\\#NativeSelectHarnessFilters) `NativeSelectHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatNativeSelectHarness` instances.\n\n#### [link](https://material.angular.io/components/input/api\\#NativeOptionHarnessFilters) `NativeOptionHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatNativeOptionHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `index: number` |  |\n| `isSelected: boolean` |  |\n| `text: string | RegExp` |  |\n\nInput\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-12477411-0bd4-48f5-a189-955ad0b5be60.png"
  },
  "metadata": {
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:type": "website",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "ogTitle": "Angular Material",
    "og:locale": "en_US",
    "title": "Input | Angular Material",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "theme-color": "#d7e3ff",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:site": "@Angular",
    "og:image:type": "image/png",
    "ogSiteName": "Angular Material",
    "twitter:creator": "@Angular",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "author": "Angular Components Team",
    "og:image:height": "943",
    "ogUrl": "https://material.angular.io/",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogLocale": "en_US",
    "mobile-web-app-capable": "yes",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:card": "summary",
    "og:url": "https://material.angular.io/",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "apple-mobile-web-app-capable": "yes",
    "favicon": "https://material.angular.io/components/input/assets/img/favicon.ico?v=19.1.0",
    "twitter:title": "Angular Material",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "og:site_name": "Angular Material",
    "og:image:width": "1339",
    "viewport": "width=device-width, initial-scale=1",
    "og:title": "Angular Material",
    "language": "en-US",
    "scrapeId": "3b7bfb73-f6fd-4d6e-84ca-d859f33e40b1",
    "sourceURL": "https://material.angular.io/components/input/api",
    "url": "https://material.angular.io/components/input/api",
    "statusCode": 200
  }
}