{
  "scrapeId": "457bbfab-f9b9-4fe0-a01c-2f9988d10830",
  "sourceURL": "https://material.angular.io/components/timepicker/overview",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\n## Overview for timepicker\n\nThe Angular Material Timepicker allows users to set the time portion of a date object either by\ntyping it in or by selecting it from a list of pre-defined options.\n\nBasic timepicker\n\nlinkcodeopen\\_in\\_new\n\nPick a time\n\n### [link](https://material.angular.io/components/timepicker/overview\\#connecting-a-timepicker-to-an-input)  Connecting a timepicker to an input\n\nA timepicker is composed of a text input and a dropdown menu, connected through the `matTimepicker`\nbinding on the input.\n\nThere is also an optional timepicker toggle button that gives the user an easy way to open the dropdown.\n\ncontent\\_copy\n\n```\n<input matInput [matTimepicker]=\"picker\">\n<mat-timepicker-toggle matIconSuffix [for]=\"picker\"/>\n<mat-timepicker #picker/>\n```\n\nThe timepicker input and toggle can be used either on their own or as a part of a `mat-form-field`:\n\ncontent\\_copy\n\n```\n<mat-form-field>\n  <mat-label>Pick a time</mat-label>\n  <input matInput [matTimepicker]=\"picker\">\n  <mat-timepicker-toggle matIconSuffix [for]=\"picker\"/>\n  <mat-timepicker #picker/>\n</mat-form-field>\n\n```\n\n### [link](https://material.angular.io/components/timepicker/overview\\#timepicker-forms-integration)  Timepicker forms integration\n\nThe timepicker input integrates with the `@angular/forms` module by providing itself as a\n`ControlValueAccessor` and a `Validator` (see [Input validation](https://material.angular.io/components/timepicker/overview#input-validation) below for more\ninformation). When the user types in a new time or selects one from the dropdown, the\ntime will be set on the date object which is the current value of the form control. If the form\ncontrol doesn't have a value, the timepicker will create one with today's date and the selected\ntime.\n\nTimepicker forms integration\n\nlinkcodeopen\\_in\\_new\n\nPick a time\n\nValue: Sat Apr 26 2025 12:30:00 GMT-0900 (Hawaii-Aleutian Daylight Time)\n\nTouched: false\n\nDirty: false\n\n### [link](https://material.angular.io/components/timepicker/overview\\#integration-with-matdatepicker)  Integration with `MatDatepicker`\n\nMaterial's datepicker and timepicker components can operate over the same value, allowing for a\ncombined datetime picker to be implemented. When binding the two components to the same value, the\ndatepicker will set the entire date object while the timepicker will only modify the time portion\nof it.\n\nTimepicker integration with datepicker\n\nlinkcodeopen\\_in\\_new\n\nMeeting date\n\nMeeting time\n\nValue:\n\n### [link](https://material.angular.io/components/timepicker/overview\\#input-validation)  Input validation\n\nThe timepicker input checks that the value typed in by the user is a valid time string and\nwhether it fits into the specified bounds.\n\nIf the user types in an invalid time string (for example `abc` or `24:67`), the timepicker input\nwill report the `matTimepickerParse` error. The string is parsed using the `parseTime` method of\nthe [the current date implementation](https://material.angular.io/components/timepicker/overview#choosing-a-date-implementation-and-format-settings).\n\nThe timepicker input also checks that the value typed in by the user fits within the minimum and\nmaximum bounds set through the `matTimepickerMin` and `matTimepickerMax` inputs. They accept either\na date object with a specific time or a time string. The inputs also control which times will be\nshown inside of the dropdown menu. For example, setting `matTimepickerMin=\"12:30\"` and\n`matTimepickerMax=\"21:25\"` will allow the user to only select a time between 12:30 in the afternoon\nand 9:25 in the evening. If the value is outside of those bounds, either a `maxTimepickerMin` or\n`matTimepickerMax` error will be reported to the value accessor.\n\nTimepicker validation\n\nlinkcodeopen\\_in\\_new\n\nPick a time\n\nEnter a value before 12:30 PM or after 5:30 PM to see the errors\n\nErrors: null\n\n### [link](https://material.angular.io/components/timepicker/overview\\#customizing-the-dropdown-options)  Customizing the dropdown options\n\nBy default the `mat-timepicker` dropdown shows options at 30 minute intervals. You can customize the\nlist of options either by setting an interval or providing a custom set of options.\n\nThe easiest way is to change the options is to pass the `interval` input to `mat-timepicker` with\nan interval string which will be used when generating the options. For example,\n`<mat-timepicker interval=\"90m\"/>` will show the options at 90 minute intervals, starting from the\nminimum time and ending at the maximum. Valid interval strings include:\n\n- A number which will be interpreted as minutes, e.g. `interval=\"50\"` represents 50 minutes.\n- A number with short units, for example `30m` represents 30 minutes while `5h` is 5 hours.\nSupported short units include `h` or `H` for hours, `m` or `M` for minutes and `s` or `S` for seconds.\n- A number with long units, for example `75 min` represents 75 minutes while `1.5 hours` is an hour\nand a half. Supported long units include `min` or `minute` or `minutes` for minutes, `hour` or `hours` for\nhours and `second` or `seconds` for seconds.\n\nFurthermore, the default interval can be controlled for the entire application using the\n`MAT_TIMEPICKER_CONFIG` injection token. For example, adding the following to your `providers` will\ndefault all timepickers to a 90 minute interval:\n\n```ts\nimport {MAT_TIMEPICKER_CONFIG} from '../timepicker';\n\n{\n  provide: MAT_TIMEPICKER_CONFIG,\n  useValue: {interval: '90 minutes'},\n}\n\n```\n\nIf your app requires more fine-grained control over the options, you can pass in an array of\noptions into `mat-timepicker` instead. Note that the options need to match the `MatTimepickerOption`\ninterface.\n\nTimepicker options customization\n\nlinkcodeopen\\_in\\_new\n\n### Interval examples\n\nEvery 45 minutes\n\nEvery 3.5 hours\n\n### Custom list of options\n\nPick a time of day\n\n### [link](https://material.angular.io/components/timepicker/overview\\#customizing-the-toggle-icon)  Customizing the toggle icon\n\n`mat-timepicker-toggle` renders a clock icon by default. You can customize it by projecting in an\nelement with the `matTimepickerToggleIcon` attribute into the toggle:\n\nTimepicker with custom toggle icon\n\nlinkcodeopen\\_in\\_new\n\nPick a time\n\nkeyboard\\_arrow\\_down\n\n### [link](https://material.angular.io/components/timepicker/overview\\#internationalization)  Internationalization\n\nInternationalization of the timepicker uses the same date adapter as `mat-datepicker`. It is\nconfigured via three aspects:\n\n1. The date locale.\n2. The date implementation that the timepicker accepts.\n3. The display and parse formats used by the timepicker.\n\n#### [link](https://material.angular.io/components/timepicker/overview\\#setting-the-locale-code)  Setting the locale code\n\nBy default, the `MAT_DATE_LOCALE` injection token will use the existing `LOCALE_ID` locale code\nfrom `@angular/core`. If you want to override it, you can provide a new value for the\n`MAT_DATE_LOCALE` token:\n\n```ts\nbootstapApplication(MyApp, {\n  providers: [{provide: MAT_DATE_LOCALE, useValue: 'en-GB'}],\n});\n\n```\n\nIt's also possible to set the locale at runtime using the `setLocale` method of the `DateAdapter`.\n\n**Note:** if you're using the `provideDateFnsAdapter`, you have to provide the data object for your\nlocale to `MAT_DATE_LOCALE` instead of the locale code, in addition to providing a configuration\ncompatible with `date-fns` to `MAT_DATE_FORMATS`. Locale data for `date-fns` can be imported\nfrom `date-fns/locale`.\n\nTimepicker with different locale\n\nlinkcodeopen\\_in\\_new\n\nPick a time\n\nDynamically switch to Bulgarian\n\n#### [link](https://material.angular.io/components/timepicker/overview\\#choosing-a-date-implementation-and-format-settings)  Choosing a date implementation and format settings\n\nThe timepicker is built to be implementation-agnostic and to be interoperable with\n`mat-datepicker`. This means that it can be made to work with a variety of different date\nimplementations. However it also means that developers need to make sure to provide the\nappropriate pieces for the timepicker to work with their chosen implementation.\n\nThe easiest way to ensure this is to import one of the provided date adapters:\n\n`provideNativeDateAdapter` or `MatNativeDateModule`\n\n| Date type | `Date` |\n| Supported locales | Locales using either AM/PM or 24-hour formatting |\n| Dependencies | None |\n| Import from | `@angular/material/core` |\n\n`provideDateFnsAdapter` or `MatDateFnsModule` (installed via `ng add @angular/material-date-fns-adapter`)\n\n| Date type | `Date` |\n| Supported locales | [See project for details](https://github.com/date-fns/date-fns/tree/master/src/locale/) |\n| Dependencies | [date-fns](https://date-fns.org/) |\n| Import from | `@angular/material-date-fns-adapter` |\n\n`provideLuxonDateAdapter` or `MatLuxonDateModule` (installed via `ng add @angular/material-luxon-adapter`)\n\n| Date type | `DateTime` |\n| Supported locales | [See project for details](https://moment.github.io/luxon/) |\n| Dependencies | [Luxon](https://moment.github.io/luxon/) |\n| Import from | `@angular/material-luxon-adapter` |\n\n`provideMomentDateAdapter` or `MatMomentDateModule` (installed via `ng add @angular/material-moment-adapter`)\n\n| Date type | `Moment` |\n| Supported locales | [See project for details](https://github.com/moment/moment/tree/develop/src/locale) |\n| Dependencies | [Moment.js](https://momentjs.com/) |\n| Import from | `@angular/material-moment-adapter` |\n\n**Note**: `provideNativeDateAdapter` implements time parsing using a regex which means that it\nonly supports AM/PM time (e.g. `1:45 PM`) or 24-hour time (e.g. `22:45` or `22.45`). As such\nit won't work on locales with different formatting. We recommend using one of the provided date\nadapters mentioned above or creating your own adapter by extending the `DateAdapter` class from\n`@angular/material/core`. For example, if you want to use the `date-fns` adapter, you can update\nyour `bootstrapApplication` format to the following:\n\n```ts\nimport {provideDateFnsAdapter} from '@angular/material-date-fns-adapter';\n\nbootstrapApplication(MyApp, {\n  providers: [provideDateFnsAdapter()]\n});\n\n```\n\n#### [link](https://material.angular.io/components/timepicker/overview\\#customizing-the-parse-and-display-formats)  Customizing the parse and display formats\n\nThe `MAT_DATE_FORMATS` object is a collection of formats that the timepicker uses when parsing\nand displaying date objects. These formats are passed through to the `DateAdapter` so you will want\nto make sure that the format objects you're providing are compatible with the `DateAdapter` used in\nyour app.\n\n`MAT_DATE_FORMATS` is the same object used by `mat-datepicker` so it's likely already\nconfigured if your app is using the datepicker, but for the timepicker you need to ensure that the\n`display.timeInput`, `display.timeOptionLabel` and `parse.timeInput` properties are set as well.\n\nIf you want use one of the `DateAdapters` that ships with Angular Material, but use your own\n`MAT_DATE_FORMATS`, you can either pass the formats into the providers function, or provide the\n`MAT_DATE_FORMATS` token yourself. For example:\n\n```ts\nbootstrapApplication(MyApp, {\n  providers: [provideNativeDateAdapter(MY_NATIVE_DATE_FORMATS)],\n});\n\n```\n\n### [link](https://material.angular.io/components/timepicker/overview\\#accessibility)  Accessibility\n\nThe timepicker implements the [ARIA combobox interaction pattern](https://www.w3.org/WAI/ARIA/apg/patterns/combobox/).\nThe timepicker input specifies `role=\"combobox\"` while the content of the dropdown applies\n`role=\"listbox\"` and the options within the dropdown apply `role=\"option\"`. By default the listbox\nis labelled from the `mat-form-field` it is placed in, but if you aren't using a form field or if\nyou want to customize the label, you can do so through the `ariaLabel` or `ariaLabelledby` inputs\non `mat-timepicker`.\n\n### [link](https://material.angular.io/components/timepicker/overview\\#troubleshooting)  Troubleshooting\n\n#### [link](https://material.angular.io/components/timepicker/overview\\#error-mattimepicker-no-provider-found-for-dateadaptermat_date_formats)  Error: MatTimepicker: No provider found for DateAdapter/MAT\\_DATE\\_FORMATS\n\nThis error is thrown if you haven't provided all of the injectables the timepicker needs in order to\nwork correctly. The easiest way to resolve this is to add `provideNativeDateAdapter` or\n`provideMomentDateAdapter` to your app config. See\n[_Choosing a date implementation_](https://material.angular.io/components/timepicker/overview#choosing-a-date-implementation-and-format-settings) for\nmore information.\n\n#### [link](https://material.angular.io/components/timepicker/overview\\#error-mattimepicker-incomplete-mat_date_formats-has-been-provided)  Error: MatTimepicker: Incomplete `MAT_DATE_FORMATS` has been provided\n\nThe timepicker needs the `display.timeInput`, `display.timeOptionLabel` and `parse.timeInput` fields\nin `MAT_DATE_FORMATS` in order to work correctly. You should update your date formats object to\ninclude include these fields. See [_Customizing the parse and display formats_](https://material.angular.io/components/timepicker/overview#customizing-the-parse-and-display-formats)\nfor more information.\n\n#### [link](https://material.angular.io/components/timepicker/overview\\#error-cannot-specify-both-the-options-and-interval-inputs-at-the-same-time)  Error: Cannot specify both the `options` and `interval` inputs at the same time\n\nA `mat-timepicker` cannot specifify both the `options` and `interval` inputs at the same time.\nThe template should be updated to remove one of them.\n\n#### [link](https://material.angular.io/components/timepicker/overview\\#error-value-of-options-input-cannot-be-an-empty-array)  Error: Value of `options` input cannot be an empty array\n\nThe array passed into the `options` input of `mat-timepicker` cannot be empty, because the user\nwon't have any options to choose from.\n\n#### [link](https://material.angular.io/components/timepicker/overview\\#error-a-mattimepicker-can-only-be-associated-with-a-single-input)  Error: A MatTimepicker can only be associated with a single input\n\nThis error is thrown if more than one `<input>` tries to claim ownership over the same\n`<mat-timepicker>` (via the `matTimepicker` attribute on the input). A timepicker can only be\nassociated with a single input.\n\nOverview Content\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nEdit Basic timepicker example in StackBlitz\n\nCopy link to example\n\nView code\n\nCopy snippet\n\nView full example\n\nEdit Timepicker forms integration example in StackBlitz\n\nEdit Timepicker integration with datepicker example in StackBlitz\n\nEdit Timepicker validation example in StackBlitz\n\nEdit Timepicker options customization example in StackBlitz\n\nEdit Timepicker with custom toggle icon example in StackBlitz\n\nEdit Timepicker with different locale example in StackBlitz",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-cac1d5f5-10fb-4be4-bf2b-cf4b4e584239.png"
  },
  "metadata": {
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:url": "https://material.angular.io/",
    "ogUrl": "https://material.angular.io/",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:height": "943",
    "theme-color": "#d7e3ff",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "author": "Angular Components Team",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:image:width": "1339",
    "twitter:creator": "@Angular",
    "language": "en-US",
    "ogSiteName": "Angular Material",
    "mobile-web-app-capable": "yes",
    "twitter:title": "Angular Material",
    "twitter:site": "@Angular",
    "ogTitle": "Angular Material",
    "og:image:type": "image/png",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "og:title": "Angular Material",
    "og:site_name": "Angular Material",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:card": "summary",
    "og:locale": "en_US",
    "apple-mobile-web-app-capable": "yes",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "ogLocale": "en_US",
    "favicon": "https://material.angular.io/components/timepicker/assets/img/favicon.ico?v=19.1.0",
    "title": "Timepicker | Angular Material",
    "viewport": "width=device-width, initial-scale=1",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "og:type": "website",
    "scrapeId": "457bbfab-f9b9-4fe0-a01c-2f9988d10830",
    "sourceURL": "https://material.angular.io/components/timepicker/overview",
    "url": "https://material.angular.io/components/timepicker/overview",
    "statusCode": 200
  }
}