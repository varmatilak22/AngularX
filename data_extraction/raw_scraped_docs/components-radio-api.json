{
  "scrapeId": "3e0c48b0-cacd-461b-8919-301c7ae0659a",
  "sourceURL": "https://material.angular.io/components/radio/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for radio\n\n## API reference for Angular Material radio\n\n`\n          import {MatRadioModule} from '@angular/material/radio';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/radio/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/radio/api\\#MatRadioGroup) `MatRadioGroup`\n\nA group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n\nSelector:mat-radio-group\n\nExported as:matRadioGroup\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`color: ThemePalette` | Theme color of the radio buttons in the group. This API is supported in M2<br>themes only, it has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/radio/styling](https://material.angular.io/components/radio/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the radio group is disabled |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Whether buttons in the group should be interactive while they're disabled. |\n| @Input()<br>`labelPosition: 'before' | 'after'` | Whether the labels should appear after or before the radio-buttons. Defaults to 'after' |\n| @Input()<br>`name: string` | Name of the radio button group. All radio buttons inside this group will use this name. |\n| @Input({ transform: booleanAttribute })<br> <br>`required: boolean` | Whether the radio group is required |\n| @Input()<br>`selected: MatRadioButton` | The currently selected radio button. If set to a new radio button, the radio group value<br>will be updated to match the new selected button. |\n| @Input()<br>`value: any` | Value for the radio-group. Should equal the value of the selected radio button if there is<br>a corresponding radio button with a matching value. If there is not such a corresponding<br>radio button, this value persists to be applied in case a new radio button is added with a<br>matching value. |\n| @Output()<br>`change: EventEmitter<MatRadioChange>` | Event emitted when the group value changes.<br>Change events are only emitted when the value changes due to user interaction with<br>a radio button (the same behavior as `<input type-\"radio\">`). |\n\n#### [link](https://material.angular.io/components/radio/api\\#MatRadioButton) `MatRadioButton`\n\nSelector:mat-radio-button\n\nExported as:matRadioButton\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-describedby')<br> <br>`ariaDescribedby: string` | The 'aria-describedby' attribute is read after the element's label and field type. |\n| @Input('aria-label')<br> <br>`ariaLabel: string` | Used to set the 'aria-label' attribute on the underlying input element. |\n| @Input('aria-labelledby')<br> <br>`ariaLabelledby: string` | The 'aria-labelledby' attribute takes precedence as the element's text alternative. |\n| @Input({ transform: booleanAttribute })<br> <br>`checked: boolean` | Whether this radio button is checked. |\n| @Input()<br>`color: ThemePalette` | Theme color of the radio button. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/radio/styling](https://material.angular.io/components/radio/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether ripples are disabled inside the radio button |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the radio button is disabled. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabledInteractive: boolean` | Whether the radio button should remain interactive when it is disabled. |\n| @Input()<br>`id: string` | The unique ID for the radio button. |\n| @Input()<br>`labelPosition: 'before' | 'after'` | Whether the label should appear after or before the radio button. Defaults to 'after' |\n| @Input()<br>`name: string` | Analog to HTML 'name' attribute used to group radios for unique selection. |\n| @Input({ transform: booleanAttribute })<br> <br>`required: boolean` | Whether the radio button is required. |\n| @Input()<br>`value: any` | The value of this radio button. |\n| @Output()<br>`change: EventEmitter<MatRadioChange>` | Event emitted when the checked state of this radio button changes.<br>Change events are only emitted when the value changes due to user interaction with<br>the radio button (the same behavior as `<input type-\"radio\">`). |\n| `inputId: string` | ID of the native input element inside `<mat-radio-button>` |\n| `radioGroup: MatRadioGroup` | The parent radio group. May or may not be present. |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the radio button. |\n| Parameters |\n| --- |\n| options?<br> `FocusOptions` |  |\n| origin?<br> `FocusOrigin` |  |\n\n### [link](https://material.angular.io/components/radio/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/radio/api\\#MatRadioChange) `MatRadioChange`\n\nChange event object emitted by radio button and radio group.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `source: MatRadioButton` | The radio button that emits the change event. |\n| `value: T` | The value of the radio button. |\n\n### [link](https://material.angular.io/components/radio/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/radio/api\\#MatRadioDefaultOptions) `MatRadioDefaultOptions`\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `color: ThemePalette` | Theme color of the radio button. This API is supported in M2 themes only, it<br>has no effect in M3 themes. For color customization in M3, see [https://material.angular.io/components/radio/styling](https://material.angular.io/components/radio/styling).<br>For information on applying color variants in M3, see<br>[https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants](https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants) |\n| `disabledInteractive: boolean` | Whether disabled radio buttons should be interactive. |\n\n### [link](https://material.angular.io/components/radio/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/radio/api\\#MAT_RADIO_GROUP) `MAT_RADIO_GROUP`\n\nInjection token that can be used to inject instances of `MatRadioGroup`. It serves as\nalternative token to the actual `MatRadioGroup` class which could cause unnecessary\nretention of the class and its component metadata.\n\n```docs-markdown-code\nconst MAT_RADIO_GROUP: InjectionToken<MatRadioGroup>;\n\n```\n\n#### [link](https://material.angular.io/components/radio/api\\#MAT_RADIO_DEFAULT_OPTIONS) `MAT_RADIO_DEFAULT_OPTIONS`\n\n```docs-markdown-code\nconst MAT_RADIO_DEFAULT_OPTIONS: InjectionToken<MatRadioDefaultOptions>;\n\n```\n\n## API reference for Angular Material radio-testing\n\n`\n          import {MatRadioGroupHarness} from '@angular/material/radio/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/radio/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/radio/api\\#MatRadioGroupHarness) `MatRadioGroupHarness`extends [ComponentHarness](https://material.angular.io/components/radio/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a mat-radio-group in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-radio-group'` | The selector for the host element of a `MatRadioGroup` instance. |\n\n##### Methods\n\n| async<br> <br>checkRadioButton |\n| --- |\n| Checks a radio button in this group. |\n| Parameters |\n| --- |\n| filter?<br> `RadioButtonHarnessFilters` | An optional filter to apply to the child radio buttons. The first tab matching<br>the filter will be selected. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getCheckedRadioButton |\n| --- |\n| Gets the checked radio-button in a radio-group. |\n| Returns |\n| --- |\n| `Promise<MatRadioButtonHarness | null>` |  |\n\n| async<br> <br>getCheckedValue |\n| --- |\n| Gets the checked value of the radio-group. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getId |\n| --- |\n| Gets the id of the radio-group. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getName |\n| --- |\n| Gets the name of the radio-group. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getRadioButtons |\n| --- |\n| Gets a list of radio buttons which are part of the radio-group. |\n| Parameters |\n| --- |\n| filter?<br> `RadioButtonHarnessFilters` | Optionally filters which radio buttons are included. |\n| Returns |\n| --- |\n| `Promise<MatRadioButtonHarness[]>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a radio group with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `RadioGroupHarnessFilters = {}` | Options for filtering which radio group instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/radio/api\\#MatRadioButtonHarness) `MatRadioButtonHarness`extends [ComponentHarness](https://material.angular.io/components/radio/cdk/testing/api\\#ComponentHarness)\n\nHarness for interacting with a mat-radio-button in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-radio-button'` | The selector for the host element of a `MatRadioButton` instance. |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the radio-button. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>check |\n| --- |\n| Puts the radio-button in a checked state by clicking it if it is currently unchecked,<br>or doing nothing if it is already checked. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the radio-button. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getId |\n| --- |\n| Gets the radio-button's id. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getLabelText |\n| --- |\n| Gets the radio-button's label text. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>getName |\n| --- |\n| Gets the radio-button's name. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>getValue |\n| --- |\n| Gets the value of the radio-button. The radio-button value will be converted to a string.<br>Note: This means that for radio-button's with an object as a value `[object Object]` is<br>intentionally returned. |\n| Returns |\n| --- |\n| `Promise<string | null>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isChecked |\n| --- |\n| Whether the radio-button is checked. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the radio-button is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the radio-button is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isRequired |\n| --- |\n| Whether the radio-button is required. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a radio button with specific<br>attributes. |\n| Parameters |\n| --- |\n| options<br> `RadioButtonHarnessFilters = {}` | Options for filtering which radio button instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/radio/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/radio/api\\#RadioGroupHarnessFilters) `RadioGroupHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatRadioGroupHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `name: string` | Only find instances whose name attribute is the given value. |\n\n#### [link](https://material.angular.io/components/radio/api\\#RadioButtonHarnessFilters) `RadioButtonHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatRadioButtonHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `checked: boolean` | Only find instances with the given checked value. |\n| `label: string | RegExp` | Only find instances whose label matches the given value. |\n| `name: string` | Only find instances whose name attribute is the given value. |\n\nRadio button\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-0459d726-d1db-4420-93a2-e87892faa9df.png"
  },
  "metadata": {
    "og:image:type": "image/png",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "og:locale": "en_US",
    "ogTitle": "Angular Material",
    "ogUrl": "https://material.angular.io/",
    "twitter:title": "Angular Material",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:site": "@Angular",
    "og:title": "Angular Material",
    "og:site_name": "Angular Material",
    "viewport": "width=device-width, initial-scale=1",
    "language": "en-US",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:card": "summary",
    "og:image:width": "1339",
    "mobile-web-app-capable": "yes",
    "twitter:creator": "@Angular",
    "ogSiteName": "Angular Material",
    "favicon": "https://material.angular.io/components/radio/assets/img/favicon.ico?v=19.1.0",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "apple-mobile-web-app-capable": "yes",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:url": "https://material.angular.io/",
    "og:image:height": "943",
    "title": "Radio button | Angular Material",
    "theme-color": "#d7e3ff",
    "author": "Angular Components Team",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogLocale": "en_US",
    "og:type": "website",
    "scrapeId": "3e0c48b0-cacd-461b-8919-301c7ae0659a",
    "sourceURL": "https://material.angular.io/components/radio/api",
    "url": "https://material.angular.io/components/radio/api",
    "statusCode": 200
  }
}