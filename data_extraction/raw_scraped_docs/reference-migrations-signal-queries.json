{
  "scrapeId": "00ec1857-987c-4492-ae47-79595e53fd1d",
  "sourceURL": "https://angular.dev/reference/migrations/signal-queries",
  "statusCode": 200,
  "data": {
    "markdown": "Skip to main content\n\nmenu\n\nmenuAPI\n\n- [Roadmap](https://angular.dev/roadmap)\n- [Get involved](https://github.com/angular/angular/blob/main/CONTRIBUTING.md)\n- API Reference\n- CLI Reference\n- Error Encyclopedia\n- Extended Diagnostics\n- [Versioning and releases](https://angular.dev/reference/releases)\n- [Version compatibility](https://angular.dev/reference/versions)\n- [Update guide](https://angular.dev/update-guide)\n- Configurations\n- Migrations\n\n- arrow\\_backMigrations\n  - [Overview](https://angular.dev/reference/migrations)\n  - [Standalone](https://angular.dev/reference/migrations/standalone)\n  - [Control Flow Syntax](https://angular.dev/reference/migrations/control-flow)\n  - [inject() Function](https://angular.dev/reference/migrations/inject-function)\n  - [Lazy-loaded routes](https://angular.dev/reference/migrations/route-lazy-loading)\n  - [Signal inputs](https://angular.dev/reference/migrations/signal-inputs)\n  - [Outputs](https://angular.dev/reference/migrations/outputs)\n  - [Signal queries](https://angular.dev/reference/migrations/signal-queries)\n  - [Clean up unused imports](https://angular.dev/reference/migrations/cleanup-unused-imports)\n  - [Self-closing tags](https://angular.dev/reference/migrations/self-closing-tags)\n\nThis site uses cookies from Google to deliver its services and to analyze traffic.\n\n[Learn more](https://policies.google.com/technologies/cookies) Ok, Got it\n\nAngular introduced improved APIs for queries that are considered\nproduction ready as of v19.\nRead more about signal queries and their benefits in the [dedicated guide](https://angular.dev/reference/migrations/guide/signals/queries).\n\nTo support existing teams that would like to use signal queries, the Angular team\nprovides an automated migration that converts existing decorator query fields to the new API.\n\nRun the schematic using the following command:\n\n```\n      ng generate @angular/core:signal-queries-migration\n\n```\n\ncheck\n\nAlternatively, the migration is available as a [code refactor action](https://code.visualstudio.com/docs/typescript/typescript-refactoring#_refactoring) in VSCode.\nInstall the latest version of the VSCode extension and click onto e.g. a `@ViewChild` field.\nSee more details in the section [below](https://angular.dev/reference/migrations/signal-queries#vscode-extension).\n\n## [What does the migration change?](https://angular.dev/reference/migrations/signal-queries\\#what-does-the-migration-change)\n\n1. `@ViewChild()`, `@ViewChildren`, `@ContentChild` and `@ContentChildren` class members\nare updated to their signal equivalents.\n2. References in your application to migrated queries are updated to call the signal.\n   - This includes references in templates, host bindings or TypeScript code.\n\n**Before**\n\n```\n      import {Component, ContentChild} from '@angular/core';@Component({  template: `Has ref: {{someRef ? 'Yes' : 'No'}}`})export class MyComponent {  @ContentChild('someRef') ref: ElementRef|undefined = undefined;  someMethod() {    if (this.ref) {      this.ref.nativeElement;    }  }}\n\n```\n\ncheck\n\n**After**\n\n```\n      import {Component, contentChild} from '@angular/core';@Component({  template: `Has ref: {{someRef() ? 'Yes' : 'No'}}`})export class MyComponent {  readonly ref = contentChild<ElementRef>('someRef');  someMethod() {    const ref = this.ref();    if (ref) {      ref.nativeElement;    }  }}\n\n```\n\ncheck\n\n## [Configuration options](https://angular.dev/reference/migrations/signal-queries\\#configuration-options)\n\nThe migration supports a few options for fine tuning the migration to your specific needs.\n\n### [`--path`](https://angular.dev/reference/migrations/signal-queries\\#--path)\n\nBy default, the migration will update your whole Angular CLI workspace.\nYou can limit the migration to a specific sub-directory using this option.\n\n### [`--best-effort-mode`](https://angular.dev/reference/migrations/signal-queries\\#--best-effort-mode)\n\nBy default, the migration skips queries that cannot be safely migrated.\nThe migration tries to refactor code as safely as possible.\n\nWhen the `--best-effort-mode` flag is enabled, the migration eagerly\ntries to migrate as much as possible, even if it could break your build.\n\n### [`--insert-todos`](https://angular.dev/reference/migrations/signal-queries\\#--insert-todos)\n\nWhen enabled, the migration will add TODOs to queries that couldn't be migrated.\nThe TODOs will include reasoning on why queries were skipped. E.g.\n\n```\n      // TODO: Skipped for migration because://  Your application code writes to the query. This prevents migration.@ViewChild('ref') ref?: ElementRef;\n\n```\n\ncheck\n\n### [`--analysis-dir`](https://angular.dev/reference/migrations/signal-queries\\#--analysis-dir)\n\nIn large projects you may use this option to reduce the amount of files being analyzed.\nBy default, the migration analyzes the whole workspace, regardless of the `--path` option, in\norder to update all references affected by a query declaration being migrated.\n\nWith this option, you can limit analysis to a sub-folder. Note that this means that any\nreferences outside this directory are silently skipped, potentially breaking your build.\n\n## [VSCode extension](https://angular.dev/reference/migrations/signal-queries\\#vscode-extension)\n\n![Screenshot of the VSCode extension and clicking on an `@ViewChild` field](https://angular.dev/reference/migrations/assets/images/migrations/signal-queries-vscode.png)\n\nThe migration is available as a [code refactor action](https://code.visualstudio.com/docs/typescript/typescript-refactoring#_refactoring) in VSCode.\n\nTo make use of the migration via VSCode, install the latest version of the VSCode extension and either click:\n\n- on a `@ViewChild`, `@ViewChildren`, `@ContentChild`, or `@ContentChildren` field.\n- on a directive/component\n\nThen, wait for the yellow lightbulb VSCode refactoring button to appear.\nVia this button you can then select the signal queries migration.",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-42a3d988-a27d-4144-bce4-c344d82af4e5.png"
  },
  "metadata": {
    "og:title": "Angular",
    "ogImage": "https://angular.dev/assets/images/ng-image.jpg",
    "ogUrl": "https://angular.dev/",
    "viewport": "width=device-width, initial-scale=1",
    "description": "The web development framework for building modern apps.",
    "theme-color": "#ffffff",
    "language": "en",
    "og:description": "The web development framework for building modern apps.",
    "og:url": "https://angular.dev/",
    "title": "Signal queries â€¢ Angular",
    "apple-mobile-web-app-title": "Angular",
    "og:image": "https://angular.dev/assets/images/ng-image.jpg",
    "twitter:url": "https://angular.dev/",
    "og:type": "website",
    "msapplication-config": "/assets/icons/browserconfig.xml",
    "favicon": "https://angular.dev/assets/icons/favicon-48x48.png",
    "twitter:card": "summary_large_image",
    "twitter:image": "https://angular.dev/assets/images/ng-image.jpg",
    "ogDescription": "The web development framework for building modern apps.",
    "twitter:title": "Angular",
    "ogTitle": "Angular",
    "application-name": "Angular",
    "msapplication-TileColor": "#e90464",
    "twitter:description": "The web development framework for building modern apps.",
    "scrapeId": "00ec1857-987c-4492-ae47-79595e53fd1d",
    "sourceURL": "https://angular.dev/reference/migrations/signal-queries",
    "url": "https://angular.dev/reference/migrations/signal-queries",
    "statusCode": 200
  }
}