{
  "scrapeId": "e7a5b269-14b5-4d1e-ba68-8ab1cb1d72b0",
  "sourceURL": "https://material.angular.io/components/menu/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Autocomplete](https://material.angular.io/components/autocomplete) [Badge](https://material.angular.io/components/badge) [Bottom Sheet](https://material.angular.io/components/bottom-sheet) [Button](https://material.angular.io/components/button) [Button toggle](https://material.angular.io/components/button-toggle) [Card](https://material.angular.io/components/card) [Checkbox](https://material.angular.io/components/checkbox) [Chips](https://material.angular.io/components/chips) [Core](https://material.angular.io/components/core) [Datepicker](https://material.angular.io/components/datepicker) [Dialog](https://material.angular.io/components/dialog) [Divider](https://material.angular.io/components/divider) [Expansion Panel](https://material.angular.io/components/expansion) [Form field](https://material.angular.io/components/form-field) [Grid list](https://material.angular.io/components/grid-list) [Icon](https://material.angular.io/components/icon) [Input](https://material.angular.io/components/input) [List](https://material.angular.io/components/list) [Menu](https://material.angular.io/components/menu) [Paginator](https://material.angular.io/components/paginator) [Progress bar](https://material.angular.io/components/progress-bar) [Progress spinner](https://material.angular.io/components/progress-spinner) [Radio button](https://material.angular.io/components/radio) [Ripples](https://material.angular.io/components/ripple) [Select](https://material.angular.io/components/select) [Sidenav](https://material.angular.io/components/sidenav) [Slide toggle](https://material.angular.io/components/slide-toggle) [Slider](https://material.angular.io/components/slider) [Snackbar](https://material.angular.io/components/snack-bar) [Sort header](https://material.angular.io/components/sort) [Stepper](https://material.angular.io/components/stepper) [Table](https://material.angular.io/components/table) [Tabs](https://material.angular.io/components/tabs) [Timepicker](https://material.angular.io/components/timepicker) [Toolbar](https://material.angular.io/components/toolbar) [Tooltip](https://material.angular.io/components/tooltip) [Tree](https://material.angular.io/components/tree)\n\nAPI for menu\n\n## API reference for Angular Material menu\n\n`\n          import {MatMenuModule} from '@angular/material/menu';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/menu/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/components/menu/api\\#MatMenu) `MatMenu`\n\nSelector:mat-menu\n\nExported as:matMenu\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('aria-describedby')<br> <br>`ariaDescribedby: string` | aria-describedby for the menu panel. |\n| @Input('aria-label')<br> <br>`ariaLabel: string` | aria-label for the menu panel. |\n| @Input('aria-labelledby')<br> <br>`ariaLabelledby: string` | aria-labelledby for the menu panel. |\n| @Input()<br>`backdropClass: string` | Class to be added to the backdrop element. |\n| @Input({ transform: (value: any) => (value == null ? null : booleanAttribute(value)) })<br> <br>`hasBackdrop: boolean` | Whether the menu has a backdrop. |\n| @Input({ transform: booleanAttribute })<br> <br>`overlapTrigger: boolean` | Whether the menu should overlap its trigger. |\n| @Input('class')<br> <br>`panelClass: string` | This method takes classes set on the host mat-menu element and applies them on the<br>menu template that displays in the overlay container. Otherwise, it's difficult<br>to style the containing menu from outside the component. |\n| @Input()<br>`xPosition: MenuPositionX` | Position of the menu in the X axis. |\n| @Input()<br>`yPosition: MenuPositionY` | Position of the menu in the Y axis. |\n| @Output()<br>`closed: EventEmitter<MenuCloseReason>` | Event emitted when the menu is closed. |\n| `direction: Direction` | Layout direction of the menu. |\n| `overlayPanelClass: string | string[]` | Class or list of classes to be added to the overlay panel. |\n| `panelId: string` |  |\n| `parentMenu: MatMenuPanel | undefined` | Parent menu of the current menu panel. |\n| @Input()<br>Deprecated<br> <br>`classList: string` | This method takes classes set on the host mat-menu element and applies them on the<br>menu template that displays in the overlay container. Otherwise, it's difficult<br>to style the containing menu from outside the component. |\n| @Output()<br>Deprecated<br> <br>`close: EventEmitter<MenuCloseReason>` | Event emitted when the menu is closed. |\n| Deprecated<br> <br>`items: QueryList<MatMenuItem>` | List of the items inside of a menu. |\n\n##### Methods\n\n| addItem |\n| --- |\n| Parameters |\n| --- |\n| \\_item<br> `MatMenuItem` |  |\n\n| focusFirstItem |\n| --- |\n| Focus the first item in the menu. |\n| Parameters |\n| --- |\n| origin<br> `FocusOrigin = 'program'` | Action from which the focus originated. Used to set the correct styling. |\n\n| resetActiveItem |\n| --- |\n| Resets the active item in the menu. This is used when the menu is opened, allowing<br>the user to start from the first option when pressing the down arrow. |\n\n| Deprecated<br> <br>setElevation |\n| --- |\n| Parameters |\n| --- |\n| \\_depth<br> `number` |  |\n\n#### [link](https://material.angular.io/components/menu/api\\#MatMenuTrigger) `MatMenuTrigger`\n\nDirective applied to an element that should trigger a `mat-menu`.\n\nSelector:\\[mat-menu-trigger-for\\]\\[matMenuTriggerFor\\]\n\nExported as:matMenuTrigger\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input('matMenuTriggerFor')<br> <br>`menu: MatMenuPanel | null` | References the menu instance that the trigger is associated with. |\n| @Input('matMenuTriggerData')<br> <br>`menuData: any` | Data to be passed along to any lazily-rendered content. |\n| @Input('matMenuTriggerRestoreFocus')<br> <br>`restoreFocus: boolean` | Whether focus should be restored when the menu is closed.<br>Note that disabling this option can have accessibility implications<br>and it's up to you to manage focus, if you decide to turn it off. |\n| @Output()<br>`menuClosed: EventEmitter<void>` | Event emitted when the associated menu is closed. |\n| @Output()<br>`menuOpened: EventEmitter<void>` | Event emitted when the associated menu is opened. |\n| `dir: Direction` | The text direction of the containing app. |\n| `menuOpen: boolean` | Whether the menu is open. |\n| @Output()<br>Deprecated<br> <br>`onMenuClose: EventEmitter<void>` | Event emitted when the associated menu is closed. |\n| @Output()<br>Deprecated<br> <br>`onMenuOpen: EventEmitter<void>` | Event emitted when the associated menu is opened. |\n\n##### Methods\n\n| closeMenu |\n| --- |\n| Closes the menu. |\n\n| focus |\n| --- |\n| Focuses the menu trigger. |\n| Parameters |\n| --- |\n| origin?<br> `FocusOrigin` | Source of the menu trigger's focus. |\n| options?<br> `FocusOptions` |  |\n\n| openMenu |\n| --- |\n| Opens the menu. |\n\n| toggleMenu |\n| --- |\n| Toggles the menu between the open and closed states. |\n\n| triggersSubmenu |\n| --- |\n| Whether the menu triggers a sub-menu or a top-level one. |\n| Returns |\n| --- |\n| `boolean` |  |\n\n| updatePosition |\n| --- |\n| Updates the position of the menu to ensure that it fits all options within the viewport. |\n\n#### [link](https://material.angular.io/components/menu/api\\#MatMenuItem) `MatMenuItem`\n\nSingle item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n\nSelector:\\[mat-menu-item\\]\n\nExported as:matMenuItem\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`disableRipple: boolean` | Whether ripples are disabled on the menu item. |\n| @Input({ transform: booleanAttribute })<br> <br>`disabled: boolean` | Whether the menu item is disabled. |\n| @Input()<br>`role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox'` | ARIA role for the menu item. |\n\n##### Methods\n\n| focus |\n| --- |\n| Focuses the menu item. |\n| Parameters |\n| --- |\n| origin?<br> `FocusOrigin` |  |\n| options?<br> `FocusOptions` |  |\n\n| getLabel |\n| --- |\n| Gets the label to be used when determining whether the option should be focused. |\n| Returns |\n| --- |\n| `string` |  |\n\n#### [link](https://material.angular.io/components/menu/api\\#MatMenuContent) `MatMenuContent`\n\nMenu content that will be rendered lazily once the menu is opened.\n\nSelector:ng-template\\[matMenuContent\\]\n\n### [link](https://material.angular.io/components/menu/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/menu/api\\#MatMenuDefaultOptions) `MatMenuDefaultOptions`\n\nDefault `mat-menu` options that can be overridden.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `backdropClass: string` | Class to be applied to the menu's backdrop. |\n| `hasBackdrop: boolean` | Whether the menu has a backdrop. |\n| `overlapTrigger: boolean` | Whether the menu should overlap the menu trigger. |\n| `overlayPanelClass: string | string[]` | Class or list of classes to be applied to the menu's overlay panel. |\n| `xPosition: MenuPositionX` | The x-axis position of the menu. |\n| `yPosition: MenuPositionY` | The y-axis position of the menu. |\n\n### [link](https://material.angular.io/components/menu/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/components/menu/api\\#MenuCloseReason) `MenuCloseReason`\n\nReason why the menu was closed.\n\n```docs-markdown-code\ntype MenuCloseReason = void | 'click' | 'keydown' | 'tab';\n\n```\n\n#### [link](https://material.angular.io/components/menu/api\\#MenuPositionX) `MenuPositionX`\n\n```docs-markdown-code\ntype MenuPositionX = 'before' | 'after';\n\n```\n\n#### [link](https://material.angular.io/components/menu/api\\#MenuPositionY) `MenuPositionY`\n\n```docs-markdown-code\ntype MenuPositionY = 'above' | 'below';\n\n```\n\n### [link](https://material.angular.io/components/menu/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/components/menu/api\\#MAT_MENU_DEFAULT_OPTIONS) `MAT_MENU_DEFAULT_OPTIONS`\n\nInjection token to be used to override the default options for `mat-menu`.\n\n```docs-markdown-code\nconst MAT_MENU_DEFAULT_OPTIONS: InjectionToken<MatMenuDefaultOptions>;\n\n```\n\n#### [link](https://material.angular.io/components/menu/api\\#MAT_MENU_SCROLL_STRATEGY) `MAT_MENU_SCROLL_STRATEGY`\n\nInjection token that determines the scroll handling while the menu is open.\n\n```docs-markdown-code\nconst MAT_MENU_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\n```\n\n#### [link](https://material.angular.io/components/menu/api\\#MENU_PANEL_TOP_PADDING) `MENU_PANEL_TOP_PADDING`\n\nDeprecated\n\nDefault top padding of the menu panel.\n\n```docs-markdown-code\nconst MENU_PANEL_TOP_PADDING: 8;\n\n```\n\n#### [link](https://material.angular.io/components/menu/api\\#MAT_MENU_CONTENT) `MAT_MENU_CONTENT`\n\nInjection token that can be used to reference instances of `MatMenuContent`. It serves\nas alternative token to the actual `MatMenuContent` class which could cause unnecessary\nretention of the class and its directive metadata.\n\n```docs-markdown-code\nconst MAT_MENU_CONTENT: InjectionToken<MatMenuContent>;\n\n```\n\n## API reference for Angular Material menu-testing\n\n`\n          import {MatMenuHarness} from '@angular/material/menu/testing';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/components/menu/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/components/menu/api\\#MatMenuHarness) `MatMenuHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/menu/cdk/testing/api\\#ContentContainerComponentHarness)\n\nHarness for interacting with a mat-menu in tests.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-menu-trigger'` | The selector for the host element of a `MatMenu` instance. |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the menu. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>clickItem |\n| --- |\n| Clicks an item in the menu, and optionally continues clicking items in subsequent sub-menus. |\n| Parameters |\n| --- |\n| itemFilter<br> `Omit<MenuItemHarnessFilters, \"ancestor\">` | A filter used to represent which item in the menu should be clicked. The<br>first matching menu item will be clicked. |\n| subItemFilters<br> `` | A list of filters representing the items to click in any subsequent<br>sub-menus. The first item in the sub-menu matching the corresponding filter in<br>`subItemFilters` will be clicked. |\n| ...subItemFilters<br> `Omit<MenuItemHarnessFilters, \"ancestor\">[]` |  |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>close |\n| --- |\n| Closes the menu. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the menu. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getItems |\n| --- |\n| Gets a list of `MatMenuItemHarness` representing the items in the menu. |\n| Parameters |\n| --- |\n| filters?<br> `Omit<MenuItemHarnessFilters, \"ancestor\">` | Optionally filters which menu items are included. |\n| Returns |\n| --- |\n| `Promise<MatMenuItemHarness[]>` |  |\n\n| async<br> <br>getRootHarnessLoader |\n| --- |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getTriggerText |\n| --- |\n| Gets the text of the menu's trigger element. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the menu is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the menu is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isOpen |\n| --- |\n| Whether the menu is open. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>open |\n| --- |\n| Opens the menu. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a menu with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `MenuHarnessFilters = {}` | Options for filtering which menu instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n#### [link](https://material.angular.io/components/menu/api\\#MatMenuItemHarness) `MatMenuItemHarness`extends [ContentContainerComponentHarness](https://material.angular.io/components/menu/cdk/testing/api\\#ContentContainerComponentHarness)\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `static hostSelector: '.mat-mdc-menu-item'` | The selector for the host element of a `MatMenuItem` instance. |\n\n##### Methods\n\n| async<br> <br>blur |\n| --- |\n| Blurs the menu item. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>click |\n| --- |\n| Clicks the menu item. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>focus |\n| --- |\n| Focuses the menu item. |\n| Returns |\n| --- |\n| `Promise<void>` | Promise that resolves when the action completes. |\n\n| async<br> <br>getAllChildLoaders |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader[]>` |  |\n\n| async<br> <br>getAllHarnesses |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T[]>` |  |\n\n| async<br> <br>getChildLoader |\n| --- |\n| Parameters |\n| --- |\n| selector<br> `S` |  |\n| Returns |\n| --- |\n| `Promise<HarnessLoader>` |  |\n\n| async<br> <br>getHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T>` |  |\n\n| async<br> <br>getHarnessOrNull |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<T | null>` |  |\n\n| async<br> <br>getSubmenu |\n| --- |\n| Gets the submenu associated with this menu item, or null if none. |\n| Returns |\n| --- |\n| `Promise<MatMenuHarness | null>` |  |\n\n| async<br> <br>getText |\n| --- |\n| Gets the text of the menu item. |\n| Returns |\n| --- |\n| `Promise<string>` |  |\n\n| async<br> <br>hasHarness |\n| --- |\n| Parameters |\n| --- |\n| query<br> `HarnessQuery<T>` |  |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>hasSubmenu |\n| --- |\n| Whether this item has a submenu. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>host |\n| --- |\n| Gets a `Promise` for the `TestElement` representing the host element of the component. |\n| Returns |\n| --- |\n| `Promise<TestElement>` |  |\n\n| async<br> <br>isDisabled |\n| --- |\n| Whether the menu is disabled. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| async<br> <br>isFocused |\n| --- |\n| Whether the menu item is focused. |\n| Returns |\n| --- |\n| `Promise<boolean>` |  |\n\n| static<br> <br>with |\n| --- |\n| Gets a `HarnessPredicate` that can be used to search for a menu item with specific attributes. |\n| Parameters |\n| --- |\n| options<br> `MenuItemHarnessFilters = {}` | Options for filtering which menu item instances are considered a match. |\n| Returns |\n| --- |\n| `HarnessPredicate<T>` | a `HarnessPredicate` configured with the given options. |\n\n### [link](https://material.angular.io/components/menu/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/components/menu/api\\#MenuHarnessFilters) `MenuHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatMenuHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `triggerText: string | RegExp` | Only find instances whose trigger text matches the given value. |\n\n#### [link](https://material.angular.io/components/menu/api\\#MenuItemHarnessFilters) `MenuItemHarnessFilters`\n\nA set of criteria that can be used to filter a list of `MatMenuItemHarness` instances.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `hasSubmenu: boolean` | Only find instances that have a sub-menu. |\n| `text: string | RegExp` | Only find instances whose text matches the given value. |\n\nMenu\n\nTesting\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nUse \\`panelClass\\` instead. Will be removed in v8.0.0 or later.\n\nSwitch to \\`closed\\` instead Will be removed in v8.0.0 or later.\n\nNo longer used and will be removed. Will be removed in v21.0.0 or later.\n\nSwitch to \\`menuClosed\\` instead Will be removed in v8.0.0 or later.\n\nSwitch to \\`menuOpened\\` instead Will be removed in v8.0.0 or later.\n\nNo longer being used. Will be removed. Will be removed in v15.0.0 or later.\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-91445683-8233-4253-88e4-4354e44d2441.png"
  },
  "metadata": {
    "ogUrl": "https://material.angular.io/",
    "mobile-web-app-capable": "yes",
    "og:url": "https://material.angular.io/",
    "favicon": "https://material.angular.io/components/menu/assets/img/favicon.ico?v=19.1.0",
    "og:site_name": "Angular Material",
    "og:image:type": "image/png",
    "og:locale": "en_US",
    "title": "Menu | Angular Material",
    "twitter:site": "@Angular",
    "ogLocale": "en_US",
    "og:image:width": "1339",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "author": "Angular Components Team",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-capable": "yes",
    "og:image:height": "943",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "theme-color": "#d7e3ff",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "og:title": "Angular Material",
    "language": "en-US",
    "twitter:creator": "@Angular",
    "og:type": "website",
    "ogSiteName": "Angular Material",
    "twitter:card": "summary",
    "twitter:title": "Angular Material",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "ogTitle": "Angular Material",
    "viewport": "width=device-width, initial-scale=1",
    "scrapeId": "e7a5b269-14b5-4d1e-ba68-8ab1cb1d72b0",
    "sourceURL": "https://material.angular.io/components/menu/api",
    "url": "https://material.angular.io/components/menu/api",
    "statusCode": 200
  }
}