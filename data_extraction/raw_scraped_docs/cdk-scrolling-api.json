{
  "scrapeId": "f89d5c90-ebff-4ac4-9aac-1216c6be598e",
  "sourceURL": "https://material.angular.io/cdk/scrolling/api",
  "statusCode": 200,
  "data": {
    "markdown": "[Accessibility](https://material.angular.io/cdk/a11y) [Accordion](https://material.angular.io/cdk/accordion) [Bidirectionality](https://material.angular.io/cdk/bidi) [Clipboard](https://material.angular.io/cdk/clipboard) [Coercion](https://material.angular.io/cdk/coercion) [Collections](https://material.angular.io/cdk/collections) [Component Harnesses](https://material.angular.io/cdk/testing) [Dialog](https://material.angular.io/cdk/dialog) [Drag and Drop](https://material.angular.io/cdk/drag-drop) [Layout](https://material.angular.io/cdk/layout) [Listbox](https://material.angular.io/cdk/listbox) [Menu](https://material.angular.io/cdk/menu) [Observers](https://material.angular.io/cdk/observers) [Overlay](https://material.angular.io/cdk/overlay) [Platform](https://material.angular.io/cdk/platform) [Portal](https://material.angular.io/cdk/portal) [Scrolling](https://material.angular.io/cdk/scrolling) [Stepper](https://material.angular.io/cdk/stepper) [Table](https://material.angular.io/cdk/table) [Text field](https://material.angular.io/cdk/text-field) [Tree](https://material.angular.io/cdk/tree)\n\nAPI for scrolling\n\n## API reference for Angular CDK scrolling\n\n`\n          import {ScrollingModule} from '@angular/cdk/scrolling';\n        `\n\ncontent\\_copy\n\n### [link](https://material.angular.io/cdk/scrolling/api\\#services)  Services\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#ScrollDispatcher) `ScrollDispatcher`\n\nService contained all registered Scrollable references and emits an event when any one of the\nScrollable references emit a scrolled event.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `scrollContainers: Map<CdkScrollable, Subscription>` | Map of all the scrollable references that are registered with the service and their<br>scroll event subscriptions. |\n\n##### Methods\n\n| ancestorScrolled |\n| --- |\n| Returns an observable that emits whenever any of the<br>scrollable ancestors of an element are scrolled. |\n| Parameters |\n| --- |\n| elementOrElementRef<br> `HTMLElement | ElementRef<any>` | Element whose ancestors to listen for. |\n| auditTimeInMs?<br> `number` | Time to throttle the scroll events. |\n| Returns |\n| --- |\n| `Observable<CdkScrollable | void>` |  |\n\n| deregister |\n| --- |\n| De-registers a Scrollable reference and unsubscribes from its scroll event observable. |\n| Parameters |\n| --- |\n| scrollable<br> `CdkScrollable` | Scrollable instance to be deregistered. |\n\n| getAncestorScrollContainers |\n| --- |\n| Returns all registered Scrollables that contain the provided element. |\n| Parameters |\n| --- |\n| elementOrElementRef<br> `HTMLElement | ElementRef<any>` |  |\n| Returns |\n| --- |\n| `CdkScrollable[]` |  |\n\n| register |\n| --- |\n| Registers a scrollable instance with the service and listens for its scrolled events. When the<br>scrollable is scrolled, the service emits the event to its scrolled observable. |\n| Parameters |\n| --- |\n| scrollable<br> `CdkScrollable` | Scrollable instance to be registered. |\n\n| scrolled |\n| --- |\n| Returns an observable that emits an event whenever any of the registered Scrollable<br>references (or window, document, or body) fire a scrolled event. Can provide a time in ms<br>to override the default \"throttle\" time.<br>**Note:** in order to avoid hitting change detection for every scroll event,<br>all of the events emitted from this stream will be run outside the Angular zone.<br>If you need to update any data bindings as a result of a scroll event, you have<br>to run the callback using `NgZone.run`. |\n| Parameters |\n| --- |\n| auditTimeInMs<br> `number = DEFAULT_SCROLL_TIME` |  |\n| Returns |\n| --- |\n| `Observable<CdkScrollable | void>` |  |\n\n### [link](https://material.angular.io/cdk/scrolling/api\\#directives)  Directives\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#CdkScrollable) `CdkScrollable`\n\nSends an event when the directive's element is scrolled. Registers itself with the\nScrollDispatcher service to include itself as part of its collection of scrolling events that it\ncan be listened to through the service.\n\nSelector:\\[cdk-scrollable\\]\\[cdkScrollable\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `dir: inject(Directionality, { optional: true })` |  |\n| `elementRef: inject<ElementRef<HTMLElement>>(ElementRef)` |  |\n| `ngZone: inject(NgZone)` |  |\n| `scrollDispatcher: inject(ScrollDispatcher)` |  |\n\n##### Methods\n\n| elementScrolled |\n| --- |\n| Returns observable that emits when a scroll event is fired on the host element. |\n| Returns |\n| --- |\n| `Observable<Event>` |  |\n\n| getElementRef |\n| --- |\n| Gets the ElementRef for the viewport. |\n| Returns |\n| --- |\n| `ElementRef<HTMLElement>` |  |\n\n| measureScrollOffset |\n| --- |\n| Measures the scroll offset relative to the specified edge of the viewport. This method can be<br>used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent<br>about what scrollLeft means in RTL. The values returned by this method are normalized such that<br>left and right always refer to the left and right side of the scrolling container irrespective<br>of the layout direction. start and end refer to left and right in an LTR context and vice-versa<br>in an RTL context. |\n| Parameters |\n| --- |\n| from<br> `\"left\" | \"right\" | \"start\" | \"end\" | \"top\" | \"bottom\"` | The edge to measure from. |\n| Returns |\n| --- |\n| `number` |  |\n\n| scrollTo |\n| --- |\n| Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo<br>method, since browsers are not consistent about what scrollLeft means in RTL. For this method<br>left and right always refer to the left and right side of the scrolling container irrespective<br>of the layout direction. start and end refer to left and right in an LTR context and vice-versa<br>in an RTL context. |\n| Parameters |\n| --- |\n| options<br> `ExtendedScrollToOptions` | specified the offsets to scroll to. |\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#CdkFixedSizeVirtualScroll) `CdkFixedSizeVirtualScroll`\n\nA virtual scroll strategy that supports fixed-size items.\n\nSelector:cdk-virtual-scroll-viewport\\[itemSize\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`itemSize: number` | The size of the items in the list (in pixels). |\n| @Input()<br>`maxBufferPx: number` | The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px. |\n| @Input()<br>`minBufferPx: number` | The minimum amount of buffer rendered beyond the viewport (in pixels).<br>If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px. |\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#CdkVirtualForOf) `CdkVirtualForOf`\n\nA directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\ncontainer.\n\nSelector:\\[cdkVirtualFor\\]\\[cdkVirtualForOf\\]\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input()<br>`cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined` | The DataSource to display. |\n| @Input()<br>`cdkVirtualForTemplate: TemplateRef<CdkVirtualForOfContext<T>>` | The template used to stamp out new elements. |\n| @Input()<br>`cdkVirtualForTemplateCacheSize: number` | The size of the cache used to store templates that are not being used for re-use later.<br>Setting the cache size to `0` will disable caching. Defaults to 20 templates. |\n| @Input()<br>`cdkVirtualForTrackBy: TrackByFunction<T> | undefined` | The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and<br>the item and produces a value to be used as the item's identity when tracking changes. |\n| `dataStream: Observable<readonly T[]>` | Emits whenever the data in the current DataSource changes. |\n| `viewChange: Subject<ListRange>` | Emits when the rendered view of the data changes. |\n\n##### Methods\n\n| measureRangeSize |\n| --- |\n| Measures the combined size (width for horizontal orientation, height for vertical) of all items<br>in the specified range. Throws an error if the range includes items that are not currently<br>rendered. |\n| Parameters |\n| --- |\n| range<br> `ListRange` |  |\n| orientation<br> `\"horizontal\" | \"vertical\"` |  |\n| Returns |\n| --- |\n| `number` |  |\n\n| static<br> <br>ngTemplateContextGuard |\n| --- |\n| Parameters |\n| --- |\n| directive<br> `CdkVirtualForOf<T>` |  |\n| context<br> `unknown` |  |\n| Returns |\n| --- |\n| `context is CdkVirtualForOfContext<T>` |  |\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#CdkVirtualScrollViewport) `CdkVirtualScrollViewport`extends [CdkVirtualScrollable](https://material.angular.io/cdk/scrolling/cdk/scrolling/api\\#CdkVirtualScrollable)\n\nA viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.\n\nSelector:cdk-virtual-scroll-viewport\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| @Input({ transform: booleanAttribute })<br> <br>`appendOnly: boolean` | Whether rendered items should persist in the DOM after scrolling out of view. By default, items<br>will be removed. |\n| @Input()<br>`orientation: \"horizontal\" | \"vertical\"` | The direction the viewport scrolls. |\n| @Output()<br>`scrolledIndexChange: Observable<number>` | Emits when the index of the first element visible in the viewport changes. |\n| `elementRef: inject<ElementRef<HTMLElement>>(ElementRef)` |  |\n| `renderedRangeStream: Observable<ListRange>` | A stream that emits whenever the rendered range changes. |\n| `scrollable: inject<CdkVirtualScrollable>(VIRTUAL_SCROLLABLE, { optional: true })!` |  |\n\n##### Methods\n\n| attach |\n| --- |\n| Attaches a `CdkVirtualScrollRepeater` to this viewport. |\n| Parameters |\n| --- |\n| forOf<br> `CdkVirtualScrollRepeater<any>` |  |\n\n| checkViewportSize |\n| --- |\n| Update the viewport dimensions and re-render. |\n\n| detach |\n| --- |\n| Detaches the current `CdkVirtualForOf`. |\n\n| elementScrolled |\n| --- |\n| Returns observable that emits when a scroll event is fired on the host element. |\n| Returns |\n| --- |\n| `Observable<Event>` |  |\n\n| getDataLength |\n| --- |\n| Gets the length of the data bound to this viewport (in number of items). |\n| Returns |\n| --- |\n| `number` |  |\n\n| getElementRef |\n| --- |\n| Gets the ElementRef for the viewport. |\n| Returns |\n| --- |\n| `ElementRef<HTMLElement>` |  |\n\n| getOffsetToRenderedContentStart |\n| --- |\n| Gets the offset from the start of the viewport to the start of the rendered data (in pixels). |\n| Returns |\n| --- |\n| `number | null` |  |\n\n| getRenderedRange |\n| --- |\n| Get the current rendered range of items. |\n| Returns |\n| --- |\n| `ListRange` |  |\n\n| getViewportSize |\n| --- |\n| Gets the size of the viewport (in pixels). |\n| Returns |\n| --- |\n| `number` |  |\n\n| measureBoundingClientRectWithScrollOffset |\n| --- |\n| Parameters |\n| --- |\n| from<br> `\"left\" | \"right\" | \"top\" | \"bottom\"` |  |\n| Returns |\n| --- |\n| `number` |  |\n\n| measureRangeSize |\n| --- |\n| Measure the total combined size of the given range. Throws if the range includes items that are<br>not rendered. |\n| Parameters |\n| --- |\n| range<br> `ListRange` |  |\n| Returns |\n| --- |\n| `number` |  |\n\n| measureRenderedContentSize |\n| --- |\n| Measure the combined size of all of the rendered items. |\n| Returns |\n| --- |\n| `number` |  |\n\n| measureScrollOffset |\n| --- |\n| Gets the current scroll offset from the start of the scrollable (in pixels). |\n| Parameters |\n| --- |\n| from?<br> `\"left\" | \"right\" | \"start\" | \"end\" | \"top\" | \"bottom\"` | The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'<br>in horizontal mode. |\n| Returns |\n| --- |\n| `number` |  |\n\n| measureViewportOffset |\n| --- |\n| Measures the offset of the viewport from the scrolling container |\n| Parameters |\n| --- |\n| from?<br> `\"left\" | \"right\" | \"start\" | \"end\" | \"top\" | \"bottom\"` | The edge to measure from. |\n\n| measureViewportSize |\n| --- |\n| Measure the viewport size for the provided orientation. |\n| Parameters |\n| --- |\n| orientation<br> `\"horizontal\" | \"vertical\"` | The orientation to measure the size from. |\n\n| scrollTo |\n| --- |\n| Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo<br>method, since browsers are not consistent about what scrollLeft means in RTL. For this method<br>left and right always refer to the left and right side of the scrolling container irrespective<br>of the layout direction. start and end refer to left and right in an LTR context and vice-versa<br>in an RTL context. |\n| Parameters |\n| --- |\n| options<br> `ExtendedScrollToOptions` | specified the offsets to scroll to. |\n\n| scrollToIndex |\n| --- |\n| Scrolls to the offset for the given index. |\n| Parameters |\n| --- |\n| index<br> `number` | The index of the element to scroll to. |\n| behavior<br> `ScrollBehavior = 'auto'` | The ScrollBehavior to use when scrolling. Default is behavior is `auto`. |\n\n| scrollToOffset |\n| --- |\n| Scrolls to the given offset from the start of the viewport. Please note that this is not always<br>the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left<br>direction, this would be the equivalent of setting a fictional `scrollRight` property. |\n| Parameters |\n| --- |\n| offset<br> `number` | The offset to scroll to. |\n| behavior<br> `ScrollBehavior = 'auto'` | The ScrollBehavior to use when scrolling. Default is behavior is `auto`. |\n\n| setRenderedContentOffset |\n| --- |\n| Sets the offset from the start of the viewport to either the start or end of the rendered data<br>(in pixels). |\n| Parameters |\n| --- |\n| offset<br> `number` |  |\n| to<br> `\"to-start\" | \"to-end\" = 'to-start'` |  |\n\n| setRenderedRange |\n| --- |\n| Sets the currently rendered range of indices. |\n| Parameters |\n| --- |\n| range<br> `ListRange` |  |\n\n| setTotalContentSize |\n| --- |\n| Sets the total size of all content (in pixels), including content that is not currently<br>rendered. |\n| Parameters |\n| --- |\n| size<br> `number` |  |\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#CdkVirtualScrollableElement) `CdkVirtualScrollableElement`extends [CdkVirtualScrollable](https://material.angular.io/cdk/scrolling/cdk/scrolling/api\\#CdkVirtualScrollable)\n\nProvides a virtual scrollable for the element it is attached to.\n\nSelector:\\[cdkVirtualScrollingElement\\]\n\n##### Methods\n\n| elementScrolled |\n| --- |\n| Returns observable that emits when a scroll event is fired on the host element. |\n| Returns |\n| --- |\n| `Observable<Event>` |  |\n\n| getElementRef |\n| --- |\n| Gets the ElementRef for the viewport. |\n| Returns |\n| --- |\n| `ElementRef<HTMLElement>` |  |\n\n| measureBoundingClientRectWithScrollOffset |\n| --- |\n| Parameters |\n| --- |\n| from<br> `\"left\" | \"right\" | \"top\" | \"bottom\"` |  |\n| Returns |\n| --- |\n| `number` |  |\n\n| measureScrollOffset |\n| --- |\n| Measures the scroll offset relative to the specified edge of the viewport. This method can be<br>used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent<br>about what scrollLeft means in RTL. The values returned by this method are normalized such that<br>left and right always refer to the left and right side of the scrolling container irrespective<br>of the layout direction. start and end refer to left and right in an LTR context and vice-versa<br>in an RTL context. |\n| Parameters |\n| --- |\n| from<br> `\"left\" | \"right\" | \"start\" | \"end\" | \"top\" | \"bottom\"` | The edge to measure from. |\n| Returns |\n| --- |\n| `number` |  |\n\n| measureViewportSize |\n| --- |\n| Measure the viewport size for the provided orientation. |\n| Parameters |\n| --- |\n| orientation<br> `\"horizontal\" | \"vertical\"` | The orientation to measure the size from. |\n\n| scrollTo |\n| --- |\n| Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo<br>method, since browsers are not consistent about what scrollLeft means in RTL. For this method<br>left and right always refer to the left and right side of the scrolling container irrespective<br>of the layout direction. start and end refer to left and right in an LTR context and vice-versa<br>in an RTL context. |\n| Parameters |\n| --- |\n| options<br> `ExtendedScrollToOptions` | specified the offsets to scroll to. |\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#CdkVirtualScrollableWindow) `CdkVirtualScrollableWindow`extends [CdkVirtualScrollable](https://material.angular.io/cdk/scrolling/cdk/scrolling/api\\#CdkVirtualScrollable)\n\nProvides as virtual scrollable for the global / window scrollbar.\n\nSelector:cdk-virtual-scroll-viewport\\[scrollWindow\\]\n\n##### Methods\n\n| elementScrolled |\n| --- |\n| Returns observable that emits when a scroll event is fired on the host element. |\n| Returns |\n| --- |\n| `Observable<Event>` |  |\n\n| getElementRef |\n| --- |\n| Gets the ElementRef for the viewport. |\n| Returns |\n| --- |\n| `ElementRef<HTMLElement>` |  |\n\n| measureBoundingClientRectWithScrollOffset |\n| --- |\n| Parameters |\n| --- |\n| from<br> `\"left\" | \"right\" | \"top\" | \"bottom\"` |  |\n| Returns |\n| --- |\n| `number` |  |\n\n| measureScrollOffset |\n| --- |\n| Measures the scroll offset relative to the specified edge of the viewport. This method can be<br>used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent<br>about what scrollLeft means in RTL. The values returned by this method are normalized such that<br>left and right always refer to the left and right side of the scrolling container irrespective<br>of the layout direction. start and end refer to left and right in an LTR context and vice-versa<br>in an RTL context. |\n| Parameters |\n| --- |\n| from<br> `\"left\" | \"right\" | \"start\" | \"end\" | \"top\" | \"bottom\"` | The edge to measure from. |\n| Returns |\n| --- |\n| `number` |  |\n\n| measureViewportSize |\n| --- |\n| Measure the viewport size for the provided orientation. |\n| Parameters |\n| --- |\n| orientation<br> `\"horizontal\" | \"vertical\"` | The orientation to measure the size from. |\n\n| scrollTo |\n| --- |\n| Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo<br>method, since browsers are not consistent about what scrollLeft means in RTL. For this method<br>left and right always refer to the left and right side of the scrolling container irrespective<br>of the layout direction. start and end refer to left and right in an LTR context and vice-versa<br>in an RTL context. |\n| Parameters |\n| --- |\n| options<br> `ExtendedScrollToOptions` | specified the offsets to scroll to. |\n\n### [link](https://material.angular.io/cdk/scrolling/api\\#classes)  Classes\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#FixedSizeVirtualScrollStrategy) `FixedSizeVirtualScrollStrategy`\n\nVirtual scrolling strategy for lists with items of known fixed size.\n\n##### Methods\n\n| attach |\n| --- |\n| Attaches this scroll strategy to a viewport. |\n| Parameters |\n| --- |\n| viewport<br> `CdkVirtualScrollViewport` | The viewport to attach this strategy to. |\n\n| detach |\n| --- |\n| Detaches this scroll strategy from the currently attached viewport. |\n\n| scrollToIndex |\n| --- |\n| Scroll to the offset for the given index. |\n| Parameters |\n| --- |\n| index<br> `number` | The index of the element to scroll to. |\n| behavior<br> `ScrollBehavior` | The ScrollBehavior to use when scrolling. |\n\n| updateItemAndBufferSize |\n| --- |\n| Update the item size and buffer size. |\n| Parameters |\n| --- |\n| itemSize<br> `number` | The size of the items in the virtually scrolling list. |\n| minBufferPx<br> `number` | The minimum amount of buffer (in pixels) before needing to render more |\n| maxBufferPx<br> `number` | The amount of buffer (in pixels) to render when rendering more. |\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#CdkVirtualScrollable) `CdkVirtualScrollable`extends [CdkScrollable](https://material.angular.io/cdk/scrolling/api)\n\nExtending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n\n##### Methods\n\n| elementScrolled |\n| --- |\n| Returns observable that emits when a scroll event is fired on the host element. |\n| Returns |\n| --- |\n| `Observable<Event>` |  |\n\n| getElementRef |\n| --- |\n| Gets the ElementRef for the viewport. |\n| Returns |\n| --- |\n| `ElementRef<HTMLElement>` |  |\n\n| measureBoundingClientRectWithScrollOffset |\n| --- |\n| Measure the bounding DOMRect size including the scroll offset. |\n| Parameters |\n| --- |\n| from<br> `\"left\" | \"right\" | \"top\" | \"bottom\"` | The edge to measure from. |\n| Returns |\n| --- |\n| `number` |  |\n\n| measureScrollOffset |\n| --- |\n| Measures the scroll offset relative to the specified edge of the viewport. This method can be<br>used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent<br>about what scrollLeft means in RTL. The values returned by this method are normalized such that<br>left and right always refer to the left and right side of the scrolling container irrespective<br>of the layout direction. start and end refer to left and right in an LTR context and vice-versa<br>in an RTL context. |\n| Parameters |\n| --- |\n| from<br> `\"left\" | \"right\" | \"start\" | \"end\" | \"top\" | \"bottom\"` | The edge to measure from. |\n| Returns |\n| --- |\n| `number` |  |\n\n| measureViewportSize |\n| --- |\n| Measure the viewport size for the provided orientation. |\n| Parameters |\n| --- |\n| orientation<br> `\"horizontal\" | \"vertical\"` | The orientation to measure the size from. |\n\n| scrollTo |\n| --- |\n| Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo<br>method, since browsers are not consistent about what scrollLeft means in RTL. For this method<br>left and right always refer to the left and right side of the scrolling container irrespective<br>of the layout direction. start and end refer to left and right in an LTR context and vice-versa<br>in an RTL context. |\n| Parameters |\n| --- |\n| options<br> `ExtendedScrollToOptions` | specified the offsets to scroll to. |\n\n### [link](https://material.angular.io/cdk/scrolling/api\\#interfaces)  Interfaces\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#ViewportScrollPosition) `ViewportScrollPosition`\n\nObject that holds the scroll position of the viewport in each direction.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `left: number` |  |\n| `top: number` |  |\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#VirtualScrollStrategy) `VirtualScrollStrategy`\n\nA strategy that dictates which items should be rendered in the viewport.\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `scrolledIndexChange: Observable<number>` | Emits when the index of the first element visible in the viewport changes. |\n\n##### Methods\n\n| attach |\n| --- |\n| Attaches this scroll strategy to a viewport. |\n| Parameters |\n| --- |\n| viewport<br> `CdkVirtualScrollViewport` | The viewport to attach this strategy to. |\n\n| detach |\n| --- |\n| Detaches this scroll strategy from the currently attached viewport. |\n\n| onContentRendered |\n| --- |\n| Called when the range of items rendered in the DOM has changed. |\n\n| onContentScrolled |\n| --- |\n| Called when the viewport is scrolled (debounced using requestAnimationFrame). |\n\n| onDataLengthChanged |\n| --- |\n| Called when the length of the data changes. |\n\n| onRenderedOffsetChanged |\n| --- |\n| Called when the offset of the rendered items changed. |\n\n| scrollToIndex |\n| --- |\n| Scroll to the offset for the given index. |\n| Parameters |\n| --- |\n| index<br> `number` | The index of the element to scroll to. |\n| behavior<br> `ScrollBehavior` | The ScrollBehavior to use when scrolling. |\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#CdkVirtualScrollRepeater) `CdkVirtualScrollRepeater`\n\nAn item to be repeated by the VirtualScrollViewport\n\n##### Properties\n\n| Name | Description |\n| --- | --- |\n| `dataStream: Observable<readonly T[]>` |  |\n\n##### Methods\n\n| measureRangeSize |\n| --- |\n| Parameters |\n| --- |\n| range<br> `ListRange` |  |\n| orientation<br> `\"horizontal\" | \"vertical\"` |  |\n| Returns |\n| --- |\n| `number` |  |\n\n### [link](https://material.angular.io/cdk/scrolling/api\\#type_aliases)  Type aliases\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#ExtendedScrollToOptions) `ExtendedScrollToOptions`\n\nAn extended version of ScrollToOptions that allows expressing scroll offsets relative to the\ntop, bottom, left, right, start, or end of the viewport rather than just the top and left.\nPlease note: the top and bottom properties are mutually exclusive, as are the left, right,\nstart, and end properties.\n\n```docs-markdown-code\ntype ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n```\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#CdkVirtualForOfContext) `CdkVirtualForOfContext`\n\nThe context for an item rendered by `CdkVirtualForOf`\n\n```docs-markdown-code\ntype CdkVirtualForOfContext = {\n    $implicit: T;\n    cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n    index: number;\n    count: number;\n    first: boolean;\n    last: boolean;\n    even: boolean;\n    odd: boolean;\n};\n\n```\n\n### [link](https://material.angular.io/cdk/scrolling/api\\#constants)  Constants\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#DEFAULT_SCROLL_TIME) `DEFAULT_SCROLL_TIME`\n\nTime in ms to throttle the scrolling events by default.\n\n```docs-markdown-code\nconst DEFAULT_SCROLL_TIME: 20;\n\n```\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#DEFAULT_RESIZE_TIME) `DEFAULT_RESIZE_TIME`\n\nTime in ms to throttle the resize events by default.\n\n```docs-markdown-code\nconst DEFAULT_RESIZE_TIME: 20;\n\n```\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#VIRTUAL_SCROLL_STRATEGY) `VIRTUAL_SCROLL_STRATEGY`\n\nThe injection token used to specify the virtual scrolling strategy.\n\n```docs-markdown-code\nconst VIRTUAL_SCROLL_STRATEGY: InjectionToken<VirtualScrollStrategy>;\n\n```\n\n#### [link](https://material.angular.io/cdk/scrolling/api\\#VIRTUAL_SCROLLABLE) `VIRTUAL_SCROLLABLE`\n\n```docs-markdown-code\nconst VIRTUAL_SCROLLABLE: InjectionToken<CdkVirtualScrollable>;\n\n```\n\nScrolling\n\nAzure & Blue theme selected.\n\nSelect a version of the documentation\n\nSelect a theme for the documentation\n\nCopy import to the clipboard",
    "screenshot": "https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-4a5392d5-9c88-4b9e-8203-938be6d19703.png"
  },
  "metadata": {
    "keywords": "angular, material design, material, angular material, web, ui, components, responsive, accessibility, typescript, css, mobile web, open source",
    "og:image:secure_url": "https://material.angular.io/assets/img/site-preview.png",
    "apple-mobile-web-app-status-bar-style": "translucent",
    "twitter:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "ogDescription": "UI component infrastructure and Material Design components for Angular web applications.",
    "og:image:width": "1339",
    "og:image:height": "943",
    "twitter:image": "https://material.angular.io/assets/img/site-preview.png",
    "theme-color": "#d7e3ff",
    "language": "en-US",
    "ogImage": "https://material.angular.io/assets/img/site-preview.png",
    "ogUrl": "https://material.angular.io/",
    "og:description": "UI component infrastructure and Material Design components for Angular web applications.",
    "twitter:creator": "@Angular",
    "ogTitle": "Angular Material",
    "title": "Scrolling | Angular Material",
    "apple-mobile-web-app-capable": "yes",
    "mobile-web-app-capable": "yes",
    "ogLocale": "en_US",
    "og:site_name": "Angular Material",
    "og:locale": "en_US",
    "og:type": "website",
    "og:image": "https://material.angular.io/assets/img/site-preview.png",
    "description": "UI component infrastructure and Material Design components for mobile and desktop Angular web applications.",
    "og:url": "https://material.angular.io/",
    "viewport": "width=device-width, initial-scale=1",
    "twitter:site": "@Angular",
    "favicon": "https://material.angular.io/cdk/scrolling/assets/img/favicon.ico?v=19.1.0",
    "twitter:title": "Angular Material",
    "twitter:card": "summary",
    "author": "Angular Components Team",
    "og:image:type": "image/png",
    "og:title": "Angular Material",
    "ogSiteName": "Angular Material",
    "scrapeId": "f89d5c90-ebff-4ac4-9aac-1216c6be598e",
    "sourceURL": "https://material.angular.io/cdk/scrolling/api",
    "url": "https://material.angular.io/cdk/scrolling/api",
    "statusCode": 200
  }
}